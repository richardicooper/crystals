CODE FOR XPRAXI
      SUBROUTINE XPRAXI( ILIST1, ILIST5, IBASE, ISTART,
     1 ISTEP, NATOM, LIST, LIST20)
C--CALCULATE AND PRINT THE PRINCIPAL AXES OF THERMAL ELLIPSOIDS
C
C--
C      ILIST1 .LE. 0 TO LOAD LIST 1
C      ILIST5 .LE. 0 TO LOAD LIST 5
C      IBASE  ADDRESS IN STORE TO SAVE PRINCIPAL AXES AND UEQUIV,
C             IF ZERO,  NOT SAVED.
C      ISTART START OF ATOM STACK (ONLY IF LIST 5 LOADED)
C      ISTEP  PARAMETERS PER ATOM
C      NATOM  NUMBER OF ATOMS
C      LIST   .LT. 0  NO LISTINGS
C      LIST   .EQ. 0  WARNING ONLY
C      LIST   .EQ. 1  BRIEF LISTINGS
C      LIST   .EQ. 2  FULL LISTINGS
C      LIST20 ADDRESS FOR MATRICES FOR LIST 20
C              IF ZERO, NOT SAVED
C
C -- IF 'LIST' IS SET GREATER THAN ZERO, THE RESULTS ARE PRINTED. IF
C    NOT, NO RESULTS ARE PRINTED.
C
      DOUBLE PRECISION TENS(3,3),ROOTS(3),VECT(3,3),WORK(4)
C
      CHARACTER *24 CTEXT
C
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XLST01
\XLST05
\XCHARS
\XCONST
\XOPVAL
\XIOBUF
C
\QSTORE
C
C
C
C--SET UP THE TIMING
C----- SET SWITCH FOR NON-POSITIVE DEFINATE ATOM CAPTION
      NNPD=0
      IF (ILIST5 .LE. 0) THEN
C----- LOAD LIST 1 & 5
C------ SET LIST TYPE TO LIST 5
      IULN=5
C--READ ANY OUTSTANDING DIRECTIVES
      IF(KRDDPV(ISTORE(NFL),1))1900,1000,1000
C--PRINT THE INITIAL CAPTIONS
1000  CONTINUE
      IULN=KTYP05(ISTORE(NFL))
      CALL XLDRO5(IULN)
C---- SET LIST 5 AUXILLIARY ADDRESSES
      ISTART=L5
      NATOM=N5
      ISTEP=MD5
      M5A=ISTART
      ENDIF
      IF (ILIST1 .LE. 0) THEN
      CALL XFAL01
      IF ( IERFLG .LT. 0 ) GO TO 9900
      ENDIF
      IF(LIST .GT. 0) THEN
      CALL XPRTCN
      IF (ISSPRT .EQ. 0) THEN
      IF ( LIST .GT. 0 ) WRITE ( NCWU , 1050 )
      ENDIF
1050  FORMAT(' Principal axes and ''direction''',
     2 ' cosines of the thermal ellipsoids',///,1X,'Type',1X,'Serial',
     3 5X,'m.s.d.',9X,'a*',8X,'b''',9X,'c',10X,'a',9X,'b',9X,'c')
      WRITE(NCAWU,1070)
      IF ( LIST .GT. 0 ) THEN
         WRITE ( CMON, 1070 )
         CALL XPRVDU(NCVDU, 1,0)
      ENDIF
1070  FORMAT(' Principal axes of the thermal ellipsoids, A**2')
      ENDIF
C--SET UP VARIOUS STORAGE LOCATIONS
      NA=NFL
      NB=NA+9
      NC=NB+9
      ND=NC+9
      NE=ND+9
      NF=NE+3
      NG=NF+21
      NH=NG+9
      NFL=NH+9
      IF (NFL .GE. LFL) GOTO 9920
      L=NA
      NL=NH
      M=L1O1
C--REFORM THE REAL SPACE ORTHOGONALIZATION MATRIX
      DO 1150 I=1,3
      K=L1P2
      NK=L1P1
      DO 1100 J=1,3
      STORE(L)=STORE(M)*STORE(K)
      STORE(NL)=STORE(M)/STORE(NK)
      NK=NK+1
      NL=NL+1
      K=K+1
      L=L+1
      M=M+1
1100  CONTINUE
1150  CONTINUE
C--START TO PASS THROUGH THE ATOMS
       JBASE = IBASE
      M5B = ISTART
      DO 1850 N = 1, NATOM
C-C-C-CHECK WHETHER ANISOTROPIC OR ISOTROPIC/SPHERE/LINE/RING
      IF(ABS(STORE(M5B+3))-UISO)1200,1700,1700
C--PULL OUT THE REQUIRED ELEMENTS
C-C-C-ANISOTROPIC
1200  CONTINUE
      STORE(NB  )=STORE(M5B+7)
      STORE(NB+1)=STORE(M5B+12)
      STORE(NB+2)=STORE(M5B+11)
      STORE(NB+3)=STORE(M5B+12)
      STORE(NB+4)=STORE(M5B+8)
      STORE(NB+5)=STORE(M5B+10)
      STORE(NB+6)=STORE(M5B+11)
      STORE(NB+7)=STORE(M5B+10)
      STORE(NB+8)=STORE(M5B+9)
C--ORHTOGONALIZE THE THERMAL TENSOR
      CALL XMLTTM(STORE(NB),STORE(NA),STORE(NC),3,3,3)
      CALL XMLTTM(STORE(NA),STORE(NC),STORE(ND),3,3,3)
C--DIAGONALIZE THE TENSOR
      ITEMP1=ND
      DO 1210 ITEMP2=1,3
      DO 1210 ITEMP3=1,3
      TENS(ITEMP3,ITEMP2)=DBLE(STORE(ITEMP1))
      ITEMP1=ITEMP1+1
1210  CONTINUE
      I=0
      CALL F02ABF(TENS,3,3,ROOTS,VECT,3,WORK,I)
      ITEMP1=NE
      ITEMP2=NG
      DO 1220 ITEMP3=1,3
      STORE(ITEMP1)=SNGL(ROOTS(ITEMP3))
      ITEMP1=ITEMP1+1
      DO 1220 ITEMP4=1,3
      STORE(ITEMP2)=SNGL(VECT(ITEMP4,ITEMP3))
      ITEMP2=ITEMP2+1
1220  CONTINUE
      J=NE+2
      IF (IBASE .GT. 0) CALL XMOVE( STORE(NE), STORE(JBASE+1), 3)
      M = NE
      K = NF
      L=NG
      DO 1350 I=1,3
      STORE(K)=STORE(M)
      K=K+1
      M=M+1
C--MOVE THE COSINES WITH RESPECT TO ORTHOGONAL AXES
      DO 1300 J=1,3
      STORE(K)=STORE(L)
      K=K+1
      L=L+1
1300  CONTINUE
C--CALCULATE THE COSINES WITH RESPECT TO THE CRYSTALLOGRAPHIC AXES
      CALL XMLTMM(STORE(NH),STORE(K-3),STORE(K),3,3,1)
      K=K+3
1350  CONTINUE
C----- DATA FOR LIST 20
      IF (LIST20 .GT. 0) THEN
C----- CRYSTAL TO AXIAL
          CALL XMLTTM (STORE(NG), STORE(L1O1),
     1      STORE(LIST20+9),3, 3, 3)
C----- INTERCHANGE EIGEN VECTORS
      CALL XMTREX (STORE(LIST20+9), STORE(LIST20), 3, 3)
            I = KINV2 (3, STORE(LIST20), STORE(LIST20+9),9,0,
     1       STORE(LIST20+18), STORE(LIST20+18), 3)
            CALL  XMOVE ( STORE(M5B+4), STORE(LIST20+18), 3)
      ENDIF
        IF (ISSUEQ .EQ. 1) THEN
          UEQUIV = 0.333333 * (STORE(NE)+STORE(NE+1)+STORE(NE+2))
        ELSE
          UEQUIV=(STORE(NE)*STORE(NE+1)*STORE(NE+2))
          UEQUIV = SIGN(1.,UEQUIV)* (MAX(ZERO,ABS(UEQUIV)))**(1./3.)
        ENDIF
        IF (IBASE .GT. 0) STORE(JBASE) = UEQUIV
C----- CHECK FOR SPLITTING
        IF (STORE(NE+2)-STORE(NE) .GE. 0.25 ) THEN
            CTEXT = ' Might be split'
        ELSE
            CTEXT = ' '
        ENDIF
C----- CHECK NEGATIVE ELLIPSOID
      IF( STORE(NE) .LT. 0.0 ) THEN
C--     SOME OF THE AXES ARE NOT POSITIVE
1450    CONTINUE
         CTEXT = ' Physically unreasonable'
      ENDIF
C
C-----   PRINT A CAPTION THE FIRST TIME
      IF(( LIST .EQ. 0) .AND. (CTEXT .NE. ' ' )) THEN
        IF(NNPD .LE. 0) THEN
          NNPD=1
          IF (ISSPRT .EQ. 0) WRITE ( NCWU, 1475 )
          WRITE ( NCAWU, 1475 )
          WRITE ( CMON, 1475 )
          CALL XPRVDU(NCVDU, 1,0)
1475  FORMAT(' The following atoms should be carefully examined ')
        ENDIF
      ENDIF
        J=NE+2
        K = NF + 20
        IF (LIST .GT. 0) THEN
          WRITE ( CMON, 1230) STORE(M5B), STORE(M5B+1),
     2    (STORE(III),III=NE,J), CTEXT
          CALL XPRVDU(NCVDU, 1,0)
          WRITE ( NCAWU, 1230) STORE(M5B), STORE(M5B+1),
     2    (STORE(III),III=NE,J), CTEXT
1230      FORMAT(1X,A4,F6.0,3F10.4,3X, A24)
          IF (ISSPRT .EQ. 0) WRITE(NCWU,1400) STORE(M5B) ,
     2    STORE(M5B+1),( STORE(I) , I=NF,K ), CTEXT
1400      FORMAT(/1X,A4,F7.0,2X,F9.5,2(1X,3F10.5),
     2                   2(/14X,F9.5,2(1X,3F10.5)),A24)
        ELSE IF ((LIST .EQ. 0) .AND. (CTEXT .NE. ' ')) THEN
          WRITE ( CMON, 1230) STORE(M5B), STORE(M5B+1),
     2    (STORE(III),III=NE,J), CTEXT
          CALL XPRVDU(NCVDU, 1,0)
          IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)
          WRITE(NCAWU,'(A)') CMON(1)
        ENDIF
      GOTO 1800
C-C-C-ISOTROPIC ATOMS/SPHERE/LINE/RING
1700  CONTINUE
      IF(IBASE .GT. 0) THEN
C----- SET TO U[ISO]
            STORE(JBASE)=STORE(M5B+7)
      ENDIF
      IF ( LIST .GT. 1 ) THEN
      IF (ISSPRT .EQ. 0) THEN
       IF (NINT(STORE(M5B+3)).EQ. 1) THEN
C-C-C-ISOTROPIC
       WRITE(NCWU,1750) STORE(M5B) , STORE(M5B+1), STORE(M5B+7)
       ELSE IF (NINT(STORE(M5B+3)).EQ. 2) THEN
C-C-C-SPHERE
       WRITE(NCWU,1751) STORE(M5B) , STORE(M5B+1), STORE(M5B+7)
       ELSE IF (NINT(STORE(M5B+3)).EQ. 3) THEN
C-C-C-LINE
       WRITE(NCWU,1752) STORE(M5B) , STORE(M5B+1), STORE(M5B+7)
       ELSE IF (NINT(STORE(M5B+3)).EQ. 4) THEN
C-C-C-RING
       WRITE(NCWU,1753) STORE(M5B) , STORE(M5B+1), STORE(M5B+7)
       ENDIF
      ENDIF
1750  FORMAT(1X,A4,F7.0,2X,F9.5,63X,'Isotropic')
1751  FORMAT(1X,A4,F7.0,2X,F9.5,63X,'Sphere   ')
1752  FORMAT(1X,A4,F7.0,2X,F9.5,63X,'Line     ')
1753  FORMAT(1X,A4,F7.0,2X,F9.5,63X,'Ring     ')
      ENDIF
C--MOVE TO THE NEXT ATOM
1800  CONTINUE
      IF (IBASE .GT. 0) JBASE = JBASE + 4
      M5B = M5B + ISTEP
1850  CONTINUE
C--FINAL CAPTION AND RETURN
1900  CONTINUE
C----- RETURN WORKSPACE
      NFL=NA
      IF (LIST .GT. 0) THEN
      CALL XOPMSG ( IOPPRA , IOPEND , 200 )
      ENDIF
      RETURN
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPPRA , IOPABN , 0 )
      GO TO 1900
9920  CONTINUE
C----- INSUFFICIENT STORE
      IERFLG = -1
      CALL XOPMSG (IOPPRA, IOPSPC, 0)
      GOTO 1900
      END
C
CODE FOR XEQUIV
       SUBROUTINE XEQUIV ( MODE, IATOM, NPAR, IBASE)
C----- COMPUTE THE U EQUIVALENT FOR THE ATOM AT STORE(IATOM)
C      WITH NPAR PARAMETERS PER ATOM
C      IBASE IS 4 WORD AREA CONTAUNING UEQUIV, UMIN, UMED, UMAX
C
C----- USE MODE = 1 IF CALLING ROUTINE HANDLES LFL AND LFL CORRECTLY,
C      OTHERWISE USE MODE = 0
C      E.G. XPRAXI INTERACTS WITH SYDROG, PROBABLY THROUGH COMMON
C      STORAGE OVERWRITES, SO THAT ONE OR MORE GENERATED ATOMS BECOME
C      CORRUPT.
\ISTORE
\STORE
\XUNITS
\XSSVAL
\XCONST
\QSTORE
C
C-C-C-CHECK WHETHER ATOM IS ANISOTROPIC OR ISOTROPIC/SPHERE/LINE/RING
      IF (ABS(STORE(IATOM+3)) .LE. UISO) THEN
C----- ATOM IS ANISOTROPIC SO COMPUTE UEQUIV
        IF (MODE .EQ. 1) THEN
C         WELL ORGANISED CALLING ROUTINE
          CALL XPRAXI( 1, 1, IBASE, IATOM, NPAR, 1, -1, 0)
        ELSE
C         AN APPROXIMATION FOR POOR CALLING ROUTINES
          UEQUIV =
     1    (STORE(IATOM+7)* STORE(IATOM+8)* STORE(IATOM+9))
          IF (UEQUIV .LE. ZERO) THEN
             STORE (IBASE) = 0.05
          ELSE
             STORE (IBASE) = UEQUIV**0.33333
          END IF
        END IF
      ELSE
C----- ATOM IS ISOTROPIC ANYWAY
C-C-C-ATOM IS ISOTROPIC ANYWAY (OR SPHERE/LINE/RING)
C        STORE (IBASE) = STORE(IATOM+3)
        STORE (IBASE) = STORE(IATOM+7)
        STORE (IBASE + 1) = 0.0
        STORE (IBASE + 2) = 0.0
        STORE (IBASE + 3) = 0.0
      ENDIF
      RETURN
      END
C
CODE FOR RSUB06
      SUBROUTINE RSUB06
C--CONTROL ROUTINE OF TLS CALCUATIONS
C
C
C
C--
      CHARACTER *4 CCALC(2)
\ICOM12
\ISTORE
C
      DIMENSION ITARG(1)
C
\STORE
\XUNITS
\XSSVAL
\XLISTI
\XCONST
\XLST01
\XLST02
\XLST05
\XLST12
\XLST20
\XLEXIC
\XCHARS
\XERVAL
\XOPVAL
\XRTLSC
\XIOBUF
C
\QLST12
\QSTORE
C
C
      DATA CCALC /' TLS', 'AXIS' /
#HOL      DATA ITARG(1) / 'ALL '/
&HOL      DATA ITARG(1) / 4HALL /
      DATA EIGMIN / 0.000001/, EIGRAT / 0.01 /
      DATA IVERSN /201/
C
C
C--SET UP THE TIMING CONTROL
      CALL XTIME1(2)
C--CLEAR THE CORE
      CALL XCSAE
C----- WORKSPACE FOR REPLACEMENT
      IWORK = KSTALL(3)
      JWORK = KSTALL(6)
      KWORK = KSTALL(21)
C----- SPACE FOR ATOM HEADERS
      MQ = KSTALL (100)
C----- COMMAND BUFFER
      IDIMBF = 50
CMAR98
      ICOMBF = KSTALL (IDIMBF)
      CALL XZEROF (STORE(ICOMBF), IDIMBF)
C----- ZERO THE BUFFER
      CALL XZEROF (ISTORE(ICOMBF), IDIMBF)
C----- COMMON BLOCK OFFSET(-1) FOR INPUT LIST
      IMDINP = 35
C----- INITIALSE LEXICAL PROCESSING
      ICHNG = 1
      CALL XLXINI (INEXTD, ICHNG)
\IDIM12
C--INDICATE THAT LIST 12 IS NOT TO BE USED
      DO 1050 I=1,IDIM12
      ICOM12(I)=NOWT
1050  CONTINUE
C
C--MAIN INSTRUCTION CYCLING LOOP
1100  CONTINUE
C----- DO NOT REPLACE ATOMS
      IRPL = 0
      IDIRNM = KLXSNG (ISTORE(ICOMBF), IDIMBF, INEXTD)
      IF (IDIRNM .LT. 0) GOTO 1100
      IF (IDIRNM .EQ. 0) GOTO 8910
C--NEXT RECORD HAS BEEN LOADED  -  BRANCH ON THE TYPE
      GOTO (1250, 2750, 2200, 2350, 3050, 2710, 2550,
     1 1100, 8950, 2000, 4000, 3025, 5000, 1210), IDIRNM
      GOTO 9910
C
1210  CONTINUE
C----- ANISO ITSELF
C--LOAD THE RELEVANT LISTS
      CALL XFAL01
      CALL XFAL02
      CALL XFAL20
      IULN5=KTYP05( ISTORE(ICOMBF + IMDINP))
      CALL XLDR05(IULN5)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--LIST READ IN OKAY  -  SET UP THE INITIAL CONTROL FLAGS
C--RESET SOME CONTROL FLAGS FOR THIS ROUTINE
      NATOM=0
      IPRINT=0
      TESTEV = EIGMIN
      TESTER = EIGRAT
      NDEL=0
      CALL XZEROF (JDEL(1), 20)
      CALL XZEROF (CF(1), 3)
C--SET THE FLAG TO INDICATE NO ATOMS STORED AT PRESENT
      NATOM = 0
C----- IOK : -1 = AXIS, 0 = NOTHING, +1 = TLS
      IOK = 0
      IERR = 1
C----- SET GROUP COUNTER TO ZERO
      NGP=0
C-----  SAVE THE WORK AREAS
C----- ORIGINAL ATOMS
      IBASE = LFL
C----- ORTHOGOONAL ATOMS
      KBASE = NFL
C----- INDICATE NO MODIFICATIONS YET
      IMOD5 = 0
C----- INDICATE LIST 20 NOT UPDATED
      IUPDT = 0
      GOTO 1100
C
C
C--'ATOM' INSTRUCTION
1250  CONTINUE
      NATOM = 0
      IOK = 0
      IERR =  +1
      DL = 0.
      DA = 0.
C----- CLEAR THE CENTROID
      CALL XZEROF (CF(1) ,3)
C----- RESTORE THE 'END' OF THE ATOM STACK
      LFL = IBASE
C----- RESTORE ORTHOGONAL ATOM STACK
      NFL = KBASE
      Z=1.
C--CHECK FOR SOME ARGUMENTS
      IF(KFDARG(I))1300,1400,1400
C--ERROR(S)  -  SET THE ATOM ERROR COUNT
1300  CONTINUE
      IERR = -1
      GOTO 1100
C--CHECK IF THERE ARE MORE ARGUMENTS ON THIS CARD
1350  CONTINUE
      IF(KOP(8))1850,1400,1400
C--CHECK IF NEXT ARGUMENT IS A NUMBER
1400  CONTINUE
      IF(KSYNUM(Z))1500,1450,1500
1450  CONTINUE
      ME=ME-1
      MF=MF+LK2
C--READ THE NEXT GROUP OF ATOMS
1500  CONTINUE
      IF(KATOMU(LN))1550,1550,1600
C--ERRORS  -  SET THE ATOM ERROR COUNT
1550  CONTINUE
      IERR = -1
      GOTO 8850
C--MOVE ATOMS TO STACK WITH CORRECT CO-ORDINATES
1600  CONTINUE
      DO 1800 J=1,N5A
      LFL=LFL-MD5A
      IF(NFL+27-LFL)1700,1650,1650
C--ERRORS
1650  CONTINUE
      IERR = -1
      GOTO 8900
C--TRANSFORM THE ATOM AND MOVE IT ACROSS
1700  CONTINUE
      IF(KATOMS(MQ,M5A,LFL))1550,1550,1750
C--ATOM MOVED OKAY  -  SET THE WEIGHT OVER TH OCCOPATION
1750  CONTINUE
      STORE(LFL+2)=Z
C--INCREMENT FOR THE NEXT ATOM
      M5A=M5A+MD5A
1800  CONTINUE
      NATOM = NATOM + N5A
      GOTO 1350
C--CHECK THAT THERE IS AT LEAST ONE ATOM ON THIS CARD
1850  CONTINUE
C----- STORE THE 'START' OF THE ATOM STACK
      JBASE = LFL
      LFL = LFL - 1
      IF (NATOM) 1900, 1900, 1100
C--NO ATOMS ON THIS CARD
1900  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1950)
      ENDIF
      WRITE(NCAWU,1950)
      WRITE ( CMON, 1950)
      CALL XPRVDU(NCVDU, 1,0)
1950  FORMAT(' No atoms found')
      GOTO 1100
C
C
C--'TLS' INSTRUCTION
2000  CONTINUE
C -- CHECK THERE ARE SOME ATOMS
      IF ( NATOM .LE. 0 ) GO TO 9920
C--INCREMENT THE NUMBER OF GROUP CARDS READ
      NGP=NGP+1
C--CHECK IF ANY ERRORS HAVE BEEN GENERATED DURING THE INPUT OF THE ATOMS
      IF (IERR) 2050, 2050, 2150
2050  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2100)
      ENDIF
      WRITE(NCAWU,2100)
      WRITE ( CMON, 2100)
      CALL XPRVDU(NCVDU, 1,0)
2100  FORMAT(' Instruction ignored because of previous errors')
      GOTO 1100
2150  CONTINUE
      WRITE(NCAWU,2160) NGP
      IF (ISSPRT .EQ. 0) THEN
      WRITE (NCWU,2160) NGP
      ENDIF
      WRITE ( CMON, 2160) NGP
      CALL XPRVDU(NCVDU, 1,0)
2160  FORMAT(' Results for group number ',I4)
C--PRINT THE PAGE HEADING
      CALL XPRTCN
C----- FIND TLS
      LBASE = NFL
C----- CHECK WORKSPACE FOR NEXT SUBROUTINE
      NFL = NFL + 3*NATOM
      N = LFL - NFL
      IF (N .LE. 0) GOTO 8900
      IF (IRTLS (JBASE, LBASE, NATOM, MD5A, KWORK, 1) .GT. 0) THEN
C--MARK THE GROUP AS ACCEPTABLE
         IOK = 1
         IERR = 1
C----- CLEAR THE REJECT AND LIMIT CONDITIONS
         TESTEV = EIGMIN
         TESTER = EIGRAT
         NDEL = 0
         CALL XZEROF (JDEL(1), 20)
      ELSE
      WRITE(NCAWU,2170)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2170)
      ENDIF
         WRITE ( CMON, 2170)
         CALL XPRVDU(NCVDU, 1,0)
2170  FORMAT(' TLS analysis fails')
      ENDIF
      GOTO 1100
C
C
C
C---'DISTANCES' INSTRUCTION
2200  CONTINUE
      DL = 1.8
      IF(ME)2500, 2500, 2300
2300  CONTINUE
      IF(KSYNUM(DL)) 8200, 2400, 8200
C
C---'ANGLES' INSTRUCTION
2350  CONTINUE
      DA = 1.8
2400  CONTINUE
      IF(ME)2500, 2500, 2450
2450  CONTINUE
      IF(KSYNUM(DA)) 8200, 2500, 8200
2500  CONTINUE
      IF (IOK) 8200, 8200, 2570
2570  CONTINUE
C -- CHECK THERE ARE SOME ATOMS
      IF ( NATOM .LE. 0 ) GO TO 9920
C----- COMPUTE DISTANCES AND ANGLES
      CALL RDSTAN( JBASE, LBASE,  NATOM, MD5A)
      WRITE(NCAWU,2571)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2571)
      ENDIF
      WRITE ( CMON, 2571)
      CALL XPRVDU(NCVDU, 4,0)
2571  FORMAT(1X,79('*'),/
     2 '    Remember that DISTANCE resets the current atom counter',/
     3 10X,'You must issue a new ATOM directive',/,1X,79('*'))
      NATOM = 0
      IOK = 0
      GOTO 1100
C
C
C
C----- 'LIMITS' INSTRUCTION TO RESET EIGENVALUE TEST LIMITS
2550  CONTINUE
      IF(KFDARG(I))8850,2600,2600
C--READ THE FIRST NUMBER
2600  CONTINUE
      IF(KFDNUM(TESTEV)) 8850,2650,2650
C--CHECK IF THERE IS A SECOND NUMBER
2650  CONTINUE
      IF(ME)1100,1100,2700
C--READ THE SECOND NUMBER
2700  CONTINUE
      IF(KFDNUM(TESTER)) 8850,1100,1100
C
C----- 'REJECT' INSTRUCTION TO REJECT CHOSEN EIGENVALUES
2710  CONTINUE
      IF(KFDARG(I))8850,2720,2720
C---- READ THE REJECTED EIGENVALUES
2720  CONTINUE
      IF(KFDNUM(A))8850,2730,2730
2730  CONTINUE
      NDEL=NDEL+1
      JDEL(NDEL)=NINT(A)
      GOTO 1100
C
C
C---'CENTRE' INSTRUCTION
2750  NB=0
2770  IF (ME) 2860, 2860, 2790
2790  IF(KSYNUM(Z)) 8000, 2800, 2840
2800  NB=NB+1
      IF(NB-3) 2820, 2820, 8100
2820  CF(NB)=Z
      ME=ME-1
      MF=MF+LK2
      GOTO 2770
2840  IF(KOP(8)) 2860, 2770, 8000
2860  IF(NB-3) 8100, 1100, 8100
C
C
C----- 'REPLACE' INSTRUCTION
3025  CONTINUE
      IRPL = 1
C
C--'PRINT' INSTRUCTION  -  CHECK IF WE CAN PRINT THE ATOMS
3050  CONTINUE
      IF (IOK) 8200, 8200, 3200
C--START TO PROCESS THE CARD
3200  CONTINUE
      IF(KFDARG(I))1100,3250,3250
C--PRINT A CAPTION
3250  CONTINUE
      IF (IRPL .EQ. 0) THEN
      WRITE(NCAWU,3300)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3300)
      ENDIF
      WRITE ( CMON, 3300)
      CALL XPRVDU(NCVDU, 1,0)
3300  FORMAT(1X,' Co-ordinates of other atoms',
     2 ' after TLS application')
      ENDIF
C--CHECK THE CORE AREA
C--CHECK THE CORE AREA
C      LFL=LFL-MD5A
C      IF(NFL + 27 -LFL)3350,3350,8900
C--ENOUGH CORE
3350  CONTINUE
      IF(KCOMP(1,ISTORE(MF+2),ITARG,1,1) .LE. 0) THEN
      IALL = 0
      GOTO 3500
      ELSE
      IALL = 1
      GOTO 3550
      ENDIF
C--CHECK IF THERE ARE MORE ARGUMENTS TO BE PROCESSED
3450  CONTINUE
      IF(KOP(8))1100,3500,3500
C--FIND THE NEXT GROUP OF ATOMS
3500  CONTINUE
      IF(KATOMU(LN))8850,8850,3550
3550  CONTINUE
C----- PRINT THE RESULTS FOR THESE ATOMS
      IF (IALL .LE. 0) THEN
            ISTART = LFL
            NUMBER = N5A
            ISTEP = MD5A
            ISAVE = M5A
      ELSE
            ISTART = L5
            NUMBER = N5
            ISTEP = MD5
            ISAVE = L5
      ENDIF
      IF (KTLSPT (ISTART, NUMBER, ISTEP, ISAVE,
     1 IWORK, JWORK, IALL, IRPL, IMOD5) .LE. 0) GOTO 8950
      IF (IALL .LE. 0) GOTO 3450
      GOTO 1100
C
C
4000  CONTINUE
C----- 'AXES' INSTRUCTION
      IF (NATOM .LE. 0) GOTO 9920
      IF (IERR .LE. 0) GOTO 2050
      LBASE = NFL
C----- CHECK WORKSPACE FOR NEXT SUBROUTINE
      NFL = kstall( 4*NATOM )
      CALL XPRAXI( 1, 1, LBASE, JBASE,
     1 MD5A, NATOM, 2, KWORK)
C--MARK THE CALCULATION AS ACCEPTABLE
      IOK = -1
            IERR = 1
      GOTO 1100
C
C----- 'STORE' INSTRUCTION
5000  CONTINUE
      IF (IOK .NE. 0) THEN
        IF (IOK .EQ. -1) THEN
            ISHIFT = 3
        ELSE
            ISHIFT = 2
        ENDIF
        M20M = L20M + ISHIFT * MD20M
        M20I = L20I + ISHIFT * MD20I
        M20V = L20V + ISHIFT * MD20V
        CALL XMOVE ( STORE(KWORK), STORE(M20M), 9)
        CALL XMOVE ( STORE(KWORK + 9), STORE(M20I), 9)
        CALL XMOVE ( STORE(KWORK + 18), STORE(M20V), 3)
        IUPDT = 1
        WRITE(NCAWU,5100) CCALC(ISHIFT-1)
        IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,5100) CCALC(ISHIFT-1)
        ENDIF
        WRITE ( CMON, 5100) CCALC(ISHIFT-1)
        CALL XPRVDU(NCVDU, 1,0)
5100  FORMAT(' LIST 20 ', A4, ' record will be updated ')
      ENDIF
      GOTO 1100
C
C
C---ERROR MODES FOR 'CENTRE' INSTRUCTION
8000  CALL XPCLNN(LN)
      I=ISTORE(MF+1)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,8050)I
      ENDIF
      WRITE ( NCAWU, 8050)
      WRITE ( CMON, 8050)
      CALL XPRVDU(NCVDU, 1,0)
8050  FORMAT(' Spurious character at about column',I5)
      GOTO 8850
8100  CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,8150)
      ENDIF
      WRITE(NCAWU,8150)
      WRITE ( CMON, 8150)
      CALL XPRVDU(NCVDU, 1,0)
8150  FORMAT(' Too many or too few numbers')
      GOTO 8850
C
C--ERROR BECAUSE TLS  HAS NOT BEEN CALCULATED
8200  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,8250)
      ENDIF
      WRITE(NCAWU,8250)
      WRITE ( CMON, 8250)
      CALL XPRVDU(NCVDU, 1,0)
8250  FORMAT(1X,' Instruction ignored. TLS have not been',
     1 ' successfully computed')
      GOTO 1100
C
C--ERROR EXIT FOR THESE ROUTINES
8850  CONTINUE
      CALL XPCA(I)
      GOTO 1100
C
C--NOT ENOUGH CORE
8900  CONTINUE
      i = 0
      j = 0
      CALL XSTICA (i,j)
      GOTO 8950
C
C--MAIN TERMINATION ROUTINES
C
8910  CONTINUE
      IF (IMOD5 .GT. 0 ) THEN
            CALL XSTR05( IULN5, 0, 1)
            WRITE(NCAWU,8911)
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,8911)
      ENDIF
            WRITE ( CMON, 8911)
            CALL XPRVDU(NCVDU, 1,0)
8911        FORMAT(' LIST 5 has been updated')
      ENDIF
      IF (IUPDT .GT. 0) THEN
            CALL XSTR20 ( 20, 0, 1)
            WRITE(NCAWU,8912)
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,8912)
      ENDIF
            WRITE ( CMON, 8912)
            CALL XPRVDU(NCVDU, 1,0)
8912        FORMAT(' LIST 20 has been updated')
      ENDIF
      GOTO 8960
C
C
8950  CONTINUE
      IF (IMOD5 .GT.0) THEN
            N = 5
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,8951) N
      ENDIF
            WRITE(NCAWU,8951)N
            WRITE ( CMON, 8951) N
            CALL XPRVDU(NCVDU, 1,0)
8951        FORMAT(' WARNING. The requested update to LIST ',
     1      I4,' has not been performed')
      ENDIF
      IF (IUPDT .GT. 0) THEN
            N = 20
            WRITE(NCAWU,8951) N
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,8951) N
            WRITE ( CMON, 8951)  N
            CALL XPRVDU(NCVDU, 1,0)
      ENDIF
      ENDIF
8960  CONTINUE
      CALL XOPMSG ( IOPTLS , IOPEND , IVERSN )
      CALL XTIME2(2)
      RETURN
C
C -- ERRORS
9900  CONTINUE
      CALL XOPMSG ( IOPTLS , IOPABN , 0 )
      GO TO 8950
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPTLS , IOPCMI , 0 )
      GO TO 9900
9920  CONTINUE
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE ( NCWU , 9925 )
      ENDIF
      WRITE ( NCAWU , 9925 )
      WRITE ( CMON, 9925 )
      CALL XPRVDU(NCVDU, 1,0)
9925  FORMAT ( 1X , 'No atoms have been specified ')
      CALL XERHND ( IERWRN )
      GO TO 1100
      END
C
CODE FOR KTLSPT
      FUNCTION KTLSPT (ISTART, NUMBER, ISTEP, ISAVE,
     1 IWORK, JWORK, IALL, IRPL, IMOD5)
C----- PRINT OBSERVED AND CALCULATED U'S
C
C----- RETURNS -1 IF FATAL ERROR GENERATED
C      ISTART START OF ACTUAL PARAMETERS
C      NUMBER NUMBER OF ATOMS
C      ISTEP  NUMBER OF PARAMETERS PER ATOM
C      ISAVE  ADDRESS TO SAVE TATOMS
C      JWORK, IWORK  WORK SPACE
C      IALL   1 FOR ALL ATOMS
C      IRPL   1 FOR REPLACE REQUIRED
C      IMOD5  1 IF MODIFICATION OCCURS
C
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XCONST
\XLST20
\XLEXIC
\XRTLSC
\XIOBUF
C
\QSTORE
C
C----- NO ERRORS YET
      KTLSPT = +1
C
C--LOOP OVER EACH OF THE ATOMS WE HAVE FOUND
      DO 1500 I = 1, NUMBER
      IF (IALL .LE. 0) THEN
C----- PROCESS ATOM DEFINITION
      IF (KATOMS( MQ, ISAVE, ISTART)) 2000, 2000, 1000
1000  CONTINUE
      ELSE
      ISTART = ISAVE
      ENDIF
C----- ORTHOGONALISE X
      CALL XMLTMM (AO, STORE(ISTART+4), STORE(IWORK), 3,3,1)
C----- COMPUTE U'S
      CALL RSUB08 (IWORK)
      CALL XMLTMM (DV, AR, WC, 6, 20, 1)
      CALL RSUB10 (WA, WC)
      CALL XMLTMM (UO, WA, WB, 3,3,3)
      CALL XMLTMT (WB, UO, WA, 3,3,3)
      CALL RSUB09 (WA, WC)
      CALL XMOVE( WC(1), STORE(JWORK), 6)
      IF (IRPL .EQ. 0) THEN
C-----  WRITE DETAILS
C-C-C-CHECK WHETHER ATOM IS ANISOTROPIC OR ISOTROPIC/SPHERE/LINE/RING
        IF (ABS(STORE(ISTART+3)) .LT.  UISO) THEN
C-----    ANISOTROPIC
          JJ = ISTART + 4
          JJJ = ISTART + 12
          IF (ISSPRT .EQ. 0) THEN
            WRITE (NCWU,1100) STORE (ISTART), STORE(ISTART+1),
     1      (STORE(J),J=JJ,JJJ)
          ENDIF
          WRITE (NCAWU,1100) STORE (ISTART), STORE(ISTART+1),
     1    (STORE(J),J=JJ,JJJ)
1100      FORMAT(1X, A4, F4.0, 3F8.4, 6F8.3)
        ELSE
C-----    ISOTROPIC
C-C-C-ISOTROPIC/SPHERE/LINE/RING
          JJ = ISTART + 4
          JJJ = ISTART + 6
          IF (ISSPRT .EQ. 0) THEN
            WRITE (NCWU,1100) STORE (ISTART), STORE(ISTART+1),
     1      (STORE(J), J = JJ, JJJ), STORE(ISTART+7)
          ENDIF
          WRITE (NCAWU,1100) STORE (ISTART), STORE(ISTART+1),
     1      (STORE(J), J = JJ, JJJ), STORE(ISTART+7)
        ENDIF
C-----  WRITE NEW PARAMETERS
        JJJ = JWORK + 5
        IF (ISSPRT .EQ. 0) THEN
          WRITE( NCWU,1150) (STORE(J),J=JWORK,JJJ)
        ENDIF
        WRITE( NCAWU,1150) (STORE(J),J=JWORK,JJJ)
1150    FORMAT(1X, 32X, 6F8.3)
      ELSE
C-----  REPLACE
       CALL XMOVE (STORE(JWORK), STORE(ISAVE+7), 6)
        STORE(ISAVE+3) = 0.0
        IMOD5 = 1
      ENDIF
      ISAVE = ISAVE + ISTEP
1500  CONTINUE
      GOTO 2200
2000   CONTINUE
      WRITE(NCAWU,2100)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2100)
      ENDIF
      WRITE ( CMON, 2100)
      CALL XPRVDU(NCVDU, 1,0)
2100  FORMAT (' Errors in atom definitions')
      IF (IRPL .GT. 0) THEN
      WRITE(NCAWU,2150)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2150)
      ENDIF
      WRITE ( CMON, 2150)
      CALL XPRVDU(NCVDU, 1,0)
2150  FORMAT(' Coordinates will not be updated')
      KTLSPT = -1
      ENDIF
2200  CONTINUE
      IF ( IMOD5 * IRPL .GT. 0 ) THEN
      WRITE(NCAWU,2250)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2250)
      ENDIF
      WRITE ( CMON, 2250)
      CALL XPRVDU(NCVDU, 1,0)
2250  FORMAT( /' U''s have been modified'/)
      ENDIF
      RETURN
      END
C
CODE FOR IRTLS
      FUNCTION  IRTLS(JBASE, LBASE, NATOM, ISTEP, KWORK, IMODE)
C----- CALCULATE T, L, AND S FOR GROUP OF ATOMS
C
C      RETURN VALUE .GT. 0 IF OK
C
C      JBASE  START OF ATOM STACK (FRACTIONAL)
C      LBASE  START OF ATOM STACK (ORTHOGONAL)
C      NATOM  NUMBER OF ATOMS
C      ISTEP  NUMBER OF PARAMETERS PER ATOM
C             JBASE + 3 = UISO
C                   + 4 = X'S
C                   + 7 = U'S
C      KWORK  ADDRESS FOR RESULTANT MATRICES
C      IMODE  IF .LE. 0 PRODUCE NO OUTPUT
C
C--
      DOUBLE PRECISION DAA,DAR,DAI,DWE,DAS
C
      DIMENSION DUMMYA(420),DUMMYB(420)
      DIMENSION TEMP1(3,3),TEMP2(3,3)
C
\STORE
\XUNITS
\XSSVAL
\XCONST
\XLST01
\XWORK
\XWORKA
C
\XRTLSC
      COMMON /DRWORK/DAA(20,20),DAR(21),DAI(20,20),DWE(21),DAS(20)
\XIOBUF
C
C
      EQUIVALENCE (DUMMYA(1),AA(1,1)),(DUMMYB(1),DV(1,1))
      EQUIVALENCE (TEMP1(1,1),DUMMYA(1)),(TEMP2(1,1),DUMMYA(10))
C
      IRTLS = -1
C--OUTPUT AN INITIAL CAPTION
      IF (IMODE .GT. 0) THEN
      CALL XPRTCN
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1000)
      ENDIF
      WRITE(NCAWU,1000)
      WRITE ( CMON, 1000)
      CALL XPRVDU(NCVDU, 1,0)
1000  FORMAT(' Analysis of rigid body motion')
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1050)CF
      ENDIF
      WRITE(NCAWU,1050) CF
      WRITE ( CMON, 1050) CF
      CALL XPRVDU(NCVDU, 1,0)
1050  FORMAT(' Input centre of libration (crystal fractions) ',
     2 4X,3F8.4)
      ENDIF
C---SET UP MATRIX TO ORTHOGONALISE COORDINATES
      K=L1O1
      DO 1100 I=1,3
      DO 1100 J=1,3
      AO(I,J)=STORE(K)
      WA(I,J)=0.
1100  K=K+1
C---SET UP MATRIX TO ORTHOGONALISE U'S
      A=COS(STORE(L1P1+3))
      B=COS(STORE(L1P1+4))
      C=COS(STORE(L1P1+5))
      D=1.+2.*A*B*C-A*A-B*B-C*C
      D=SQRT(D)
      WA(1,1)=SIN(STORE(L1P1+3))/(D*STORE(L1P1))
      WA(2,2)=SIN(STORE(L1P1+4))/(D*STORE(L1P1+1))
      WA(3,3)=SIN(STORE(L1P1+5))/(D*STORE(L1P1+2))
      CALL XMLTMM(AO,WA,UO,3,3,3)
C---ZERO DERIVATIVES AND MATRICES
      CALL XZEROF(DUMMYA(1),420)
      CALL XZEROF(DUMMYB(1),420)
      DO 1140 I=1,20
      DO 1130 J=1,20
      DAA(J,I)=0.0D0
1130  CONTINUE
1140  CONTINUE
C---CALCULATE LOCATION OF FIRST ATOM;  SET LOCATION OF
C   ORTHOGONAL COORDINATES
      JP = JBASE
      JO = LBASE
C----- IF ORIGINAL CENTRE IS 0,0,0 COMPUTE C.OF.G
      IF(ABS(CF(1)) + ABS(CF(2))+ABS(CF(3))-.000001) 1141,1141,1149
1141  CONTINUE
      CF(1)=0.
      CF(2)=0.
      CF(3)=0.
C---- CYCLE THROUGH ATOM LIST TO GET C.OF.G
      JB=JP+4
      DO 1143 JA=1,NATOM
C----- INCLUDE ISOTROPIC ATOMS AT THIS STAGE
      CF(1)=CF(1)+STORE(JB)
      CF(2)=CF(2)+STORE(JB+1)
      CF(3)=CF(3)+STORE(JB+2)
      JB=JB + ISTEP
1143  CONTINUE
      CF(1)=CF(1)/FLOAT(NATOM)
      CF(2)=CF(2)/FLOAT(NATOM)
      CF(3)=CF(3)/FLOAT(NATOM)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1144) CF
      ENDIF
      IF (IMODE .GT. 0) THEN
      WRITE(NCAWU,1144) CF
         WRITE ( CMON, 1144) CF
         CALL XPRVDU(NCVDU, 1,0)
1144  FORMAT(' Centre of gravity, used as centre of libration',4X,3F8.4)
      ENDIF
1149  CONTINUE
C------ ORTHOGONALISE CENTRE OF LIBRATION
      CALL XMLTMM(AO,CF,CO,3,3,1)
C---CYCLE THROUGH ATOM LIST
      JB=JP
      NATOM2 = 0
      DO 1450 JA=1,NATOM
C----- ORTHOGONAL COORDINATES AT JO
      CALL XMLTMM (AO, STORE(JB+4), STORE(JO), 3, 3, 1)
C---CHECK IF ATOM IS ISOTROPIC
      IF(ABS(STORE(JB+3))-UISO)1250,1150,1150
1150  CONTINUE
      IF (IMODE .GT. 0) THEN
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1200) STORE(JB), STORE(JB+1)
      ENDIF
1200  FORMAT(' Atom  ',A4,F5.0,
     2 '  is isotropic and has been ignored')
      ENDIF
      GOTO 1400
1250  CONTINUE
      NATOM2 = NATOM2 + 1
C---ORTHOGONALIZE U'S, STORING AS WC
      CALL RSUB10(WB,STORE(JB+7))
      CALL XMLTMM(UO,WB,WA,3,3,3)
      CALL XMLTMT(WA,UO,WB,3,3,3)
      CALL RSUB09(WB,WC)
C---SET UP DERIVATIVES FOR THIS ATOM
      CALL RSUB08 (JO)
C---ACCUMULATE L.H.S. AS AA, R.H.S. AS AB
      DO 1270 I=1,6
      DO 1260 J=1,20
      DAI(I,J)=DBLE(DV(I,J))
1260  CONTINUE
1270  CONTINUE
      DO 1350 N=1,6
      DO 1350 I=1,20
      DO 1300 J=I,20
1300  DAA(I,J)=DAA(I,J)+DAI(N,I)*DAI(N,J)
1350  AB(I)=AB(I)+DV(N,I)*WC(N)
C---RESET COUNTERS
1400  CONTINUE
      JB=JB + ISTEP
      JO = JO + 3
1450  CONTINUE
      IF (NATOM2 .LT. 4) THEN
         WRITE ( CMON, 1451) NATOM2
         CALL XPRVDU(NCVDU, 1,0)
1451     FORMAT( ' Insufficient anisotropic atoms for tls -',I5)
         GOTO 3000
      ENDIF
C----- RESTORE JO
      JO = LBASE
C----- SCALE THE NORMAL MATRIX TO GIVE DIAGONAL ELEMENTS OF 1.
C     FIND THE SCALE FACTORS , MAXIMUM=100
      DO 1510 I=1,20
      DAS(I)=1.0D0/DMAX1(DSQRT(DAA(I,I)),.01D0)
1510  CONTINUE
C---FILL OUT AA
      DO 1500 I=1,20
C---- RHS
      AB(I)=AB(I)*SNGL(DAS(I))
      DO 1500 J=1,I
      DAA(J,I)=DAA(J,I)*DAS(I)*DAS(J)
      DAA(I,J)=DAA(J,I)
1500  CONTINUE
C---SOLVE NORMAL EQUATIONS, STORING INVERSE MATRIX AS AI AND RESULTS AS
      CALL RLTNT
C----- RESCALE THE RESULTS
      DO 1540 I=1,20
      AR(I)=AR(I)*SNGL(DAS(I))
1540  CONTINUE
C---SET UP L-, T-, AND S-TENSORS FROM AR; CALCULATE LIBRATIONAL CORRECTI
      CALL RSUB10(AT,AR(1))
      CALL RSUB10(AL,AR(7))
      AR(21)=-AR(13)-AR(17)
C----- SKIP REST IF ONLY AFTER 'AR'
      IF (IMODE .LE. 0) GOTO 2950
      K=13
      RAD=180./PI
      T=0.
      DO 1550 I=1,3
      T=T+AL(I,I)
      DO 1550 J=1,3
      AQ(I,J)=-0.5*AL(I,J)
      AS(I,J)=RAD*AR(K)
      AL(I,J)=RAD*RAD*AL(I,J)
      WA(I,J)=AL(I,J)
1550  K=K+1
      DO 1600 I=1,3
1600  AQ(I,I)=AQ(I,I)+1.+0.5*T
C---OUTPUT T, L, S
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1650)
      ENDIF
1650  FORMAT(//' Tensors with respect to the above centre',
     2 ' and orthogonal axes (A*, B'' and C)')
      CALL RSUB11(1)
C---TRANSFORM TENSORS TO PRINCIPAL AXES OF L
      M=0
      DO 1660 I=1,3
      DO 1660 J=1,3
      DAA(J,I)=DBLE(WA(J,I))
1660  CONTINUE
      CALL F02ABF(DAA,20,3,DAR,DAI,20,DWE,M)
      DO 1670 I=1,3
      WD(I)=SNGL(DAR(I))
      DO 1670 J=1,3
      WB(J,I)=SNGL(DAI(J,I))
1670  CONTINUE
      DO 1700 J=1,3
      I=NORM3(WB(1,J))
1700  CONTINUE
      D=XDETR3(WB)
      D=SIGN(1.,D)
C--MAKE SURE THAT THE MATRIX IS RIGHT HANDED
      DO 1750 I=1,3
      DO 1750 J=1,3
1750  WB(I,J)=WB(I,J)*D
C--PRINT THE LATENT ROOTS OF THE 'L' MATRIX
      I=L1P1
      DO 1850 J=1,3
      K=L1O1+J
      DO 1800 L=1,3
      TEMP2(L,J)=STORE(K-1)/STORE(I)
      K=K+3
1800  CONTINUE
      I=I+1
1850  CONTINUE
C--COMPUTE THE COSINES W.R.T. THE CRYSTALS SYSTEM IN FRACTIONS
      CALL XMLTTM(WB(1,1),TEMP2(1,1),TEMP1(1,1),3,3,3)
C--COMPUTE THE SAME TRANSFORMATION INTO ANGSTROM
      CALL XMLTTT(WB(1,1),STORE(L1O1),TEMP2(1,1),3,3,3)
C--PRINT THE DATA THUS ACQUIRED
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1900)(WD(I),(WB(J,I),J=1,3),I=1,3),
     2 ((TEMP2(I,J),J=1,3),(TEMP1(I,J),J=1,3),I=1,3)
      ENDIF
1900  FORMAT(' Rotation matrix from orthogonal axes',
     2 ' to coordinate system defined by L'//' Latent roots',13X,'L',
     3 9X,'M',9X,'N',9X,'w.r.t. a*, b'' and c'//3(1X,F10.3,9X,3F10.5/)
     4 //' Rotation matrices from crystal fractions',
     5 ' w.r.t. libration centre '/,
     6 ' to axial system  defined by L',/,
     7 15X,' Angstrom',31X, 'Fractions',//,
     8 3(4X,3F10.4,11X,3F10.5/))
C----- COPY MATRICES FOR SAVING IN LIST 20
      CALL XTRANS ( WB(1,1), STORE(KWORK+9), 3, 3)
      CALL XMLTMT (STORE(KWORK+9), STORE(L1O1), STORE(KWORK),3, 3, 3)
      I =  KINV2 (3, STORE(KWORK), STORE(KWORK+9),9,0, STORE(KWORK+18),
     1 STORE(KWORK+18), 3)
      CALL XMOVE ( CF(1), STORE(KWORK+18), 3)
      CALL XMLTMM(AL,WB,WA,3,3,3)
      CALL XMLTTM(WB,WA,AL,3,3,3)
      CALL XMLTMM(AT,WB,WA,3,3,3)
      CALL XMLTTM(WB,WA,AT,3,3,3)
      CALL XMLTMM(AS,WB,WA,3,3,3)
      CALL XMLTTM(WB,WA,AS,3,3,3)
C---SHIFT ORIGIN TO MAKE S SYMMETRIC
      WD(1)=RAD*(AS(2,3)-AS(3,2))/(AL(2,2)+AL(3,3))
      WD(2)=RAD*(AS(3,1)-AS(1,3))/(AL(1,1)+AL(3,3))
      WD(3)=RAD*(AS(1,2)-AS(2,1))/(AL(1,1)+AL(2,2))
      CALL XMLTTM(WB,AO,WA,3,3,3)
      I=KINV2(3,WA,WB,9,1,WD,WC,3)
      DO 1950 I=1,3
      CF(I)=CF(I)+WC(I)
1950  WA(I,I)=0.
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2000)CF
      ENDIF
      WRITE(NCAWU,2000) CF
      WRITE ( CMON, 2000) CF
      CALL XPRVDU(NCVDU, 1,0)
2000  FORMAT(' Centre for which s is symmetric :             ',
     2 4X,3F8.4)
C---TRANSFORM TENSORS TO NEW ORIGIN
      WA(1,2)=WD(3)/RAD
      WA(1,3)=-WD(2)/RAD
      WA(2,3)=WD(1)/RAD
      WA(2,1)=-WA(1,2)
      WA(3,1)=-WA(1,3)
      WA(3,2)=-WA(2,3)
C--- T=T+S'P'
      CALL XMLTTT(AS,WA,WB,3,3,3)
      CALL RADDMM(AT,WB)
C--- S=S+LP'
      CALL XMLTMT(AL,WA,WB,3,3,3)
      CALL RADDMM(AS,WB)
C--- T=T+PS
      CALL XMLTMM(WA,AS,WB,3,3,3)
      CALL RADDMM(AT,WB)
C---OUTPUT NEW TENSORS
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2050)
      ENDIF
2050  FORMAT(' Tensors with respect to principal axes of L',
     2 ' and new centre')
      CALL RSUB11(1)
C---CALCULATE AND OUTPUT AXIAL SHIFTS
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2100)
      ENDIF
2100  FORMAT(' Axial displacements for which S becomes diagonal',2X,
     2 '(Angstroms along principal axes of L)'/1X,32X,
     3 'Shift directions'/1X,29X,'1',9X,'2',9X,'3')
      A=-AS(1,3)/AL(1,1)
      B=AS(1,2)/AL(1,1)
      C=AS(2,3)/AL(2,2)
      D=-AS(2,1)/AL(2,2)
      E=-AS(3,2)/AL(3,3)
      F=AS(3,1)/AL(3,3)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2150)A,B,C,D,E,F
      ENDIF
2150  FORMAT(/1X,16X,'Axis 1',10X,2F10.2//1X,16X,'Axis 2',F10.2,10X,
     2 F10.2//1X,16X,'Axis 3',2F10.2)
C---CALCULATE REDUCED T AND S, AND SCREW PITCHES
      DO 2250 I=1,3
      DO 2200 J=1,3
      DO 2200 K=1,3
2200  AT(I,J)=AT(I,J)-AS(K,I)*AS(K,J)/AL(K,K)
2250  AT(I,I)=AT(I,I)+AS(I,I)*AS(I,I)/AL(I,I)
      DO 2350 I=1,3
      WD(I)=AS(I,I)/AL(I,I)
      DO 2350 J=1,3
      IF(I-J)2300,2350,2300
2300  AS(I,J)=0.
2350  CONTINUE
C---OUTPUT FINAL REDUCED TENSORS
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2400)
      ENDIF
      WRITE(NCAWU,2400)
      WRITE ( CMON, 2400)
      CALL XPRVDU(NCVDU, 1,0)
2400  FORMAT(' Final reduced tensors')
      CALL RSUB11 (2)
C---OUTPUT SCREW PITCHES
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2450)WD
      ENDIF
      WRITE(NCAWU,2450) WD
      WRITE ( CMON, 2450) WD
      CALL XPRVDU(NCVDU, 1,0)
2450  FORMAT(' Screw pitches (angstrom/degree) :',12X,3F7.2)
C---INVERT UO TO GET MATRIX FOR CONVERSION OF U'S BACK TO CRYSTAL AXES
      I=KINV2(3,UO,WA,9,0,WC,WD,3)
      CALL XMOVE (WA, UO, 9)
C---CALCULATE AND OUTPUT OBSERVED AND CALCULATED TEMPERATURE FACTORS
      CALL XPRTCN
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2500)
      ENDIF
2500  FORMAT(' Observed and calculated temperature factors',3X,
     2 '(Crystal axes)'///1X,5X,'Code',5X,'Atom',2X,'Serial',7X,
     3 'X/A',6X,'Y/B',6X,'Z/C',10X,'U11',5X,'U22',5X,'U33',5X,'U23',5X,
     4 'U13',5X,'U12'//)
      JB=JP
      JC = LBASE
C--SET UP THE ACCUMULATION CONSTANTS FOR THE SCAN THROUGH THE ATOMS
      DELU=0.
      SUMU=0.
      DELS=0.
      SUMS=0.
      ANUMB=0.
C--LOOP OVER EACH ATOM IN TURN
      DO 2800 JA=1,NATOM
      IF(ABS(STORE(JB+3))-UISO)2550,2750,2750
C--CHECK IF THE ATOM IS ISOTROPIC
2550  CONTINUE
      JD=JB+4
      JE=JB+12
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2600)JA,STORE(JB),STORE(JB+1),(STORE(J),J=JD,JE)
      ENDIF
2600  FORMAT(1X,I8,6X,A4,F7.0,4X,3F9.4,4X,6F8.3)
      CALL RSUB08(JC)
      CALL XMLTMM(DV,AR,WC,6,20,1)
      CALL RSUB10(WA,WC)
      CALL XMLTMM(UO,WA,WB,3,3,3)
      CALL XMLTMT(WB,UO,WA,3,3,3)
      CALL RSUB09(WA,WC)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2650)WC
      ENDIF
2650  FORMAT(1X,60X,6F8.3/)
      JF=JB+7
C--ACCUMULATE THE TOTALS FOR THIS ATOM
      DO 2700 K=1,6
      DEL=ABS(STORE(JF)-WC(K))
      SUM=ABS(STORE(JF))
      JF=JF+1
      DELS=DELS+DEL*DEL
      SUMS=SUMS+SUM*SUM
      DELU=DELU+DEL
      SUMU=SUMU+SUM
      ANUMB=ANUMB+1.
2700  CONTINUE
2750  CONTINUE
      JB=JB + ISTEP
      JC=JC+3
2800  CONTINUE
C--COMPUTE AND PRINT THE TOTALS FOR ALL THE ATOMS
      UFAC=DELU/SUMU*100.
      SFAC=SQRT(DELS/SUMS)*100.
      RMSU=SQRT(DELS/ANUMB)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2850)UFAC,SFAC,RMSU
      ENDIF
      WRITE(NCAWU,2850) UFAC, SFAC, RMSU
      WRITE ( CMON, 2850) UFAC, SFAC, RMSU
      CALL XPRVDU(NCVDU, 4,0)
2850  FORMAT(/
     1 6X,'           R-Factor for U''S = ',F7.2,/
     2 6X,'  Weighted R-Factor for U''S = ',F7.2,/
     3 6X,' R.M.S. discrepancy for U''S = ',F7.4)
C
2950  CONTINUE
      IRTLS = 1
3000  CONTINUE
      RETURN
      END
C
CODE FOR RSUB08
      SUBROUTINE RSUB08(JJ)
C---CALCULATE DERIVATIVES FOR ATOM WHOSE ORTHOGONAL COORDINATES
C   ARE STORED AT JJ
C
C--
\STORE
\XWORK
\XRTLSC
C
      CALL XZEROF( DV(1,1), 120)
      X=STORE(JJ)-CO(1)
      Y=STORE(JJ+1)-CO(2)
      Z=STORE(JJ+2)-CO(3)
      A=X*X
      B=Y*Y
      C=Z*Z
      D=Y*Z
      E=X*Z
      F=X*Y
C---DERIVATIVES W.R.T. T'S
      DO 1000 I=1,6
1000  DV(I,I)=1.
C---DERIVATIVES W.R.T. L'S
      DV(1,8)=C
      DV(1,9)=B
      DV(1,10)=-2.*D
      DV(2,7)=C
      DV(2,9)=A
      DV(2,11)=-2.*E
      DV(3,7)=B
      DV(3,8)=A
      DV(3,12)=-2.*F
      DV(4,7)=-D
      DV(4,10)=-A
      DV(4,11)=F
      DV(4,12)=E
      DV(5,8)=-E
      DV(5,10)=F
      DV(5,11)=-B
      DV(5,12)=D
      DV(6,9)=-F
      DV(6,10)=E
      DV(6,11)=D
      DV(6,12)=-C
C---DERIVATIVES W.R.T. S'S
      DV(1,16)=2.*Z
      DV(1,19)=-2.*Y
      DV(2,14)=-2.*Z
      DV(2,20)=2.*X
      DV(3,15)=2.*Y
      DV(3,18)=-2.*X
      DV(4,13)=-X
      DV(4,14)=Y
      DV(4,15)=-Z
      DV(4,17)=-2.*X
      DV(5,13)=2.*Y
      DV(5,16)=-X
      DV(5,17)=Y
      DV(5,18)=Z
      DV(6,13)=-Z
      DV(6,17)=Z
      DV(6,19)=X
      DV(6,20)=-Y
      RETURN
      END
C
CODE FOR RSUB09
      SUBROUTINE RSUB09(UA,UB)
C
C
      DIMENSION UA(3,3),UB(6)
C
      UB(1)=UA(1,1)
      UB(2)=UA(2,2)
      UB(3)=UA(3,3)
      UB(4)=UA(2,3)
      UB(5)=UA(1,3)
      UB(6)=UA(1,2)
      RETURN
      END
C
CODE FOR RSUB10
      SUBROUTINE RSUB10(UA,UB)
C
C
      DIMENSION UA(3,3),UB(6)
C
      UA(2,3)=UB(4)
      UA(1,3)=UB(5)
      UA(1,2)=UB(6)
      DO 1000 I=1,3
      UA(I,I)=UB(I)
      K=MIN0(3,I+1)
      DO 1000 J=K,3
1000  UA(J,I)=UA(I,J)
      RETURN
      END
C
CODE FOR RSUB11
      SUBROUTINE RSUB11 (MON)
C
\XUNITS
\XSSVAL
\XWORK
\XRTLSC
\XIOBUF
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,200)
      ENDIF
      WRITE ( NCAWU, 200)
      IF (MON .EQ. 2) THEN
        WRITE ( CMON, 200)
        CALL XPRVDU(NCVDU, 3,0)
      ENDIF
200   FORMAT(/1X,10X,'L',23X,'T',18X,'S'/)
      DO 100 I=1,3
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1000)(AL(I,J),J=1,3),(AT(I,J),J=1,3),(AS(I,J),J=1,3)
      ENDIF
      WRITE ( NCAWU,1000) (AL(I,J),J=1,3), (AT(I,J),J=1,3),
     +                     (AS(I,J),J=1,3)
      IF (MON .EQ. 2) THEN
        WRITE ( CMON,1000) (AL(I,J),J=1,3), (AT(I,J),J=1,3),
     +                     (AS(I,J),J=1,3)
        CALL XPRVDU(NCVDU, 1,0)
      ENDIF
100   CONTINUE
1000  FORMAT((3(3F7.2,2X)))
      CALL XLINES
      RETURN
      END
C
CODE FOR RADDMM
      SUBROUTINE RADDMM(XX,YY)
C
C
      DIMENSION XX(3,3),YY(3,3)
C
\XWORK
C
      DO 1000 I=1,3
      DO 1000 J=1,3
1000  XX(I,J)=XX(I,J)+YY(I,J)
      RETURN
      END
C
CODE FOR RDSTAN
      SUBROUTINE RDSTAN (JBASE, LBASE, NATOM, ISTEP)
C
C----- CORRECTED DISTANCE AND ANGLES
C      JBASE - FRACTIONAL COORDS
C      LBASE - ORTHORONAL COORDS
C
\ISTORE
      DIMENSION IKEY(400)
C
\STORE
\XUNITS
\XSSVAL
\XRTLSC
C
\QSTORE
      EQUIVALENCE (IKEY(1), WA(1,1))
C
C
C--INITIAL CAPTIONS
      CALL XPRTCN
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1000)DL,DA
      ENDIF
1000  FORMAT(' Bond lengths and angles :  (1) uncorrected,  ',
     2 '(2) corrected for libration',///,' Distance limit',
     3 F8.3//,' Angle limit',F11.3)
C---TRANSFER UNCORRECTED ORTHOGONAL COORDINATES TO RELATIVE
C   LOCATIONS 7-9, CORRECTED COORDINATES TO 10-12
      JP = JBASE
      JO = LBASE
      JB=JP
      JC=JO
      DO 1050 JA=1,NATOM
      STORE(JB+7)=STORE(JC)
      STORE(JB+8)=STORE(JC+1)
      STORE(JB+9)=STORE(JC+2)
      CALL XMLTMM(AQ,STORE(JB+7),STORE(JB+10),3,3,1)
      JB = JB + ISTEP
      JC=JC+3
1050  CONTINUE
C---DISTANCE/ANGLES ROUTINE
C
C---START ATOM CYCLE
      JB=JP
      DO 2250 JA=1,NATOM
      JQ=JO-1
      JR=0
      JZ=0
      M=JB+4
      N=JB+6
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1100)STORE(JB),STORE(JB+1),(STORE(K),K=M,N)
      ENDIF
1100  FORMAT(////,' Distances about atom  ',A4,F5.0,10X,'X/A =',F8.4,
     2 5X,'Y/B =',F8.4,5X,'Z/C =',F8.4/)
      JE=JP
      DO 1650 JD=1,NATOM
      STORE(JE+2)=RDIST(JE+7,JB+7)
      STORE(JE+3)=RDIST(JE+10,JB+10)
      IF(JD-JA)1150,1600,1150
1150  IF(STORE(JE+2)-DA)1200,1200,1250
1200  JQ=JQ+1
      ISTORE(JQ)=JE
      JR=JR+1
      IKEY(JR)=JD
1250  IF(JD-JA)1600,1600,1300
1300  IF(STORE(JE+2)-DL)1350,1350,1600
1350  IF(JZ)1400,1400,1500
1400  JZ=1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1450)
      ENDIF
1450  FORMAT(2X,'Code',4X,'Atom',2X,'Serial',/)
1500  CONTINUE
      JU=JE+3
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1550)JD,(STORE(J),J=JE,JU)
      ENDIF
1550  FORMAT(1X,I4,5X,A4,F7.0,2X,2F10.3)
1600  CONTINUE
      JE = JE + ISTEP
1650  CONTINUE
      IF(DA-0.001)2200,2200,1700
1700  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1750)STORE(JB),STORE(JB+1)
      ENDIF
1750  FORMAT(//,' Angles about atom  ',A4,F5.0/)
      IF(JR-1)2200,2200,1800
1800  CONTINUE
      JL=1
      JS=JO
1850  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1450)
      ENDIF
      JK=JL
      JE=ISTORE(JS)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1900)IKEY(JK),STORE(JE),STORE(JE+1)
      ENDIF
1900  FORMAT(1X,I4,5X,A4,F7.0,2X,5(F10.2,F8.2))
      JW=JS+1
      DO 2000 JM=JW,JQ
      JE=ISTORE(JM)
      JT=JQ
      JV=MIN0(JM-1,JS+4)
      JK=JK+1
      DO 1950 JN=JS,JV
      JF=ISTORE(JN)
      D=RDIST(JE+7,JF+7)
      E=RDIST(JE+10,JF+10)
      JT=JT+2
      STORE(JT-1)=RANGLE(STORE(JE+2),D,STORE(JF+2))
      STORE(JT)=RANGLE(STORE(JE+3),E,STORE(JF+3))
1950  CONTINUE
      JU=JQ+1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1900)IKEY(JK),STORE(JE),STORE(JE+1),(STORE(K),K=JU,JT)
      ENDIF
2000  CONTINUE
      JU=MIN0(JK-1,JL+4)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2050)(IKEY(M),M=JL,JU)
      ENDIF
2050  FORMAT(/2X,'Code',11X,5(15X,I3))
      JS=JS+5
      IF(JQ-JS)2200,2200,2100
2100  JL=JL+5
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2150)
      ENDIF
2150  FORMAT(//,' Continuation',/)
      GOTO 1850
2200  CONTINUE
      JB = JB + ISTEP
2250  CONTINUE
      RETURN
      END
C
CODE FOR RDIST
      FUNCTION RDIST(MA,MB)
C--CALCULATES DISTANCE BETWEEN TWO ATOMS WHOSE ORTHOGONAL COORDINATES
C   ARE STORED FROM MA AND FROM MB
C
\STORE
\XWORK
C
      X=STORE(MB)-STORE(MA)
      Y=STORE(MB+1)-STORE(MA+1)
      Z=STORE(MB+2)-STORE(MA+2)
      RDIST=SQRT(X*X+Y*Y+Z*Z)
      RETURN
      END
C
CODE FOR RANGLE
      FUNCTION RANGLE(D1,D2,D3)
C---CALCULATES ANGLE A-B-C WHERE A-B=D1, B-C=D3, A-C=D2
C
\XWORK
\XCONST
C
      U=-(D2*D2-D1*D1-D3*D3)/(2.*D1*D3)
      T=180.*ACOS(U)/PI
      IF(T)1000,1050,1050
1000  T=T+360.
1050  IF(T-180.)1150,1150,1100
1100  T=360.-T
1150  RANGLE=T
      RETURN
      END
C
CODE FOR RLTNT
      SUBROUTINE RLTNT
C
      DOUBLE PRECISION DAA , DAR , DAI , DWE , DAS
C
      DIMENSION IQ1(1),IB1(1),IW(21)
      DIMENSION WE(27)
C
\STORE
\XWORK
\XUNITS
\XSSVAL
\XRTLSC
      COMMON /DRWORK/DAA(20,20),DAR(21),DAI(20,20),DWE(21),DAS(20)
\XCHARS
\XIOBUF
C
C
      EQUIVALENCE (IW(1),AA(1,1))
      EQUIVALENCE (IB1(1),IB),(IQ1(1),IQ)
C
      EQUIVALENCE (WE(1), WA(1,1))
C--EXTRACT THE LATENT ROOTS AND VECTORS OF THE NORMAL MATRIX
      M=0
      CALL F02ABF(DAA,20,20,DAR,DAI,20,DWE,M)
      DO 900 I=1,20
      AR(I)=SNGL(DAR(I))
      DO 800 J=1,20
      AI(J,I)=SNGL(DAI(J,I))
      AA(J,I)=SNGL(DAA(J,I))
800   CONTINUE
900   CONTINUE
C--TRANSFORM THE R.H.S.
      CALL XMLTTM(AI,AB,WE,20,20,1)
      AR(21)=AR(20)
      L=0
C--LOOP OVER EACH EIGENVALUE AND CHECK ITS SIZE AND RATIO TO THE LAST
      DO 1250 I=1,20
      J=21-I
      IF(AR(J)-TESTEV)1000,1000,1150
C--THE EIGENVALUE HAS TOO SMALL A VALUE
1000  CONTINUE
      L=J
      DO 1050 K=1,J
      WE(K)=0.
1050  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1100)J, IB, IQ1(1)
      ENDIF
      WRITE ( NCAWU, 1099)
1100  FORMAT(//' CRYSTALS is having difficulties withe the analysis',//
     1 ' The inverse of the eigenvalues from 1 to ',I2,
     2 '  have been set to zero', A1,'and marked by a ''',A1,
     3 ''' in the listing below')
      WRITE ( CMON, 1099) J
      CALL XPRVDU(NCVDU, 4,0)
1099  FORMAT(/' CRYSTALS is having difficulties with the the analysis',
     1 /1X,I2,' eigenvalues undefined. See the main listing file'/)
      GOTO 1300
C--CHECK THE RATIO TO THE LAST
1150  CONTINUE
      IF(J-20)1155,1170,1170
1155  CONTINUE
      IF(AR(J)/AR(J+1)-TESTER)1000,1000,1160
1160  CONTINUE
C----- SHOULD WE REJECT THIS ANYWAY
      IF(NDEL) 1200,1200,1170
1170  CONTINUE
      DO 1180 K=1,NDEL
      IF(J-JDEL(K)) 1180,1000,1180
1180  CONTINUE
C--COMPUTE THE TERM FOR THIS CORRECT VALUE
1200  CONTINUE
      WE(J)=WE(J)/AR(J)
1250  CONTINUE
C--CHECK IF THE EIGENVALUES AND VECTORS SHOULD BE PRINTED
      IF(IPRINT)1650,1650,1300
C--PRINT THE VALUES
1300  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1350)
      ENDIF
1350  FORMAT(//,' Eigenvalues and eigenvectors of the normal matrix',
     2 4X,'(Vector components multiplied by 1000)',//,1X,21X,
     3 'T11  T22  T33  T23  T13  T12  L11  L22  L33  L23  L13  L12',
     4 '  S11  S12  S13  S21  S22  S23  S31  S32',/)
      DO 1600 J=1,20
      DO 1400 I=1,20
1400  IW(I)=NINT(1000.*AI(I,J))
      CALL XMOVE(IB1(1),IW(21),1)
C--CHECK IF WE HAVE EXHAUSTED THE DELETED EIGENVALUES
      IF(L-J)1500,1450,1450
C--THIS ONE WAS DELETED
1450  CONTINUE
      CALL XMOVE(IQ1(1),IW(21),1)
C--PRINT THE VALUES
1500  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1550)J,AR(J),IW(21),(IW(K),K=1,20)
      ENDIF
1550  FORMAT(1X,I3,E12.3,1X,A1,2X,20I5)
1600  CONTINUE
C---TRANSFORM BACK TO ORIGINAL PARAMETER SET
1650  CONTINUE
      CALL XMLTMM(AI,WE,AR,20,20,1)
      RETURN
      END
