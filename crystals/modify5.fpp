C $Log: not supported by cvs2svn $
C Revision 1.24  2002/05/15 10:13:26  richard
C New EDIT command - GUISELECT, works like select and typechange, but doesn't
C modify L5, just selects the atoms in the window.
C e.g. #EDIT/GUISEL SPARE LT 40/END selects all atoms where spare < 40.
C Warning: if you execute a command that changes list 5 in the same #EDIT
C block the selections will be lost on END, as the L5 is updated.
C
C Revision 1.23  2002/05/08 08:51:50  richard
C New EDIT directive GRAPH OF=SPARE
C plots a graph of whatever is in the SPARE column in L5. (You need to have
C an appropriate plot window open or nothing happens.)
C
C Revision 1.22  2002/01/09 14:44:38  Administrator
C correct caption for shifted atoms
C
C Revision 1.21  2001/11/12 17:03:11  Administrator
C enable printing of PARTs from LIST 5
C
C Revision 1.20  2001/04/30 11:50:16  ckpgroup
C fix-up omitted rflections when re-indexing matrix has non-integral results' read6.src
C
C Revision 1.19  2001/03/16 16:54:18  CKP2
C fis split atoms
C
C Revision 1.18  2001/02/26 10:29:07  richard
C Added changelog to top of file
C
C
CODE FOR XMOD05
      SUBROUTINE XMOD05
C--SUBROUTINE TO ALTER THE LIST 5 STORED
C
C        THIS ROUTINE ALLOWS THE USER TO EDIT A LIST 5 OR 10. THE
C      OUTPUT LIST CAN BE EITHER A LIST 5 OR 10. DIRECTIVES ARE
C      EXECUTED AS THEY ARE TYPED IN.
C
C        A NEW LIST WILL BE CREATED ONLY IF THE OLD LIST IS CHANGED,
C      OR THE LIST TYPE IS CHANGED. IN INTERACTIVE MODE A NEW LIST
C      WILL BE CREATED EVEN IF THERE ARE ERRORS UNLESS THE USER ENDS
C      WITH A 'QUIT' DIRECTIVE. IN OTHER MODES, NO NEW LIST IS CREATED
C      IF AN ERROR OCCURS.
C
C
C      VERSION 3A        OCTOBER 1977
C              3.10      AUGUST 1983            DJW
C                              MONITOR CHANGES MADE TO LIST 5. ADD
C                              UEQUIV INSTRUCTION.
C
C      VERSION 4.00      AUGUST 1983            PWB
C                              EXECUTE SINGLE DIRECTIVES AS THEY ARE
C                              TYPED IN.
C              4.01      AUGUST 1983            PWB
C                              'READ' REPLACED BY 'ATOM'
C              4.02      SEPTEMBER 1983         PWB
C                              ERROR HANDLING RATIONALISED. KEEP/MOVE
C                              REWRITTEN
C              4.03      APRIL 1984             PWB (CRYSTALS ISSUE 7)
C                              LIST DIRECTIVES INDICATES KEPT ATOMS
C                              AND OTHER MINOR MAINTENANCE
C              4.04      MAY 1984               PWB
C                              CORRECTION TO DIVIDE DIRECTIVE
C                              CHANGE CALL TO 'XLXINI'
C              4.05      MAY 1984               PWB
C                              CHANGE CALL TO 'XMDMON'
C                              MONITOR CHANGES TO OVERALL PARAMETERS
C                              ALLOW ARITHMETIC ON OVERALL PARAMETERS
C              4.06      JULY 1984              PWB
C                              ADD 'SORT' DIRECTIVE
C              4.07      AUGUST 1984            PWB
C                              CORRECTION TO ROTATE. ATOM NAMES ARE
C                              REQUIRED
C              4.08      AUGUST 1984            PWB
C                              MOVE/KEEP ROUTINE ( KMDMOV ) REWRITTEN
C              5.02      DECEMBER 1996          DJW
C                              PERTURB
C                        FEB 97 GRAPHICS DATA BASE
C
C              5.10      NOV 98 lUDGER SCHROEDERS EDITS
C              5.11      APR 99  GUI UPDATE FLAG
C              5.12      JAN 00  'RESET' ADDED
C
C
C      SOME VARIABLES USED ( COMMON BLOCK XMDCOM ) :-
C
C
C       MONLVL      MONITOR LEVEL
C            0      NO MONITORING
C            1      LOW LEVEL MONITORING
C            2      NORMAL LEVEL MONITORING
C            3      HIGH LEVEL MONITORING
C
C       ICHNG       LIST CHANGE FLAG
C            0      NO CHANGES TO LIST
C           >0      CHANGES HAVE BEEN MADE
C
C
C       LA          INPUT LIST TYPE ( 5 / 10 )
C       LB          OUTPUT LIST TYPE ( 5 / 10 )
C
C       MKEEP       'KEEP' FLAG ( +VE = 'KEEP' HAS BEEN USED )
C       NKEEP       NUMBER OF KEPT ATOMS
C       IKEEP       POSITION TO WHICH NEXT 'KEPT' ATOM WILL BE MOVED
C       IPSEQ       POSITION TO WHICH NEXT 'MOVED' ATOM WILL BE MOVED
C
C
C       IQUIT       'QUIT' FLAG ( +VE = ABANDON EDITING. NO NEW FILE )
C       ICHKER      ERROR CHECK FLAG. ( +VE = NO NEW LIST IF ERRORS )
C
C
C      USAGE OF 'ISTORE'/'STORE'
C
C      PERMANENTLY ALLOCATED AREAS
C
C            START       SIZE        USAGE
C            -----       ----        -----
C            ICOMBF      50          COMMAND PROCESSING 'COMMON BLOCK'
C            ITEMP       20          ATOM MOVING
C            JTEMP       9           ROTATION OF T.F. S
C            KTEMP       9           ROTATION OF T.F. S
C            IMONBF      5           CONTROL AREA FOR MONITORING
C            MQ          100         ATOM HEADERS ETC.
C            MD            4000        LEXICAL INPUT BUFFER
C                                      (SET IN XLXINI)
C            -           ( VAR )     LIST 1
C            -           ( VAR )     LIST 2
C            -           ( VAR )     LIST 5 / 10 ( THIS AREA WILL BE
C                                    EXTENDED BY CREATE / ATOM / ETC. )
C
C      SCRATCH AREAS ( NFL IS ALWAYS RESET AFTER USE )
C
C            LTEMP       ( N5 )      'UEQUIV'
C            IFOUND      ( N5 )      'SORT' ( USED IN 'KMDSRT' )
C            IADDRS      ( N5 )      'SORT' ( USED IN 'KMDSRT' )
C            IBUFFR      ( MD5 )     'SORT' ( USED IN 'KMDSRT' )
C
C      THE LAST PERMANENT ITEM IS THE RECORD IN LIST 5/10 CONTAINING
C    THE ATOMIC PARAMETERS
C
C
C-C-C
C-C-C-DEFINITION OF VARIABLES FOR CHANGES BY LS
      REAL SUMUIJ,SUMOCC,SUMUISO,SIDI,SUMDI,MAXDI
      INTEGER NUMDISO,NFLSPEC
      character *20 ctemp
      DIMENSION XCF(3), VA(3), ROF(3,3), RCA(3,3), XWORKS(4)
C-C-C
C
C
C--
C----- THE INVERSE DIAGONAL MATRIX FOR TRANSFORMING UANISO
      DIMENSION DANISO(3)
\ISTORE
\ICOM12
C
      DIMENSION ICOND(6)
C----- KEYS FOR LOADED LISTS ONLY 3 AND 29 FOR NOW
      DIMENSION KLST(2)
C
\STORE
\XUNITS
\XSSVAL
\XLISTI
\XLST01
\XLST02
\XLST05
\XLST12
\XLST20
\XLST50
\XLEXIC
\XPDS
\XAPK
\XCONST
\XMDCOM
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
\QLST12
C
      INTEGER PEAK,QCENT
      INTEGER QSPHERE,QLINE,QRING
C
      DATA NWCOND/1/,NCOND/6/,LCOND/1/
      DATA ICOND(1)/'EQ  '/,ICOND(2)/'NE  '/,ICOND(3)/'LT  '/
      DATA ICOND(4)/'LE  '/,ICOND(5)/'GT  '/,ICOND(6)/'GE  '/
C
      DATA IMONSZ/5/
C
C----- LOOP COUNTER
      DATA ILOOP/0/
      DATA PEAK/'Q   '/,QCENT/'QC  '/
C-C-C-DEFINITION OF ATOM TYPE ABBREV. FOR SPECIALS
      DATA QSPHERE/'QS  '/,QLINE/'QL  '/,QRING/'QR  '/
C-C-C
C----- VERSION 510 INCLUDES ALL LUDGER SCHROEDERS CHANGES
      DATA IVERSN/512/
C
C -- **** INITIALISATION SECTION ****
      CALL XTIME1 (2)
C
C -- CLEAR LIST CHAIN ( XRSL IS NOT CALLED , AS THE INFORMATION IN
C    LIST 50 MUST REMAIN AVAILABLE FOR COMMAND PROCESSING THROUGHOUT
C    THIS ROUTINE )
C
      CALL XCSAE
C----- CLEAR LIST 5 ADDRESS TO INHIBIT GRAPHICS
      L5=0
      LA=0
      LB=0
CDJWAPR99 SET ILOOP TO INDICATE NO CHANGES YET
      ILOOP=0
C
C    THE LOADING OF LISTS ETC. IS LEFT UNTIL THE 'MODIFY' DIRECTIVE
C    IS READ IN.
C
C -- ALLOCATE COMMAND BUFFER
      IDIMBF=50
CMAR98
      ICOMBF=KSTALL(IDIMBF)
      CALL XZEROF (STORE(ICOMBF),IDIMBF)
C -- WORK SPACE FOR ROTATION OF U'S ETC.
      ITEMP=KSTALL(20)
      JTEMP=KSTALL(9)
      KTEMP=KSTALL(9)
C -- ALLOCATE CONTROL SPACE FOR MONITOR ROUTINES
      IMONBF=KSTALL(IMONSZ)
      CALL XZEROF (ISTORE(IMONBF),IMONSZ)
C -- SPACE FOR ATOM HEADERS
      MQ=KSTALL(100)
C -- RELATIVE POSITIONS IN COMMAND PROCESSING BLOCK
C -- THESE ARE THE COMMON BLOCK OFFSETS LESS 1
      IMDAT1=9
      IMDAT2=10
      IGTYPE=38
C -- NOTE - THE 'ATOM' DIRECTIVE REQUIRES A SPACE OF MD5 (=18) WORDS
C---- NEXT FREE ADDRESS IS 29.
      IMDATM=11
Cdjwapr99
C----- THE GUI LEVEL OFFSET AND DEFAULT VALUE (LOW/OFF)
      IMDGUI=35
      MONGUI=-1
C----- THE OFFSETS FOR THE INPUT/OUTPUT LIST NUMBERS
      IMDINP=36
      IMDOUT=37
C -- SET RECORD NUMBER FOR RECORD IN LIST 5 CONTAINING ATOMS
      IATREC=101
C -- SET LIST CREATION FLAGS
      IQUIT=0
      ICHKER=1
      IF (IQUN.EQ.JQUN) ICHKER=0
C -- INITIALISE INPUT PROCESSING
      CALL XLXINI (INEXTD,1)
C
\IDIM12
C
C--INDICATE THAT LIST 12 IS NOT TO BE USED
      DO 50 I=1,IDIM12
         ICOM12(I)=NOWT
50    CONTINUE
C
C
100   CONTINUE
CDJWAPR99{
      IF (MONGUI.GE.2) THEN
CDJWFEB97>
C      NOTE - MOVE THIS INTO XMDMON IF YOU WISH TO TRAP INDIVIDUAL
C      ATOM CHANGES
CRICAUG98> This bit crashes if you delete two atoms in a row.
CDJWAPR99 TRY TO FIX IT
CRICAUG98<
CDJWFEB97<
      END IF
CDJWAPR99}
C
C -- **** MAIN INSTRUCTION LOOP ****
C
C -- MAKE SURE THE BUFFER IS EMPTY
      CALL XMDMON (0,0,0,0,0,0,0,0,0,1,ISTORE(IMONBF))
C -- READ A SINGLE SET OF DIRECTIVES
      IDIRNM=KLXSNG(ISTORE(ICOMBF),IDIMBF,INEXTD)
      IF (IDIRNM.LT.0) GO TO 100
      IF (IDIRNM.EQ.0) GO TO 7000
C -- BRANCH ON REQUIRED FUNCTION
C    ( THE LINK TO THE 'MODIFY' DIRECTIVE SHOULD ALWAYS BE LAST )
C
C-C-C-INTRODUCTION OF ADDITIONAL DIRECTIVE-ADDRESSES FOR "SPECIALS"
      GO TO (650, 4700, 500,3000,5500,5500,5500,5500,6500,3650,
     1       3800,1000,1050, 900,1100, 400,5100, 100, 200, 300,
     2        250, 600,2700,2850,2300,1150,6950,6300,6800,3950,
     3       5450,4100,4300,4500,2900,350,15500, 460,1160, 150,
     4       8250), IDIRNM
      GO TO 8250
C
150   CONTINUE
C -- 'MODIFY' DIRECTIVE
C
C    THERE SHOULD ONLY BE ONE MODIFY DIRECTIVE, AMD IT WILL BE THE
C    FIRST ONE PROCESSED FOR EACH RUN OF THE ROUTINE.
C
C -- DETERMINE LIST NUMBERS
      IF (ISTORE(ICOMBF+IMDINP) .LE. 0) THEN
CDJWJAN2001 SET A LIST TYPE JUST IN CASE FIRST COMMAND IS AN ERROR
       LA = 5
       LB = 5
      ELSE
       LA=KTYP05(ISTORE(ICOMBF+IMDINP))
       LB=KTYP05(ISTORE(ICOMBF+IMDOUT))
      ENDIF
      IF ((LA.LE.0).OR.(LB.LE.0)) THEN
      WRITE(CMON,'(''No output list type given'')')
      CALL XPRVDU (NCVDU,1,0)
      GOTO 8200
      ENDIF
      IF (IERFLG.LT.0) GO TO 8200
C -- LOAD LISTS
      CALL XFAL01
      CALL XFAL02
C----- LOAD LIST 20 IF NOT ALREADY IN CORE
      IF (KHUNTR(20,0,IADDL,IADDR,IADDD,-1).NE.0) CALL XFAL20
      CALL XLDRO5 (LA)
      IF (IERFLG.LT.0) GO TO 8200
C----- SEE LIPSON & COCHRAN, EQN 302.3
      STORE(NFL)=COS(STORE(L1P1+3))
      STORE(NFL+1)=COS(STORE(L1P1+4))
      STORE(NFL+2)=COS(STORE(L1P1+5))
      STORE(NFL+3)=1.+2.*(STORE(NFL)*STORE(NFL+1)*STORE(NFL+2))-
     1(STORE(NFL)*STORE(NFL)+STORE(NFL+1)*STORE(NFL+1)+STORE(NFL+2)*
     2STORE(NFL+2))
      STORE(NFL+3)=SQRT(STORE(NFL+3))
      DANISO(1)=STORE(NFL+3)*STORE(L1P1)/SIN(STORE(L1P1+3))
      DANISO(2)=STORE(NFL+3)*STORE(L1P1+1)/SIN(STORE(L1P1+4))
      DANISO(3)=STORE(NFL+3)*STORE(L1P1+2)/SIN(STORE(L1P1+5))
C
C--- LOAD LIST 3 AND 29 INCASE WE NEED THEM LATER
      KLST(1)=-1
      KLST(2)=-1
      IF (KEXIST(3).GT.0) THEN
         IF (KHUNTR(3,0,IADDL,IADDR,IADDD,-1).NE.0) CALL XFAL03
         KLST(1)=1
      END IF
      IF (KEXIST(29).GT.0) THEN
         IF (KHUNTR(29,0,IADDL,IADDR,IADDD,-1).NE.0) CALL XFAL29
         KLST(2)=29
      END IF
C -- SET CHANGE FLAG
      ICHNG=0
      IF (LA.NE.LB) ICHNG=1
C -- SET INITIAL ADDRESSES , FLAGS , AND COUNTS FOR 'MOVE' AND 'KEEP'
      IPSEQ=L5
      IKEEP=L5
      MKEEP=-1
      NKEEP=0
C -- SET INITIAL MONITOR LEVEL
      MONLVL=2
Cdjwmay99 if is't a small strucuture, reset gui monitor as hi
      IF (N5.LE.50) MONGUI=+1
      N5A=N5
      GO TO 100
C
C
200   CONTINUE
C -- 'SAVE' DIRECTIVE
C
C    SAVE THE CURRENT LIST
      CALL XMDWLS
C -- RESET LIST FLAGS
      ICHNG=0
      MKEEP=-1
      NKEEP=0
      GO TO 100
C
C
250   CONTINUE
C -- 'QUIT' DIRECTIVE
C
C    ABANDON EDITING WITHOUT CREATING NEW LIST
C -- NEXT DIRECTIVE SHOULD BE 'END'
      IF (INEXTD.NE.0) GO TO 7200
      IQUIT=1
      GO TO 100
C
C
300   CONTINUE
C -- 'MONITOR' DIRECTIVE
C
C    CHANGE MONITOR LEVEL
      MONLVL=ISTORE(ICOMBF+IMDAT2)
      GO TO 100
C
350   CONTINUE
C -- 'GUI' DIRECTIVE
C
C    CHANGE MONITOR LEVEL
      MONGUI=ISTORE(ICOMBF+IMDGUI)
      GO TO 100
C
C
400   CONTINUE
C -- 'LIST' DIRECTIVE
C
C    CHANGE LISTING LEVEL
      LSTLVL=ISTORE(ICOMBF+IMDAT1)
      CALL XMDMON (L5,MD5,N5,1,1,1,LSTLVL,1,1,1,ISTORE(IMONBF))
C -- INDICATE TO THE USER WHICH ATOMS WILL BE 'KEPT'
      IF (LSTLVL.GT.0) THEN
         IF (MKEEP.GT.0) THEN
            IADDR=L5+(NKEEP-1)*MD5
            IF (ISSPRT.EQ.0) WRITE (NCWU,450) NKEEP,STORE(IADDR),
     1       STORE(IADDR+1)
            WRITE (NCAWU,450) NKEEP,STORE(IADDR),STORE(IADDR+1)
            WRITE (CMON,450) NKEEP,STORE(IADDR),STORE(IADDR+1)
            CALL XPRVDU (NCVDU,1,0)
450         FORMAT (1X,'The ',I5,' atoms up to ',A4,F5.0,' will be KEPT'
     1       )
         END IF
      END IF
      GO TO 100
C
C
460   CONTINUE
C -- 'GRAPH' DIRECTIVE
C
C     GET GRAPH TYPE LEVEL
      MGTYPE=ISTORE(ICOMBF+IGTYPE)

      WRITE(CMON,'(A,/,A,/,A)')
     1  '^^PL PLOTDATA _PARAM BARGRAPH ATTACH _VPARAM',
     1  '^^PL XAXIS TITLE ''Atoms''',
     1  '^^PL NSERIES=1 LENGTH=20 YAXIS TITLE ''fom'''
      CALL XPRVDU(NCVDU, 3,0)

      DO IPR = L5, L5+((N5-1)*MD5), MD5
        WRITE(CMON,'(A,A4,I5,A,F9.3)')
     1  '^^PL LABEL ''', ISTORE(IPR),NINT(STORE(IPR+1)), 
     2  ''' DATA ',      STORE(IPR+13)
        CALL XPRVDU(NCVDU, 1,0)
      END DO

      WRITE(CMON,'(A,/,A)') '^^PL SHOW','^^CR'
      CALL XPRVDU(NCVDU, 2,0)

      GO TO 100
C
C
500   CONTINUE
C -- 'READ' DIRECTIVE
C
C    THIS DIRECTIVE HAS BEEN SUPERSEDED BY 'ATOM' AND IS NO LONGER
C    SUPPORTED.
      IF (ISSPRT.EQ.0) WRITE (NCWU,550)
      WRITE (NCAWU,550)
      WRITE (CMON,550)
      CALL XPRVDU (NCVDU,1,0)
550   FORMAT (1X,'The READ directive has been replaced by ATOM')
      CALL XERHND (IERWRN)
      GO TO 100
C
C
600   CONTINUE
C -- 'ATOM' DIRECTIVE
C
C    APPEND THE SPECIFIED ATOMIC PARAMETERS TO LIST 5
      I=KSTALL(MD5)
      IENDL5=L5+(MD5*N5)
      CALL XMOVE (STORE(ICOMBF+IMDATM),STORE(IENDL5),MD5)
      N5=N5+1
      CALL XUDRH (LB,IATREC,0,N5)
      ICHNG=ICHNG+1
      GO TO 100
C
C
650   CONTINUE
C -- 'DELETE' INSTRUCTION
C
C -- CHECK THERE IS SOME DATA
      IF (ME.LE.0) GO TO 7300
700   CONTINUE
C -- CHECK FOR MORE DATA. READ IT. CHECK NO PARAMETERS SPECIFIED.
      IF (KOP(8).LT.0) GO TO 100
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C
C -- UPDATE MODIFICATION FLAGS AND MONITOR ATOMS
      ICHNG=ICHNG+1
      CALL XMDMON (M5A,MD5A,N5A,1,1,2,1,MONLVL,2,0,ISTORE(IMONBF))
      JV=M5A+N5A*MD5A
      JW=L5+N5*MD5
C--CHECK IF THE ATOMS ARE AT THE BOTTOM OF THE STACK
      IF (JV-JW) 750,800,800
C--MOVE THE ATOMS AFTER THE DELETED ATOMS UP
750   CONTINUE
      CALL XMOVE (STORE(JV),STORE(M5A),JW-JV)
C--ADJUST THE NUMBER OF ATOMS IN THE LIST
800   CONTINUE
      N5=N5-N5A
C--CHECK IF WE HAVE DELETED 'KEPT' ATOMS
      L=(M5A-L5)/MD5A
      IF (L-NKEEP) 850,700,700
C--THE ATOMS DELETED HAVE BEEN 'KEPT'
850   CONTINUE
      NKEEP=MAX0(0,NKEEP-N5A)
      IKEEP=L5+NKEEP*MD5
      GO TO 700
C
C
900   CONTINUE
C -- 'AFTER' DIRECTIVE
C
C -- CHECK FOR DATA. READ ATOMS. CHECK ONLY ONE ATOM
      IF (ME.LE.0) GO TO 950
      IF (KATOMU(LN).LT.0) GO TO 7100
      IF (N5A.NE.1) GO TO 7900
C -- NEXT ATOM GOES AFTER THIS ONE
      IPSEQ=M5A+MD5A
      GO TO 100
950   CONTINUE
C -- BLANK CARD. THIS REPRESENTS 'AFTER BEGINNING OF LIST'
      IPSEQ=L5
      GO TO 100
C
C
1000  CONTINUE
C -- 'KEEP' DIRECTIVE
C
      MKEEP=1
      ISTAT=KMDMOV(IKEEP,1,8)
      IF (ISTAT.LT.0) GO TO 7100
      GO TO 100
C
C
1050  CONTINUE
C -- 'MOVE' DIRECTIVE
C
      ISTAT=KMDMOV(IPSEQ,0,9)
      IF (ISTAT.LT.0) GO TO 7100
      GO TO 100
C
C
1100  CONTINUE
C -- 'SELECT' DIRECTIVE
C
C----- SET SELECT/TYPECHANGE FLAG TO 'SELECT'
      ISTCF=-1
      GO TO 1200
C
C
1150  CONTINUE
C      'TYPECHANGE'     SET FLAG
      ISTCF=1
      GO TO 1200

1160  CONTINUE
C      'GUISELECT'     SET FLAG
      ISTCF=0
      GO TO 1200
C
1200  CONTINUE
C -- CHECK FOR SOME DATA
      IF (ME.LE.0) GO TO 7300
1250  CONTINUE
C -- READ ATOMIC OR OVERALL PARAMETER. CHECK ONLY ONE PARAMETER
      IF (KOP(8).LT.0) GO TO 100
      IF (KCORCH(LN).GT.0) GO TO 1300
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.1) GO TO 7600
1300  CONTINUE
C -- COMPUTE PARAMETER ADDRESS
      JU=ISTORE(MQ+6)+MQ
CDJW JAN2000 JVO IS THE EXTENDED PARAMETER NUMBER
      JVO=ISTORE(JU+1)
      JV = JVO -1
C--SEARCH FOR THE CONDITIONAL ARGUMENT
      JT=KFDOPD(1,NWCOND,ICOND,NCOND,LCOND)
C--CHECK FOR SUCCESS
      IF (JT.LE.0) GO TO 7100
C--CHECK THE PARAMETER NUMBER
      IF (JV) 1350,1350,1400
C--THIS IS 'TYPE'  -  ONLY FIRST CONDITIONALS MAY BE USED
1350  CONTINUE
      IF (JT.GE.3) GO TO 7700
C--CHECK FOR AN ALPHA-NUMBERIC ARGUMENT
      ISTAT=KFDOPD(-1,NWCOND,ICOND,NCOND,LCOND)
      IF (ISTAT.LE.0) GO TO 7100
C--ARGUMENT FOUND  -  MOVE IT ACROSS
      CALL XMOVE (STORE(MF+2),APD(1),1)
      MF=MF+LK2
      ME=ME-1
      GO TO 1450
C--NUMERIC ARGUMENT  -  READ THE NUMBER
1400  CONTINUE
CDJWJAN00 BEFORE WE READ THE NUMBER, FIDDLE WITH THE
C  PARAMETER OFF SET FOR EXTENDED KEYS
      IF (JVO .GE. NKAS) JV = JV - NKAO
      JT=JT+2
      IF (KFDNUM(APD(1)).LT.0) GO TO 7100
1450  CONTINUE
C----- CHECK FOR ATOM TYPE IF MODE IS TYPE CHANGE
      IF (ISTCF.EQ.1) THEN
         IF (ME.LE.0) GO TO 7500
         IF (ISTORE(MF).GT.0) GO TO 7500
         ITYPE=ISTORE(MF+2)
         ME=ME-1
         MF=MF+LK2
      END IF
C--CHECK IF THERE ARE ANY ATOMS
      IF (N5A) 1250,1250,1500
C--LOOP OVER EACH ATOM IN THE LIST
1500  CONTINUE
      DO 2200 JW=1,N5A
C--GENERATE THE MOVED PARAMETERS
         IF (KATOMS(MQ,M5A,ITEMP).LT.0) GO TO 7100
C--MOVE THE PARAMETERS BACK
         CALL XMOVE (STORE(ITEMP),STORE(M5A),MD5A)
C--SET THE PARAMETER ADDRESS
         JU=JV+M5A
C--BRANCH ON THE TYPE OF CONDITION
         GO TO (1550,1600,1650,1700,1750,1800,1850,1900,8250),JT
         GO TO 8250
C--ALPHA-NUMERIC 'EQUAL'
1550     CONTINUE
         IF (KCOMP(1,STORE(JU),APD(1),1,1)) 1950,1950,2150
C--ALPHA-NUMERIC 'NOT EQUAL'
1600     CONTINUE
         IF (KCOMP(1,STORE(JU),APD(1),1,1)) 2150,2150,1950
C--NUMERIC 'EQUAL'
1650     CONTINUE
         IF (ABS(STORE(JU)-APD(1))-ZERO) 2150,1950,1950
C--NUMERIC 'NOT EQUAL'
1700     CONTINUE
         IF (ABS(STORE(JU)-APD(1))-ZERO) 1950,2150,2150
C--'LESS THAN'
1750     CONTINUE
         IF (STORE(JU)-APD(1)) 2150,1950,1950
C--'LESS THAN OR EQUAL'
1800     CONTINUE
         IF (STORE(JU)-APD(1)) 2150,2150,1950
C--'GREATER THAN'
1850     CONTINUE
         IF (STORE(JU)-APD(1)) 1950,1950,2150
C--'GREATER THAN OR EQUAL'
1900     CONTINUE
         IF (STORE(JU)-APD(1)) 1950,2150,2150
C--ELIMINATE THE CURRENT ATOM
1950     CONTINUE
C----- CHECK IF TYPECHANGE
         IF (ISTCF.GE.0) THEN
C-----  NOTHING TO BE DONE - ACCEPT ATOM
            M5A=M5A+MD5A
            GO TO 2200
         END IF
         NEW=1
C--COMPUTE THE NUMBER OF ATOMS TO BE MOVED UP
         L=(M5A-L5)/MD5A
         N=N5-L-1
C--CHECK IF THERE ARE ANY ATOMS TO MOVE
         IF (N) 2050,2050,2000
C--MOVE THE ATOMS UP
2000     CONTINUE
         M=M5A+MD5A
         CALL XMOVE (STORE(M),STORE(M5A),N*MD5A)
C--DECREMENT THE NUMBER OF ATOMS
2050     CONTINUE
         N5=N5-1
C--CHECK IF WE HAVE ELIMINATED A 'KEPT' ATOM
         IF (L-NKEEP) 2100,2200,2200
C--ADJUST THE NUMBER OF 'KEPT' ATOMS
2100     CONTINUE
         NKEEP=MAX0(0,NKEEP-1)
         IKEEP=L5+NKEEP*MD5
         GO TO 2200
C--UPDATE FOR THE NEXT ATOM
2150     CONTINUE
C----- CHECK IF TYPECHANGE
         IF (ISTCF.EQ.1) THEN
C----- TYPE CHANGE
            CALL XMOVEI (ITYPE,ISTORE(M5A),1)
            CALL XMDMON (M5A,MD5A,1,1,1,4,1,MONLVL,2,0,ISTORE(IMONBF))
            ICHNG=ICHNG+1
         ELSE IF ( ISTCF .EQ. 0 ) THEN
            WRITE(CMON,'(A,A,I5,A)')'^^CO SET MODEL01 SELECT ''',
     1      ISTORE(M5A), NINT(STORE(M5A+1)), ''' YES'
            CALL XPRVDU(NCVDU,1,0)
            CALL XMDMON (M5A,MD5A,1,1,1,4,1,MONLVL,2,0,ISTORE(IMONBF))
         ELSE 
            CALL XMDMON (M5A,MD5A,1,1,1,10,1,MONLVL,2,0,ISTORE(IMONBF))
            ICHNG=ICHNG+1
         END IF
         M5A=M5A+MD5A
2200  CONTINUE
      GO TO 1250
C
C
C
2300  CONTINUE
C -- 'RENAME' DIRECTIVE
      IF (ME.LE.0) GO TO 7300
2350  CONTINUE
C -- READ ATOM SPEC. NO PARAMETERS PERMITTED
      II=KATOMH(MQ)
C--CHECK THAT AN ATOM HAS BEEN FOUND CORRECTLY
      IF (II) 2400,2450,2500
C--END OF CARD  -  BACKSPACE ONE ARGUMENT
2400  CONTINUE
      MF=MF-LK2
C--ERROR IN ATOM DEFINITION
2450  CONTINUE
      GO TO 7500
C--CHECK FOR THIS ATOM IN LIST 5
2500  CONTINUE
      M5A=L5
      N5A=N5
      L12A=0
      IF (KATOMF(STORE(MQ+2),M5A,N5A,MD5A,L12A)) 2550,2600,2550
C--ATOM NOT IN LIST 5
2550  CONTINUE
      II=MQ+2
      CALL XPCLNN (LN)
      CALL XMISL5 (1,ISTORE(MQ+1),II)
      GO TO 8000
2600  CONTINUE
C -- CHECK  NO PARAMETERS GIVEN
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C--GENERATE THE NEW ATOM IN WORKSPACE
      IF (KATOMS(MQ,M5A,ITEMP).LT.0) GO TO 7100
C----- SAVE ADDRESS IN LIST 5
      M5B=M5A
      MD5B=MD5A
C--PUT IT BACK IN THE LIST 5
      CALL XMOVE (STORE(ITEMP),STORE(M5A),MD5A)
C----- LOOK FOR NEW ATOM NAME - IT MUST NOT ALREADY EXIST
      II=KATOMH(MQ)
C--CHECK THAT AN ATOM HAS BEEN FOUND CORRECTLY
      IF (II) 2400,2450,2650
C--CHECK FOR THIS ATOM IN LIST 5
2650  CONTINUE
      M5A=L5
      N5A=N5
      L12A=0
      IF (KATOMF(STORE(MQ+2),M5A,N5A,MD5A,L12A).EQ.0) GO TO 8100
C--ATOM NOT IN LIST 5
C----- MOVE OVER THE NEW NAME AND SERIAL
      CALL XMOVE (STORE(MQ+2),STORE(M5B),2)
      CALL XMDMON (M5B,MD5B,1,1,1,4,3,MONLVL,2,0,ISTORE(IMONBF))
      ICHNG=ICHNG+1
C--CHECK FOR MORE ATOMS
      IF (KOP(8).LT.0) GO TO 100
      GO TO 2350
C
C
2700  CONTINUE
C -- 'SORT' DIRECTIVE
C
      I=+1
      ISTAT=KMDSRT(I)
2750  CONTINUE
      IF (ISTAT.LT.0) GO TO 7100
C -- IF 'KEEP' HAS BEEN USED, RESET NOW
      IF (MKEEP.GT.0) THEN
         IF (ISSPRT.EQ.0) WRITE (NCWU,2800)
         WRITE (NCAWU,2800)
         WRITE (CMON,2800)
         CALL XPRVDU (NCVDU,1,0)
2800     FORMAT (1X,'Previous KEEP instruction(s) cancelled')
         CALL XERHND (IERWRN)
         MKEEP=-1
         IKEEP=L5
         NKEEP=0
      END IF
      ICHNG=ICHNG+1
      CALL XMDMON (L5,MD5,N5,1,1,12,1,MONLVL,2,0,ISTORE(IMONBF))
      GO TO 100
C
C
2850  CONTINUE
C----- 'DSORT' - DECREASING VALUE SORT
C
      I=-1
      ISTAT=KMDSRT(I)
      GO TO 2750
C
C
C-C-C
2900  CONTINUE
C-C-C-'REFORMAT'-DIRECTIVE
C-C-C-(OLD VERSION LIST 5 IS TRANSFORMED INTO NEW VERSION LIST 5)
      N5A=N5
      M5A=L5
C-C-C-LOOP OVER ALL ATOMS OF LIST 5
      DO 2950 JU=1,N5A
C-C-C-CHECK FOR TYPE OF ATOM
         IF (STORE(M5A+3).GE.UISO) THEN
            STORE(M5A+7)=STORE(M5A+3)
            CALL XZEROF (STORE(M5A+8),5)
            STORE(M5A+3)=1.0
         END IF
C-C-C-NEXT ATOM IN LIST 5
         M5A=M5A+MD5A
2950  CONTINUE
C
C
3000  CONTINUE
C -- 'CHANGE' DIRECTIVE
C
      IF (ME.LE.0) GO TO 7300
3050  CONTINUE
C -- CHECK FOR MORE DATA
      IF (KOP(8).LT.0) GO TO 100
C -- CHECK FOR AN OVERALL PARAMETER
      ISCALE=KOVPCH(I)
      IF (ISCALE.LT.0) GO TO 7100
      IF (ISCALE.EQ.0) GO TO 3150
      L5A=M5A
C -- OVERALL PARAMETER FOUND. A NUMBER MUST BE READ NOW
      IF (ME.LE.0) GO TO 7500
      IF (KSYNUM(Z).NE.0) GO TO 7500
      ME=ME-1
      MF=MF+LK2
      DO 3100 I=1,N5A
         STORE(M5A)=Z
         M5A=M5A+1
3100  CONTINUE
      CALL XMDMON (L5A,1,N5A,ISTORE(MQ+2),ISCALE+1,4,3,MONLVL,2,0,
     1ISTORE(IMONBF))
C
      ICHNG=ICHNG+1
      GO TO 3050
3150  CONTINUE
C -- CHECK FOR A GLOBAL PARAMETER. LOOKS LIKE AN ATOM SPEC
      IF (KCORCH(I).GT.0) GO TO 3200
C -- READ ATOM SPEC. EITHER NO PARAMETER OR ONE PARAMETER PLUS VALUE
      IF (KATOMU(LN).LE.0) GO TO 7100
      MP=-1
C -- CHECK IF NO PARAMETERS
      IF (ISTORE(MQ+5).LE.0) GO TO 3400
C -- CHECK IF ONE PARAMETER
      IF (ISTORE(MQ+5).GT.1) GO TO 7600
C -- CHECK DATA FOLLOWS
3200  CONTINUE
      IF (ME.LE.0) GO TO 7500
      MP=1
      JU=ISTORE(MQ+6)+MQ
CDJW JAN2000 JVO IS THE EXTENDED PARAMETER NUMBER
      JVO=ISTORE(JU+1)
      JV = JVO-1
C--CHECK THE TYPE
cdjwjun02
      write(ctemp,'(a,i9)')' jvo = ', jvo
      call zmore(ctemp,0)
c      IF (JV) 3250,3250,3300
      if ((jv .eq. 0) .or.(jv.eq.17)) then
C--ALPHA-NUMERIC VALUE EXPECTED
3250  CONTINUE
      IF (ISTORE(MF).GE.0) GO TO 7500
      CALL XMOVE (STORE(MF+2),APD(1),1)
      GO TO 3350
      endif
C--NUMBER EXPECTED
3300  CONTINUE
CDJWJAN00 BEFORE WE READ THE NUMBER, FIDDLE WITH THE
C  PARAMETER OFF SET FOR EXTENDED KEYS
      IF (JVO .GE. NKAS) JV = JV - NKAO
      IF (KSYNUM(APD(1)).NE.0) GO TO 7500
C--INCREMENT THE POINTERS
3350  CONTINUE
      ME=ME-1
      MF=MF+LK2
C--CHECK IF THERE ARE ANY ATOMS TO BE MOVED
3400  CONTINUE
      IF (N5A) 3050,3050,3450
C--PROCESS THE ATOMS
3450  CONTINUE
      DO 3600 JU=1,N5A
C--MOVE THE ATOM ITS NEW POSITION
         IF (KATOMS(MQ,M5A,ITEMP).LT.0) GO TO 7100
C--PUT IT BACK IN THE LIST
         CALL XMOVE (STORE(ITEMP),STORE(M5A),MD5A)
C--CHECK IF THERE IS A PARAMETER TO BE CHANGED
         IF (MP) 3550,3500,3500
C--COMPUTE THE PARAMETER ADDRESS
3500     CONTINUE
         JT=M5A+JV
C-C-C
C-C-C-CHECK WHETHER FLAG IS CHANGED
C-C-C
         IF (JV.EQ.3) THEN
C-C-C-DISTINCTION BETWEEN DIFFERENT TARGETS FOR FLAG
            IF (NINT(APD(1)).EQ.0) THEN
C-C-C
C-C-C-ATOM OR SPECIAL FIGURE SHALL BECOME ANISOTROPIC ATOM
C-C-C
C-C-C-SUMMARIZE THE ABSOLUTE VALUES OF 5 LAST U[IJ]
               SUMUIJ=ABS(STORE(M5A+8))+ABS(STORE(M5A+9))+ABS(STORE(M5A+
     1          10))+ABS(STORE(M5A+11))+ABS(STORE(M5A+12))
C-C-C-CHECK ATOM BEING NON-ANISO OR ANISO WITHOUT VALUES FOR U[IJ]
               IF ((STORE(JT).GE.UISO).OR.((STORE(JT).LT.UISO).AND.
     1          (SUMUIJ.LT.0.0005))) THEN
C-C-C-CHECK STARTING VALUE TO GET U[IJ] AND RESET IT POSSIBLY
C-C-C-TO STANDARD VALUE
                  IF (STORE(M5A+7).LT.UISO) THEN
                     STORE(M5A+7)=0.05
                  END IF
C-C-C-GET U[IJ] FROM U[ISO],"U[ISO]" OR STANDARD VALUE
                  STORE(M5A+8)=STORE(M5A+7)
                  STORE(M5A+9)=STORE(M5A+7)
                  STORE(M5A+10)=STORE(M5A+7)*STORE(L1C)
                  STORE(M5A+11)=STORE(M5A+7)*STORE(L1C+1)
                  STORE(M5A+12)=STORE(M5A+7)*STORE(L1C+2)
               END IF
            ELSE IF (NINT(APD(1)).EQ.1) THEN
C-C-C
C-C-C-ATOM OR SPECIAL FIGURE SHALL BECOME ISOTROPIC ATOM
C-C-C
C-C-C-CHECK WHETHER ATOM WAS ANISO UNTIL NOW
               IF (STORE(JT).LT.UISO) THEN
C-C-C-SET UP WORK SPACE
                  LTEMP=KSTALL(4)
C-C-C-FIND U[EQUIV]
                  CALL XPRAXI (1,1,LTEMP,M5A,MD5A,1,0,0)
                  STORE(M5A+7)=STORE(LTEMP)
C-C-C-RETURN WORKSPACE
                  CALL XSTRLL (LTEMP)
               END IF
C-C-C-CHECK U[ISO] AND RESET IT POSSIBLY TO STANDARD VALUE
               IF (STORE(M5A+7).LT.UISO) THEN
                  STORE(M5A+7)=0.05
               END IF
C-C-C-SET UNUSED U[IJ]'S TO ZERO
               CALL XZEROF (STORE(M5A+8),5)
            ELSE IF (NINT(APD(1)).EQ.2) THEN
C-C-C
C-C-C-ATOM OR SPECIAL FIGURE SHALL BECOME SPHERE
C-C-C
C-C-C-CHECK WHETHER ATOM WAS ANISO UNTIL NOW
               IF (STORE(JT).LT.UISO) THEN
C-C-C-SET UP WORK SPACE
                  LTEMP=KSTALL(4)
C-C-C-FIND U[EQUIV]
                  CALL XPRAXI (1,1,LTEMP,M5A,MD5A,1,0,0)
                  STORE(M5A+7)=STORE(LTEMP)
C-C-C-RETURN WORKSPACE
                  CALL XSTRLL (LTEMP)
               END IF
C-C-C-CHECK ATOM NOT BEING SPHERE OR BEING SPHERE WITHOUT SIZE-VALUE
               IF ((NINT(STORE(JT)).NE.2).OR.((NINT(STORE(JT)).EQ.2).
     1          AND.(STORE(M5A+8).LT.0.0005))) THEN
C-C-C-SET SPECIAL PARAMETER TO STANDARD VALUE
                  STORE(M5A+8)=1.0
               END IF
C-C-C-CHECK "U[ISO]" AND RESET IT POSSIBLY TO STANDARD VALUE
               IF (STORE(M5A+7).LT.UISO) THEN
                  STORE(M5A+7)=0.05
               END IF
C-C-C-SET UNUSED U[IJ]'S TO ZERO
               CALL XZEROF (STORE(M5A+9),4)
            ELSE IF (NINT(APD(1)).GE.3) THEN
C-C-C
C-C-C-ATOM OR SPECIAL FIGURE SHALL BECOME LINE OR RING
C-C-C
C-C-C-CHECK WHETHER ATOM WAS ANISO UNTIL NOW
               IF (STORE(JT).LT.UISO) THEN
C-C-C-SET UP WORK SPACE
                  LTEMP=KSTALL(4)
C-C-C-FIND U[EQUIV]
                  CALL XPRAXI (1,1,LTEMP,M5A,MD5A,1,0,0)
                  STORE(M5A+7)=STORE(LTEMP)
C-C-C-RETURN WORKSPACE
                  CALL XSTRLL (LTEMP)
               END IF
C-C-C-SUMMARIZE THE ABSOLUTE VALUES OF U[IJ] FOR SIZE, DECL., AZIM.
               SUMUIJ=ABS(STORE(M5A+8))+ABS(STORE(M5A+9))+ABS(STORE(M5A+
     1          10))
C-C-C-CHECK ATOM NOT BEING LINE/RING
C-C-C-OR BEING LINE/RING WITHOUT VALUES FOR SIZE, DECL., AZIM.
               IF ((NINT(STORE(JT)).NE.NINT(APD(1))).OR.((NINT(STORE(JT)
     1          ).EQ.NINT(APD(1))).AND.(SUMUIJ.LT.0.0005))) THEN
C-C-C-SET SPECIAL PARAMETERS TO STANDARD VALUES
                  STORE(M5A+8)=1.0
                  STORE(M5A+9)=0.45
                  STORE(M5A+10)=0.45
               END IF
C-C-C-CHECK "U[ISO]" AND RESET IT POSSIBLY TO STANDARD VALUE
               IF (STORE(M5A+7).LT.UISO) THEN
                  STORE(M5A+7)=0.05
               END IF
C-C-C-SET UNUSED U[IJ]'S TO ZERO
               CALL XZEROF (STORE(M5A+11),2)
            END IF
         END IF
C-C-C-APPLY CHANGE OF PARAMETER
         CALL XMOVE (APD(1),STORE(JT),1)
C--UPDATE THE ATOM ADDRESS
3550     CONTINUE
         CALL XMDMON (M5A,MD5A,1,1,1,4,3,MONLVL,2,0,ISTORE(IMONBF))
         ICHNG=ICHNG+1
         M5A=M5A+MD5A
3600  CONTINUE
      GO TO 3050
C
C
3650  CONTINUE
C -- 'CREATE' DIRECTIVE
C
      IF (ME.LE.0) GO TO 7300
      IF (KSYNUM(Z).NE.0) GO TO 7500
      ME=ME-1
      MF=MF+LK2
3700  CONTINUE
C -- READ ATOMS. CHECK NO COORDINATES. READ SERIAL NUMBER INCREMENT.
C    CHECK NO MORE DATA FOLLOWS
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C -- CREATE THE NEW ATOMS
      ICHNG=ICHNG+1
      M5=L5+(N5*MD5)
      M5B=M5
C -- ALLOCATE SPACE REQUIRED BY NEW ATOMS
      I=KSTALL(N5A*MD5)
      DO 3750 JU=1,N5A
         IF (KATOMS(MQ,M5A,M5).LT.0) GO TO 7100
         STORE(M5+1)=STORE(M5+1)+Z
C----- CONDITIONAL BECAUSE OF OLD (13 PARAM) LIST 5S
         IF (MD5.GE.14) STORE(M5+13)=0.0
         M5A=M5A+MD5A
         M5=M5+MD5
         N5=N5+1
3750  CONTINUE
      CALL XMDMON (M5B,MD5A,N5A,1,1,7,3,MONLVL,2,0,ISTORE(IMONBF))
C--CHECK FOR MORE ATOMS
      IF (KOP(8).LT.0) GO TO 100
      IF (KSYNUM(ZZ).EQ.0) THEN
         Z=ZZ
         ME=ME-1
         MF=MF+LK2
         J=KOP(8)
      END IF
      GO TO 3700
C
C
3800  CONTINUE
C -- 'SPLIT' DIRECTIVE
C
      IF (ME.LE.0) GO TO 7300
      IF (KSYNUM(Z).NE.0) GO TO 7500
      ME=ME-1
      MF=MF+LK2
      J=KOP(8)
3850  CONTINUE
C -- CHECK IF ANY ATOMS HAVE BEEN GIVEN
      IF (ME.LE.0) GO TO 7500
C -- READ ATOMS. CHECK NO COORDINATES. READ SERIAL NUMBER INCREMENT.
C    CHECK NO MORE DATA FOLLOWS
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C -- STORE TWO NEW HALF ATOMS ATOMS
      ICHNG=ICHNG+1
      M5=L5+(N5*MD5)
      M5B=M5
C -- ALLOCATE SPACE REQUIRED BY NEW ATOMS
      I=KSTALL(N5A*MD5*2)
C----- ALLOCATE WORKSPACE FOR XPRAXI
      NFLSAV=NFL
      NFL=NFL+25
      IBASE=NFLSAV
      JBASE=NFLSAV+4
      DO 3900 JU=1,N5A
         IF (KATOMS(MQ,M5A,M5).LT.0) GO TO 7100
C----- NEW ATOM AT STORE(M5)
C----- HALVE OCC
         STORE(M5+2)=0.5*STORE(M5+2)
C----- FIDDLE SERIAL
         STORE(M5+1)=STORE(M5+1)*Z
C----- COMPUTE SPLITTING
         IF (STORE(M5+3).LE.UISO) THEN
            CALL XPRAXI (1,1,IBASE,M5,MD5,1,-1,JBASE)
            DX=STORE(IBASE+3)*STORE(JBASE+9)
            DY=STORE(IBASE+3)*STORE(JBASE+10)
            DZ=STORE(IBASE+3)*STORE(JBASE+11)
C----- RESTORE TO ISO
            STORE(M5+3)=1.
C----- SET U[ISO] = MEDIAN AND CLEAR UIJ
            STORE(M5+7)=STORE(IBASE+2)
            CALL XZEROF (STORE(M5+8),5)
C----- CLEAR OUR SPARE
C----- CONDITIONAL BECAUSE OF OLD (13 PARAM) LIST 5S
         IF (MD5.GE.14) STORE(M5+13)=0.0
C---- MAKE COPY
         CALL XMOVE (STORE(M5),STORE(M5+MD5),MD5)
         STORE(M5+MD5+1)=STORE(M5+1)+1
C
C----- APPLY SPLITTING
            STORE(M5+4)=STORE(M5+4)+DX
            STORE(M5+4+MD5)=STORE(M5+4+MD5)-DX
            STORE(M5+5)=STORE(M5+5)+DY
            STORE(M5+5+MD5)=STORE(M5+5+MD5)-DY
            STORE(M5+6)=STORE(M5+6)+DZ
            STORE(M5+6+MD5)=STORE(M5+6+MD5)-DZ
         END IF
         M5A=M5A+MD5A
         M5=M5+2*MD5
         N5=N5+2
3900  CONTINUE
C----- RESTORE WORKSPACE
      NFL=NFLSAV
      CALL XMDMON (M5B,MD5A,N5A*2,1,1,7,3,MONLVL,2,0,ISTORE(IMONBF))
C--CHECK FOR MORE ATOMS
      IF (KOP(8).LT.0) GO TO 100
      IF (KSYNUM(ZZ).EQ.0) THEN
         Z=ZZ
         ME=ME-1
         MF=MF+LK2
         J=KOP(8)
      END IF
      GO TO 3850
C
C
3950  CONTINUE
C -- 'CENTROID' DIRECTIVE
C
      IF (ME.LE.0) GO TO 7300
C -- READ NEW SERIAL NUMBER.
      IF (KSYNUM(Z).NE.0) GO TO 7500
      ME=ME-1
      MF=MF+LK2
      J=KOP(8)
C    CHECK MORE DATA FOLLOWS
      IF (ME.LE.0) GO TO 7800
C -- STORE PSEUDO  ATOM
      ICHNG=ICHNG+1
      M5=L5+(N5*MD5)
      M5B=M5
C -- ALLOCATE SPACE REQUIRED BY PSEUDO ATOM
      I=KSTALL(N5A*MD5)
C----- ALLOCATE WORKSPACE
      NFLSAV=NFL
C----- ATOMIC COORDINATES (3 ITEMS)
      JBASE=NFLSAV
C----- WORKSPACE (9 ITEMS)
      IBASE=NFLSAV+3
      NFL=NFL+12
C----- INITIALISE
      CALL XINERT (0,STORE(JBASE),STORE(IBASE),DANISO)
4000  CONTINUE
C -- READ ATOMS. CHECK NO COORDINATES.
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
      DO 4050 JU=1,N5A
         IF (KATOMS(MQ,M5A,M5).LT.0) GO TO 7100
         CALL XMOVE (STORE(M5+4),STORE(JBASE),3)
         CALL XINERT (1,STORE(JBASE),STORE(IBASE),DANISO)
         M5A=M5A+MD5A
4050  CONTINUE
C----- CHECK FOR MORE ATOMS
      IF (KOP(8).GE.0) GO TO 4000
C----- EVALUATE
      CALL XINERT (2,STORE(JBASE),STORE(IBASE),DANISO)
      CALL XMOVE (STORE(IBASE),STORE(M5+4),9)
C----- NEW ATOM AT STORE(M5)
      ISTORE(M5)=QCENT
C----- FIDDLE SERIAL
      STORE(M5+1)=Z
C----- SET OCC
      STORE(M5+2)=1.0
C----- SET U[ISO] FLAG TO ANISO
      STORE(M5+3)=0.0
C----- CONDITIONAL BECAUSE OF OLD (13 PARAM) LIST 5S
      IF (MD5.GE.14) STORE(M5+13)=0.0
      M5=M5+MD5
      N5=N5+1
C----- RESTORE WORKSPACE
      NFL=NFLSAV
      CALL XMDMON (M5B,MD5A,1,1,1,7,3,MONLVL,2,0,ISTORE(IMONBF))
      GO TO 100
C
C
C-C-C
C-C-C-3 DIRECTIVES TO CREATE SPECIAL FIGURES AUTOMATICALLY
C-C-C-(DERIVED FROM CENTROID-DIRECTIVE)
C-C-C
4100  CONTINUE
C-C-C
C-C-C-'SPHERE' DIRECTIVE
C-C-C
      IF (ME.LE.0) GO TO 7300
C-C-C-READ NEW SERIAL NUMBER.
      IF (KSYNUM(Z).NE.0) GO TO 7500
      ME=ME-1
      MF=MF+LK2
      J=KOP(8)
C-C-C-CHECK MORE DATA FOLLOWS
      IF (ME.LE.0) GO TO 7800
C-C-C-STORE PSEUDO  ATOM
      ICHNG=ICHNG+1
      M5=L5+(N5*MD5)
      M5B=M5
C-C-C-ALLOCATE SPACE REQUIRED BY PSEUDO ATOM
      I=KSTALL(N5A*MD5)
C-C-C-ALLOCATE WORKSPACE
      NFLSAV=NFL
C-C-C-ATOMIC COORDINATES (3 ITEMS)
      JBASE=NFLSAV
C-C-C-WORKSPACE (9 ITEMS)
      IBASE=NFLSAV+3
      NFL=NFL+12
C-C-C-INITIALISE CALCULATION OF CENTER (OF SPHERE)
      CALL XINERT (0,STORE(JBASE),STORE(IBASE),DANISO)
C-C-C-SET VARIABLES FOR AUTOM. CREATION OF SPECIALS TO INITIAL VALUE
      SUMOCC=0.0
      SUMUISO=0.0
      SIDI=0.0
      SUMDI=0.0
      NUMDISO=0.0
      NFLSPEC=NFL
4150  CONTINUE
C-C-C-READ ATOMS. CHECK NO COORDINATES.
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C-C-C-CREATE WORKSPACE TO STORE SYMMETRY TREATED DISORDERED ATOMS
      JU=KSTALL(N5A*3)
      DO 4200 JU=1,N5A
         IF (KATOMS(MQ,M5A,M5).LT.0) GO TO 7100
C-C-C-CALCULATE SUM OF OCCUPATION FACTORS
         SUMOCC=SUMOCC+STORE(M5A+2)
C-C-C-CALCULATE MEAN UEQUIV
         IF (STORE(M5A+3).LT.UISO) THEN
C-C-C-CREATE WORKSPACE, CALC. UEQUIV, SUM UP, RETURN WORKSPACE
            LTEMP=KSTALL(4)
            CALL XPRAXI (1,1,LTEMP,M5A,MD5A,1,0,0)
            SUMUISO=SUMUISO+STORE(LTEMP)
            CALL XSTRLL (LTEMP)
         ELSE
C-C-C-TAKE UEQUIV FROM U[11]
            SUMUISO=SUMUISO+STORE(M5A+7)
         END IF
C-C-C-STORE POSITIONS OF DISORDERED ATOM (SYMMETRY TREATED)
C-C-C-IN RESERVED WORKSPACE
         STORE(NFLSPEC+NUMDISO*3)=STORE(M5+4)
         STORE(NFLSPEC+1+NUMDISO*3)=STORE(M5+5)
         STORE(NFLSPEC+2+NUMDISO*3)=STORE(M5+6)
         NUMDISO=NUMDISO+1
         CALL XMOVE (STORE(M5+4),STORE(JBASE),3)
         CALL XINERT (1,STORE(JBASE),STORE(IBASE),DANISO)
         M5A=M5A+MD5A
4200  CONTINUE
C-C-C-CHECK FOR MORE ATOMS
      IF (KOP(8).GE.0) GO TO 4150
C-C-C-EVALUATE (CENTROID CALCULATION)
      CALL XINERT (2,STORE(JBASE),STORE(IBASE),DANISO)
      CALL XMOVE (STORE(IBASE),STORE(M5+4),9)
C-C-C-NEW ATOM AT STORE(M5)
C-C-C-ATOM TYPE (SPHERE)
      ISTORE(M5)=QSPHERE
C-C-C-FIDDLE SERIAL
      STORE(M5+1)=Z
C-C-C-SET OCC
      STORE(M5+2)=SUMOCC
C-C-C-SET FLAG TO SPHERE
      STORE(M5+3)=2.0
C-C-C-SET U[11] TO "U[ISO]",I.E. THE MEAN U[ISO] OF DISORDERED ATOMS
      STORE(M5+7)=SUMUISO/NUMDISO
C-C-C-CALCULATE RADIUS OF SPHERE
      DO 4250 JU=0,NUMDISO-1
C-C-C-CALCULATE DISTANCE OF CENTER TO EVERY DISORDERED ATOM
C-C-C-AND SUM THEM UP
         SIDI=SQRT(XDSTN2(STORE(NFLSPEC+JU*3),STORE(M5+4)))
         SUMDI=SUMDI+SIDI
4250  CONTINUE
C-C-C-STORE VALUE FOR SIZE (SPHERE-RADIUS): MEAN DISTANCE TO CENTER
      STORE(M5+8)=SUMDI/NUMDISO
C-C-C-SET REMAINING (NOT USED) U[IJ] TO 0.0
      STORE(M5+9)=0.0
      STORE(M5+10)=0.0
      STORE(M5+11)=0.0
      STORE(M5+12)=0.0
C-C-C-RETURN WORKSPACE
      CALL XSTRLL (NFLSPEC)
C-C-C-CONDITIONAL BECAUSE OF OLD (13 PARAM) LIST 5S
      IF (MD5.GE.14) STORE(M5+13)=0.0
      M5=M5+MD5
      N5=N5+1
C-C-C-RESTORE WORKSPACE
      NFL=NFLSAV
      CALL XMDMON (M5B,MD5A,1,1,1,7,3,MONLVL,2,0,ISTORE(IMONBF))
      GO TO 100
C-C-C
C-C-C
4300  CONTINUE
C-C-C
C-C-C-'LINE' DIRECTIVE
C-C-C
      IF (ME.LE.0) GO TO 7300
C-C-C-READ NEW SERIAL NUMBER.
      IF (KSYNUM(Z).NE.0) GO TO 7500
      ME=ME-1
      MF=MF+LK2
      J=KOP(8)
C-C-C-CHECK MORE DATA FOLLOWS
      IF (ME.LE.0) GO TO 7800
C-C-C-STORE PSEUDO  ATOM
      ICHNG=ICHNG+1
      M5=L5+(N5*MD5)
      M5B=M5
C-C-C-ALLOCATE SPACE REQUIRED BY PSEUDO ATOM
      I=KSTALL(N5A*MD5)
C-C-C-ALLOCATE WORKSPACE
      NFLSAV=NFL
C-C-C-ATOMIC COORDINATES (3 ITEMS)
      JBASE=NFLSAV
C-C-C-WORKSPACE (9 ITEMS)
      IBASE=NFLSAV+3
      NFL=NFL+12
C-C-C-INITIALISE CALCULATION OF CENTER (OF LINE)
      CALL XINERT (0,STORE(JBASE),STORE(IBASE),DANISO)
C-C-C-SET VARIABLES FOR AUTOM. CREATION OF SPECIALS TO INITIAL VALUE
      SUMOCC=0.0
      SUMUISO=0.0
      MAXDI=0.0
      NUMDISO=0.0
      NFLSPEC=NFL
4350  CONTINUE
C-C-C-READ ATOMS. CHECK NO COORDINATES.
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C-C-C-CREATE WORKSPACE TO STORE SYMMETRY TREATED DISORDERED ATOMS
      JU=KSTALL(N5A*4)
      DO 4400 JU=1,N5A
         IF (KATOMS(MQ,M5A,M5).LT.0) GO TO 7100
C-C-C-CALCULATE SUM OF OCCUPATION FACTORS
         SUMOCC=SUMOCC+STORE(M5A+2)
C-C-C-CALCULATE MEAN UEQUIV
         IF (STORE(M5A+3).LT.UISO) THEN
C-C-C-CREATE WORKSPACE, CALC. UEQUIV, SUM UP, RETURN WORKSPACE
            LTEMP=KSTALL(4)
            CALL XPRAXI (1,1,LTEMP,M5A,MD5A,1,0,0)
            SUMUISO=SUMUISO+STORE(LTEMP)
            CALL XSTRLL (LTEMP)
         ELSE
C-C-C-TAKE UEQUIV FROM U[11]
            SUMUISO=SUMUISO+STORE(M5A+7)
         END IF
C-C-C-STORE POSITIONS OF DISORDERED ATOM (SYMMETRY TREATED)
C-C-C-IN RESERVED WORKSPACE
         STORE(NFLSPEC+NUMDISO*4)=STORE(M5+4)
         STORE(NFLSPEC+1+NUMDISO*4)=STORE(M5+5)
         STORE(NFLSPEC+2+NUMDISO*4)=STORE(M5+6)
C-C-C-WEIGHTING (PROVISIONALLY 1.0)
         STORE(NFLSPEC+3+NUMDISO*4)=1.0
         NUMDISO=NUMDISO+1
C-C-C-SUM UP FOR CENTROID CALCULATION
         CALL XMOVE (STORE(M5+4),STORE(JBASE),3)
         CALL XINERT (1,STORE(JBASE),STORE(IBASE),DANISO)
         M5A=M5A+MD5A
4400  CONTINUE
C-C-C-CHECK FOR MORE ATOMS
      IF (KOP(8).GE.0) GO TO 4350
C-C-C-EVALUATE (CENTROID CALCULATION)
      CALL XINERT (2,STORE(JBASE),STORE(IBASE),DANISO)
      CALL XMOVE (STORE(IBASE),STORE(M5+4),9)
C-C-C-NEW ATOM AT STORE(M5)
C-C-C-ATOM TYPE (LINE)
      ISTORE(M5)=QLINE
C-C-C-FIDDLE SERIAL
      STORE(M5+1)=Z
C-C-C-SET OCC
      STORE(M5+2)=SUMOCC
C-C-C-SET FLAG TO LINE
      STORE(M5+3)=3.0
C-C-C-SET U[11] TO "U[ISO]",I.E. THE MEAN U[ISO] OF DISORDERED ATOMS
      STORE(M5+7)=SUMUISO/NUMDISO
C-C-C-CALCULATE LENGTH OF LINE
      DO 4450 JU=0,NUMDISO-1
C-C-C-CALCULATE DISTANCE OF CENTER TO EVERY DISORDERED ATOM
C-C-C-AND FIND THE MAXIMUM
         SIDI=SQRT(XDSTN2(STORE(NFLSPEC+JU*4),STORE(M5+4)))
         MAXDI=MAX(MAXDI,SIDI)
4450  CONTINUE
C-C-C-STORE VALUE FOR SIZE (LINE-LENGTH):
C-C-C-TWICE THE MAXIMAL DISTANCE TO CENTER
      STORE(M5+8)=2*MAXDI
C-C-C-CALCULATE LINE ORIENTATION (---> ORIENTATION-VECTOR IN ROF)
      CALL KMOLAX (STORE(NFLSPEC),NUMDISO,4,XCF,VA,ROF,RCA,XWORKS)
C-C-C-CALCULATION OF POLAR COORDINATES OF ORIENTATION VECTOR
C-C-C-FOR LINE USE OF ROF(1,X)
C-C-C-DECLINAT
      IF (ROF(1,1).GE.0.0) THEN
         STORE(M5+9)=(ACOS(ROF(1,3)))*3.6/TWOPI
      ELSE
         STORE(M5+9)=(-ACOS(ROF(1,3)))*3.6/TWOPI
      END IF
C-C-C-AZIMUTH
      IF (ABS(ROF(1,1)).LT.ZEROSQ) THEN
         IF (ROF(1,2).GE.0.0) THEN
            STORE(M5+10)=0.9
         ELSE
            STORE(M5+10)=-0.9
         END IF
      ELSE
         STORE(M5+10)=(ATAN(ROF(1,2)/ROF(1,1)))*3.6/TWOPI
      END IF
C-C-C-SET REMAINING (NOT USED) U[IJ] TO 0.0
      STORE(M5+11)=0.0
      STORE(M5+12)=0.0
C-C-C-RETURN WORKSPACE
      CALL XSTRLL (NFLSPEC)
C-C-C-CONDITIONAL BECAUSE OF OLD (13 PARAM) LIST 5S
      IF (MD5.GE.14) STORE(M5+13)=0.0
      M5=M5+MD5
      N5=N5+1
C-C-C-RESTORE WORKSPACE
      NFL=NFLSAV
      CALL XMDMON (M5B,MD5A,1,1,1,7,3,MONLVL,2,0,ISTORE(IMONBF))
      GO TO 100
C-C-C
C-C-C
4500  CONTINUE
C-C-C
C-C-C-'RING' DIRECTIVE
C-C-C
      IF (ME.LE.0) GO TO 7300
C-C-C-READ NEW SERIAL NUMBER.
      IF (KSYNUM(Z).NE.0) GO TO 7500
      ME=ME-1
      MF=MF+LK2
      J=KOP(8)
C-C-C-CHECK MORE DATA FOLLOWS
      IF (ME.LE.0) GO TO 7800
C-C-C-STORE PSEUDO  ATOM
      ICHNG=ICHNG+1
      M5=L5+(N5*MD5)
      M5B=M5
C-C-C-ALLOCATE SPACE REQUIRED BY PSEUDO ATOM
      I=KSTALL(N5A*MD5)
C-C-C-ALLOCATE WORKSPACE
      NFLSAV=NFL
C-C-C-ATOMIC COORDINATES (3 ITEMS)
      JBASE=NFLSAV
C-C-C-WORKSPACE (9 ITEMS)
      IBASE=NFLSAV+3
      NFL=NFL+12
C-C-C-INITIALISE CALCULATION OF CENTER (OF RING)
      CALL XINERT (0,STORE(JBASE),STORE(IBASE),DANISO)
C-C-C-SET VARIABLES FOR AUTOM. CREATION OF SPECIALS TO INITIAL VALUE
      SUMOCC=0.0
      SUMUISO=0.0
      SIDI=0.0
      SUMDI=0.0
      NUMDISO=0.0
      NFLSPEC=NFL
4550  CONTINUE
C-C-C-READ ATOMS. CHECK NO COORDINATES.
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C-C-C-CREATE WORKSPACE TO STORE SYMMETRY TREATED DISORDERED ATOMS
      JU=KSTALL(N5A*4)
      DO 4600 JU=1,N5A
         IF (KATOMS(MQ,M5A,M5).LT.0) GO TO 7100
C-C-C-CALCULATE SUM OF OCCUPATION FACTORS
         SUMOCC=SUMOCC+STORE(M5A+2)
C-C-C-CALCULATE MEAN UEQUIV
         IF (STORE(M5A+3).LT.UISO) THEN
C-C-C-CREATE WORKSPACE, CALC. UEQUIV, SUM UP, RETURN WORKSPACE
            LTEMP=KSTALL(4)
            CALL XPRAXI (1,1,LTEMP,M5A,MD5A,1,0,0)
            SUMUISO=SUMUISO+STORE(LTEMP)
            CALL XSTRLL (LTEMP)
         ELSE
C-C-C-TAKE UEQUIV FROM U[11]
            SUMUISO=SUMUISO+STORE(M5A+7)
         END IF
C-C-C-STORE POSITIONS OF DISORDERED ATOM (SYMMETRY TREATED)
C-C-C-IN RESERVED WORKSPACE
         STORE(NFLSPEC+NUMDISO*4)=STORE(M5+4)
         STORE(NFLSPEC+1+NUMDISO*4)=STORE(M5+5)
         STORE(NFLSPEC+2+NUMDISO*4)=STORE(M5+6)
C-C-C-WEIGHTING (PROVISIONALLY 1.0)
         STORE(NFLSPEC+3+NUMDISO*4)=1.0
         NUMDISO=NUMDISO+1
C-C-C-SUM UP FOR CENTROID CALCULATION
         CALL XMOVE (STORE(M5+4),STORE(JBASE),3)
         CALL XINERT (1,STORE(JBASE),STORE(IBASE),DANISO)
         M5A=M5A+MD5A
4600  CONTINUE
C-C-C-CHECK FOR MORE ATOMS
      IF (KOP(8).GE.0) GO TO 4550
C-C-C-EVALUATE (CENTROID CALCULATION)
      CALL XINERT (2,STORE(JBASE),STORE(IBASE),DANISO)
      CALL XMOVE (STORE(IBASE),STORE(M5+4),9)
C-C-C-NEW ATOM AT STORE(M5)
C-C-C-ATOM TYPE (RING)
      ISTORE(M5)=QRING
C-C-C-FIDDLE SERIAL
      STORE(M5+1)=Z
C-C-C-SET OCC
      STORE(M5+2)=SUMOCC
C-C-C-SET FLAG TO RING
      STORE(M5+3)=4.0
C-C-C-SET U[11] TO "U[ISO]",I.E. THE MEAN U[ISO] OF DISORDERED ATOMS
      STORE(M5+7)=SUMUISO/NUMDISO
C-C-C-CALCULATE RADIUS OF RING
      DO 4650 JU=0,NUMDISO-1
C-C-C-CALCULATE DISTANCE OF CENTER TO EVERY DISORDERED ATOM
C-C-C-AND SUM THEM UP
         SIDI=SQRT(XDSTN2(STORE(NFLSPEC+JU*4),STORE(M5+4)))
         SUMDI=SUMDI+SIDI
4650  CONTINUE
C-C-C-STORE VALUE FOR SIZE (RING-RADIUS): MEAN DISTANCE TO CENTER
      STORE(M5+8)=SUMDI/NUMDISO
C-C-C-CALCULATE RING (---> ORIENTATION-VECTOR IN ROF)
      CALL KMOLAX (STORE(NFLSPEC),NUMDISO,4,XCF,VA,ROF,RCA,XWORKS)
C-C-C-CALCULATION OF POLAR COORDINATES OF ORIENTATION VECTOR
C-C-C-FOR RING USE OF ROF(3,X)
C-C-C-DECLINAT
      IF (ROF(3,1).GE.0.0) THEN
         STORE(M5+9)=(ACOS(ROF(3,3)))*3.6/TWOPI
      ELSE
         STORE(M5+9)=(-ACOS(ROF(3,3)))*3.6/TWOPI
      END IF
C-C-C-AZIMUTH
      IF (ABS(ROF(3,1)).LT.ZEROSQ) THEN
         IF (ROF(3,2).GE.0.0) THEN
            STORE(M5+10)=0.9
         ELSE
            STORE(M5+10)=-0.9
         END IF
      ELSE
         STORE(M5+10)=(ATAN(ROF(3,2)/ROF(3,1)))*3.6/TWOPI
      END IF
C-C-C-SET REMAINING (NOT USED) U[IJ] TO 0.0
      STORE(M5+11)=0.0
      STORE(M5+12)=0.0
C-C-C-RETURN WORKSPACE
      CALL XSTRLL (NFLSPEC)
C-C-C-CONDITIONAL BECAUSE OF OLD (13 PARAM) LIST 5S
      IF (MD5.GE.14) STORE(M5+13)=0.0
      M5=M5+MD5
      N5=N5+1
C-C-C-RESTORE WORKSPACE
      NFL=NFLSAV
      CALL XMDMON (M5B,MD5A,1,1,1,7,3,MONLVL,2,0,ISTORE(IMONBF))
      GO TO 100
C-C-C
C
4700  CONTINUE
C--'ANISO' INSTRUCTION
C
      N5A=N5
      M5A=L5
C--CHECK TO SEE IF THE CARD IS BLANK  -  ALL THE ATOMS TO BE CHANGED
      IF (ME) 4850,4850,4800
C--CHECK IF THERE ARE ANY MORE ARGUMENTS
4750  CONTINUE
C -- CHECK FOR MORE DATA. READ ATOMS. CHECK NO PARAMETERS SPECIFIED
      IF (KOP(8).LT.0) GO TO 100
4800  CONTINUE
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
4850  CONTINUE
      CALL XMDMON (M5A,MD5A,N5A,1,1,3,1,MONLVL,2,0,ISTORE(IMONBF))
      ICHNG=ICHNG+1
C -- LOOP FOR CHANGING THE ATOMS
      DO 5050 JT=1,N5A
C--CHECK TO SEE IF THE ATOM IS ALREADY ANISO
         IF (ABS(STORE(M5A+3))-UISO) 5000,4900,4900
C--NOT ALREADY ANISO
4900     CONTINUE
         JV=M5A+2
         JW=L1C
         DO 4950 JU=M5A,JV
C      STORE(JU+7)=STORE(M5A+3)
C      STORE(JU+10)=STORE(M5A+3)*STORE(JW)
            STORE(JU+7)=STORE(M5A+7)
            STORE(JU+10)=STORE(M5A+7)*STORE(JW)
            JW=JW+1
4950     CONTINUE
         STORE(M5A+3)=0.0
5000     CONTINUE
         M5A=M5A+MD5A
5050  CONTINUE
      GO TO 4750
C
C
5100  CONTINUE
C -- 'UEQUIV' DIRECTIVE
C
C -- SET UP WORK SPACE
      LTEMP=KSTALL(4*N5)
      N5A=N5
      M5A=L5
C--CHECK TO SEE IF THE CARD IS BLANK  -  ALL THE ATOMS TO BE CHANGED
      IF (ME.LE.0) GO TO 5250
5150  CONTINUE
C -- CHECK FOR MORE ARGUMENTS
      IF (KOP(8).GE.0) GO TO 5200
C -- RETURN WORKSPACE
      CALL XSTRLL (LTEMP)
      GO TO 100
C--READ THE NEXT ATOM OR ATOMS
5200  CONTINUE
      IF (KATOMU(LN).LE.0) GO TO 7100
C--CHECK THAT NO COORDINATES HAVE BEEN GIVEN
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C--LOOP FOR CHANGING THE ATOMS
5250  CONTINUE
C--- FIND U[EQUIV]
      L5A=M5A
      M5B=M5A
      CALL XPRAXI (1,1,LTEMP,L5A,MD5A,N5A,0,0)
      JU=LTEMP
      DO 5400 JT=1,N5A
C--CHECK TO SEE IF THE ATOM IS ALREADY ISO
         IF (ABS(STORE(M5A+3))-UISO) 5300,5350,5350
C--NOT ALREADY ISO
5300     CONTINUE
C      STORE(M5A+3)=STORE(JU)
         STORE(M5A+7)=STORE(JU)
         STORE(M5A+3)=1.0
C----- ZERO THE ANISO TFS
C      CALL XZEROF (STORE(M5A+7), 6)
         CALL XZEROF (STORE(M5A+8),5)
5350     CONTINUE
         M5A=M5A+MD5A
         JU=JU+4
5400  CONTINUE
      CALL XMDMON (M5B,MD5A,N5A,1,1,11,1,MONLVL,2,0,ISTORE(IMONBF))
      ICHNG=ICHNG+1
      GO TO 5150
C
C
5450  CONTINUE
C----- PERTURB INSTRUCTION
C      FIDDLE THE DIRECTIVE NUMBER
      IDIRNM=5
      PERTOT=0.0
      PERTSQ=0.0
      NPERT=0
      GO TO 5550
C
C
5500  CONTINUE
C -- 'ADD' , 'SUBTRACT' , 'MULTIPLY' , OR 'DIVIDE' DIRECTIVE
C
      IDIRNM=IDIRNM-4
5550  CONTINUE
      IF (ME.LE.0) GO TO 7300
C -- CHECK FOR AN ARGUMENT AND READ NUMBER
      IF (ME.LE.0) GO TO 7500
      IF (KSYNUM(Z).NE.0) GO TO 7500
      ME=ME-1
      MF=MF+LK2
      J=KOP(8)
C----- BRANCH ON FUNCTION
      GO TO (5750,5600,5750,5650,5700,8250),IDIRNM
      GO TO 8250
5600  CONTINUE
C----- SUBTRACT
      Z=-Z
      GO TO 5750
5650  CONTINUE
C----- DIVIDE
      Z=1./Z
      GO TO 5750
5700  CONTINUE
C     RANDOM PERTURBATION - SAVE REQUESTED VARIANCE
      ZZ=Z*Z
      GO TO 5750
C
C----- START THE WORK
5750  CONTINUE
5800  CONTINUE
C -- CHECK FOR MORE DATA. CHECK FOR OVERALL PARAMETER. CHECK FOR
C    ATOMIC PARAMETER
      IF (KOP(8).LT.0) GO TO 100
      ISCALE=KOVPCH(I)
      IF (ISCALE.LT.0) THEN
C -- ERROR IN SPECIFICATION
         GO TO 7100
      ELSE IF (ISCALE.EQ.0) THEN
C -- ASSUME ATOMIC PARAMETER
         IPOSIT=1
         IPARTP=1
      ELSE IF (ISCALE.GT.0) THEN
C -- AN OVERALL PARAMETER
         IPOSIT=ISTORE(MQ+2)
         IPARTP=ISCALE+1
         JV=0
         MD5A=1
         GO TO 5900
      END IF
      IF (KCORCH(I).GT.0) GO TO 5850
      IF (KATOMU(LN).LE.0) GO TO 7100
C -- CHECK ONLY ONE ATOMIC PARAMETER
      IF (ISTORE(MQ+5).NE.1) GO TO 7600
5850  CONTINUE
C -- CHECK TYPE OF PARAMETER
      JU=ISTORE(MQ+6)+MQ
CDJW JAN2000 JVO IS THE EXTENDED PARAMETER NUMBER
      JVO=ISTORE(JU+1)
      JV = JVO-1
CDJWJAN00 LOOK FOR EXTENDED PARAMETERS
      IF (JV.LE.0) GO TO 7700
      IF (JVO .GE. NKAS) JV = JV - NKAO
5900  CONTINUE
C--CHECK IF THERE ARE ANY ATOMS TO PROCESS
      IF (N5A) 5800,5800,5950
C--LOOP OVER THE ATOMS
5950  CONTINUE
      DO 6200 JW=1,N5A
C -- APPLY SYMMETRY TO ATOMIC COORDINATES
         IF (IPARTP.EQ.1) THEN
            IF (KATOMS(MQ,M5A,ITEMP).LT.0) GO TO 7100
            CALL XMOVE (STORE(ITEMP),STORE(M5A),MD5A)
         END IF
         JU=M5A+JV
         GO TO (6000,6000,6050,6050,6100,8250),IDIRNM
         GO TO 8250
C--'ADD' OR 'SUBTRACT'
6000     CONTINUE
         STORE(JU)=STORE(JU)+Z
         GO TO 6150
C--'MULTIPLY' OR 'DIVIDE'
6050     CONTINUE
         STORE(JU)=STORE(JU)*Z
         GO TO 6150
6100     CONTINUE
C----- PERTURB
         Z=XRAND(ZZ,1)
         PERTSQ=PERTSQ+ABS(Z)
C----- CONVER TO ESD
         Z=SIGN(1.,Z)*SQRT(ABS(Z))
         NPERT=NPERT+1
         PERTOT=PERTOT+Z
         IF (ISCALE.EQ.0) THEN
C----- ATOM PARAMETERS - CONVERT UNITS
            IF (JV.EQ.4) THEN
C----- X
               Z=Z/STORE(L1P1)
            ELSE IF (JV.EQ.5) THEN
C----- Y
               Z=Z/STORE(L1P1+1)
            ELSE IF (JV.EQ.6) THEN
C----- Z
               Z=Z/STORE(L1P1+2)
            END IF
         END IF
         STORE(JU)=STORE(JU)+Z
         GO TO 6150
6150     CONTINUE
         CALL XMDMON (M5A,MD5A,1,IPOSIT,IPARTP,5,3,MONLVL,2,0,
     1    ISTORE(IMONBF))
         IPOSIT=IPOSIT+1
         ICHNG=ICHNG+1
         M5A=M5A+MD5A
6200  CONTINUE
      IF (IDIRNM.EQ.5) THEN
         WRITE (NCAWU,6250) NPERT,SQRT(ZZ),PERTOT/FLOAT(NPERT),
     1    SQRT(PERTSQ/FLOAT(NPERT))
         IF (ISSPRT.EQ.0) WRITE (NCWU,6250) NPERT,SQRT(ZZ),PERTOT/
     1    FLOAT(NPERT),SQRT(PERTSQ/FLOAT(NPERT))
         WRITE (CMON,6250) NPERT,SQRT(ZZ),PERTOT/FLOAT(NPERT),
     1    SQRT(PERTSQ/FLOAT(NPERT))
         CALL XPRVDU (NCVDU,3,0)
6250     FORMAT ('Mean perturbation should be approximately zero'/' No o
     1f perturbations=',I5,5X,' Requested perturbation=',F10.4,/'   Mean
     2 perturbation=',F10.4,'       Rms perturbation=',F10.4)
      END IF
      GO TO 5800
C

C
15500  CONTINUE
C -- 'RESET' DIRECTIVE - DIRECTIVE 37
CDJW JAN00
15550  CONTINUE
      IDIRNM=IDIRNM-36
      IF (ME.LE.0) GO TO 7300
      IF (ME.LE.0) GO TO 7500
C----- CHECK FOR A PARAMETER NAME
      IDJW = KCHPRM(I)
C----- CONFIRM ONLY ONE PARAMETER NAME
      IF (IDJW .LE. 0) GOTO 7500
      IF (I .NE. 1) GOTO 7700
C----- SET PARAMETER OFFSET POINTER
      JV = IDJW
      IF (JV .GE. NKAS) JV = JV-NKAO
C----- ADJUST OFF-SET
      JV = JV -1
C----- CHECK PARAMETER IN RANGE
      IF (JV .LT. 0) GOTO 7700
      IF (JV .GT. 12) GOTO 7700
      IF (JV .EQ. 0) THEN
C----- 'TYPE' - GET AN ELEMENT NAME
C--         CHECK FOR AN ALPHA-NUMERIC ARGUMENT
            ISTAT=KFDOPD(-1,1,ISTORE(NFL),1,1)
            IF (ISTAT.LE.0) GO TO 7100
C--         ARGUMENT FOUND  -  SAVE IT
            CALL XMOVE (STORE(MF+2),APD(1),1)
      ELSE
C-----       A NUMERIC PARAMETER - READ NUMBER
            IF (KSYNUM(APD(1)).NE.0) GO TO 7500
      ENDIF
      MF=MF+LK2
      ME=ME-1
      J=KOP(8)
C----- BRANCH ON FUNCTION
      GO TO (15600, 15650, 8250),IDIRNM
      GO TO 8250
15600  CONTINUE
C----- 'RESET'
      CALL XMOVE( APD(1), Z, 1)
      GO TO 15750
15650  CONTINUE
C----- 'SPARE'
      Z=Z
      GO TO 15750
C
C----- START THE WORK
15750  CONTINUE
15800  CONTINUE
C -- CHECK FOR MORE DATA. CHECK FOR OVERALL PARAMETER. CHECK FOR
C    ATOMIC PARAMETER
      IF (KOP(8).LT.0) GO TO 100
      ISCALE=KOVPCH(I)
C -- ERROR OR SCALEFACTOR
      IF (ISCALE.NE.0) GO TO 7100
C -  CHECK FOR PARAMETER TYPE ONLY
      IPOSIT = 1
      IPARTP = 1
      IDJW = KCORCH(I)
      IF (IDJW.GT.0) GO TO 7100
      IDJW = KATOMU(LN)
      IF (IDJW.LE.0) GO TO 7100
C -- CHECK NO ATOMIC PARAMETER
      IF (ISTORE(MQ+5).NE.0) GO TO 7600
      IPOSIT=IPOSIT+1
      JU = ISTORE(MQ+6)+MQ
C--CHECK IF THERE ARE ANY ATOMS TO PROCESS
      IF (N5A) 15800,15800,15950
C--LOOP OVER THE ATOMS
15950  CONTINUE
      DO 16200 JW=1,N5A
C -- APPLY SYMMETRY TO ATOMIC COORDINATES
         IDJW = KATOMS(MQ,M5A,ITEMP)
         IF (IDJW.LT.0) GO TO 7100
         CALL XMOVE (STORE(ITEMP),STORE(M5A),MD5A)
         JU=M5A+JV
         GO TO (16000, 16050, 8250),IDIRNM
         GO TO 8250
C--'RESET'
16000     CONTINUE
         CALL XMOVE(Z, STORE(JU), 1)
         GO TO 16150
C--'SPARE'
16050     CONTINUE
         STORE(JU)=Z
         GO TO 16150
16150     CONTINUE
         CALL XMDMON (M5A,MD5A,1,IPOSIT,IPARTP,5,3,MONLVL,2,0,
     1    ISTORE(IMONBF))
         IPOSIT=IPOSIT+1
         ICHNG=ICHNG+1
         M5A=M5A+MD5A
16200  CONTINUE
      GO TO 15800
C
C
6300  CONTINUE
C----- 'SHIFT' DIRECTIVE
C
      IF (ME.LE.0) GO TO 7300
C -- READ SHIFT VECTOR. THREE NUMBERS OPTIONALLY SEPARATED WITH ','
      DO 6350 JW=1,3
         IF (ME.LE.0) GO TO 7500
         IF (KSYNUM(APD(JW)).NE.0) GO TO 7500
         ME=ME-1
         MF=MF+LK2
         J=KOP(8)
6350  CONTINUE
C -- CHECK IF ANY ATOMS HAVE BEEN GIVEN
      IF (ME.LE.0) GO TO 7500
6400  CONTINUE
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
      DO 6450 JW=1,N5A
C--GENERATE THE MOVED PARAMETERS BY SYMMETRY FIRST
         IF (KATOMS(MQ,M5A,ITEMP).LT.0) GO TO 7100
C--MOVE THE PARAMETERS BACK
         CALL XMOVE (STORE(ITEMP),STORE(M5A),MD5A)
C--SHIFT THE NEW COORDS.
         STORE(M5A+4)=STORE(M5A+4)+APD(1)
         STORE(M5A+5)=STORE(M5A+5)+APD(2)
         STORE(M5A+6)=STORE(M5A+6)+APD(3)
         CALL XMDMON (M5A,MD5A,1,1,1,13,3,MONLVL,2,0,ISTORE(IMONBF))
         ICHNG=ICHNG+1
         M5A=M5A+MD5A
6450  CONTINUE
C--CHECK FOR MORE ATOMS
      IF (KOP(8).LT.0) GO TO 100
      GO TO 6400
C
C
6500  CONTINUE
C----- 'TRANSFORM' DIRECTIVE
C
      IF (ME.LE.0) GO TO 7300
C -- READ ROTATION MATRIX. NINE NUMBERS OPTIONALLY SEPARATED WITH ','
      DO 6550 JW=1,9
         IF (ME.LE.0) GO TO 7500
         IF (KSYNUM(APD(JW)).NE.0) GO TO 7500
         ME=ME-1
         MF=MF+LK2
         J=KOP(8)
6550  CONTINUE
CDJWAPR2001
C---- MATRIX READ IN BY ROWS, BUT NEEDED BY COLUMNS
      CALL XTRANS(APD(1),BPD(1),3,3)
      CALL XMOVE (BPD(1), APD(1),9)
C -- CHECK IF ANY ATOMS HAVE BEEN GIVEN
      IF (ME.LE.0) GO TO 7500
6600  CONTINUE
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C--APPLY THE MATRIX
      DO 6750 JW=1,N5A
C--GENERATE THE MOVED PARAMETERS BY SYMMETRY FIRST
         IF (KATOMS(MQ,M5A,ITEMP).LT.0) GO TO 7100
C--MOVE THE PARAMETERS BACK
         CALL XMOVE (STORE(ITEMP),STORE(M5A),MD5A)
C--GENERATE THE NEW COORDS. BY ROTATION
         BPD(1)=STORE(M5A+4)
         BPD(2)=STORE(M5A+5)
         BPD(3)=STORE(M5A+6)
CDJWAPR2001
         CALL XMLTMM (APD,BPD,STORE(M5A+4),3,3,1)
C----- NOW DO THE U'S
C-----TRANSFORM THE ANISOTROPIC TEMPERATURE FACTORS
         IF (ABS(STORE(M5A+3))-UISO) 6650,6700,6700
6650     CONTINUE
         J=M5A+7
         CALL XEXANI (J,JTEMP)
         CALL XMLTTM (STORE(JTEMP),APD,STORE(KTEMP),3,3,3)
         CALL XMLTTM (APD,STORE(KTEMP),STORE(JTEMP),3,3,3)
         CALL XCOANI (JTEMP,J)
6700     CONTINUE
         CALL XMDMON (M5A,MD5A,1,1,1,6,3,MONLVL,2,0,ISTORE(IMONBF))
         ICHNG=ICHNG+1
         M5A=M5A+MD5A
6750  CONTINUE
C--CHECK FOR MORE ATOMS
      IF (KOP(8).LT.0) GO TO 100
      GO TO 6600
C
C
6800  CONTINUE
C----- 'DEORTHOGINALISE' ATOMS IN-PUT IN A LIST 20 SYSTEM
C
      IF (ME.LE.0) GO TO 7300
C -- READ ORTHOGONALISATION MATRIX IDENTIFIER
C      IF ( KSYNUM ( APD(1) )  .NE.  0  ) GO TO 19540
C      J = NINT (APD(1)
C      ME = ME - 1
C      MF = MF + LK2
C -- CHECK IF ANY ATOMS HAVE BEEN GIVEN
      IF (ME.LE.0) GO TO 7500
6850  CONTINUE
      IF (KATOMU(LN).LE.0) GO TO 7100
      IF (ISTORE(MQ+5).NE.0) GO TO 7400
C--APPLY THE MATRIX
      DO 6900 JW=1,N5A
C--GENERATE THE NEW COORDS. BY ROTATION
         BPD(1)=STORE(M5A+4)
         BPD(2)=STORE(M5A+5)
         BPD(3)=STORE(M5A+6)
         CALL XMLTMM (STORE(L20I+9),BPD,STORE(M5A+4),3,3,1)
C----- NOW TRANSLATE
         STORE(M5A+4)=STORE(M5A+4)+STORE(L20V+3)
         STORE(M5A+5)=STORE(M5A+5)+STORE(L20V+4)
         STORE(M5A+6)=STORE(M5A+6)+STORE(L20V+5)
         CALL XMDMON (M5A,MD5A,1,1,1,6,3,MONLVL,2,0,ISTORE(IMONBF))
         ICHNG=ICHNG+1
         M5A=M5A+MD5A
6900  CONTINUE
C--CHECK FOR MORE ATOMS
      IF (KOP(8).LT.0) GO TO 100
      GO TO 6850
C
C
6950  CONTINUE
C----- 'INSERT' - INSERT A VALUE FROM LIST 3 OR 29 INTO 'SPARE'
      I=ISTORE(ICOMBF+IMDAT1)
      IF (KLST(I).LE.0) GO TO 7100
      IF (KMDINS(I).LT.0) GO TO 7100
      GO TO 100
C
C
7000  CONTINUE
C -- **** SUCCESSFUL TERMINATION ****
C
C -- WRITE OUT THE NEW LIST
      CALL XMDWLS
      GO TO 7050
C
C
7050  CONTINUE
C -- **** FINAL MESSAGES ****
C
      CALL XOPMSG (IOPLSM,IOPEND,IVERSN)
      CALL XTIME2 (2)
      RETURN
C
C
7100  CONTINUE
C -- **** NON-FATAL ERRORS AND WARNINGS ****
C
      IF (ISSPRT.EQ.0) WRITE (NCWU,7150)
      WRITE (NCAWU,7150)
      WRITE (CMON,7150)
      CALL XPRVDU (NCVDU,1,0)
7150  FORMAT (1X,'The previous directive has been ignored')
      CALL XERHND (IERWRN)
      LEF=LEF+1
      GO TO 100
C
7200  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,7250)
      WRITE (NCAWU,7250)
      WRITE (CMON,7250)
      CALL XPRVDU (NCVDU,1,0)
7250  FORMAT (1X,'The previous directive should have been followed',' by
     1 END')
      GO TO 7100
C
7300  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,7350)
      WRITE (NCAWU,7350)
      WRITE (CMON,7350)
      CALL XPRVDU (NCVDU,1,0)
7350  FORMAT (1X,'No arguments found')
      GO TO 7100
C
7400  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,7450)
      WRITE (NCAWU,7450)
      WRITE (CMON,7450)
      CALL XPRVDU (NCVDU,1,0)
7450  FORMAT (1X,'Parameter specifications are illegal for this ','instr
     1uction')
      GO TO 7100
C
7500  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,7550)
      WRITE (NCAWU,7550)
      WRITE (CMON,7550)
      CALL XPRVDU (NCVDU,1,0)
7550  FORMAT (1X,'Argument missing or of wrong type')
      GO TO 7100
C
7600  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,7650)
      WRITE (NCAWU,7650)
      WRITE (CMON,7650)
      CALL XPRVDU (NCVDU,1,0)
7650  FORMAT (1X,'Wrong number of parameters specified')
      GO TO 7100
C
7700  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,7750)
      WRITE (NCAWU,7750)
      WRITE (CMON,7750)
      CALL XPRVDU (NCVDU,1,0)
7750  FORMAT (1X,'Incorrect parameter type specified')
      GO TO 7100
C
7800  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,7850)
      WRITE (NCAWU,7850)
      WRITE (CMON,7850)
      CALL XPRVDU (NCVDU,1,0)
7850  FORMAT (1X,'Only one argument group is allowed with this ','direct
     1ive')
      GO TO 7100
C
7900  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,7950)
      WRITE (NCAWU,7950)
      WRITE (CMON,7950)
      CALL XPRVDU (NCVDU,1,0)
7950  FORMAT (1X,'Only one atom may be specified')
      GO TO 7100
C
8000  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,8050)
      WRITE (NCAWU,8050)
      WRITE (CMON,8050)
      CALL XPRVDU (NCVDU,1,0)
8050  FORMAT (1X,' Atom not found in LIST 5')
      GO TO 7100
C
8100  CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,8150)
      WRITE (NCAWU,8150)
      WRITE (CMON,8150)
      CALL XPRVDU (NCVDU,1,0)
8150  FORMAT (1X,' Atom already in LIST 5')
      GO TO 7100
C
C
8200  CONTINUE
C -- **** TERMINATING ERRORS ****
C
      CALL XOPMSG (IOPMOD,IOPLSP,LA)
      GO TO 7050
8250  CONTINUE
C -- INTERNAL ERROR
      CALL XOPMSG (IOPLSM,IOPINT,0)
      GO TO 8200
      END
CODE FOR XINERT
      SUBROUTINE XINERT (KEY,X,A,D)
C----- COMPUTE CONTRIBUTION TO INERTIAL TENSOR
C      KEY 0 FOR INITIALISATION
C          1 FOR SUMMATION
C          2 FOR EVALUATION
C      X - ATOMIC COORDINATES
C      A - WORKSPACE
C      D - CONVERSION TERM
      DIMENSION X(3), A(9), D(3)
\XUNITS
      SAVE NTERM
      IF (KEY.EQ.0) THEN
         NTERM=0
         CALL XZEROF (A,9)
      ELSE IF (KEY.EQ.1) THEN
C----- ACCUMULATION
         DO 50 I=1,3
            X(I)=X(I)*D(I)
50       CONTINUE
C
         DO 100 I=1,3
            A(I)=A(I)+X(I)
            A(I+3)=A(I+3)+X(I)*X(I)
            J=1+MOD((I+1),3)
            K=1+MOD((I),3)
            A(I+6)=A(I+6)+X(J)*X(K)
100      CONTINUE
         NTERM=NTERM+1
      ELSE IF (KEY.EQ.2) THEN
C----- EVALUATION
C-----  2/NTERM IS AN ARBITARY SCALING FACTOR FOR THE TENSOR
         DIV=1./FLOAT(NTERM)
C----- COMPARE WITH MEAN AND STANDARD DEVIATION
C      SUM[(X-A)*(Y-B)]= SUM(X*Y) - 1/N * SUM(X)*SUM(Y)
         DO 150 I=1,3
            J=1+MOD((I+1),3)
            K=1+MOD((I),3)
            A(I+3)=2.*DIV*(A(I+3)-A(I)*A(I)*DIV)
            A(I+6)=2.*DIV*(A(I+6)-A(J)*A(K)*DIV)
150      CONTINUE
         DO 200 I=1,3
            A(I)=A(I)*DIV/D(I)
200      CONTINUE
      ELSE
C            STOP 'ERROR'
         CALL GUEXIT (2017)
      END IF
      RETURN
      END
CODE FOR XBUC
      SUBROUTINE XBUC
C--TRANSFORM FROM B(IJ8) TO U(IJ) FORM
C
C--
\ISTORE
C
\STORE
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
\XCONST
\XOPVAL
C
\QSTORE
C
C--SET THE TIMING
      CALL XTIME1 (2)
C--READ THE REMAINING DATA
      IF (KRDDPV(ISTORE(NFL),3).LT.0) GO TO 550
C--SET UP THE CONVERSION CONSTANT
      IN=ISTORE(NFL)
      IULN=KTYP05(ISTORE(NFL+1))
      LNOUT=KTYP05(ISTORE(NFL+2))
      A=1./(4.*TWOPIS)
C--CLEAR THE STORE
      CALL XCSAE
      CALL XRSL
C--LOAD THE LISTS
      CALL XFAL01
      CALL XLDR05 (IULN)
      IF (IERFLG.LT.0) GO TO 500
      M5=L5+(N5-1)*MD5
      DO 300 I=L5,M5,MD5
C--CHECK THE ATOM TYPE
         IF (ABS(STORE(I+3))-UISO) 100,50,50
C--'ISO' ATOMS
50       CONTINUE
         STORE(I+3)=STORE(I+3)*A
C      STORE(I+3)=STORE(I+3)*A
         STORE(I+7)=STORE(I+7)*A
         GO TO 300
C--'ANISO' ATOMS
100      CONTINUE
         K=I+7
         L=I+12
         M=L1A
         DO 150 J=K,L
            STORE(J)=-STORE(J)/STORE(M)
            M=M+1
150      CONTINUE
C--CHECK IF 0.5 FACTOR REQUIRED
         IF (IN) 200,200,300
200      CONTINUE
         K=I+10
         DO 250 J=K,L
            STORE(J)=2.0*STORE(J)
250      CONTINUE
300   CONTINUE
      NEW=-1
      IF (IULN-LNOUT) 350,400,350
350   CONTINUE
      NEW=1
400   CONTINUE
      CALL XSTR05 (LNOUT,0,NEW)
C--FINAL TERMINATION MESSAGES
450   CONTINUE
      CALL XOPMSG (IOPTFC,IOPEND,410)
      CALL XTIME2 (2)
      RETURN
C
500   CONTINUE
      CALL XOPMSG (IOPTFC,IOPABN,0)
      GO TO 450
550   CONTINUE
C -- COMMAND INPUT ERRORS
      CALL XOPMSG (IOPTFC,IOPCMI,0)
      GO TO 500
      END
CODE FOR XMDWLS
      SUBROUTINE XMDWLS
C
C -- THIS ROUTINE WRITES THE CURRENT LIST 5 FROM 'MODIFY'
C
C      NEW LIST IS ONLY WRITTEN IF LIST TYPE IS CHANGED OR LIST
C      HAS BEEN CHANGED
C
\ISTORE
C
\STORE
\XLISTI
\XLST05
\XMDCOM
\XUNITS
\XSSVAL
\XERVAL
\XIOBUF
C
\QSTORE
C
C
C -- IF A NEW LIST IS NOT CREATED A WARNING MESSAGE WILL BE SENT TO
C    THE USER, UNLESS THE REASON WAS ERRORS DURING PROCESSING IN WHICH
C    CASE THE MESSAGE IS AN ERROR
      IERROR=IERWRN
C -- CHECK FOR ERRORS IF FLAG SET
      IF (ICHKER.LE.0) GO TO 50
      IF (IERFLG.LT.0) GO TO 400
      IF (LEF.GT.0) GO TO 400
50    CONTINUE
C -- SET LIST WRITE FLAG
      LISTWR=0
C -- CHECK IF LIST HAS BEEN ALTERED
      IF (ICHNG.GT.0) LISTWR=1
      IF (LISTWR.LE.0) GO TO 300
C
C -- CHECK IF EDITING ABANDONED
      IF (IQUIT.GT.0) GO TO 500
C
C -- CHECK IF KEEP HAS BEEN USED.
      IF (MKEEP.GT.0) N5=NKEEP
C
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,100) LB,N5
      END IF
100   FORMAT (1X,'List ',I3,' now contains ',I6,' atom(s)')
C
C -- WRITE THE LIST TO DISC
      N=N5
      NEW=1
      CALL XCPYL5 (LA,LB,N,NEW)
      CALL XSTR05 (LB,0,NEW)
C
150   CONTINUE
C
      RETURN
C
200   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,250) LB
      WRITE (NCAWU,250) LB
      WRITE (CMON,250) LB
      CALL XPRVDU (NCVDU,1,0)
250   FORMAT (1X,'No new list ',I3,' will be created')
      CALL XERHND (IERROR)
      GO TO 150
300   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,350) LA
      WRITE (NCAWU,350) LA
      WRITE (CMON,350) LA
      CALL XPRVDU (NCVDU,1,0)
350   FORMAT (1X,'List ',I3,' has not been changed ')
      GO TO 200
400   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,450) LA
      WRITE (NCAWU,450) LA
      WRITE (CMON,450) LA
      CALL XPRVDU (NCVDU,1,0)
450   FORMAT (1X,'Errors during processing of list ',I3)
C -- THIS CONDITION IS AN ERROR
      IERROR=IERERR
      GO TO 200
500   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,550) LA
      WRITE (NCAWU,550) LA
      WRITE (CMON,550) LA
      CALL XPRVDU (NCVDU,1,0)
550   FORMAT (1X,'Modification of list ',I3,' abandoned')
      GO TO 200
C
      END
CODE FOR XMDMON
      SUBROUTINE XMDMON (ISTART,ISIZE,NDATA,IPOSIT,IPARTP,IFUNC,LEVEL,
     1IMNLVL,IMNCNT,IFLAG,ICONTL)
C
C -- MONITOR/DISPLAY ROUTINE FOR ATOMIC AND OVERALL PARAMETERS AND
C    VARIOUS SCALE FACTORS
C
C
C  ISTART  ADDRESS OF DATA IN 'STORE'
C  ISIZE   LENGTH OF EACH DATA ITEM
C  NDATA   NUMBER OF ITEMS
C  IPOSIT  POSITION OF FIRST ITEM IN ITS GROUP IN LIST 5, USED TO
C          CALCULATE NAMES OF SCALE FACTORS ETC.
C  IPARTP  PARAMETER TYPE
C            1  ATOMIC PARAMETERS
C            2  OVERALL PARAMETERS
C            3  LAYER SCALES
C            4  ELEMENT SCALES
C            5  BATCH SCALES
C            6  CELL PARAMETERS
C            7  PROFILE PARAMETERS
C            8  EXTINCTION PARAMETERS
C  IFUNC   REQUIRED HEADING
C  LEVEL   LEVEL OF LISTING
C  IMNLVL  ALTERNATIVE LEVEL OF LISTING
C            0  OFF     FORCE LIST LEVEL TO BE 0
C            1  LOW     FORCE LIST LEVEL TO BE < 2
C            2  MEDIUM  FORCE LIST LEVEL TO BE 'LEVEL'
C            3  HIGH    FORCE LIST LEVEL TO BE > 1
C  IMNCNT  MONITOR LEVEL CONTROL
C            0  USE SAVED LEVEL - USE WITH IFLAG = 1
C            1  USE 'LEVEL'
C            2  USE 'IMNLVL'
C  IFLAG   FORCE LISTING FLAG
C            0  LIST WHEN ON NEW VALUE OF IFUNC
C            1  FORCE LISTING NOW
C  ICONTL  CONTROL BLOCK ( ARRAY OF LENGTH 5 - SHOULD BE ZERO ON FIRST
C          CALL )
C            WORD 1  SAVED MONITOR LEVEL. THIS VALUE IS ACTUALLY USED
C                    TO CONTROL THE OUTPUT LEVEL
C                      0  NO LISTING
C                      1  LOW ATOMIC
C                      2  MEDIUM ATOMIC
C                      3  HIGH ATOMIC
C                      4  LOW OVERALL
C                      5  MEDIUM/HIGH OVERALL
C                      6  LOW LAYER/BATCH/ELEMENT
C                      7  MEDIUM/HIGH LAYER/BATCH/ELEMENT
C            WORD 2  NUMBER OF ITEMS PRINTED SO FAR
C            WORD 3  SAVED VALUE OF IFUNC
C            WORD 4  SAVED VALUE OF IPARTP
C            WORD 5  SAVED VALUE OF NDATA
C
C
      DIMENSION ICONTL(5)
C
C
      CHARACTER*4 CTEMP
C
C
      DIMENSION INUM(3,3), IMAX(3,3), IOFF(3,3), ILEN(3,3)
      DIMENSION A(20)
C
\ISTORE
C
\STORE
\XOPK
\XSCALE
\XUNITS
\XSSVAL
\XERVAL
\XIOBUF
C
\QSTORE
C
      SAVE A
C
      DATA IMDLVL/1/,IMDITM/2/,IMDFUN/3/
      DATA IMDTYP/4/,IMDNDA/5/
C
Cdjwmap99 output 8 items for brief atoms
      DATA INUM(1,1)/2/,INUM(2,1)/8/,INUM(3,1)/15/
      DATA INUM(1,2)/2/,INUM(2,2)/3/,INUM(3,2)/3/
      DATA INUM(1,3)/3/,INUM(2,3)/4/,INUM(3,3)/4/
C
Cdjwmap99 output 8x2 items for brief atoms
      DATA IMAX(1,1)/14/,IMAX(2,1)/16/,IMAX(3,1)/15/
      DATA IMAX(1,2)/16/,IMAX(2,2)/12/,IMAX(3,2)/12/
      DATA IMAX(1,3)/15/,IMAX(2,3)/16/,IMAX(3,3)/16/
C
      DATA IOFF(1,1)/1/,IOFF(2,1)/1/,IOFF(3,1)/1/
      DATA IOFF(1,2)/0/,IOFF(2,2)/3/,IOFF(3,2)/3/
      DATA IOFF(1,3)/0/,IOFF(2,3)/4/,IOFF(3,3)/4/
C
Cdjwmap99 output 8 items for brief atoms
      DATA ILEN(1,1)/2/,ILEN(2,1)/8/,ILEN(3,1)/15/
      DATA ILEN(1,2)/0/,ILEN(2,2)/1/,ILEN(3,2)/1/
      DATA ILEN(1,3)/0/,ILEN(2,3)/1/,ILEN(3,3)/1/
C
      DATA ITEM/0/
      DATA MAXITM/15/
C
C -- SELECT THE REQUIRED LEVEL OF LISTING
C
C
      IF (IMNCNT.EQ.0) THEN
         GO TO 550
      ELSE IF (IMNCNT.EQ.1) THEN
         JLEVEL=LEVEL
      ELSE IF (IMNCNT.EQ.2) THEN
C
         IF (IMNLVL.EQ.0) THEN
            JLEVEL=0
         ELSE IF (IMNLVL.EQ.1) THEN
            JLEVEL=MIN0(LEVEL,1)
         ELSE IF (IMNLVL.EQ.2) THEN
            JLEVEL=LEVEL
         ELSE IF (IMNLVL.EQ.3) THEN
            JLEVEL=MAX0(LEVEL,2)
         ELSE
            GO TO 600
         END IF
C
      ELSE
         GO TO 600
      END IF
C
      GO TO (50,100,150,150,150,200,200,200,600),IPARTP
      GO TO 600
C
50    CONTINUE
      ICLASS=1
      IDISPL=JLEVEL
      GO TO 250
100   CONTINUE
      ICLASS=2
      IF (JLEVEL.EQ.1) THEN
         IDISPL=4
      ELSE
         IDISPL=5
      END IF
      GO TO 250
150   CONTINUE
      ICLASS=3
      IF (JLEVEL.EQ.1) THEN
         IDISPL=6
      ELSE
         IDISPL=7
      END IF
      GO TO 250
200   CONTINUE
      ICLASS=3
      IF (JLEVEL.EQ.1) THEN
         IDISPL=8
      ELSE
         IDISPL=9
      END IF
      GO TO 250
250   CONTINUE
C
C
C -- IF THIS IS THE FIRST CALL FOR THIS TYPE ( BUFFER HAS JUST BEEN
C    PURGED ) , REMEMBER FUNCTION TYPE AND LEVEL
C
      IF (ICONTL(IMDITM).LE.0) THEN
         ICONTL(IMDLVL)=IDISPL
         ICONTL(IMDFUN)=IFUNC
         ICONTL(IMDTYP)=IPARTP
         ICONTL(IMDNDA)=NDATA
      END IF
C
      IF (JLEVEL.LE.0) GO TO 550
C
      ITMLEN=INUM(JLEVEL,ICLASS)
      MAXITM=IMAX(JLEVEL,ICLASS)
      MOVOFF=IOFF(JLEVEL,ICLASS)
      MOVLEN=ILEN(JLEVEL,ICLASS)
C
      JSTART=ISTART
      ITMCHK=MAXITM-ITMLEN
C
      IF (NDATA.LE.0) GO TO 550
C
      DO 500 I=1,NDATA
C
         GO TO (300,350,400,600),ICLASS
         GO TO 600
C
300      CONTINUE
         GO TO 450
350      CONTINUE
         IND=IPOSIT+I-1
         CALL XMOVE (KVP(1,IND),A(ITEM+1),2)
         GO TO 450
400      CONTINUE
C----- SPECIAL OVERALL PARAMS
         CALL XMOVE (KSCAL(1,IPARTP),A(ITEM+1),2)
         A(ITEM+3)=REAL(IPOSIT+I-1)
         GO TO 450
C
450      CONTINUE
         IF (MOVLEN.GT.0) THEN
            CALL XMOVE (STORE(JSTART),A(ITEM+MOVOFF),MOVLEN)
         END IF
CDJWMAR99 - PACK UP TYPE AND SERIAL
         IF (ICLASS.EQ.1) THEN
            CALL XHSHR (A(ITEM+MOVOFF),CTEMP)
         END IF
C
         ITEM=ITEM+ITMLEN
         IF (ITEM.GT.ITMCHK) THEN
            CALL XMDPRT (A,ITEM,ICONTL)
         END IF
         JSTART=JSTART+ISIZE
500   CONTINUE
C
C
550   CONTINUE
C
C -- CHECK IF PRINT HAS BEEN FORCED
      IF (IFLAG.GT.0) THEN
         CALL XMDPRT (A,ITEM,ICONTL)
         ICONTL(IMDITM)=0
      END IF
C
      RETURN
C
600   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,650)
      WRITE (NCAWU,650)
      WRITE (CMON,650)
      CALL XPRVDU (NCVDU,1,0)
650   FORMAT (1X,'Illegal LEVEL value selected')
      CALL XERHND (IERPRG)
      RETURN
      END
CODE FOR XMDPRT
      SUBROUTINE XMDPRT (A,NA,ICONTL)
C
C -- OUTPUT FORMAT ROUTINE FOR THE 'EDIT' MONITORING ROUTINES
C
C  A        DATA TO BE OUTPUT
C  NA       NUMBER OF WORDS TO BE OUTPUT
C  ICONTL   CONTROL DATA - ARRAY OF LENGTH 5. SEE 'XMDMON'
C
C
      DIMENSION A(20)
      dimension b(20),ib(20)
      DIMENSION ICONTL(5)
C
      DIMENSION LTYPE(8)
      DIMENSION LACT(11)
C
      CHARACTER*24 TYPE (8),ACTTYP
      CHARACTER*24 ACTION(12),OPERAT
C
C
\XUNITS
\XSSVAL
\XOPVAL
\XIOBUF
C
      equivalence (b(1), ib(1))
C
      DATA TYPE(1)/' atom                   '/
      DATA TYPE(2)/' overall parameter      '/
      DATA TYPE(3)/' layer scale            '/
      DATA TYPE(4)/' element scale          '/
      DATA TYPE(5)/' batch scale            '/
      DATA TYPE(6)/' cell parameter         '/
      DATA TYPE(7)/' profile parameter      '/
      DATA TYPE(8)/' extinction parameter   '/
C
      DATA LTYPE(1)/5/,LTYPE(2)/18/,LTYPE(3)/12/
      DATA LTYPE(4)/14/,LTYPE(5)/12/
      DATA LTYPE(6)/15/,LTYPE(7)/18/,LTYPE(8)/21/
C
      DATA ACTION(1)/'deleted                 '/
      DATA ACTION(2)/'made anisotropic        '/
      DATA ACTION(3)/'changed                 '/
      DATA ACTION(4)/'arithmetically modified '/
      DATA ACTION(5)/'rotated                 '/
      DATA ACTION(6)/'created                 '/
      DATA ACTION(7)/'kept                    '/
      DATA ACTION(8)/'moved                   '/
      DATA ACTION(9)/'selected                '/
      DATA ACTION(10)/'made isotropic          '/
      DATA ACTION(11)/'sorted                  '/
      DATA ACTION(12)/'shifted                 '/
C
      DATA LACT(1)/7/,LACT(2)/16/,LACT(3)/7/
      DATA LACT(4)/23/,LACT(5)/7/,LACT(6)/7/
      DATA LACT(7)/4/,LACT(8)/5/,LACT(9)/8/
      DATA LACT(10)/14/,LACT(11)/6/
C
      DATA IMDLVL/1/,IMDITM/2/,IMDFUN/3/
      DATA IMDTYP/4/,IMDNDA/5/
C
CDJWNOV2001 - A BODGE TO HANDLE THE INTEGER ELEMENTS
      CALL XMOVE(A,B,20)
C
      IF (NA.LE.0) GO TO 1000
      IF (ICONTL(IMDLVL).LE.0) GO TO 1000
C
C -- CHECK IF A HEADING SHOULD BE PRINTED AT THIS POINT. THIS WILL BE
C    THE CASE IF NO ATOMS HAVE YET BEEN PRINTED
      IF (ICONTL(IMDITM).GT.0) GO TO 250
      ICONTL(IMDITM)=ICONTL(IMDITM)+1
C
C -- SELECT THE TYPE OF DATA FOR THE HEADING
      ITYPE=ICONTL(IMDTYP)
      ACTTYP=TYPE(ITYPE)
      LENGTH=LTYPE(ITYPE)
C
C
      IF (ICONTL(IMDFUN).LE.1) THEN
C
         IF (ICONTL(IMDNDA).NE.1) THEN
            LENGTH=LENGTH+1
            ACTTYP(LENGTH:LENGTH)='s'
         END IF
C
         WRITE (CMON,50) ICONTL(IMDNDA),ACTTYP(1:LENGTH)
50       FORMAT (' The list currently contains ',I5,A)
         CALL XPRVDU (NCVDU,1,0)
         IF (ISSPRT.EQ.0) WRITE (NCWU,'(A)') CMON(1)
         WRITE (NCAWU,'(A)') CMON(1)
C
CDJWMAR99[
         IF (ICONTL(IMDLVL).EQ.2) THEN
            WRITE (CMON,100)
            CALL XPRVDU (NCVDU,1,0)
            IF (ISSPRT.EQ.0) WRITE (NCWU,'(A)') CMON(1)
            WRITE (NCAWU,'(A)') CMON(1)
         ELSE IF (ICONTL(IMDLVL).EQ.3) THEN
            WRITE (CMON,150)
            CALL XPRVDU (NCVDU,2,0)
            IF (ISSPRT.EQ.0) WRITE (NCWU,'(A)') CMON(1),CMON(2)
            WRITE (NCAWU,'(A)') CMON(1),CMON(2)
         END IF
100      FORMAT (2(9X,'Occ',4X,'x',5X,'y',5X,'z',7X,'U',3X))
150      FORMAT (9X,'Occ',4X,'x',5X,'y',5X,'z',6X,'U11',3X,'U22',3X,'U33
     1',2X,'U23',2X,'U13',2X,'U12',4X,'Spare',2X,'Part'/
     2 35X,'Uiso',2X,'Size',1X,'D
     3 /100',1X,'A/100')
      ELSE
C
C -- SELECT THE OPERATION THAT WILL BE PERFORMED
         OPERAT=ACTION(ICONTL(IMDFUN)-1)
         LOPER=LACT(ICONTL(IMDFUN)-1)
C
         ACTTYP(LENGTH+1:LENGTH+3)='(s)'
         LENGTH=LENGTH+3
C
         WRITE (CMON,200) ACTTYP(1:LENGTH),OPERAT(1:LOPER)
         CALL XPRVDU (NCVDU,1,0)
         IF (ISSPRT.EQ.0) WRITE (NCWU,'(A)') CMON(1)
         WRITE (NCAWU,'(A)') CMON(1)
C
         IF (ICONTL(IMDLVL).EQ.2) THEN
            WRITE (CMON,100)
            CALL XPRVDU (NCVDU,1,0)
            IF (ISSPRT.EQ.0) WRITE (NCWU,'(A)') CMON(1)
            WRITE (NCAWU,'(A)') CMON(1)
         ELSE IF (ICONTL(IMDLVL).EQ.3) THEN
            WRITE (CMON,150)
            CALL XPRVDU (NCVDU,2,0)
            IF (ISSPRT.EQ.0) WRITE (NCWU,'(A)') CMON(1),CMON(2)
            WRITE (NCAWU,'(A)') CMON(1),CMON(2)
         END IF
CDJWMAR99]
200      FORMAT (1X,'The following',A,' will be ',A)
      END IF
C
C
250   CONTINUE
C
C
      GO TO (300,400,500,600,700,800,900,800,900,1050),ICONTL(IMDLVL)
      GO TO 1050
C
300   CONTINUE
C -- BRIEF PRINT
      IF (ISSPRT.EQ.0) WRITE (NCWU,350) (A(I),NINT(A(I+1)),I=1,NA,2)
      WRITE (NCAWU,350) (A(I),NINT(A(I+1)),I=1,NA,2)
      WRITE (CMON,350) (A(I),NINT(A(I+1)),I=1,NA,2)
      CALL XPRVDU (NCVDU,1,0)
350   FORMAT (1X,7(A4,I4,3X))
      GO TO 1000
C
400   CONTINUE
C -- MEDIUM PRINT
Cdjwmar99 print Uiso/Uii - 8 items
      WRITE (CMON,450) (A(I),NINT(A(I+1)),A(I+2),A(I+4),A(I+5),A(I+6),
     1NINT(A(I+3)),A(I+7),I=1,NA,8)
      CALL XPRVDU (NCVDU,1,0)
      IF (ISSPRT.EQ.0) WRITE (NCWU,'(A)') CMON(1)(:)
      WRITE (NCAWU,'(A)') CMON(1)(:)
450   FORMAT (2(A4,I4,F5.2,3F6.3,I2,F6.3,1X))
      GO TO 1000
C
500   CONTINUE
C -- FULL PRINT
      WRITE (CMON,550) (A(I),NINT(A(I+1)),A(I+2),A(I+4),A(I+5),A(I+6),
     1NINT(A(I+3)),A(I+7),A(I+8),A(I+9),A(I+10),A(I+11),A(I+12),A(I+13),
     2IB(I+14),I=1,NA,15)
      CALL XPRVDU (NCVDU,1,0)
      IF (ISSPRT.EQ.0) WRITE (NCWU,'(A)') CMON(1)(:)
      WRITE (NCAWU,'(A)') CMON(1)(:)
550   FORMAT (A4,I4,F5.2,3F6.3,I2,3F6.3,3F5.2,F10.3,I4)
      GO TO 1000
600   CONTINUE
C -- LOW LEVEL PRINT FOR OVERALL PARAMETERS
      IF (ISSPRT.EQ.0) WRITE (NCWU,650) (A(I),I=1,NA)
      WRITE (NCAWU,650) (A(I),I=1,NA)
      WRITE (CMON,650) (A(I),I=1,NA)
650   FORMAT (1X,8(2A4,1X))
      GO TO 1000
700   CONTINUE
C -- MEDIUM/HIGH LEVEL PRINT FOR OVERALL PARAMETERS
      IF (ISSPRT.EQ.0) WRITE (NCWU,750) (A(I),I=1,NA)
      WRITE (NCAWU,750) (A(I),I=1,NA)
      WRITE (CMON,750) (A(I),I=1,NA)
      CALL XPRVDU (NCVDU,1,0)
750   FORMAT (1X,4(2A4,F9.3,2X))
      GO TO 1000
800   CONTINUE
C -- LOW LEVEL PRINT FOR LAYER/BATCH/ELEMENT SCALE FACTORS
      IF (ISSPRT.EQ.0) WRITE (NCWU,850) (A(I),I=1,NA)
      WRITE (NCAWU,850) (A(I),I=1,NA)
      WRITE (CMON,850) (A(I),I=1,NA)
      CALL XPRVDU (NCVDU,1,0)
850   FORMAT (1X,5(2A4,F4.0,3X))
      GO TO 1000
900   CONTINUE
C -- MEDIUM/HIGH LEVEL PRINT FOR LAYER/BATCH/ELEMENT SCALE FACTORS
      IF (ISSPRT.EQ.0) WRITE (NCWU,950) (A(I),I=1,NA)
      WRITE (NCAWU,950) (A(I),I=1,NA)
      WRITE (CMON,950) (A(I),I=1,NA)
      CALL XPRVDU (NCVDU,1,0)
950   FORMAT (1X,4(2A4,F4.0,F6.3,1X))
      GO TO 1000
C
1000  CONTINUE
      NA=0
      RETURN
C
1050  CONTINUE
      CALL XOPMSG (IOPLSM,IOPINT,0)
      RETURN
      END
CODE FOR KMDMOV
      FUNCTION KMDMOV (NXTATM,JY,IMSG)
C
C -- PERFORM 'KEEP' AND 'MOVE' OPERATIONS FOR MODIFY
C
C      RETURN VALUES :-
C
C            -VE      ERROR
C            +VE      SUCCESS
C
C      PARAMETERS :-
C
C      NXTATM      ADDRESS AT WHICH NEXT ATOM IS TO BE STORED ( UPDATED
C                  BY THIS ROUTINE )
C      JY          INCREMENT FOR 'NKEEP'
C      IMSG        MESSAGE TYPE FOR 'XMDMON'
C
C      INTERNAL VARIABLES :-
C
C      ISEQ      INDICATES SEQUENCING STATE
C            -1      NO SERIAL NUMBER CHANGE
C             0      MANUAL SERIAL NUMBER CHANGE. EACH NEW NUMBER
C                    FOLLOWS THE ATOM SPEC.
C             1      AUTOMATIC SEQUENCING
C
C      IMOVE       USED TO INDICATE THE POSITION OF 'NXTATM' RELATIVE
C                  TO THE NEXT GROUP OF ATOMS TO BE MOVED.
C                    0           INSIDE GROUP. ATOMS NEED NOT BE MOVED
C                    1           AFTER GROUP
C                    2           BEFORE GROUP
C
C
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XLEXIC
\XLST05
\XMDCOM
\XIOBUF
C
\QSTORE
C
C -- ALLOCATE A BUFFER FOR MOVING ATOMS
      ITEMP=KSTALL(MD5)
C -- CHECK THERE ARE SOME ARGUMENTS
      IF (ME.LE.0) GO TO 350
C -- SET INITIAL VALUES OF VARIABLES
      ISEQ=-1
C
50    CONTINUE
C -- CHECK FOR A NUMBER WHICH INDICATES SEQUENCING
C^      IF ( KNUMBR ( SEQ ) .EQ. 0 ) ISEQ = 1
C -- THE NEXT ITEM MIGHT BE A SEQUENCE NUMBER.
C^      ISEQ = -1
C^      IF ( ME .LE. 0 ) GO TO 7750
      IF (KSYNUM(SEQ).NE.0) GO TO 100
      ME=ME-1
      MF=MF+LK2
      ISEQ=0
100   CONTINUE
C -- READ ATOMS. CHECK NO PARAMETERS.
      LN=0
      IF (KATOMU(LN).LE.0) GO TO 300
      IF (ISTORE(MQ+5).NE.0) GO TO 450
      ICHNG=ICHNG+1
C
C -- DETERMINE MOVE DIRECTION FOR ATOMS
C
      IENDMV=M5A+(N5A-1)*MD5A
      IF (NXTATM.GT.IENDMV) THEN
         IMOVE=1
         IMOVTO=NXTATM-MD5A
         INCREM=0
      ELSE IF (NXTATM.LT.M5A) THEN
         IMOVE=2
         IMOVTO=NXTATM
         INCREM=MD5A
      ELSE
         IMOVE=0
         IMOVTO=M5A
         NXTATM=M5A
         INCREM=MD5A
      END IF
C -- CHANGE THE LIST
C
      DO 200 I=1,N5A
C
C -- MOVE THE ATOM INTO WORK SPACE
         CALL XMOVE (STORE(M5A),STORE(ITEMP),MD5A)
C -- CHECK IF WE SHOULD CHANGE ITS SERIAL NUMBER
         IF (ISEQ.LT.0) GO TO 150
         STORE(ITEMP+1)=SEQ
         SEQ=SEQ+1.0
150      CONTINUE
C -- CHECK ADDRESS OF ATOM TO BE MOVED AND NEW ADDRESS
C
         IF (IMOVE.EQ.1) THEN
C -- MOVE ATOM AWAY FROM 'L5'. THIS IS NOT ALLOWED FOR 'KEEP'
            IF (JY.EQ.1) GO TO 550
C
            IFROM=M5A+MD5A
            ITO=M5A
            NMOVE=IMOVTO-M5A
C
            CALL XMOVE (STORE(IFROM),STORE(ITO),NMOVE)
         ELSE IF (IMOVE.EQ.2) THEN
C -- MOVE ATOM TOWARDS 'L5'
            IFROM=IMOVTO
            ITO=IMOVTO+MD5A
            NMOVE=M5A-IMOVTO
C
            CALL XMOVE (STORE(IFROM),STORE(ITO),NMOVE)
         END IF
C
C -- APPLY SYMMETRY WHILE MOVING ATOM BACK TO CORRECT POSITION
         IF (KATOMS(MQ,ITEMP,IMOVTO).LT.0) GO TO 300
C
C -- MONITOR ATOM
         CALL XMDMON (IMOVTO,MD5,1,1,1,IMSG,1,MONLVL,2,0,ISTORE(IMONBF))
C
C -- UPDATE ADDRESSES AND COUNTERS
         M5A=M5A+INCREM
         IMOVTO=IMOVTO+INCREM
         NXTATM=NXTATM+INCREM
C
         NKEEP=NKEEP+JY
C
200   CONTINUE
C
C--CHECK IF THERE ARE ANY MORE ARGUMENTS
      IF (KOP(8).GE.0) GO TO 50
C
C -- SUCCESSFUL COMPLETION
C
      KMDMOV=1
C
250   CONTINUE
      CALL XSTRLL (ITEMP)
      RETURN
C
300   CONTINUE
C -- ERRORS
      KMDMOV=-1
      GO TO 250
C
C
350   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,400)
      WRITE (NCAWU,400)
      WRITE (CMON,400)
      CALL XPRVDU (NCVDU,1,0)
400   FORMAT (1X,'No arguments found')
      GO TO 300
450   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,500)
      WRITE (NCAWU,500)
      WRITE (CMON,500)
      CALL XPRVDU (NCVDU,1,0)
500   FORMAT (1X,'Parameter specifications are illegal for this ','instr
     1uction')
      GO TO 300
550   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,600)
      WRITE (NCAWU,600)
      WRITE (CMON,600)
      CALL XPRVDU (NCVDU,1,0)
600   FORMAT (1X,'An atom may not be KEPT more than once')
      GO TO 300
      END
CODE FOR KMDSRT
      FUNCTION KMDSRT (ISRT)
C
C -- IMPLEMENT 'SORT' DIRECTIVE FOR 'EDIT'
C
C      ISRT :  +1 FOR INCREASING SORT
C              -1 FOR DECREASING SORT
C
C      RETURN VALUES :-
C            -1      FAILURE DURING SORTING
C            +1      SUCCESS
C
C -- THE ROUTINE WORKS AS FOLLOWS :-
C
C  1)  THE INPUT DIRECTIVE IS SCANNED FOR DATA INDICATING ATOM TYPES.
C      IF AN ATOM TYPE IS FOUND, LIST 5 IS SEARCHED FOR ATOMS OF THAT
C      TYPE, AND THEIR ADDRESSES ARE STORED IN A VECTOR, USING 'XMDEXT'
C  2)  AFTER ALL TYPES SPECIFIED EXPLICITLY ON THE DIRECTIVE HAVE BEEN
C      PROCESSED, LIST 5 IS SCANNED AND ANY ATOM TYPES NOT YET PROCESS-
C      ED ARE FOUND. FOR EACH ATOM TYPE FOUND, THE ADDRESSES OF ALL
C      ATOMS OF THAT TYPE ARE STORED IN THE VECTOR, USING 'XMDEXT'
C      ( THIS LEADS TO THE DEFAULT ACTION, IF NO TYPES ARE SPECIFIED
C      EXPLICITLY, OF SORTING TYPES IN ORDER OF THEIR APPEARANCE IN
C      LIST 5 )
C  3)  THE DATA IS SORTED, USING THE ROUTINE 'XMDSRK', ON THE BASIS OF
C      THE SERIAL NUMBERS IN EACH SET OF ATOMS OF A SINGLE TYPE.
C  4)  LIST 5 IS REORDERED TO REFLECT THE RESULTS OF THE SORTING
C
C
\ISTORE
C
\STORE
\XAPK
\XLST05
\XUNITS
\XSSVAL
\XLEXIC
\XERVAL
\XOPVAL
C
\QSTORE
C
C
C -- **** INITIALISATION SECTION ****
C
      IFOUND=KSTALL(N5)
      CALL XZEROF (ISTORE(IFOUND),N5)
C
      IADDRS=KSTALL(N5*1)
      CALL XZEROF (ISTORE(IADDRS),N5)
C----- SET DEFAULTS
      ISEROF=1
      JTYPE=-1
      MADDRS=IADDRS
      IBUFFR=KSTALL(MD5)
C
      M5=L5+(N5-1)*MD5
C
C
C -- **** FIND ATOMS OF EXPLICITLY SPECIFIED TYPES ****
C
50    CONTINUE
      IF (ME.LE.0) GO TO 100
      IF (ISTORE(MF).GE.0) GO TO 450
C
      ITYPE=ISTORE(MF+2)
C----- SEE IF THIS IS A PARAMETER NAME
      JTYPE=KCOMP(1,ITYPE,ICOORD,NKA,LKA)
      IF (JTYPE.EQ.-1) THEN
C-----       NOT PARAMETER NAME, SET TO 'SERIAL'
         ISEROF=1
      ELSE
         ISEROF=MIN0(JTYPE,NKA)-1
      END IF
      ME=ME-1
      MF=MF+LK2
C
      CALL XMDEXT (L5,M5,MD5,ITYPE,JTYPE,IFOUND,MADDRS)
C
      ISTAT=KOP(8)
      IF (ISTAT.GT.0) GO TO 50
C
C -- **** MOVE REMAINING ATOMS INTO BUFFER ****
C
100   CONTINUE
C
      MFOUND=IFOUND
      DO 150 I=L5,M5,MD5
         IF (ISTORE(MFOUND).LE.0) THEN
            CALL XMDEXT (I,M5,MD5,ISTORE(I),JTYPE,MFOUND,MADDRS)
         END IF
         MFOUND=MFOUND+1
150   CONTINUE
C
      MADDRS=MADDRS-1
C
C -- **** REORDER EACH SET OF ATOMS ****
C
      IFIRST=IADDRS
      IADDR=ISTORE(IFIRST)
      ILTYPE=ISTORE(IADDR)
C
      IADDR=ISTORE(IADDRS)
C----- CHECK IF SORTING BY GENERIC PARAMETER
      IF (JTYPE.EQ.-1) THEN
C
         DO 200 I=IADDRS,MADDRS
C
            IADDR=ISTORE(I)
C
            IF (ISTORE(IADDR).NE.ILTYPE) THEN
               NSORT=I-IFIRST
               IF (ISRT.GE.0) THEN
                  CALL XMDSRK (ISTORE(IFIRST),NSORT,ISEROF)
               ELSE
                  CALL XMDSRD (ISTORE(IFIRST),NSORT,ISEROF)
               END IF
C
               IFIRST=I
               ILTYPE=ISTORE(IADDR)
            END IF
C
200      CONTINUE
C
      END IF
C
      NSORT=MADDRS-IFIRST+1
      IF (ISRT.GE.0) THEN
         CALL XMDSRK (ISTORE(IFIRST),NSORT,ISEROF)
      ELSE
         CALL XMDSRD (ISTORE(IFIRST),NSORT,ISEROF)
      END IF
C
C -- **** SORT LIST 5 INTO NEW ORDER ****
C
      M5=L5
C
      DO 300 I=IADDRS,MADDRS
C
         IADDR=ISTORE(I)
C
         IF (IADDR.LT.M5) THEN
            GO TO 500
         ELSE IF (IADDR.EQ.M5) THEN
         ELSE
            CALL XMOVEI (ISTORE(M5),ISTORE(IBUFFR),MD5)
            CALL XMOVEI (ISTORE(IADDR),ISTORE(M5),MD5)
            CALL XMOVEI (ISTORE(IBUFFR),ISTORE(IADDR),MD5)
C
            DO 250 J=I+1,MADDRS
               IF (ISTORE(J).EQ.M5) ISTORE(J)=IADDR
250         CONTINUE
C
         END IF
         M5=M5+MD5
300   CONTINUE
C
      KMDSRT=1
C
350   CONTINUE
C
      CALL XSTRLL (IFOUND)
C
      RETURN
C
C
400   CONTINUE
      KMDSRT=-1
      GO TO 350
450   CONTINUE
      CALL XILOPD (ISTORE(MF+1))
      GO TO 400
500   CONTINUE
      CALL XOPMSG (IOPLSM,IOPINT,0)
      GO TO 400
C
C
      END
CODE FOR XMDEXT
      SUBROUTINE XMDEXT (LATOM,MATOM,MDATOM,ICOMP,JTYPE,LFOUND,MADDRS)
C
C -- FIND ATOMS IN LIST 5 CORRESPONDING TO THE SPECIFIED TYPE, AND
C    STORE THEIR ADDRESSES
C
C      LATOM,MATOM  START/END ADDRESS IN 'STORE' OF LIST 5 ( WHOLE
C                    OR PART )
C      MDATOM      WORDS PER ATOM IN LIST 5
C      ICOMP       'TYPE' TO BE SELECTED
C      LFOUND      ADDRESS IN 'ISTORE' OF VECTOR MARKING ATOMS ALREADY
C                    FOUND
C      MADDRS      ADDRESS IN 'ISTORE' OF LOCATION AT WHICH ADDRESS OF
C                    THE NEXT ATOM FOUND WILL BE STORED. THIS VALUE IS
C                    UPDATED BY THIS ROUTINE
C
C
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XERVAL
\XIOBUF
C
\QSTORE
C
      MFOUND=LFOUND
C
      DO 50 I=LATOM,MATOM,MDATOM
C----- CHECK IF SORTING BY GENERIC PARAMETER OR SPECIFIED TYPE
         IF ((JTYPE.NE.-1).OR.(ISTORE(I).EQ.ICOMP)) THEN
            IF (ISTORE(MFOUND).GT.0) GO TO 100
C
            ISTORE(MADDRS)=I
            MADDRS=MADDRS+1
C
            ISTORE(MFOUND)=1
         END IF
         MFOUND=MFOUND+1
50    CONTINUE
C
      RETURN
C
C
100   CONTINUE
      IF (ISSPRT.EQ.0) WRITE (NCWU,150) ICOMP
      WRITE (NCAWU,150) ICOMP
      WRITE (CMON,150) ICOMP
      CALL XPRVDU (NCVDU,1,0)
150   FORMAT (1X,'Type ',A4,' has been repeated')
      CALL XERHND (IERWRN)
      RETURN
      END
CODE FOR XMDSRK
      SUBROUTINE XMDSRK (ITAG,NTAG,IOFFST)
C
C -- SORT THE ADDRESSES OF VARIOUS ATOMS IN LIST 5 ACCORDING TO THE
C    VALUE OF SOME PARAMETER. THE ATOMS WILL BE SORTED INTO ASCENDING
C    ORDER
C
C      ITAG(NTAG)  ARRAY CONTAINING THE ADDRESSES TO BE SORTED
C      IOFFST      ADDRESS RELATIVE TO ADDRESS FROM 'ITAG' OF VALUE
C                    ON WHICH ITEMS ARE TO BE SORTED. ( E.G. FOR
C                    SORTING ON SERIAL NUMBER, IOFFST = 1. THE ADDRESS
C                    OF EACH ATOM IN LIST 5 POINTS TO ITS TYPE )
C
C -- THIS ROUTINE USES A SHUTTLE SORT. EACH ITEM IS COMPARED WITH THE
C    PRECEDING ONE. IF IT IS LESS, THEY ARE EXCHANGED AND A NEW COMPAR-
C    ISON IS MADE WITH THE NEW PREDECESSOR. WHEN EACH ITEM HAS BE
C    TREATED IN THIS WAY, THE SORT IS FINISHED
C
C
      DIMENSION ITAG(NTAG)
C
C
\ISTORE
C
\STORE
C
\QSTORE
C
C
      DO 100 I=1,NTAG
C
         IPOS=I
C
50       CONTINUE
         IF (IPOS.GT.1) THEN
            IADDR=ITAG(IPOS)
            IPADDR=ITAG(IPOS-1)
            IF (STORE(IADDR+IOFFST).LT.STORE(IPADDR+IOFFST)) THEN
               ISAVE=ITAG(IPOS-1)
               ITAG(IPOS-1)=ITAG(IPOS)
               ITAG(IPOS)=ISAVE
               IPOS=IPOS-1
               GO TO 50
            END IF
         END IF
C
100   CONTINUE
C
C
      RETURN
      END
CODE FOR XMDSRD
      SUBROUTINE XMDSRD (ITAG,NTAG,IOFFST)
C
C -- SORT THE ADDRESSES OF VARIOUS ATOMS IN LIST 5 ACCORDING TO THE
C    VALUE OF SOME PARAMETER. THE ATOMS WILL BE SORTED INTO DESCENDING
C    ORDER
C
C      ITAG(NTAG)  ARRAY CONTAINING THE ADDRESSES TO BE SORTED
C      IOFFST      ADDRESS RELATIVE TO ADDRESS FROM 'ITAG' OF VALUE
C                    ON WHICH ITEMS ARE TO BE SORTED. ( E.G. FOR
C                    SORTING ON SERIAL NUMBER, IOFFST = 1. THE ADDRESS
C                    OF EACH ATOM IN LIST 5 POINTS TO ITS TYPE )
C
C -- THIS ROUTINE USES A SHUTTLE SORT. EACH ITEM IS COMPARED WITH THE
C    PRECEDING ONE. IF IT IS MORE, THEY ARE EXCHANGED AND A NEW COMPAR-
C    ISON IS MADE WITH THE NEW PREDECESSOR. WHEN EACH ITEM HAS BE
C    TREATED IN THIS WAY, THE SORT IS FINISHED
C
C
      DIMENSION ITAG(NTAG)
C
C
\ISTORE
C
\STORE
C
\QSTORE
C
C
      DO 100 I=1,NTAG
C
         IPOS=I
C
50       CONTINUE
         IF (IPOS.GT.1) THEN
            IADDR=ITAG(IPOS)
            IPADDR=ITAG(IPOS-1)
            IF (STORE(IADDR+IOFFST).GT.STORE(IPADDR+IOFFST)) THEN
               ISAVE=ITAG(IPOS-1)
               ITAG(IPOS-1)=ITAG(IPOS)
               ITAG(IPOS)=ISAVE
               IPOS=IPOS-1
               GO TO 50
            END IF
         END IF
C
100   CONTINUE
C
C
      RETURN
      END
CODE FOR KMDINS
      FUNCTION KMDINS (KEY)
C
C----- INSERT AN ITEM FROM LIST 3 OR LIST 29 INTO THE 'SPARE' SLOT
C
C----- KEY3 MAXIMUM VALUE FOR 'KEY' TO BE LOOKED FOR IN LIST3
C      NKEY MAXIMUM NUMBER OF KEYS
C      KEY   1 GET Z FROM LIST3
C            2     ATOMIC WEIGHT FROM LIST 29
C
      PARAMETER (KEY3=1,NKEY=2)
C----- KVAL, THE OFFSET IN THE APPROPRIATE LIST OF THE REQUIRED KEY
      DIMENSION KVAL(NKEY)
\ISTORE
\STORE
\XMDCOM
\XLST03
\XLST05
\XLST29
\QSTORE
      DATA KVAL/1,6/
C
      KMDINS=-1
      IF (KEY.LE.KEY3) THEN
C-----  SET LIST 3 ADDRESSES
         IF (KHUNTR(3,0,I,K,J,-1).GE.0) THEN
            KMDINS=1
            LINS=L3
            MDINS=MD3
            NINS=N3
         END IF
      ELSE
C-----  SET LIST 29 ADDRESSES
         IF (KHUNTR(29,0,I,K,J,-1).GE.0) THEN
            KMDINS=1
            LINS=L29
            MDINS=MD29
            NINS=N29
         END IF
      END IF
      IF (KMDINS.LT.0) RETURN
C      LIST 5 OF CORRECT LENGTH?
      IF (MD5.GE.14) KMDINS=1
C----- LIST DOESNT EXIST OR LIST 5 TOO SHORT
      IF (KMDINS.LT.0) RETURN
C----- SET OFFSET FOR REQUIRED DATA
      KEYO=KVAL(KEY)
      M5=L5
      DO 150 I=1,N5
         MINS=LINS
         DO 50 J=1,NINS
            IF (ISTORE(M5).EQ.ISTORE(MINS)) THEN
               IF (KEY.EQ.1) THEN
C                 SPECIAL CASE, SUM OF FORMFACTOR F', A AND C TERMS
                  STORE(M5+13)=STORE(MINS+KEYO)+STORE(MINS+KEYO+2)+
     1             STORE(MINS+KEYO+4)+STORE(MINS+KEYO+6)+STORE(MINS+
     2             KEYO+8)+STORE(MINS+KEYO+10)
               ELSE
                  CALL XMOVE (STORE(MINS+KEYO),STORE(M5+13),1)
               END IF
               GO TO 100
            END IF
            MINS=MINS+MDINS
50       CONTINUE
         STORE(M5+13)=0.0
100      CONTINUE
         M5=M5+MD5
150   CONTINUE
      ICHNG=ICHNG+1
      CALL XMDMON (L5,MD5,N5,3,1,1,1,MONLVL,2,1,ISTORE(IMONBF))
      RETURN
      END
