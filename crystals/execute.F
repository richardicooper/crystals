C $Log: execute.F,v $
C Revision 1.7  2011/09/30 11:14:47  djw
C Add COMMENT
C
C Revision 1.6  2005/01/23 08:29:11  rich
C Reinstated CVS change history for all FPP files.
C History for very recent (January) changes may be lost.
C
C Revision 1.1.1.1  2004/12/13 11:16:10  rich
C New CRYSTALS repository
C
C Revision 1.5  2003/08/05 11:11:11  rich
C Commented out unused routines - saves 50Kb off the executable.
C
C Revision 1.4  2001/02/26 10:25:32  richard
C Added changelog to top of file
C
C
CODE FOR XLCLFP
      SUBROUTINE XLCLFP(IULN)
C--LOAD COMPILED LIST FOR PROCESSING
C
C  IULN    THE LIST NUMBER TO LOAD FOR PROCESSING.
C
C--THE COMMON BLOCK 'XCNTRL' CONTROLS THE FORMAT OF THE
C  INFORMATION OUTPUT TO THE DISC. WHILE THE LIST IS STILL IN
C  CORE, THE VARIABLES HAVE THE FOLLOWING SIGNIFICANCE :
C
C  LC      BASE ADDRESS OF THE WORK STACK, WHICH HOLDS CONSTANTS
C          AND VARIABLES GENERATED BY THE CODE.
C          THIS VARIABLE SET UP DYNAMICALLY BOTH DURING SYNTAX
C          ANALYSIS AND DURING EXECUTION, AND IS THUS NOT OUTPUT TO
C          DISC.
C  ISTAT2  THIS IS A PRINT CONTROL FLAG :
C
C          -1  PRINT THE CARD IMAGES AS THEY ARE PROCESSED.
C           0  NO PRINTING.
C          +1  PRINT THE CARD IMAGES AND THE GENERATED CODE.
C
C--THE REMAINING 12 WORDS OF THIS COMMON BLOCK ARE OUTPUT TO THE
C  DISC AND DEFINE THE LOCATIONS AND LENGTH OF THE REMAINING BLOCKS
C  ASSOCIATED WITH THIS INSTRUCTION. IN CORE THE FORMAT OF THIS CONTROL
C  BLOCK IS :
C
C  LCG   ADDRESS IN CORE OF THE HEADER BLOCK FOR THE GENERAL CHAIN.
C        FOR OUTPUT PRODUCED BY THE PARSE ROUTINES, THIS CHAIN CONTAINS
C        ONLY INSTRUCTIONS OR CODE. IN OTHER CASES THE CONTENTS
C        OF THE CHAIN ARE DEFINED BY THE FUNCTION OF THE ROUTINE
C        THAT SET IT UP.
C        (ON THE DISC, THIS VARIABLE IS STORED RELATIVE TO 'LCG',
C        THAT IS AS ZERO).
C  MCG   CURRENT ADDRESS IN CORE OF THE NEXT FREE WORD FOR THE GENERAL,
C        PARAMETER HEADER AND CONSTANT CHAINS. THESE CHAINS MOVE UP THE
C        STORE AND MUST UPDATE 'MCG' AS THEY DO SO.
C  MDCG  CURRENT ADDRESS IN CORE OF THE LAST GENERAL (OR INSTRUCTION)
C        BLOCK INSERTED.
C  NCG   NOT DEFINED.
C        (ON THE DISC, THIS VARIABLE IS SET TO THE TOTAL LENGTH
C        OF ALL THE CHAINS FORMED AT THE BOTTOM OF CORE  -  THE
C        GENERAL, PARAMETER AND CONSTANT CHAINS).
C
C  LCA   ADDRESS IN CORE OF THE FIRST BLOCK ON THE PARAMETER HEADER
C        BLOCK CHAIN.
C        (ON THE DISC, THIS VARIABLE IS STORED WITH ITS ADDRESS
C        SET RELATIVE TO 'LCG').
C  MCA   USED TO PROCESS THE PARAMETER HEADER BLOCK CHAIN.
C  MDCA  USED TO PROCESS THE PARAMETER HEADER BLOCK CHAIN.
C  NCA   NUMBER OF PARAMETER HEADER BLOCKS ON THE CHAIN.
C
C  LCS   ADDRESS IN CORE OF THE CONSTANT AND WORK STACK HEADER BLOCK.
C        (ON THE DISC, THIS VARIABLE IS STORED WITH ITS ADDRESS
C        SET RELATIVE TO 'LCG').
C  MCS   CURRENT ADDRESS OF THE LAST BLOCK INSERTED ON THE CONSTANT
C        CHAIN. THIS MUST BE UPDATED WHEN A NEW BLOCK IS ADDED.
C  MDCS  NEXT FREE ADDRESS IN THE WORK STACK. THIS STACK STARTS AT
C        'LC' AND COMES DOWN THE STORE.
C        (THIS PARAMETER SHOULD BE UPDATED WHENEVER SPACE IS
C        ALLOCATED IN THE WORK STACK).
C
C--DURING ALL OPERATIONS EXCEPT PARSING BY 'KPARSE', THE NEXT FREE
C  LOCATION IS STORED IN 'MCG' AND THE LAST FREE LOCATION IS HELD IN 'LF
C
C--FORMAT OF THE GENERAL CHAIN HEADER BLOCK IS :
C
C  0  ADDRESS OF THE FIRST BLOCK ON THE CHAIN REL. TO 'LCG' OR 'NOWT'.
C  1  TYPE OF OPERATION DESCRIBED BY THIS HEADER BLOCK AND ALL THE
C     OTHER HEADER BLOCKS DEFINED BY THE CONTROL BLOCK.
C  2  NOT DEFINED  -  FOR CONSTRAINTS MAY BE A WORK STACK ADDRESS REL.
C                     TO 'LC'..
C  3  NOT DEFINED  -  FOR CONSTRAINTS THE WEIGHT.
C  4  NOT DEFINED  -  FOR CONSTRAINTS THE INPUT OR OBSERVED VALUE.
C
C--THE FORMAT OF THE INSTRUCTION BLOCKS ON THE CHAIN IS :
C
C  0  ADDRESS OF THE NEXT BLOCK RELATIVE TO 'LCG' OR 'NOWT'.
C  1  FUNCTION OF THIS BLOCK.
C  2  ADDRESS IN THE WORK STACK RELATIVE TO 'LC'  -  OPERAND 1.
C  3  ADDRESS IN THE WORK STACK RELATIVE TO 'LC'  -  OPERAND 2.
C  4  ADDRESS IN THE WORK STACK RELATIVE TO 'LC'  -  THE RESULT.
C
C--THE TERMS IN WORDS 2, 3 AND 4 ARE THOSE SET UP BY THE PARSE ROUTINES,
C  AND THE ADDRESSES ARE CONVERTED TO ABSOLUTE VALUES BY 'KLOADR' WHEN
C  THE INFORMATION IS READ BACK FROM THE DISC.
C  THE FORMAT OF THE BLOCK BEYOND WORD 4 IS NOT DEFINED, AND THESE
C  LOCATIONS MAY BE USED AS REQUIRED.
C
C--THE PARAMETER HEADER BLOCKS ARE DIVIDED INTO THOSE FOR ATOMS
C  AND THOSE FOR OVERALL PARAMETERS. THE FORMAT OF THE FORMER IS
C  AS FOLLOWS :
C
C  0   ADDR. OF NEXT HEADER BLOCK REL. TO LCG OR 'NOWT'
C  1   TYPE OF HEADER BLOCK :
C         0  HEADER BLOCK FOR ONE ATOM
C      1024  HEADER BLOCK FOR THE FIRST ATOM OF AN 'UNTIL' SEQUENCE
C  2   ATOM TYPE
C  3   ATOM SERIAL
C  4   NOT USED
C  5   NUMBER OF PARAMETERS
C  6   ADDR. OF FIRST PARAMETER ENTRY REL. TO 'LCG'
C  7   S
C  8   L
C  9   T(X)
C  10  T(Y)
C  11  T(Z)
C  12  ADDR. OF THIS ATOM IN LIST 5 (NOT SET HERE)
C  13  ADDR. OF THIS ATOM IN LIST 12 (NOT SET HERE)
C  14  NOT USED
C  15  ADDR. OF GENERATED PARAMETERS IN WORK STACK REL. TO 'LC'
C  16  ADDR. OF PARAMETERS TO BE USED IN WORK STACK REL. TO 'LC'
C
C--FOR EACH PARAMETER :
C
C  0   LINK TO NEXT PARAMETER REL. TO 'LCG' OR 'NOWT'.
C  1   REL. ADDR. IN LIST 5 (U[ISO]=4, FOR EXAMPLE).
c                           Bad example: 4 is now a flag
C  2   PARTIAL DERIVATIVE WHEN CALCULATED.
C  .
C
C--THE INFORMATION FOR EACH OVERALL PARAMETER ALSO CONSISTS OF A HEADER
C  WITH THE SPECIFIED PARAMETER GIVEN AS THE COORDINATE ON THE CHAIN AT
C  WORD 6.
C
C  0   ADDR. OF NEXT HEADER BLOCK REL. TO 'LCG' OR 'NOWT'.
C  1   TYPE :
C      1  OVERALL PARAMETER
C      2  LAYER SCALE
C      3  ELEMENT SCALE
C  2   THE POSITION OF THE PARAMETER IN ITS GROUP
C  3   0.0
C  4   NOT USED
C  5   THE NUMBER OF PARAMETERS ON THE CHAIN GIVEN AT WORD 6.
C  6   ADDRESS OF THE PARAMETER CHAIN REL. TO 'LCG' (STARTS AT WORD 7).
C  7   'NOWT'  LINK TO THE NEXT PARAMETER ON THE CHAIN
C  8   THE POSITION OF THE PARAMETER IN ITS GROUP (STARTING FROM 1).
C  9   NOT USED
C  10  'NOWT'
C  11  'NOWT'
C  12  ADDR. OF THE GROUP CONTAINING THIS PARAMETER IN LIST 5 ('NOWT')
C  13  ADDR. OF THE GROUP CONTAINING THIS PARAMETER IN LIST 12 ('NOWT'
C  14  NOT USED
C  15  ADDR. OF THE PARAMETER IN THE WORK STACK REL. TO 'LC'
C  16  ADDR. OF THE SPACE TO BE USED IN THE WORK STACK REL. TO 'LC'
C
C--THE FORMAT OF THE CONSTANT AND WORK STACK HEADER IS :
C
C  0  ADDRESS OF THE NEXT CONSTANT OR WORK STACK HEADER RELATIVE
C     TO 'LCG' OR 'NOWT'.
C  1  LENGTH OF THIS BLOCK (=6)
C  2  ADDRESS AT WHICH THE WORK STACK BEGINS REL. TO 'LC' OR 'NOWT'
C  3  NUMBER OF WORDS REQUIRED FOR THE WORK STACK.
C  4  ADDRESS OF THE FIRST CONSTANT BLOCK ON THE CONSTANT CHAIN REL. TO
C     'LCG' OR 'NOWT'.
C  5  NUMBER OF CONSTANTS ON THE CONSTANT CHAIN.
C
C--THE FORMAT OF THE CONSTANT CHAIN IS :
C
C  0  ADDRESS OF THE NEXT CONSTANT BLOCK RELATIVE TO 'LCG' OR 'NOWT'
C  1  ADDRESS OF THIS CONSTANT IN THE WORK STACK RELATIVE TO 'LC'.
C  2  THE VALUE TO BE PLACED IN THE WORK STACK.
C
C--
      INCLUDE 'ICOM26.INC'
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XLST26.INC'
      INCLUDE 'XCNTRL.INC'
C
      INCLUDE 'QLST26.INC'
C
      INCLUDE 'IDIM26.INC'
C--LOAD THE LIST, FINDING ONLY THE FIRST DISC ADDRESS
      CALL XLDLST(-IULN,ICOM26,IDIM26,0)
C--SET THE LAST DISC ADDRESS
      M26D=0
C--SET THE BAST OF THE STACK POINTER
      LCG=NFL
      RETURN
      END
C
CODE FOR KLOADR
      FUNCTION KLOADR(IB)
C--LOAD THE NEXT BLOCK OF CODE INTO THE CORE FOR PROCESSING
C
C--THE RETURN VALUES OF 'KLOADR' ARE :
C
C   1  END OF THE CODE
C   0  LOAD ENDS OKAY
C  -1  ERROR FOUND DURING LOAD
C
C--THIS SUBROUTINE CONVERTS ALL THE RELATIVE ADDRESSES INTO
C  ABSOLUTE ADDRESSES.
C
C--
      INCLUDE 'HEADES.INC'
      INCLUDE 'ICNTRL.INC'
      INCLUDE 'ISTORE.INC'
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XSSVAL.INC'
      INCLUDE 'XLISTI.INC'
      INCLUDE 'XCONST.INC'
      INCLUDE 'XLST26.INC'
      INCLUDE 'XCNTRL.INC'
      INCLUDE 'XLST05.INC'
      INCLUDE 'XLST12.INC'
      INCLUDE 'XAPK.INC'
      INCLUDE 'XERVAL.INC'
      INCLUDE 'XIOBUF.INC'
C
      INCLUDE 'QCNTRL.INC'
      INCLUDE 'QSTORE.INC'
C
      IB = IB
C--START THE SEQUENCE FOR THE NEXT LOAD
      KLOADR=1
C--CHECK IF THERE IS ANOTHER RECORD
1000  CONTINUE
      IF(KLDDRH(M26D,L26D,IBUFF))2500,1050,1050
C--CHECK THE TYPE OF THIS RECORD  -  SHOULD BE COMMON BLOCK DATA
1050  CONTINUE
      IF(IBUFF(7)+101)1000,1100,1000
C--RECORD IS OKAY  -  LOAD THE COMMON BLOCK DATA
1100  CONTINUE
      LCGTMP=LCG
      CALL XDOWNF(IBUFF(4),ICNTRL(1),IBUFF(5)*IBUFF(6))
C--FETCH THE DATA FOR THE NEXT RECORD
      IF(KLDDRH(M26D,L26D,IBUFF))1150,1250,1250
C--NO RECORD OT IT IS OF THE WRONG TYPE
1150  CONTINUE
      CALL XERHDR(-1)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1200)IBUFF
      ENDIF
       WRITE(NCAWU,1200)IBUFF
      WRITE ( CMON, 1200) IBUFF
      CALL XPRVDU(NCEROR, 2,0)
1200  FORMAT(' Chain error in ''KLOADR'' :',/,8I10)
      CALL XERHND ( IERPRG )
C--CHECK THE TYPE OF RECORD
1250  CONTINUE
      IF(IBUFF(7)+102)1150,1300,1150
C--SET THE RECORD LENGTH
1300  CONTINUE
      NCG=IBUFF(5)*IBUFF(6)
      KLOADR=0
C--RESET THE LOAD ADDRESS IN CORE
      LCG=LCGTMP
C--RELOCATE THE STACK ADDRESSES
      LCA=LCA+LCG
      LCS=LCS+LCG
C--CHECK IF THIS WILL FIT THE CORE AVAILABLE
      NFL=LCG+NCG
      IF(NFL-LFL)1350,1400,1400
C--BRING DOWN THE NEXT BLOCK OF CODE AND DATA
1350  CONTINUE
      CALL XDOWNF(IBUFF(4),STORE(LCG),NCG)
C--BEGIN RELOCATION OF THE WORK STACK AREA
      I=LCS
      ISTORE(I+4)=ISTORE(I+4)+LCG
      MDCS=ISTORE(LCS+2)-ISTORE(LCS+3)+LC
C--CHECK THAT THE REQUIRED AREA IS NOT TOO LARGE
      IF(NFL+27-MDCS)1500,1400,1400
C--NOT ENOUGH CORE FOR THIS LOAD OPERATION
1400  CONTINUE
      CALL XERHDR(0)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1450)
      ENDIF
      WRITE(NCAWU,1450)
      WRITE ( CMON, 1450)
      CALL XPRVDU(NCEROR, 1,0)
1450  FORMAT(' Insufficient memory to relocate data from disc')
      GOTO 2100
C
C--SORT OUT THE CONSTANTS
1500  CONTINUE
      J=ISTORE(I+4)
C--CHECK IF THERE ANY MORE CONSTANTS TO INCLUDE
1550  CONTINUE
      IF(J)1700,1700,1600
1600  CONTINUE
      ISTORE(J)=ISTORE(J)+LCG
      ISTORE(J+1)=ISTORE(J+1)+LC
      L=ISTORE(J+1)
      STORE(L)=STORE(J+2)
      STORE(L+1)=0.0
      J=ISTORE(J)
      GOTO 1550
C
C--BEGIN TO UNPACK THE PARAMETER INFORMATION
1700  CONTINUE
      IF(ISTAT2)1850,1850,1750
1750  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1800)
      ENDIF
      WRITE(NCAWU,1800)
1800  FORMAT(//47H Full loader listing, including the coordinates,
     2 21H of generated atoms :/)
1850  CONTINUE
      I=LCA
      NCA=0
1900  CONTINUE
      IF(I)3300,3300,1950
C--CHECK IF THIS IS AN ATOM HEADER OR AN OVERALL PARAMETER HEADER
1950  CONTINUE
      ISTORE(I)=ISTORE(I)+LCG
      KA=ISTORE(I+1)-ISTORE(I+1)/1024*1024
      IF(KA)2000,2000,3000
C--THIS IS AN ATOM  -  FIND IT IN LIST 5
2000  CONTINUE
      L=I+2
      M5=L5
      K=N5
      M12=L12
      IF(KATOMF(STORE(L),M5,K,MD5,M12))2050,2550,2050
C--ERROR BECAUSE THE ATOM IS NOT IN LIST 5
2050  CONTINUE
      CALL XERHDR(0)
      CALL XMISL5(0,0,L)
C--ERROR RETURN
2100  CONTINUE
      KLOADR=-1
      GOTO 2500
C--NORMAL RETURN  -  CHECK FOR PRINT OF THE LOADED INFORMATION
2150  CONTINUE
      IF(ISTAT2)2500,2500,2200
2200  CONTINUE
      CALL XPRTOC(0,0)
      I=LCA
C--CHECK FOR END OF CHAIN
2250  CONTINUE
      IF(I)2500,2500,2300
C--FIND THE TYPE OF HEADER
2300  CONTINUE
      J=ISTORE(I+1)-ISTORE(I+1)/1024*1024
      L=ISTORE(I+16)
C--CHECK FOR AN ATOM
      IF(J)2400,2350,2400
C--THIS IS AN ATOM
2350  CONTINUE
      K=L+24
      WRITE(NCAWU,2360)(STORE(M),M=L,K,2)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2360)(STORE(M),M=L,K,2)
      ENDIF
2360  FORMAT(1H ,A4,5X,12F9.4)
      GOTO 2460
C--PRINT THE SPREAD DATA
2400  CONTINUE
      K=L
      WRITE(NCAWU,2450)(STORE(M),M=L,K,2)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2450)(STORE(M),M=L,K,2)
      ENDIF
2450  FORMAT(1H ,13F9.4)
C--MOVE TO THE NEXT LINK ALONG THE CHAIN
2460  CONTINUE
      I=ISTORE(I)
      GOTO 2250
2500  CONTINUE
      RETURN
C--ATOM FOUND  -  SET UP THE ADDRESSES
2550  CONTINUE
      ISTORE(I+12)=M5
      ISTORE(I+13)=M12
      ISTORE(I+15)=ISTORE(I+15)+LC
      ISTORE(I+16)=ISTORE(I+16)+LC
      ISTORE(I+6)=ISTORE(I+6)+LCG
      J=ISTORE(I+6)
C--RELOCATE THE COORDINATE ADDRESSES
2600  CONTINUE
      IF(J)2700,2700,2650
2650  CONTINUE
      ISTORE(J)=ISTORE(J)+LCG
      STORE(J+2)=0.0
      J=ISTORE(J)
      GOTO 2600
C--CHECK IF WE SHOULD ASSIGN THE SPREAD COORDINATES
2700  CONTINUE
      IF(ISTORE(I+15))2950,2950,2750
C--WE MUST SET UP THE SPREAD PARAMETERS  -  CHECK THE HEADER TYPE
2750  CONTINUE
      KB=1
      IF(KA)2800,2800,2850
C--FORM THE GENERATED ATOM
2800  CONTINUE
C      KB=NKA
      KB=MD5
      IF(KATOMS(I,ISTORE(I+12),ISTORE(I+15)))2100,2100,2900
C--OVERALL PARAMETER  -  INSERT THE VALUE IN THE WORK AREA
2850  CONTINUE
      K=ISTORE(I+15)
C ELEMENT(n) getting out of step - bug exists in 1985 executable.
C Code was correct in 1979 listing. Why was it changed?
CDEC97      L = ISTORE(I+12) + ISTORE(I+2)
CDEC97      STORE(K) = STORE(L-1)
      L = ISTORE(I+12)
      STORE(K) = STORE(L)
C--SHIFT TO THE PLACE TO BE USED
2900  CONTINUE
      K=ISTORE(I+15)
      L=ISTORE(I+16)
C--SPREAD THE PARAMETERS TO ALLOW FOR THE DERIVATIVES
      CALL XSPRED(KB,L,K)
C--MOVE ONTO THE NEXT HEADER
2950  CONTINUE
      I=ISTORE(I)
      GOTO 1900
C--THIS IS AN OVERALL PARAMETER
3000  CONTINUE
      IF(KOVPMF(I,K,M5,L,M12))3050,2550,2550
C--THE PARAMETER IS MISSING
3050  CONTINUE
      CALL XERHDR(0)
      CALL XMISL5(0,ISTORE(I+1),ISTORE(I+2))
C
C--RELOCATE THE INSTRUCTION STACK
3100  CONTINUE
      MCG=LCG
C--ARE THERE MORE INSTRUCTIONS
3150  CONTINUE
      ISTORE(MCG)=ISTORE(MCG)+LCG
      MCG=ISTORE(MCG)
      IF(MCG)3250,3250,3200
C--RELOCATE THE INSTRUCTION ADDRESSES
3200  CONTINUE
      ISTORE(MCG+2)=ISTORE(MCG+2)+LC
      ISTORE(MCG+3)=ISTORE(MCG+3)+LC
      ISTORE(MCG+4)=ISTORE(MCG+4)+LC
      GOTO 3150
3250  CONTINUE
      GOTO 2150
C
C--END OF THE PARAMETER CHAIN  -  EXPAND ANY 'UNTIL' SEQUENCES INPUT
3300  CONTINUE
      I=KATOMW(LCA,1)
      IF(I)2100,3100,3350
C--INCREMENT THE PARAMETER BLOCK COUNT
3350  CONTINUE
      NCA=NCA+I
      GOTO 3100
      END
C
CODE FOR KATOMW
      FUNCTION KATOMW(IADD,IWORK)
C--INSERT IN A CHAIN OF PARAMETER HEADER BLOCKS THE BLOCKS REQUIRED FOR
C  PARAMETERS SPECIFIED BY 'UNTIL' SEQUENCES.
C
C  IADD    ADDRESS OF THE FIRST PARAMETER HEADER TO CHECK.
C  IWORK   WORK SPACE CONTROL FLAG :
C
C          <1  DO NOT ACQUIRE SPACE IN THE WORK AREA FOR THE
C              PARAMETERS AND THEIR DERIVATIVES.
C          >0  SET UP THE RELEVANT WORK SPACE AREAS.
C
C--THE RETURN VALUE OF 'KATOMW' ARE :
C
C  -1  AN ERROR HAS BEEN DETECTED  -  ERROR MESSAGE PRINTED.
C  >0  THE NUMBER OF PARAMETER BLOCKS ACTUALLY ON THE CHAIN.
C
C--
      INCLUDE 'ISTORE.INC'
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XSSVAL.INC'
      INCLUDE 'XLST05.INC'
      INCLUDE 'XLST12.INC'
      INCLUDE 'XAPK.INC'
      INCLUDE 'XCONST.INC'
      INCLUDE 'XCNTRL.INC'
      INCLUDE 'XIOBUF.INC'
C
      INCLUDE 'QSTORE.INC'
C
C--SET THE INITIAL FLAGS
      JA=IADD
      JI=MIN0(LFL,MDCS)
      N=0
C--CHECK FOR THE END OF THE INPUT CHAIN
1000  CONTINUE
      IF(JA)1050,1050,1150
C--END OF THE CHAIN
1050  CONTINUE
      KATOMW=N
1100  CONTINUE
      RETURN
C--FIND THE ADDRESS OF THE NEXT PARAMETER AND CHECK FOR AN 'UNTIL' SEQUE
1150  CONTINUE
      JB=ISTORE(JA)
      I=ISTORE(JA+1)/1024
      IF(I/2*2-I)1300,1200,1300
C--THIS IS NOT AN 'UNTIL' SEQUENCE
1200  CONTINUE
      N=N+1
C--PASS ONTO THE NEXT PARAMETER IN THE CHAIN
      JA=JB
      GOTO 1000
C--THIS IS AN 'UNTIL' SEQUENCE  -  FIND THE ADDRESS OF THE PARAMETER AFT
1300  CONTINUE
      JC=JB
      JB=ISTORE(JB)
C--CHECK FOR AN 'UNTIL' SEQUENCE WITH 1 PARAMETER IN IT
      IF(ISTORE(JA+12)-ISTORE(JC+12))1550,1350,1400
C--THE 'UNTIL' SEQUENCE HAS ONE PARAMETER IN IT  -  REMOVE THE SECOND
1350  CONTINUE
      ISTORE(JA)=JB
      GOTO 1200
C--THE ORDER OF PARAMETERS IN THE 'UNTIL' SEQUENCE IS WRONG
1400  CONTINUE
      CALL XERHDR(0)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1450)
      ENDIF
      WRITE(NCAWU,1450)

      WRITE ( CMON, 1450)
      CALL XPRVDU(NCVDU, 1,0)
1450  FORMAT(' Incorrect order of atoms for an ''UNTIL'' sequence',
     2 '  -  First atom given is :')
      CALL XPRTCO(2,ISTORE(JA+12),I)
C--ERROR RETURN
1500  CONTINUE
      KATOMW=-1
      GOTO 1100
C--THIS IS AN 'UNTIL' SEQUENCE THAT WE CAN EXPAND
1550  CONTINUE
      JE=MD5
      JG=NKA
      JH=0
      JF=ISTORE(JA+1)-I*1024
C--RESET THE HEADER TO INDICATE NO 'UNTIL' SEQUENCE
      ISTORE(JA+1)=ISTORE(JA+1)-1024
C--CHECK THE TYPE OF HEADER WE HAVE FOUND
      IF(JF)1600,1700,1600
C--THIS IS A HEADER FOR AN OVERALL PARAMETER
1600  CONTINUE
      JE=1
      JG=1
C--CHECK IF THIS IS A 'SCALES' SEQUENCE
      I=ISTORE(JA+6)
      IF(ISTORE(I+1))1650,1650,1700
C--STORE THE CORRECT NUMBER
1650  CONTINUE
      ISTORE(I+1)=1
C--FETCH THE ADDRESS FROM THE FIRST HEADER BLOCK
1700  CONTINUE
      JD=JA
      M5=ISTORE(JA+12)+JE
      M12=ISTORE(JA+13)
C--CHECK FOR AN OVERALL PARAMETER
      IF(JF)1800,1750,1800
C--THIS IS AN ATOM  -  MOVE ON 1 HEADER IN LIST 12
1750  CONTINUE
      M12=ISTORE(M12)
C--CHECK IF THIS IS THE LAST ATOM IN THE CHAIN
1800  CONTINUE
      IF(ISTORE(JC+12)-M5)1200,2000,1850
C--THIS IS NOT THE LAST ATOM  -  SET THE LINK IN THE LAST BLOCK
1850  CONTINUE
      ISTORE(JD)=NFL
      JD=NFL
      NFL=NFL+17
C--CHECK THE CORE ALLOCATION
      IF(NFL-JI+27)2050,1900,1900
C--NOT ENOUGH CORE AVAILABLE
1900  CONTINUE
      CALL XERHDR(0)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1950)
      ENDIF
      WRITE(NCAWU,1950)
      WRITE ( CMON, 1950)
      CALL XPRVDU(NCVDU, 1,0)
1950  FORMAT(' Insufficient memory available for an ''UNTIL'' sequence')
      GOTO 1500
C--THIS IS THE LAST ATOM OR PARAMETER  -  ALTER THE LINK
2000  CONTINUE
      ISTORE(JD)=JC
      JD=JC
C--TRANSFER THE DATA TO THE NEW HEADER BLOCK
2050  CONTINUE
      ISTORE(JD+1)=JF
      CALL XMOVE(STORE(M5),STORE(JD+2),2)
      CALL XMOVE(STORE(JA+5),STORE(JD+5),7)
C--SET THE LIST POINTERS
      ISTORE(JD+12)=M5
      ISTORE(JD+13)=M12
      ISTORE(JD+14)=NOWT
C--CHECK IF WE SHOULD ASSIGN SOME WORK AREA
      IF(IWORK)2350,2350,2100
C--SET UP THE WORK AREA
2100  CONTINUE
      ISTORE(JD+16)=NFL
      NFL=NFL+JG
      ISTORE(JD+15)=NFL
      NFL=NFL+JG
C--CHECK FOR CORE OVERFLOW
      IF(NFL-JI+27)2150,1900,1900
C--CHECK IF THIS IS AN OVERALL PARAMETER
2150  CONTINUE
      IF(JF)2250,2200,2250
C--APPLY ANY SYMMETRY OPERATORS THAT ARE NECESSARY
2200  CONTINUE
      IF(KATOMS(JD,ISTORE(JD+12),ISTORE(JD+15)))1500,1500,2300
C--THIS IS AN OVERALL PARAMETER  -  SET UP ITS VALUE
2250  CONTINUE
      I=ISTORE(JD+12)
      J=ISTORE(JD+15)
      STORE(J)=STORE(I)
C--ANY SPREAD OUT THE COORDINATES
2300  CONTINUE
      I=ISTORE(JD+15)
      J=ISTORE(JD+16)
      CALL XSPRED(JG,J,I)
      GOTO 2400
C--NO WORK AREAS ARE REQUIRED
2350  CONTINUE
      ISTORE(JD+15)=NOWT
      ISTORE(JD+16)=NOWT
C--LINK IN ANY ATOMIC PARAMETERS
2400  CONTINUE
      N=N+1
      M5=M5+JE
C--CHECK FOR AN OVERALL PARAMETER
      IF(JF)2500,2450,2500
C--THIS IS AN ATOM  -  UPDATE THE LIST 12 POINTER
2450  CONTINUE
      M12=ISTORE(M12)
      GOTO 2550
C--THIS IS AN OVERALL PARAMETER  -  SET UP THE HEADER PROPERLY
2500  CONTINUE
      JH=JH+1
      ISTORE(JD+2)=ISTORE(JA+2)+JH
      STORE(JD+3)=0.
C--START TO TRANSFER THE PARAMETER BLOCKS
2550  CONTINUE
      I=ISTORE(JA+6)
      J=JD+6
C--CHECK IF THERE ARE MORE PARAMETERS TO INCLUDE
2600  CONTINUE
      IF(I)2650,2650,2700
C--NO MORE PARAMETERS  -  TERMINATE THE CHAIN
2650  CONTINUE
      ISTORE(J)=NOWT
      GOTO 1800
C--LINK IN THE NEXT PARAMETER
2700  CONTINUE
      ISTORE(J)=NFL
      J=NFL
      NFL=NFL+3
      IF(NFL-JI)2750,1900,1900
C--MOVE THE PARAMETER INFORMATION
2750  CONTINUE
      CALL XMOVE(STORE(I+1),STORE(J+1),2)
      ISTORE(J+1)=ISTORE(J+1)+JH
      I=ISTORE(I)
      GOTO 2600
      END
C
CODE FOR XSPRED
      SUBROUTINE XSPRED(N,L1,L2)
C--EXPAND A LIST TO ACCOUNT FOR ITS DIFFERENTIAL
C
C  N       THE NUMBER OF WORDS TO SPREAD ABOUT.
C  L1      THE LOCATION AT WHICH TO SPREAD THE DATA. THIS MUST
C          BE SET ON ENTRY.
C          'L1' IS UPDATED BY THIS ROUTINE, SO THAT IT POINTS TO
C          LOCATION 'N+N' WORDS FURTHER ON.
C  L2      THE LOCATION OF THE SPREAD DATA  -  THIS ROUTINE SETS 'L2'
C          TO THE INITIAL VALUE OF 'L1'.
C
C--
      INCLUDE 'STORE.INC'
C
      J=L2
      L2=L1
      DO 1000 I=1,N
      STORE(L1)=STORE(J)
      STORE(L1+1)=0.
      L1=L1+2
      J=J+1
1000  CONTINUE
      RETURN
      END
C
CODE FOR KATOMS
      FUNCTION KATOMS(LOCD,LOCA,LOCB)
C--GENERATE AN ATOM, USING THE SYMMETRY INFORMATION STORED
C  IN AN ATOM HEADER.
C
C  LOCD  LOCATION OF THE HEADER BLOCK CONTAINING THE SYMMETRY DATA
C  LOCA  LOCATION OF THE STARTING POSITIONS
C  LOCB  LOCATION OF THE OUTPUT ATOM
C
C--RETURN VALUES ARE :
C
C  -1  ERROR IN FORMING THE ATOM
C  >0  ADDRESS OF THE NEXT WORD AFTER THE ATOM
C
C--USES 27 WORDS FROM NFL ONWARDS AS WORK SPACE
C
C--
      INCLUDE 'ICOM05.INC'
      INCLUDE 'ISTORE.INC'
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XSSVAL.INC'
      INCLUDE 'XCONST.INC'
      INCLUDE 'XLST02.INC'
C
      COMMON /XLST05/ICOM05
      INCLUDE 'XIOBUF.INC'
C
      INCLUDE 'QSTORE.INC'
C
      EQUIVALENCE (ICOM05(3),MD5)
C
C--SET THE INITIAL ADDRESSES
      M5=LOCB
      M5A=LOCA
      ISTORE(M5)=ISTORE(M5A)
      J=M5A+1
      K=M5A+3
      M5=M5+1
C--CHECK THAT THE SYMMETRY OPERATORS ARE VALID
      M=IABS(ISTORE(LOCD+7))-1
      IF(M)1550,1000,1000
1000  CONTINUE
      IF(M-N2)1050,1550,1550
1050  CONTINUE
      IF(ISTORE(LOCD+8))1550,1550,1100
1100  CONTINUE
      IF(ISTORE(LOCD+8)-N2P)1150,1150,1550
1150  CONTINUE
      A=FLOAT(ISTORE(LOCD+7))
      A=SIGN(1.,A)
      STORE(LOCD+14)=A
C--TRANSFER THE SERIAL, OCC AND U[ISO]  -  APPLY CENTRE OF SYMM. IF NEC.
C-C-C-TRANSF. THE SER., OCC AND FLAG - APPLY CENTRE OF SYMM. TO X,Y,Z
C-C-C-IF NEC. AND TRANSFER X,Y,Z TO PROVISIONAL PLACE (U11,U22,U33)
      DO 1200 I=J,K
      STORE(M5)=STORE(I)
      STORE(M5+6)=STORE(I+3)*A
      M5=M5+1
1200  CONTINUE
C--APPLY THE SYMMETRY MATRIX
      M=M*MD2+L2
      ISTORE(LOCD+4)=M
      CALL XMLTTM(STORE(M),STORE(M5+3),STORE(M5),3,3,1)
C--ADD IN THE TRANSLATIONS
      J=LOCD+9
      K=LOCD+11
      L=(ISTORE(LOCD+8)-1)*3+L2P
      M=M+9
      DO 1250 I=J,K
      STORE(M5)=STORE(M5)+STORE(M)+STORE(L)+FLOAT(ISTORE(I))
      M5=M5+1
      L=L+1
      M=M+1
1250  CONTINUE
C--TRANSFORM THE ANISOTROPIC TEMPERATURE FACTORS
C-C-C-CHECK WHETHER ATOM IS ANISOTROPIC OR ISOTROPIC/SPHERE/LINE/RING
      IF(ABS(STORE(LOCB+3))-UISO)1300,1350,1350
C-C-C-TRANSFORM THE ANISOTROPIC TEMPERATURE FACTORS
1300  CONTINUE
      J=M5A+7
      M=M-12
      CALL XEXANI(J,NFL)
      CALL XMLTTM(STORE(NFL),STORE(M),STORE(NFL+9),3,3,3)
      CALL XMLTTM(STORE(M),STORE(NFL+9),STORE(NFL),3,3,3)
      CALL XCOANI(NFL,M5)
      GOTO 1450
C-C-C-ATOM IS ISOTROPIC/SPHERE/LINE/RING
1350  CONTINUE
C-C-C-CHECK WHETHER ATOM IS ISOTROPIC, SPHERE, LINE OR RING
C-C-C-(COMPLICATED CONDITION TO FIND "OLD" ISOTROPIC ATOMS TOO)
      IF ((NINT(ABS(STORE(LOCB+3))) .EQ. 1)
     2 .OR. (((ABS(STORE(LOCB+3))) .GE. UISO)
     3 .AND. ((ABS(STORE(LOCB+3))) .LE. 1))) THEN
C-C-C-ATOM IS ISOTROPIC
C-C-C-TRANSF. OF ISOTR. TEMP.FACT.
      STORE(LOCB+7)=STORE(LOCA+7)
C      J=LOCB+7
C      K=J+5
      J=LOCB+8
      K=J+4
      DO 1400 I=J,K
      STORE(I)=0.
1400  CONTINUE
      ELSE IF(NINT(ABS(STORE(LOCB+3))).EQ.2) THEN
C-C-C-"ATOM" IS A SPHERE
C-C-C-TRANSF. OF "ISOTR. TEMP.FACT." AND SIZE
      STORE(LOCB+7)=STORE(LOCA+7)
      STORE(LOCB+8)=STORE(LOCA+8)
      J=LOCB+9
      K=J+3
      DO 1410 I=J,K
      STORE(I)=0.
1410  CONTINUE
      ELSE IF(NINT(ABS(STORE(LOCB+3))).GE.3) THEN
C-C-C-"ATOM" IS A LINE OR RING
C-C-C-TRANSF. OF "ISOTR. TEMP.FACT.", SIZE, DECLINAT, AZIMUTH
      STORE(LOCB+7)=STORE(LOCA+7)
      STORE(LOCB+8)=STORE(LOCA+8)
      STORE(LOCB+9)=STORE(LOCA+9)
      STORE(LOCB+10)=STORE(LOCA+10)
      J=LOCB+11
      K=J+1
      DO 1420 I=J,K
      STORE(I)=0.
1420  CONTINUE
      ENDIF
1450  CONTINUE
C----- ARE THERE ANY PEAK HEIGHTS
      IF(MD5-14) 1470,1460,1460
1460  CONTINUE
C RICNOV2000> Copy last 4 keys...
      DO I=14,MD5
        STORE(LOCB+I-1)=STORE(LOCA+I-1)
      END DO
1470  CONTINUE
      KATOMS=LOCB+MD5
      CALL XPRTGC(LOCB)
1500  CONTINUE
      RETURN
C
C--ERRORS FOUND
1550  CONTINUE
      I=LOCD+7
      J=LOCD+11
      CALL XERHDR(0)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1600)(ISTORE(K),K=I,J)
      ENDIF
      WRITE(NCAWU,1600) (ISTORE(K),K=I,J)
      WRITE ( CMON, 1600) (ISTORE(K),K=I,J)
      CALL XPRVDU(NCVDU, 1,0)
1600  FORMAT(' Illegal symmetry operators specified',3X,'S(I) =',I4,
     2 3X,'L =',I4,3X,'With translations : ',3I4)
      I=LOCA+2
      CALL XPRTCO(2,I,K)
      KATOMS=-1
      GOTO 1500
      END
C
cCODE FOR KATOMT
c      FUNCTION KATOMT(LOCD,LOCA,LOCB)
cC--APPLY THE INVERSE TRANFORMATION TO AN ATOM
cC
cC  LOCD  ADDRESS OF THE ATOM BLOCK HEADER , WHOSE DIRECTIVES ARE
cC        TO BE APPLIED IN INVERSE
cC  LOCA  LOCATION OF THE ATOMIC COORDINATES TO BE TRANFORMED
cC  LOCB  OUTPUT ADDRESS
cC
cC--RETURN VALUES ARE :
cC
cC  -1  ERROR IN FORMING THE ATOM
cC  >0  ADDRESS OF THE NEXT WORD AFTER THE ATOM
cC
cC--USES 27 WORDS FROM NFL ONWARDS AS WORK SPACE
cC
cC--
c\ICOM05
c\ISTORE
cC
c\STORE
c\XUNITS
c\XSSVAL
c\XCONST
c\XLST02
cC
c      COMMON /XLST05/ICOM05
cC
c\QSTORE
cC
c      EQUIVALENCE (ICOM05(3),MD5)
cC
cC--SET THE INITIAL ADDRESSES
c      M5=LOCB
c      M5A=LOCA
c      ISTORE(M5)=ISTORE(M5A)
c      J=M5A+1
c      K=M5A+3
c      M5=M5+1
c      L=(ISTORE(LOCD+8)-1)*3+L2P
c      M=(IABS(ISTORE(LOCD+7))-1)*MD2I+L2I+9
c      N=LOCD+9
cC--MOVE THE SERIAL, OCC AND U[ISO]
cC-C-C-MOVE THE SERIAL, OCC AND FLAG
cC--REMOVE THE TRANSLATIONAL ELEMENTS
cC-C-C-AND TRANSFER X,Y,Z TO PROVISIONAL PLACE (U11,U22,U33)
c      DO 1000 I=J,K
c      STORE(M5)=STORE(I)
c      STORE(M5+6)=STORE(I+3)-FLOAT(ISTORE(N))-STORE(L)+STORE(M)
c      M5=M5+1
c      N=N+1
c      M=M+1
c      L=L+1
c1000  CONTINUE
c      M=M-12
cC--APPLY THE INVERSE SYMMETRY OPERATION
c      CALL XMLTTM(STORE(M),STORE(M5+1),STORE(M5),3,3,3)
cC--CHECK IF A CENTRE OF SYMMETRY HAS BEEN USED
c      IF(ISTORE(LOCD+7))1050,1150,1150
cC--REMOVE THE CENTRE OF SYMMETRY
c1050  CONTINUE
c      J=M5
c      K=M5+2
c      DO 1100 I=J,K
c      STORE(I)=-STORE(I)
c1100  CONTINUE
cC--TRANSFORM THE ANISOTROPIC TEMPERATURE FACTORS
c1150  CONTINUE
cC-C-C-CHECK WHETHER ATOM IS ANISOTROPIC OR ISOTROPIC/SPHERE/LINE/RING
c      IF(ABS(STORE(LOCB+3))-UISO)1200,1250,1250
cC-C-C-TRANSFORM THE ANISOTROPIC TEMPERATURE FACTORS
c      IF(ABS(STORE(LOCB+3))-UISO)1200,1250,1250
c1200  CONTINUE
c      J=M5A+7
c      CALL XEXANI(J,NFL)
c      CALL XMLTTM(STORE(NFL),STORE(M),STORE(NFL+9),3,3,3)
c      CALL XMLTTM(STORE(M),STORE(NFL+9),STORE(NFL),3,3,3)
c      M5=LOCB+7
c      CALL XCOANI(NFL,M5)
c      GOTO 1350
cC-C-C-ATOM IS ISOTROPIC/SPHERE/LINE/RING
c1250  CONTINUE
cC-C-C-CHECK WHETHER ATOM IS ISOTROPIC, SPHERE OR LINE/RING
c      IF(NINT(ABS(STORE(LOCB+3))) .EQ. 1) THEN
cC-C-C-ATOM IS ISOTROPIC
cC-C-C-TRANSF. OF ISOTR. TEMP.FACT.
c      STORE(LOCB+7)=STORE(LOCA+7)
cC      J=LOCB+7
cC      K=J+5
c      J=LOCB+8
c      K=J+4
c      DO 1300 I=J,K
c      STORE(I)=0.
c1300  CONTINUE
c      ELSE IF(NINT(ABS(STORE(LOCB+3))) .EQ. 2) THEN
cC-C-C-"ATOM" IS A SPHERE
cC-C-C-TRANSF. OF "ISOTR. TEMP.FACT." AND SIZE
c      STORE(LOCB+7)=STORE(LOCA+7)
c      STORE(LOCB+8)=STORE(LOCA+8)
c      J=LOCB+9
c      K=J+3
c      DO 1310 I=J,K
c      STORE(I)=0.
c1310  CONTINUE
c      ELSE IF(NINT(ABS(STORE(LOCB+3))) .GE. 3) THEN
cC-C-C-"ATOM" IS A LINE OR RING
cC-C-C-TRANSF. OF "ISOTR. TEMP.FACT.", SIZE, DECLINAT, AZIMUTH
c      STORE(LOCB+7)=STORE(LOCA+7)
c      STORE(LOCB+8)=STORE(LOCA+8)
c      STORE(LOCB+9)=STORE(LOCA+9)
c      STORE(LOCB+10)=STORE(LOCA+10)
c      J=LOCB+11
c      K=J+1
c      DO 1320 I=J,K
c      STORE(I)=0.
c1320  CONTINUE
c      ENDIF
c1350  CONTINUE
c      KATOMT=LOCB+MD5
c      CALL XPRTGC(LOCB)
c      RETURN
c      END

CODE FOR XEXANI
      SUBROUTINE XEXANI(LOCA,LOCB)
C--EXPAND THE ANISOTRPIC TEMPERATURE FACTORS TO THE 3 BY 3 TENSOR
C
C  LOCA    THE LOCATION IN 'STORE' OF THE 6 U'S.
C  LOCB    THE LOCATION IN 'STORE' OF THE 3 BY 3 TENSOR.
C
C--
      INCLUDE 'STORE.INC'
C
      STORE(LOCB)=STORE(LOCA)
      STORE(LOCB+1)=STORE(LOCA+5)
      STORE(LOCB+2)=STORE(LOCA+4)
      STORE(LOCB+3)=STORE(LOCA+5)
      STORE(LOCB+4)=STORE(LOCA+1)
      STORE(LOCB+5)=STORE(LOCA+3)
      STORE(LOCB+6)=STORE(LOCA+4)
      STORE(LOCB+7)=STORE(LOCA+3)
      STORE(LOCB+8)=STORE(LOCA+2)
      RETURN
      END
C
CODE FOR XCOANI
      SUBROUTINE XCOANI(LOCA,LOCB)
C--COMPRESS THE THERMAL TENSOR INTO THE 6 INDEPENDENT TERMS
C
C  LOCA    THE LOCATION OF THE 3 BY 3 TENSOR IN 'STORE'.
C  LOCB    THE LOCATION OF THE 6 U'S IN 'STORE'.
C
C--
      INCLUDE 'STORE.INC'
C
      STORE(LOCB)=STORE(LOCA)
      STORE(LOCB+1)=STORE(LOCA+4)
      STORE(LOCB+2)=STORE(LOCA+8)
      STORE(LOCB+3)=STORE(LOCA+5)
      STORE(LOCB+4)=STORE(LOCA+2)
      STORE(LOCB+5)=STORE(LOCA+1)
      RETURN
      END
C
CODE FOR XPRTGC
      SUBROUTINE XPRTGC(LOC)
C--PRINT THE PARAMETERS GENERATED FOR THE ATOM AT 'LOC'.
C
C  LOC     THE LOCATION IN 'STORE' OF THE NEW ATOMIC PARAMETERS.
C
C--
      INCLUDE 'STORE.INC'
      INCLUDE 'XCNTRL.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XSSVAL.INC'
      INCLUDE 'XIOBUF.INC'
C
C--CHECK IF THE PRINT IS REQUIRED
      IF(ISTAT2)1100,1100,1000
C--PRINT IS REQUIRED
1000  CONTINUE
      J=LOC+12
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1050)(STORE(I),I=LOC,J)
      ENDIF
      WRITE(NCAWU,1050)(STORE(I),I=LOC,J)
1050  FORMAT(5X,A4,F9.0,1X,11F9.5)
1100  CONTINUE
      RETURN
      END
C
CODE FOR XCDEF
      SUBROUTINE XCDEF
C--CALCULATE THE VALUE OF A DEFINE FUNCTION
C
C--
      INCLUDE 'ISTORE.INC'
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XCNTRL.INC'
C
      INCLUDE 'QSTORE.INC'
C
C--FIND THE LOCATION TO STORE THE COMPUTED VALUE
      I=ISTORE(LCG+2)+LC
C--COMPUTE THE VALUE
      STORE(I)=XVALUE(LC)
      STORE(I+1)=0.0
      RETURN
      END
C
CODE FOR XVALUE
      FUNCTION XVALUE(IN)
C--CALCULATE THE VALUE OF THE EXPRESSION GIVEN BY THE CODE STARTING AT
C  'LCG'.
C
C  IN  A DUMMY ARGUMENT.
C
C--THE CODE IS ASSUMED TO HAVE BEEN LOADED AND RELOCATED
C
C--
      INCLUDE 'ISTORE.INC'
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XCNTRL.INC'
C
      INCLUDE 'QSTORE.INC'
C
      IDWZAP = IN
      MCG=LCG
C--UPDATE THE ADDRESS AND CHECK IF THERE ARE ANY MORE INSTRUCTIONS
C  TO OBEY
1000  CONTINUE
      MCG=ISTORE(MCG)
C--FIND THE ADDRESSES
      I=ISTORE(MCG+1)
      J=ISTORE(MCG+2)
      K=ISTORE(MCG+3)
      L=ISTORE(MCG+4)
C--BRANCH ON THE FUNCTION
      GOTO(1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,
     2 1700,1750,1050),I
C1050  STOP21
1050  CALL GUEXIT(21)
C--'+'
1100  CONTINUE
      STORE(L)=STORE(J)+STORE(K)
      GOTO 1000
C--'-'
1150  CONTINUE
      STORE(L)=STORE(J)-STORE(K)
      GOTO 1000
C--'*'
1200  CONTINUE
      STORE(L)=STORE(J)*STORE(K)
      GOTO 1000
C--'/'
1250  CONTINUE
      STORE(L)=STORE(J)/STORE(K)
      GOTO 1000
C--'**'
1300  CONTINUE
      STORE(L)=STORE(J)**STORE(K)
      GOTO 1000
C--'SQRT'
1350  CONTINUE
      STORE(L)=SQRT(STORE(J))
      GOTO 1000
C--'EXP'
1400  CONTINUE
      STORE(L)=EXP(STORE(J))
      GOTO 1000
C--'SIN'
1450  CONTINUE
      STORE(L)=SIN(STORE(J))
      GOTO 1000
C--'COS'
1500  CONTINUE
      STORE(L)=COS(STORE(J))
      GOTO 1000
C--'TAN'
1550  CONTINUE
      STORE(L)=TAN(STORE(J))
      GOTO 1000
C--'ASIN'
1600  CONTINUE
      STORE(L)=ASIN(STORE(J))
      GOTO 1000
C--'ACOS'
1650  CONTINUE
      STORE(L)=ACOS(STORE(J))
      GOTO 1000
C--'ATAN'
1700  CONTINUE
      STORE(L)=ATAN(STORE(J))
      GOTO 1000
C
C--ASSIGN THE FINAL VALUE
1750  CONTINUE
      L=ISTORE(MCG+4)
      XVALUE=STORE(L)
      CALL XPRTVV(STORE(L))
      RETURN
      END
C
CODE FOR XDERIV
      FUNCTION XDERIV(IN)
C--CALCULATE THE PARTIAL DERIVATIVES BASED ON THE SUPPLIED COORDS.
C  THE DIFFERENTIATION WITH RESPECT TO THE COORDS. IS ASSUMED TO HAVE
C  BEEN DONE  ( I.E. 1 OR 0)
C
C--THE 'VALUE' MUST ALSO HAVE BEEN CALCULATED, AS ITS RESULTS ARE
C  USED .
C
C--
      INCLUDE 'ISTORE.INC'
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XCNTRL.INC'
C
      INCLUDE 'QSTORE.INC'
C
      IDWZAP = IN
      MCG=LCG
C--INCREMENT THE ADDRESS AND CHECK IF THIS IS THE END
1000  CONTINUE
      MCG=ISTORE(MCG)
C--COMPUTE THE ADDRESSES
      I=ISTORE(MCG+1)
      J=ISTORE(MCG+2)
      K=ISTORE(MCG+3)
      L=ISTORE(MCG+4)
C--BRANCH ON THE FUNCTION
      GOTO(1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,
     2 1700,1750,1050),I
C1050  STOP22
1050  CALL GUEXIT(22)
C--'+'
1100  CONTINUE
      STORE(L+1)=STORE(J+1)+STORE(K+1)
      GOTO 1000
C--'-'
1150  CONTINUE
      STORE(L+1)=STORE(J+1)-STORE(K+1)
      GOTO 1000
C--'*'
1200  CONTINUE
      STORE(L+1)=STORE(J)*STORE(K+1)+STORE(J+1)*STORE(K)
      GOTO 1000
C--'/'
1250  CONTINUE
      STORE(L+1)=(STORE(J+1)*STORE(K)-STORE(J)*STORE(K+1))/(STORE(K)
     2 *STORE(K))
      GOTO 1000
C--'**'
1300  CONTINUE
      STORE(L+1)=STORE(K)*STORE(J)**(STORE(K)-1.)*STORE(J+1)
      GOTO 1000
C--'SQRT'
1350  CONTINUE
      STORE(L+1)=0.5*STORE(J+1)/STORE(L)
      GOTO 1000
C--'EXP'
1400  CONTINUE
      STORE(L+1)=STORE(L)*STORE(J+1)
      GOTO 1000
C--'SIN'
1450  CONTINUE
      STORE(L+1)=COS(STORE(J))*STORE(J+1)
      GOTO 1000
C--'COS'
1500  CONTINUE
      STORE(L+1)=-SIN(STORE(J))*STORE(J+1)
      GOTO 1000
C--'TAN'
1550  CONTINUE
      STORE(L+1)=COS(STORE(J))
      STORE(L+1)=1.0/(STORE(L+1)*STORE(L+1))*STORE(J+1)
      GOTO 1000
C--'ASIN'
1600  CONTINUE
      STORE(L+1)=STORE(J+1)/SQRT(1.0-STORE(J)*STORE(J))
      GOTO 1000
C--'ACOS'
1650  CONTINUE
      STORE(L+1)=-STORE(J+1)/SQRT(1.0-STORE(J)*STORE(J))
      GOTO 1000
C--'ATAN'
1700  CONTINUE
      STORE(L+1)=STORE(J+1)/(1.0+STORE(J)*STORE(J))
      GOTO 1000
C
C--ASSIGN THE VALUE
1750  CONTINUE
      L=ISTORE(MCG+4)
      XDERIV=STORE(L+1)
      CALL XPRTVV(STORE(L+1))
      RETURN
      END
C
CODE FOR XPRTVV
      SUBROUTINE XPRTVV(A)
C--PRINT 'A', THE VALUE FOUND BY 'XVALUE' OR 'XDERIV'.
C
C  A  THE VALUE TO BE PRINTED.
C
C--
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XSSVAL.INC'
      INCLUDE 'XCNTRL.INC'
      INCLUDE 'XIOBUF.INC'
C
C--CHECK IF PRINTING IS REQUIRED
      IF(ISTAT2)1100,1100,1000
C--PRINT THE VALUE
1000  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1050)A
      ENDIF
      WRITE(NCAWU,1050) A
1050  FORMAT(' Calculated value',E20.10)
C--AND NOW RETURN
1100  CONTINUE
      RETURN
      END

