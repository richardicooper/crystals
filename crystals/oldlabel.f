C $Log: not supported by cvs2svn $
C Revision 1.5  2003/02/14 17:09:02  djw
C Extend codes to work wih list 6 and list 7.  Note that sfls, calc and
C recine have the parameter ityp06, which corresponds to the types
C pickedip for lists 6 and 7  from the command file
C
C Revision 1.4  2001/03/02 17:03:43  CKP2
C djw put common block \xsfwk inti macrifile, and extend for (more!) cif
C items
C
C Revision 1.3  2001/02/26 10:36:09  richard
C Added changelog to top of file
C
C
CODE FOR AUTOMA
      SUBROUTINE AUTOMA
C
C--   A PROCEDURE TO CONTROL THE AUTOMATIC REFINEMENT
C
C     MODE = INITIAL = -1 THE FIRST TIME THE SUBROTINE IS CALLED
C     MODE = REFINE  =  0 IF THE SUBROUTINE PREPARES REFINEMENT
C     MODE = FOURIER =  1 IF THE SUBROUTINE PREPARES FOURIER + LABEL
C     MODE = FINAL   =  2 THE LAST TIME THE SUBROTINE IS CALLED
C
      INCLUDE 'ISTORE.INC'
C
      CHARACTER TYPE(2)*7
C
      DIMENSION KEY(10)
      DIMENSION PROCS(4)
C
      INCLUDE 'STORE.INC'
C
      INCLUDE 'XLISTI.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XLST01.INC'
      INCLUDE 'XLST02.INC'
      INCLUDE 'XLST03.INC'
      INCLUDE 'XLST05.INC'
      INCLUDE 'XLST06.INC'
      INCLUDE 'XLST12.INC'
      INCLUDE 'XLST29.INC'
      INCLUDE 'XERVAL.INC'
      INCLUDE 'XOPVAL.INC'
      INCLUDE 'XSFWK.INC'
C
      COMMON /LABCOM/ LABVET(31),JGOON,MAXCYC,MAXPEA,TRGR1,TRGR2,NONEW
      INCLUDE 'XIOBUF.INC'
C
      INCLUDE 'QSTORE.INC'
      EQUIVALENCE (PROCS(1),MONIT)
      EQUIVALENCE (PROCS(2),MODE )
      EQUIVALENCE (PROCS(3),VALUEX)
      EQUIVALENCE (PROCS(4),INTEG)
      DATA IDIM0/4/
C
C--CALL THE TIMING FUNCTION
      CALL XTIME1(2)
C -- READ THE REST OF THE INSTRUCTIONS AND CHECK FOR ERRORS
      IF (   KRDDPV ( PROCS(1) , IDIM0 )    .LT.   0   ) GO TO 9910
C--INPUT WENT OKAY  -  CLEAR THE CORE AGAIN
      CALL XRSL
      CALL XCSAE
C
C-- SET PRINT CODE   ( 1 = ON  ,  0 = OFF )
      IF (MONIT.LE.0) THEN
         ISTAT2=0
      ELSE
         ISTAT2=1
      ENDIF
C
C-- LOAD LIST 5
C
      LN1=1
      LN1=KTYP05(LN1)
      CALL XLDR05(LN1)
      JANAT = N5 * 2.5
C
C-- LOAD LIST 6 READONLY ( TO GET R-VALUEX AND MINIMIZATION FUNCTION )
C
      CALL XFAL06(6,0)
      NUMLS=STORE(L6P)
      GR=STORE(L6P+1)
      FM=STORE(L6P+3)
      TYPE(1)='INITIAL'
      TYPE(2)='FINAL  '
      ISTOP=0
C---------
      NCYC=LABVET(31)
      IF (MODE.EQ.-1) THEN
C-- THIS IS THE FIRST TIME THIS SUBROUTINE HAS BEEN CALLED
         LABVET(31)=LABVET(31)+1
         NCYC=LABVET(31)
         N5NEW=N5
         MAXPEA=JANAT
         NREFIN=3
         JTYPE=1
      ENDIF
      IF (MODE.EQ.0) THEN
C-- WE NOW DECIDE IF WE HAVE TO REFINE AND WHAT
         LABVET(31)=LABVET(31)+1
         NCYC=LABVET(31)
         J=LABVET(31)+10
         N5OLD=LABVET(J-1)
         NREFIN=2
         JLDEF=LABVET(20)
         IF (NCYC.EQ.MAXCYC) THEN
            N5OLD=MAXPEA
            N5NEW=MAXPEA
         ENDIF
         IF (N5OLD.NE.MAXPEA) THEN
C
C-- COMPUTE THE NUMBER OF ATOMS TO DEAL WITH
C-- AND RESET THE LENGHT OF LIST 5
C
            QQ=FLOAT(MAXPEA-N5OLD)*(1.0-2.0*GR/100.0)
            IF (QQ.LT.1.0) QQ=1.0
            N5NEW=N5OLD+NINT(QQ)
         ENDIF
         IF (N5NEW.NE.N5) THEN
            N5=N5NEW
            N=N5
            NEW=1
            CALL XSTR05(LN1,0,NEW)
            WRITE ( CIOBUF,1250)  CCRCHR(1:2),N5,CCRCHR(1:2)
            CALL FLBUFF( 47, 0, -1 )
            WRITE(NCWU, 1250) N5
         ENDIF
1250  FORMAT(A2,' +++ THE NEW LIST 5 CONTAINS ',I5,'  ATOM(S)',A2)
      ENDIF
      IF (MODE.EQ.1)  THEN
C-- COMPUTE FOURIER AND APPLY LABEL ( IF NOT STOP CONDITION )
         IF (GR.GT.59.9) GO TO 1600
         NCYC=LABVET(31)
         IF (GR.LT.TRGR1) JTYPE=2
         IF (NCYC.GE.(MAXCYC-1).AND.GR.LT.TRGR2) JTYPE=2
         JANAT=MAXPEA*2
         IF (NCYC.GE.MAXCYC) THEN
            IF (NCYC.EQ.(MAXCYC+2)) THEN
               ISTOP=1
            ELSE
               IF ( GR .LT. 14.0 .OR. GR .GT. 27.0 ) ISTOP=1
            ENDIF
         ENDIF
      ENDIF
C-- IF THIS IS THE LAST TIME STOP WITH ITERATION
      IF (ISTOP.EQ.1) THEN
         MODE=2
         NREFIN=2
      ENDIF
      J=LABVET(31)
      LABVET(J)=INT(GR*100.0)
      J=LABVET(31)+10
      LABVET(J)=N5NEW
      J=LABVET(31)+20
      LABVET(J)=NUMLS
      IF (MODE.LE.2) THEN
         WRITE ( CIOBUF,1520) (J,J=1,NCYC)
         CALL FLBUFF( 84, 0, -1 )
         WRITE ( CIOBUF,1530) (LABVET(J),J=1,NCYC)
         CALL FLBUFF( 84, 0, -1 )
         WRITE ( CIOBUF,1540) MAXPEA,(LABVET(J),J=11,11+NCYC-1)
         CALL FLBUFF( 84, 0, -1 )
         DO 1510 J=1,NCYC-1
 1510       KEY(J) = LABVET(J+21)-LABVET(J+20)
         WRITE ( CIOBUF,1550) (KEY(J),J=1,NCYC-1)
         CALL FLBUFF( 84, 0, -1 )
      ENDIF
 1520 FORMAT(' +++++ LABVET ( CICLO ) ',10I6)
 1530 FORMAT(' +++++ LABVET ( R-VAL ) ',10I6)
 1540 FORMAT(' +++++ LABVET ( ',I5,' ) ',10I6)
 1550 FORMAT(' +++++ LABVET ( L.S.  ) ',10I6)
C
      CALL AUTSRQ(MODE,GR,NREFIN,JANAT,TYPE(JTYPE))
C
C-- END OF THE PROCEDURE
C
 1600 CONTINUE
C
C -- FINAL MESSAGES
C
      CALL XOPMSG ( IOPREF , IOPEND , 301 )
C
      CALL XTIME2(2)
      CALL XCSAE
      CALL XRSL
      RETURN
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPREF , IOPABN , 0 )
      GO TO 1600
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPREF , IOPCMI , 0 )
      GO TO 9900
9920  CONTINUE
C -- INSUFFICIENT SPACE
      CALL XOPMSG ( IOPREF , IOPSPC , 0 )
      GO TO 9900
      END
CODE FOR LABEH
C-----------------------------------------------------------------------
      SUBROUTINE LABEH(IZPK,T2,IVET,JALL)
C
C-- SUBROUTINE TO RE-LABEL PEAKS ACCORDING ONLY TO
C-- THE RELATIVE PEAK HEIGHT AND TO THE CELL CONTENT
C-- IF JALL = 0 ONLY HEAVY ATOMS (Z=>11) ARE LABELLED
C-- IF JALL = 1 ALL ATOMS ARE LABELLED
C
      INCLUDE 'ISTORE.INC'
      INCLUDE 'STORE.INC'
      COMMON /LABCOM/ LABVET(31),JGOON,MAXCYC,MAXPEA,TRGR1,TRGR2,NONEW
      COMMON/SPEC/ SOPER(3,4,24),CENTRT(7,12),AAA(6),NOPER,NCENTR,ICENT,
     *            KPOL,JSYS,LAT,INDV(32),MPV(64),JSPINI,DDMIN,NCAWU,NCWU
      INCLUDE 'XIOBUF.INC'
      DIMENSION NUMBER(8,2),IVET(12),IZPK(500)
C
      INCLUDE 'QSTORE.INC'
C
      LABVET(20)=0
      L15  =IVET(1)
      N15  =IVET(2)
      MD15 =IVET(3)
      LSIR =IVET(4)
      NSIR =IVET(5)
      MDSIR=IVET(6)
      LSA=LSIR
      JHYDR=0
      DO 1000 I=1,NSIR
      KZ=NINT(STORE(LSA+13))
      IF (KZ.NE.1) THEN
                     NUMBER(I,1)=NINT(STORE(LSA+12))
                     ELSE
                     NUMBER(I,1)=-99
                     ENDIF
      IF (KZ.GE.11) THEN
                      NUMBER(I,2)=NINT(STORE(LSA+13))
                    ELSE
                      NUMBER(I,2)=0
                    ENDIF
      IF (KZ.EQ.1) JHYDR=I
      LSA=LSA+MDSIR
 1000 CONTINUE
      WRITE ( CIOBUF,'(A20,I6)' ) ' ++++ LABDEF NUMBER ',NUMBER
      CALL FLBUFF( 26, 0, -1 )
      K=1
      M15=L15
      HEIG1=STORE(M15+5)
      Z1  =FLOAT(NUMBER(1,2))
      DO 1100 I=1,N15
      DO 1090 J=1,NSIR
      IF (J.EQ.JHYDR) GO TO 1090
      IF (NUMBER(J,1).EQ.0) GO TO 1090
      K=J
      LASTH=I-1
      NUMB=NINT(STORE(M15+6)*T2)
 1120 NUMBER(K,1)=NUMBER(K,1)-NUMB
      IF (NUMBER(K,1).LE.-99) GO TO 1400
      KZ=NUMBER(K,2)
      WRITE ( CIOBUF,1130) ISTORE(M15),I,K,NUMBER(K,1),KZ,
     *                      NINT(STORE(M15+6)*T2),STORE(M15+5)
      CALL FLBUFF( 69, 0, -1 )
 1130 FORMAT(1X,A4,I5,' K,NUMBER(K),KZ,OCC*T2,HEIGHT',3I4,I8,F10.3)
      HEIGN=STORE(M15+5)
      ZN  =FLOAT(NUMBER(K,2))
      IF (JALL.EQ.0.AND.KZ.LT.11) GO TO 1400
      IF (NUMBER(K,1).GE.0) THEN
         RAP=HEIG1*ZN/Z1
         RAP1=RAP*0.6
         RAP2=RAP*1.4
         WRITE ( CIOBUF,1132) HEIG1,Z1,ZN,RAP,RAP1,HEIGN,RAP2
      CALL FLBUFF( 94, 0, -1 )
 1132 FORMAT('HEIG1,Z1,ZN,RAP,RAP1,HEIGN,RAP2',7F9.3)
         IF ((HEIGN.GT.RAP1.AND.HEIGN.LT.RAP2).OR.KZ.EQ.0) THEN
            IZPK(I)=K
            IF (NUMBER(K,1).EQ.0) K=K+1
              GO TO 1095
            ELSE
              NUMBER(K,1)=NUMBER(K,1)+NUMB
            ENDIF
          ELSE
              NUMBER(K,1)=NUMBER(K,1)+NUMB
              K=K+1
              IF (K.LE.NSIR) THEN
                GO TO 1120
              ELSE
                GO TO 1400
              ENDIF
         ENDIF
 1090 CONTINUE
 1095 M15=M15+MD15
 1100 CONTINUE
      LABVET(20)=1
      RETURN
 1200 CONTINUE
      WRITE ( CIOBUF,1300) CCRCHR(1:2),LAST,CCRCHR(1:2)
      CALL FLBUFF( 50, 0, -1 )
      WRITE(NCWU, 1300) CCRCHR(1:2),LAST,CCRCHR(1:2)
 1300 FORMAT(A2,' +++ WARNING -- Only ',I5,'  Atoms re-labelled ',A2)
      RETURN
 1400 CONTINUE
      WRITE ( CIOBUF,1500) CCRCHR(1:2),LASTH,CCRCHR(1:2)
      CALL FLBUFF( 56, 0, -1 )
      WRITE(NCWU, 1500) CCRCHR(1:2),LASTH,CCRCHR(1:2)
 1500 FORMAT(A2,' +++ WARNING -- Only ',I5,
     2          '  Heavy atoms re-labelled ',A2)
      RETURN
      END
CODE FOR AUTSRQ
      SUBROUTINE AUTSRQ(MODE,GR,NREFIN,JANAT,CTYPE)
C-- THIS ROUTINE IS USED TO MODIFY THE SYSTEM REQUEST QUEUE
C-- ACCORDING TO THE ACTION DEFINED BY "MODE" AND TO THE R VALUEX
C
C     MODE = INITIAL = -1 THE FIRST TIME THE SUBROTINE IS CALLED
C     MODE = REFINE  =  0 IF THE SUBROUTINE PREPARES REFINEMENT
C     MODE = FOURIER =  1 IF THE SUBROUTINE PREPARES FOURIER + LABEL
C     MODE = FINAL   =  2 THE LAST TIME THE SUBROTINE IS CALLED
C
C     MODE    JUMP
C      -1       1
C       0       2
C       1       3
C       2       4
C
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XIOBUF.INC'
      CHARACTER CTYPE*7,BUFF*80
C
C----- SAVE THE EXISTING SRQ
      CALL XSSRQ (IADSRQ, NSRQ)
      JUMP=MODE+2
      IF (JUMP.EQ.1) THEN
         WRITE ( CIOBUF ,11)
         CALL FLBUFF( 55, 0, -1 )
      ENDIF
      IF (JUMP.EQ.2) THEN
         WRITE ( CIOBUF ,12)
         CALL FLBUFF( 55, 0, -1 )
      ENDIF
      IF (JUMP.EQ.3) THEN
         WRITE ( CIOBUF ,13)
         CALL FLBUFF( 55, 0, -1 )
      ENDIF
      IF (JUMP.EQ.4) THEN
         WRITE ( CIOBUF ,14)
         CALL FLBUFF( 55, 0, -1 )
      ENDIF
   11 FORMAT(' +++        The first time the subroutine is called    ')
   12 FORMAT(' +++        If the subroutine prepares refinement      ')
   13 FORMAT(' +++        If the subroutine prepares fourier + label ')
   14 FORMAT(' +++        The last time the subroutine is called     ')
      GO TO (1000,1000,3000,4000),JUMP
 1000 CONTINUE
C
C-- RECOMPUTE SCALE AND PERFORM NREFIN CYCLES OF L.S.
C
      WRITE(BUFF,'(A)') '#LIST 12   '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'BLOCK X''S U[ISO]   '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'END   '
      CALL XISRC (BUFF)
C
      WRITE(BUFF,'(A)') '#SFLS   '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'SCALE   '
      CALL XISRC (BUFF)
      DO 1100 I=1,NREFIN
         WRITE(BUFF,'(A)') 'REFINE  '
         CALL XISRC (BUFF)
 1100 CONTINUE
      WRITE(BUFF,'(A)') 'END'
      CALL XISRC (BUFF)
C
C-- RESTART AUTOMATIC
C
      WRITE(BUFF,'(A)') '#AUTOMATIC'
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'SELECT MODE = FOURIER'
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'END'
      CALL XISRC (BUFF)
      GO TO 5000
 3000 CONTINUE
C
C-- MODIFY OCCUPANCIES
C
      WRITE(BUFF,'(A)') '#OCCMOD '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'END'
      CALL XISRC (BUFF)
C
C-- COMPUTE FOURIER AND STRUCTURE FACTORS
C
      WRITE(BUFF,'(A)') '#FOURIER'
      CALL XISRC (BUFF)
      WRITE(BUFF,3100) JANAT
 3100 FORMAT('PEAKS REJECT = .3 NPEAK = ',I5,'   HEIGHT = 1')
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'REFLECTIONS    CALC = YES    '
C     WRITE(BUFF,'(A)') 'REFL WEI = SIM CALC = YES    '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'END'
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') '#PEAK 10 10 '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'SELECT REJ = 0.0003   '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'REFINE DIST = 0.3 MULT=0.0  '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'END'
      CALL XISRC (BUFF)
C
C-- RUN LABEL
C
      WRITE(BUFF,'(A)') '#LABEL'
      CALL XISRC (BUFF)
      WRITE(BUFF,3200) CTYPE
 3200 FORMAT('SELECT MON = HI MODE = ',A7)
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'END'
      CALL XISRC (BUFF)
C
C-- RESTART AUTOMATIC
C
      WRITE(BUFF,'(A)') '#AUTOMATIC'
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'SELECT MODE = REFINE'
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'END'
      CALL XISRC (BUFF)
      GO TO 5000
 4000 CONTINUE
C
C-- IF R > 15 COMPUTE A FOURIER
C
      IF (GR.GT.15.0) THEN
C
C-- MODIFY OCCUPANCIES
C
                        WRITE(BUFF,'(A)') '#OCCMOD '
                        CALL XISRC (BUFF)
                        WRITE(BUFF,'(A)') 'END'
                        CALL XISRC (BUFF)
C
C-- COMPUTE FOURIER AND STRUCTURE FACTORS
C
                        WRITE(BUFF,'(A)') '#FOURIER'
                        CALL XISRC (BUFF)
                        WRITE(BUFF,3100) JANAT
                        CALL XISRC (BUFF)
                        WRITE(BUFF,'(A)') 'REFLECTIONS    CALC = YES  '
                        CALL XISRC (BUFF)
                        WRITE(BUFF,'(A)') 'END'
                        CALL XISRC (BUFF)
                        WRITE(BUFF,'(A)') '#PEAK 10 10 '
                        CALL XISRC (BUFF)
                        WRITE(BUFF,'(A)') 'SELECT REJ = 0.3   '
                        CALL XISRC (BUFF)
                        WRITE(BUFF,'(A)') 'END'
                        CALL XISRC (BUFF)
C
C-- RUN LABEL
C
                        WRITE(BUFF,'(A)') '#LABEL'
                        CALL XISRC (BUFF)
                        WRITE(BUFF,3200) CTYPE
                        CALL XISRC (BUFF)
                        WRITE(BUFF,'(A)') 'END'
                        CALL XISRC (BUFF)
C
                      ENDIF
C
C-- RECOMPUTE SCALE AND  PERFORM LAST NREFIN CYCLES OF L.S.
C
      WRITE(BUFF,'(A)') '#SFLS   '
      CALL XISRC (BUFF)
      WRITE(BUFF,'(A)') 'SCALE   '
      CALL XISRC (BUFF)
      DO 4100 I=1,NREFIN
         WRITE(BUFF,'(A)') 'REFINE  '
         CALL XISRC (BUFF)
 4100 CONTINUE
      WRITE(BUFF,'(A)') 'END'
      CALL XISRC (BUFF)
 5000 CONTINUE
C
C----- RESTORE SRQ
C
      CALL XRSRQ (IADSRQ, NSRQ)
      RETURN
      END
CODE FOR OCCMOD
      SUBROUTINE OCCMOD
C
C--MODIFY LIST 5 ACCORDING TO E.S.D. & U
C
C--
      INCLUDE 'ISTORE.INC'
C
C
      INCLUDE 'STORE.INC'
C
      INCLUDE 'XLST01.INC'
      INCLUDE 'XLST05.INC'
      INCLUDE 'XLST11.INC'
      INCLUDE 'XLST12.INC'
      INCLUDE 'XLST29.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XWORKA.INC'
      INCLUDE 'XAPK.INC'
      INCLUDE 'XPTCL.INC'
      INCLUDE 'XCONST.INC'
      INCLUDE 'XOPVAL.INC'
      INCLUDE 'XIOBUF.INC'
C
      DIMENSION PROCS(6)
      INCLUDE 'QSTORE.INC'
      EQUIVALENCE (PROCS(1),MONIT)
      EQUIVALENCE (PROCS(2),MODE )
      EQUIVALENCE (PROCS(3),VALUEX)
      EQUIVALENCE (PROCS(4),INTEG)
      EQUIVALENCE (PROCS(5),LN1  )
      EQUIVALENCE (PROCS(6),LN2  )
      DATA IDIM0/6/
C
C--CALL THE TIMING FUNCTION
      CALL XTIME1(2)
C -- READ THE REST OF THE INSTRUCTIONS AND CHECK FOR ERRORS
      IF (   KRDDPV ( PROCS(1) , IDIM0 )    .LT.   0   ) GO TO 9910
C--INPUT WENT OKAY  -  CLEAR THE CORE AGAIN
      CALL XRSL
      CALL XCSAE
C
C--LOAD A FEW LISTS
      CALL XFAL01
      CALL XFAL29
      LN1=1
      LN1=KTYP05(LN1)
      CALL XLDR05(LN1)
C--FORM THE ABSOLUTE LIST 12
      JQ=0
C     IF (JQ.EQ.0) GO TO 9999
      JS=1
      CALL XFAL12(JS,JQ,JR,JN)
      IF ( IERFLG .LT. 0 ) GO TO 2350
C--LINK LISTS 5 AND 12
      I=KSET52(0,-1)
      IF ( IERFLG .LT. 0 ) GO TO 2350
C--BRING DOWN THE MATRIX
      CALL XFAL11(1,1)
      IF (IERFLG .LT. 0) GOTO 2350
      AMULT=STORE(L11P+17)/STORE(L11P+16)
      IBASE=NFL
      JBASE = IBASE
      K = KCHNFL ( 4 * N5)
C----- SET AUXILLIARY LIST 5 ADDRESSES
      L5A=L5
      N5A=N5
      MD5A=MD5
      M5A=L5
C
C-- ALLOCATE AND LOAD A DUMMY LIST TO CONTAIN TYPE, Z-VALUEX AND A CODE
C                CODE=0  HEAVIEST ATOMIC SPECIE
C                CODE=1  OTHERWISE
C
      MDXX=3
      NXX=N29
      I=NXX*MDXX
      LXX = KSTALL (I)
C-- ZERO THE ARRAY
      CALL XZEROF ( ISTORE(LXX) , I )
      KZMAX=-1
      MXX=LXX
      M29=L29
      DO 1000 I=1,NXX
      KZ=NINT(STORE(M29+6))/2
      IF (KZ.EQ.0) KZ=1
      IF (KZ.GT.KZMAX) J=I
      ISTORE(MXX  )=ISTORE(M29)
      ISTORE(MXX+1)=KZ
      ISTORE(MXX+2)=0
      M29=M29+MD29
      MXX=MXX+MDXX
 1000 CONTINUE
      JJ=LXX+(J-1)*MDXX+2
      ISTORE(JJ)=1
C
      MXX=LXX
      DO 1040 I=1,NXX
      WRITE ( CIOBUF,1060) I,ISTORE(MXX  ),ISTORE(MXX+1),ISTORE(MXX+2)
      CALL FLBUFF( 23, 0, -1 )
 1060 FORMAT(' YYYY',I3,')',2X,A4,I4,I4)
      MXX=MXX+MDXX
 1040 CONTINUE
C
C-- CONVERT ANISO TO ISO
C
      CALL XPRAXI( 1, 1, JBASE, L5A, MD5A, N5A, LSTAXS, 0)
      IF ( IERFLG .LT. 0 ) GO TO 2450
C
C -- SET INITIAL VALUEXS.
C
      M5=L5
      M12=L12
C     M5A=L5+2
C
C-- SET THE ADDRESS OF THE WORK AREA
C
      JS = NFL + 1
C
C--LOOP OVER THE ATOMS
C
      DO 1600 K=1,N5
C--CALCULATE THE E.S.D.'S AND STORE THEM IN BPD
      U=STORE(M5+3)
      CALL SAPPLY (IJDW)
      BPD(3)=BPD(3) * STORE(L1P1  )
      BPD(4)=BPD(4) * STORE(L1P1+1)
      BPD(5)=BPD(5) * STORE(L1P1+2)
C--CHECK IF THIS ATOM IS ANISO OR ISO
      IF(ABS(U)-UISO)1100,1150,1150
1100  CONTINUE
C----- CALCULATE U[EQUIV]
      U=STORE(JBASE)
C----- SET ESD=0.
      BPD(2)=0.
1150  CONTINUE
      JBASE = JBASE + 4
C -- UPDATE THE ATOM INFORMATION FOR THE NEXT ATOM
C     IF (IACTN.EQ.1) THEN
         VALUE=SQRT(BPD(3)*BPD(3)+BPD(4)*BPD(4)+BPD(5)*BPD(5) )+U
         WRITE ( CIOBUF,1435) ISTORE(M5),STORE(M5+1),STORE(M5+2),
     2                        STORE(M5+3),BPD(3),BPD(4),BPD(5),VALUE
         CALL FLBUFF( 71, 0, -1 )
         STORE(M5+13)=VALUE
C     ENDIF
      M12=ISTORE(M12)
      M5=M5+MD5
C     M5A=M5A+MD5
1600  CONTINUE
      M5 = L5
C-- SORT THE LIST 5 WITH RESPECT TO 14-TH VALUEX
      JUMP=-14
      CALL SORTZ(L5,N5,MD5,JUMP)
C
C-- COMPUTE THE NUMBER OF ATOMS TO MODIFY (NMOD)
C
      IF      (N5.GT.30) THEN
         NMOD=4
      ELSE IF (N5.GT.15) THEN
         NMOD=3
      ELSE IF (N5.GT. 8) THEN
         NMOD=2
      ELSE
         NMOD=1
      ENDIF
      WRITE ( CIOBUF,'(2(A5,I5,1X))') ' N5 =',N5,'NMOD=',NMOD
      CALL FLBUFF( 22, 0, -1 )
C
C-- MODIFY OCC'S
C
      M5 = L5
      J=M5 + MD5 * (NMOD) + 13
      ANUM=STORE(J)
      WRITE ( CIOBUF,'(1X,A7,I5)' ) 'ANUM = ',ANUM
      CALL FLBUFF( 13, 0, -1 )
      ANUM=EXP(ANUM)
      M5=L5
C     DO 1700 I=1,N5
      DO 1700 I=1,NMOD
      OCC = STORE(M5+2)
      IF (I.LE.NMOD) THEN
                       DENOM = STORE(M5+13)
                       DENOM = EXP(DENOM)
                       FAC=  ANUM / DENOM
                       IF (FAC.LT.0.86) FAC=0.86
                       IF (STORE(M5+3).GT.0.3) FAC=0.0
                       STORE(M5+2) = OCC * FAC
      ELSE
                       UISO=STORE(M5+3)
                       IF (UISO.LT.0.0) THEN
                         MXX=LXX
                         DO 1650 J=1,NXX
                           IF (ISTORE(M5).EQ.ISTORE(MXX)) THEN
                             IF (ISTORE(MXX+2).EQ.0) THEN
                                   STORE(M5+2)=STORE(M5+2)*1.15
C                                  STORE(M5+3)=0.0
                             ENDIF
                           ENDIF
                           MXX=MXX+MDXX
 1650                    CONTINUE
                       ENDIF
      ENDIF
      M5=M5+MD5
 1700 CONTINUE
 1430 FORMAT(1X,A4,F6.0,F10.4,2F7.4,3X,4F7.4,3X,6F2.0,2F8.1)
 1435 FORMAT(1X,A4,F6.0,F10.4, F7.4,3X,4F10.4)
      M5=L5
      DO 1451 I=1,N5
         OCC = STORE(M5+2)
         WRITE ( CIOBUF,1430) ISTORE(M5),STORE(M5+1),OCC,STORE(M5+3),
     2                        (STORE(M5+J),J=3,5),STORE(M5+13)
         CALL FLBUFF( 97, 0, -1 )
         M5=M5+MD5
 1451 CONTINUE
 9999 CONTINUE
C-- SORT THE LIST 5 WITH RESPECT TO SEQUENCE NUMBER
      JUMP=2
      CALL SORTZ(L5,N5,MD5,JUMP)
C----- RESET  LIST 5 AUX. ADDRESSES
      L5A=L5
      N5A=N5
      MD5A=MD5
      M5A=L5
      N=N5
      NEW=1
      CALL XSTR05(LN1,0,NEW)
2300  CONTINUE
      CALL XOPMSG ( IOPPPR , IOPLSE , 5 )
      CALL XTIME2 ( 2 )
      RETURN
 2350 CONTINUE
      WRITE ( CIOBUF,2360) CCRCHR(1:2)
      CALL FLBUFF( 91, 0, -1 )
      WRITE(NCWU,2360)
 2360 FORMAT(' - WARNING - Standard deviation not available ',
     2 A2,   '             No modification of occupancies')
      GO TO 2300
C
2450  CONTINUE
      CALL XOPMSG ( IOPPPR , IOPLSP , 5 )
      GO TO 2300
9910  CONTINUE
      CALL XOPMSG ( IOPPPR , IOPCMI , 0 )
      GO TO 2450
C
      END
CODE FOR XLABEL
      SUBROUTINE XLABEL
C
C--   A PROCEDURE TO TRY TO ASSOCIATE PEAKS WITH ATOM TYPES
C
C
C---- REQUIRES A LIST 5 DEFINITION WITH AT LEAST 14 PARAMETERS PER ATOM
C      MARCH 1989
C
C  LN1    INPUT LIST TYPE
C  LN2    OUTPUT LIST TYPE
C  ILIST   THE LIST CONTROL FLAG :
C          -1  DO NOT LIST THE MOVED OR DELETED ATOMS.
C           0  LIST THE MOVED OR DELETED ATOMS.
C  TOLER   THE TOLLERANCE ADDED TO SUM OF RADII FOR BOND LIMIT
C  ITYPE    ALL(-1) OR PEAKS ONLY(0)
C
C--THE COMMON BLOCK /XWORKA/ IS USED :
C
C  JB  ADDRESS OF THE TEMP. STORAGE FOR ATOMS
C  JC  ADDRESS OF THE ATOM HEADER FOR MOVING ATOMS FROM 'JB'
C  JD  WORK SPACE FOR 'KATOMS'
C  JE  START OF DISTANCE STACK.
C  JF  NUMBER OF ATOMS LEFT TO SCAN
C  JG  CURRENT LAST ENTRY IN LIST 5 OR 10
C  JH  MD5-1
C  JI  MD5+MD5
C  JK  ZERO FOR THE FIRST OPERATION FOR THE CURRENT PIVOT ATOM,
C      ELSE NON-ZERO.
C  JL  ZERO FOR THE FIRST OPERATION FOR THE CURRENT CALL,
C      ELSE NON-ZERO.
C
C--
      INCLUDE 'ISTORE.INC'
C
      CHARACTER STRING*12
C
      DIMENSION IZPK(500),ICOPK(9),ICOGR(500),IVET(12)
      DIMENSION ICOEL(9),INP(9)
      DIMENSION DMNMX(10,10,2)
      DIMENSION XO(11),XN(11),KEY(10),NEWVET(48,3)
C
      DIMENSION PROCS(6)
      INCLUDE 'STORE.INC'
      INCLUDE 'XDSTNC.INC'
      COMMON /XDISTW/A,BB,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
C
      INCLUDE 'XWORKA.INC'
      INCLUDE 'XLISTI.INC'
      INCLUDE 'XCONST.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XLST01.INC'
      INCLUDE 'XLST02.INC'
      INCLUDE 'XLST03.INC'
      INCLUDE 'XLST05.INC'
      INCLUDE 'XLST12.INC'
      INCLUDE 'XLST29.INC'
      INCLUDE 'XERVAL.INC'
      INCLUDE 'XOPVAL.INC'
C
      COMMON /LABCOM/ LABVET(31),JGOON,MAXCYC,MAXPEA,TRGR1,TRGR2,NONEW
      INCLUDE 'XIOBUF.INC'
      INCLUDE 'QSTORE.INC'
      EQUIVALENCE (PROCS(1),MONIT)
      EQUIVALENCE (PROCS(2),MODE )
      EQUIVALENCE (PROCS(3),GVAL )
      EQUIVALENCE (PROCS(4),INTEG)
      EQUIVALENCE (PROCS(5),LN1  )
      EQUIVALENCE (PROCS(6),LN2  )
      DATA IDIM0/6/
      DATA  IPEAK/'Q   '/
C
C--CALL THE TIMING FUNCTION
      CALL XTIME1(2)
C -- READ THE REST OF THE INSTRUCTIONS AND CHECK FOR ERRORS
      IF (   KRDDPV ( PROCS(1) , IDIM0 )    .LT.   0   ) GO TO 9910
C--INPUT WENT OKAY  -  CLEAR THE CORE AGAIN
      CALL XRSL
      CALL XCSAE
C
C--LOAD THE INPUT LIST
      LN1=KTYP05(LN1)
      CALL XLDR05(LN1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--FIND THE OUTPUT LIST TYPE
      LN2=KTYP05(LN2)
      IF (MD5 .LT. 14) THEN
        WRITE(NCWU,1000) CCRCHR(1:2)
        WRITE ( CIOBUF,1000) CCRCHR(1:2)
        CALL FLBUFF( 53, 0, ISSPRT )
1000    FORMAT (A2,
     2          'Labelling requires a LIST 5 OR 10 with peak heights')
        GOTO 3720
      ENDIF
C-- SAVE PARAMETES RELATIVE TO LIST 10
C
      L5K=L5
      MD5K=MD5
      N5K=N5
C
C-- SET PRINT CODE   ( 1 = ON  ,  0 = OFF )
      IF (MONIT.LE.0) THEN
         ISTAT2=0
      ELSE
         ISTAT2=1
      ENDIF
      WRITE ( CIOBUF,'(A16,I4)') '++++ LABEL MODE ',MODE
      CALL FLBUFF( 20, 0, -1 )
      JALL=1
      IF (MODE.NE.0) THEN
C                      GR=ULTIMR(I)
      J=LABVET(31)
      GR=FLOAT(LABVET(J))/100.0
C                      IF (LABVET(31).GT.1) THEN
                            IF (GR.LT.TRGR1) THEN
                                               MODE=0
                       ELSE IF (GR.LT.30.00) THEN
                                               MODE=0
                                               JALL=0
                                             ENDIF
C                                           ENDIF
                       WRITE ( CIOBUF,'(A28,4(1X,I7))' )
     *   'WWWW GR,LABVET(31),MODE,JALL',GR,LABVET(31),MODE,JALL
                       CALL FLBUFF( 60, 0, -1 )
                     ENDIF
C
C-- INITIALIZE SPECIAL POSITIONS ROUTINE
C
C      CALL XSPINC
C      IF (NCAWU .EQ. 0) STOP 'LABEL NOT IMPLEMENTED'
      IF (NCAWU .EQ. 0) CALL GUEXIT(2010)
                 MAXPEA=N5
      WRITE ( CIOBUF,'(A25,I5)') ' +++ LUNGHEZZA LISTA 10 =',MAXPEA
      CALL FLBUFF( 30, 0, -1 )
C
C-- COMPUTE OCCUPANCY FACTOR AND ADD
C-- (SEQUENTIAL CODE)*10 TO OCCUPANCY
C
                 N5OLD=0
                 M5A=L5
                 DO 1435 I=1,N5
                 CALL XMOVE(STORE(M5A+4),XO(1),3)
CCJAN99                 K=KSPECB(NEWVET,XO,XN,KEY,ITYP,ISER,KHEAD,IACTN)
C      IF (NCAWU .EQ. 0) STOP 'LABEL NOT IMPLEMENTED'
      IF (NCAWU .EQ. 0) CALL GUEXIT(2010)
CJAN99                 OCC=1.0/FLOAT(KEY(10))
                        OCC = 1.
                 IF (ISTORE(M5A).NE.IPEAK) N5OLD=N5OLD+1
                 STORE(M5A+2)= OCC + I*10
 1430            FORMAT(1X,A4,F6.0,F10.4,F7.4,3X,3F7.4,3X,6F2.0,2F8.1)
                 M5A=M5A+MD5
 1435            CONTINUE
C
C--SORT LIST 10 PEAK-HEIGHT DECREASING
                 JUMP=-14
                 CALL SORTZ(L5,N5,MD5,JUMP)
C
C-- COUNT THE NUMBER OF PEAKS AND RECORD THE LARGEST SEQUENTIAL
C-- CODE FOR NON PEAK ATOMS
                 KPEAK=0
                 MPEAK=-99
                 M5A=L5
                 DO 1440 I=1,N5
                 KI=NINT(STORE(M5A+1))
                 IF (ISTORE(M5A).EQ.IPEAK) THEN
                                             KPEAK=KPEAK+1
                                           ELSE
                                              IF (KI.GT.MPEAK) MPEAK=KI
                                           ENDIF
                 M5A=M5A+MD5
 1440            CONTINUE
                 JSTOP=0
C
C-- ASSIGN A NEW SEQUENTIAL CODE TO PEAKS AND
C-- SAVE THE ORIGINAL CODE  IN THE U[ISO] FIELD
C
                KPEAK=MPEAK
                M5A=L5
                DO 1450 I=1,N5
                OCC = STORE(M5A+2) - FLOAT(INT(STORE(M5A+2)/10)) * 10
                IF (ISTORE(M5A).EQ.IPEAK) THEN
                                            KPEAK=KPEAK+1
                                            UISOLD=STORE(M5A+3)
                                            STORE(M5A+3)=STORE(M5A+1)
                                            STORE(M5A+1)=KPEAK
                                  STORE(M5A+13)=STORE(M5A+13)*1.33
                                          ENDIF
                M5A=M5A+MD5
 1450           CONTINUE
C                             ENDIF
      N5NEW=N5OLD+N5OLD
      IF (N5NEW.GT.N5) N5NEW=N5
      WRITE ( CIOBUF,'(A14,I5,A22,2I5)' )
     2 ' +++ LISTA 5 =',N5OLD,'   LISTA 10 (OLD,NEW)=',N5,N5NEW
      CALL FLBUFF( 51, 0, -1 )
      N5=N5NEW
      N5K=N5
      IF (ISTAT2.NE.0) THEN
         WRITE ( CIOBUF, '(A44)' )
     2 '     -------  INPUT LIST  (SORTED)   -------'
         CALL FLBUFF( 44, 0, ISSPRT )
      ENDIF
C
C--SORT LIST 10 PEAK-HEIGHT DECREASING (WE HAVE MODIFIED INTENSITIES)
      JUMP=-14
      CALL SORTZ(L5,N5,MD5,JUMP)
      IF (ISTAT2.NE.0) THEN
         M5A=L5
         DO 1451 I=1,N5
            OCC = STORE(M5A+2)
C           IF (MODE.NE.0) OCC=OCC-FLOAT(INT(STORE(M5A+2)/10)) * 10
            OCC=OCC-FLOAT(INT(STORE(M5A+2)/10)) * 10
            WRITE ( CIOBUF,1430) ISTORE(M5A),STORE(M5A+1),OCC,
     2                           (STORE(M5A+J),J=3,13)
            CALL FLBUFF( 97, 0, ISSPRT )
            M5A=M5A+MD5
1451     CONTINUE
      ENDIF
      CALL CLUPAR(N5K,L5K,MD5K,IVET,IIC,FOCC,JANAT,ISTAT2)
CCC   IF (JGOON.EQ.0) THEN
CCC                     M5A=L5
CCC                     DO 1445 I=1,N5
CCC                     OCC=STORE(M5A+2)-FLOAT(INT(STORE(M5A+2)/10))*10
CCC                     STORE(M5A+2)=OCC
CCC                     IF (ISTORE(M5A).EQ.IPEAK) THEN
CCC                                    STORE(M5A+13)=STORE(M5A+13)/1.33
CCC                                    STORE(M5A+ 3)=UISOLD
CCC                                  ENDIF
CCC                     M5A=M5A+MD5
CCC 1445                   CONTINUE
CCC                     GO TO 1560
CCC                   ENDIF
CCC   WRITE(CIOBUF,*) ' +++ GR,NONEW,NCYC,JGOON',GR,NONEW,NCYC,JGOON
CCC   CALL FLBUFF( 0, 0, -1 )
C
C
C     IF (MODE.NE.0) THEN
C                      CALL NAMEPK(IVET,NFL,FOCC,N3N,DMNMX,IZPK,ICOPK,
C    *                             ICOGR,NGRAMB,ICOEL,INP,ISTAT2)
C                    ELSE
C                      CALL LABDEF(IZPK,T2,IVET)
C                      MPEAK=100000
C                    ENDIF
      CALL NAMEPK(IVET,NFL,FOCC,N3N,DMNMX,IZPK,ICOPK,
     *            ICOGR,NGRAMB,ICOEL,INP,ISTAT2)
C     IF (MODE.EQ.0) CALL LABDEF(IZPK,T2,IVET,JALL)
      IF (MODE.EQ.0) CALL LABEH (IZPK,T2,IVET,JALL)
      CALL CLUEND(L5K,MD5K,IVET,IZPK,IPEAK,NONEW)
C     IF (MODE.NE.0) THEN
C     WRITE(NCAWU,'(12H +++ MAXPEA=,I5,5X,7H N5OLD=,I5)') MAXPEA,N5OLD
C
C-- CHANGE SIGN TO INTENSITY FOR DELETED ATOMS
C
                       M5A=L5K
                       DO 1465 I=1,N5K
                       IF (I.GT.MAXPEA)STORE(M5A+13)=-ABS(STORE(M5A+13))
                       M5A=M5A+MD5K
 1465                  CONTINUE
C                    ENDIF
C
C--SORT LIST 10 SEQUENCE INCREASING
      JUMP= 2
      CALL SORTZ(L5K,N5K,MD5K,JUMP)
      IF (JSTOP.EQ.1) GO TO 1560
      WRITE(NCWU,1506) LN2 , LN1
      WRITE ( CIOBUF,1507) CCRCHR(1:2),LN2 ,LN1,CCRCHR(1:2)
      CALL FLBUFF( 82, 0, -1 )
      WRITE ( CIOBUF,1508) CCRCHR(1:2)
      CALL FLBUFF( 68, 0, -1 )
 1506 FORMAT(/,' Results of the labeling and contents',
     2 ' of the new LIST ',I3,' It was LIST ',I3,//,
     3 ' TYPE',3X,'SERIAL',3X,'OCC',4X,'U[ISO]',
     5 6X,'X',6X,'Y',6X,'Z',25X,'U[I,J]',18X,'HEIGHT'/)
1507  FORMAT(A2,' Results of the labeling and contents',
     2 ' of the new LIST ',I3,' It was LIST ',I3,'  +++',A2)
1508  FORMAT(
     3 ' TYPE   SERIAL   OCC    U[ISO]',
     5 6X,'X',6X,'Y',6X,'Z',9X,'HEIGHT',A2)
      L5=L5K
      MD5=MD5K
      M5A=L5
      DO 1550 I=1,N5K
      OCC = STORE(M5A+2)
C     IF (MODE.NE.0) OCC=OCC-FLOAT(INT(STORE(M5A+2)/10)) * 10
      OCC=OCC-FLOAT(INT(STORE(M5A+2)/10)) * 10
      KI=NINT(STORE(M5A+1))
      STRING='            '
      IF (KI.GT.MPEAK) THEN
                         ISER=NINT(STORE(M5A+3))
                         WRITE(STRING,1433) ISER
                         STORE(M5A+3)=UISOLD
C                        STORE(M5A+13)=STORE(M5A+13)/1.33
                       ENDIF
      HEIGH=STORE(M5A+13)
      IF (HEIGH.LT.0.0) THEN
         STRING='DELETED '
         HEIGH=-HEIGH
      ENDIF
      WRITE ( CIOBUF,1431) ISTORE(M5A),STORE(M5A+1),OCC,
     2                     (STORE(M5A+J),J=3,6) ,HEIGH,STRING
      CALL FLBUFF( 79, 0, -1 )
      WRITE(NCWU, 1432) ISTORE(M5A),STORE(M5A+1),OCC,
     *                 (STORE(M5A+J),J=3,12),HEIGH,STRING
      STORE(M5A+2)=OCC
 1431 FORMAT(1X,A4,2X,F6.0,2X,2F7.4,3X,3F7.4,5X,F8.1,1X,A12)
 1432 FORMAT(1X,A4,2X,F6.0,2X,2F7.4,3X,3F7.4,3X,6F7.4,F8.1,1X,A12)
 1433 FORMAT('WAS PEAK',I4)
C
C-- SET SEQUENCE CODE = HUGE VALUEX FOR DELETED ATOMS
      IF (STORE(M5A+13).LT.0.0) STORE(M5A+1)=99999999.9
      M5A=M5A+MD5
 1550 CONTINUE
C--SORT LIST 10 SEQUENCE INCREASING
      JUMP= 2
      CALL SORTZ(L5K,N5K,MD5K,JUMP)
 1560 CONTINUE
      N5=MAXPEA
      L5=L5K
      MD5=MD5K
      M5A=L5
C
      KHEAD=0
      ISER=1
      IACTN=1
      ITYP = 0
C
      WRITE ( CIOBUF,1570) CCRCHR(1:2),LN2,N5,CCRCHR(1:2)
      CALL FLBUFF( 46, 0, ISSPRT )
1570  FORMAT(A2,' The new LIST ',I3,'  contains ',I5,'  atom(s)',A2)
C-- COPY LIST 10 INTO LIST 5
      N=N5
      NEW=1
      CALL XCPYL5(LN1,LN2,N,NEW)
      CALL XSTR05(LN2,0,NEW)
C
C
3720  CONTINUE
C
C -- FINAL MESSAGES
C
      CALL XOPMSG ( IOPREF , IOPEND , 301 )
C
      CALL XTIME2(2)
      CALL XCSAE
      CALL XRSL
      RETURN
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPREF , IOPABN , 0 )
      GO TO 3720
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPREF , IOPCMI , 0 )
      GO TO 9900
9920  CONTINUE
C -- INSUFFICIENT SPACE
      CALL XOPMSG ( IOPREF , IOPSPC , 0 )
      GO TO 9900
      END
C----------------------------------------------------------------
CODE FOR CLUPAR
      SUBROUTINE CLUPAR(N5K,L5K,MD5K,IVET,IIC,FOCC,JANAT,
     *                  ISTAT2)
C
C--   THIS SUBROUTINE PREPARES PARAMETERS FOR LABELLING CODE
C
C
C
      INCLUDE 'ISTORE.INC'
C
      DIMENSION XO(11),XN(11),KEY(10),NEWVET(48,3),IVET(12)
      DIMENSION X1(3),X2(3),S12(3),XEQ(3),VET(2)
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XDSTNC.INC'
      COMMON /XPROCC/DISTS(4),LN1,LN2,ITYPE,NATOM,ILIST,ISEQ,D3,AMULT,
     2 IACT, ISYMOD, ITRANS
      COMMON /XDISTW/A,BB,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
      INCLUDE 'XWORKA.INC'
      INCLUDE 'XLISTI.INC'
      INCLUDE 'XCONST.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XLST01.INC'
      INCLUDE 'XLST02.INC'
      INCLUDE 'XLST03.INC'
      INCLUDE 'XLST29.INC'
      INCLUDE 'XERVAL.INC'
      INCLUDE 'XOPVAL.INC'
C
      COMMON /LABCOM/ LABVET(31),JGOON,MAXCYC,MAXPEA,TRGR1,TRGR2,NONEW
      COMMON/SPEC/ SOPER(3,4,24),CENTRT(7,12),AAA(6),NOPER,NCENTR,ICENT,
     *            KPOL,JSYS,LAT,INDV(32),MPV(64),DUMMY(4)
      INCLUDE 'XIOBUF.INC'
C
      EQUIVALENCE (STORE(1),ISTORE(1))
C
      IIC = IIC
      JANAT = JANAT
      ISTAT2 = ISTAT2
C----- LOAD LIST 3(SCATTERING FACTORS) AND 29 (RADII ETC)
      CALL XFAL03
      CALL XFAL29
      IF ( IERFLG .LT. 0) GOTO 9900
C----- LOAD LISTS 1 AND 2, AND SET UP SOME CONSTANTS
      CALL XDIST2
C
      JT=12
      L12=-1
      M12=-1
C--SET UP A FEW WORK STACK CONSTANTS
      JB=NFL
      JC=JB+MD5K
      JD=JC+20
      JE=JD+30
C--CHECK THE STORE AREA
      IF ( JE - LFL ) 1350 , 9920 , 9920
1350  CONTINUE
C
      FOCC=1.0/T2
C
C-- ALLOCATE A DUMMY LIST TO CONTAIN A PSEUDO LIST 10
C
      MDUM=8
      NDUM=N5K
      I=NDUM*MDUM
      LDUM = KSTALL (I)
C-- ZERO THE ARRAY
      CALL XZEROF ( ISTORE(LDUM) , I )
C
C-- ALLOCATE A DUMMY LIST TO CONTAIN A LIST 3 (SIR-LIKE)
C
      MDSIR=18
      NSIR=N29
      I=NSIR*MDSIR
      LSIR = KSTALL (I)
C-- ZERO THE ARRAY
      CALL XZEROF ( ISTORE(LSIR) , I )
C
C--  LOAD THE SIR-LIKE LIST 3
C
C
      CALL XSCATT(0.0)
C
      RAGMIN=9999
      ANAT=0.0
      LSA=LSIR
      M29=L29
      M3=L3
      M3TR=L3TR
      DO 1360 I=1,NSIR
      WRITE ( CIOBUF,'(I5,'')'',A4,3F10.3)') I,ISTORE(M3),STORE(M3TR)
      CALL FLBUFF( 40, 0, -1 )
C     KZ=NINT(STORE(M29+6))/2
      KZ=NINT(STORE(M3TR))
      IF (KZ.EQ.0) KZ=1
      ISTORE(LSA   )=ISTORE(M29  )
       STORE(LSA+12)= NINT(STORE(M29+4)*T2)
       STORE(LSA+13)= KZ
       RAG=STORE(M29+1)
      IF (RAG.LT.RAGMIN.AND.KZ.NE.1) RAGMIN=RAG
       STORE(LSA+15)= RAG
      IF (KZ.GT.1) ANAT=ANAT+STORE(LSA+12)
      M29=M29+MD29
      M3=M3+MD3
      M3TR=M3TR+MD3TR
      LSA=LSA+MDSIR
 1360 CONTINUE
C
C-- SORT (SIR-LIKE) LIST 3 Z DECREASING ( NOW I CONSIDER ATOM WEIGHT )
C
      JUMP=-14
      CALL SORTZ(LSIR,NSIR,MDSIR,JUMP)
      LSA=LSIR
      DO 1370 I=1,NSIR
      WRITE ( CIOBUF,'(I5,'')'',A4,3F10.3)') I,ISTORE(LSA),
     2                                     STORE(LSA+12),
     3                                     STORE(LSA+13),
     4                                     STORE(LSA+15)
      CALL FLBUFF( 40, 0, -1 )
      LSA=LSA+MDSIR
1370  CONTINUE
      WRITE ( CIOBUF,'('' RAGGIO MINIMO ='',F10.3)') RAGMIN
      CALL FLBUFF( 26, 0, -1 )
C
C--  LOAD THE PSEUDO-LIST 10
C
      KHEAD=0
      ISER=1
      IACTN=1
      ITYP = 0
C
      LA=LDUM
      L15A=L5K
      DO 2020 I=1,NDUM
      ITYP=ISTORE(L15A)
      ISTORE(LA  )=ITYP
      RAG=RAGMIN
      LSA=LSIR
      DO 2010 J=1,NSIR
      IF (ISTORE(LSA).EQ.ITYP) RAG=STORE(LSA+15)
 2010 LSA=LSA+MDSIR
      OCC = STORE(L15A+2) - FLOAT(INT(STORE(L15A+2)/10)) * 10
      HEIGH=STORE(L15A+13)
      CALL XMOVE(STORE(L15A+4),XO(1),3)
CDJW      K=KSPECB(NEWVET,XO,XN,KEY,ITYP,ISER,KHEAD,IACTN)
C      IF (NCAWU .EQ. 0) STOP 'LABEL NOT IMPLEMENTED'
      IF (NCAWU .EQ. 0) CALL GUEXIT(2010)
CDJWJAN99      OCC=1.0/FLOAT(KEY(10))
                  OCC = 1.
      STORE(LA+1)=I
      STORE(LA+2)=XO(1)
      STORE(LA+3)=XO(2)
      STORE(LA+4)=XO(3)
      STORE(LA+5)=HEIGH
      STORE(LA+6)=OCC
      STORE(LA+7)=RAG
      L15A=L15A+MD5K
 2020 LA=LA+MDUM
C
C-- REJECT ATOMS IF TOO CLOSE
C
      VET(1)=1
      VET(2)=-1
      IFIN=ICENT+1
      L15A=L5K
      LA=LDUM
      DO 2040 I=1,NDUM-1
      IF (STORE(LA+1).LT.0.0) GO TO 2038
      RAG1=STORE(LA+7)
      CALL XMOVE(STORE(LA+2),X1(1),3)
      LB=LDUM+I*MDUM
      L15B=L5K+I*MD5K
      DO 2030 J=I+1,NDUM
      IF (STORE(LB+1).LT.0.0) GO TO 2028
      RAG2=STORE(LB+7)
      CALL XMOVE(STORE(LB+2),X2(1),3)
      D12S=RAG1+RAG2-0.75
      DO 50 KT=1,NCENTR
        DO 50 IFI=1,IFIN
          COEF=VET(IFI)
          DO 50 K=1,NOPER
CDJW               CALL XEQUI(X2,K,COEF,XEQ,KT)
CDJW            CALL XDISTB(X1,XEQ,D12,S12)
C      IF (NCAWU .EQ. 0) STOP 'LABEL NOT IMPLEMENTED'
      IF (NCAWU .EQ. 0) CALL GUEXIT(2010)
      IF (D12.LT.D12S) THEN
         WRITE ( CIOBUF,2025) ISTORE(L15A),STORE(L15A+1),X1,
     2                        ISTORE(L15B),STORE(L15B+1),XEQ,D12S,D12
         CALL FLBUFF( 97, 0, -1 )
         STORE(LB+1)=-1
         GO TO 60
      ENDIF
   50 CONTINUE
   60 CONTINUE
C     WRITE(NCAWU,2026)
C    *ISTORE(L15A),STORE(L15A+1),X1,
C    *ISTORE(L15B),STORE(L15B+1),X2,D12S,D12
CORIG CALL XDISTB(X1,X2,D12,S12)
C     D12S=-9999.99
CORIG IF (D12.LT.D12S) THEN
CORIG                    WRITE(NCAWU,2025)
CORIG*                   ISTORE(L15A),STORE(L15A+1),X1,
CORIG*                   ISTORE(L15B),STORE(L15B+1),X2,D12S,D12
 2025 FORMAT(2(1X,A4,F5.1,3F8.4),2F8.4,' REJECTED +++')
CORIG                    STORE(LB+1)=-1
CORIG                  ELSE
CORIG                    WRITE(NCAWU,2026)
CORIG*                   ISTORE(L15A),STORE(L15A+1),X1,
CORIG*                   ISTORE(L15B),STORE(L15B+1),X2,D12S,D12
 2026 FORMAT(2(1X,A4,F5.1,3F8.4),2F8.4,' NOT REJECTED +++')
CORIG                  ENDIF
 2028 L15B=L15B+MD5K
 2030 LB=LB+MDUM
 2038 L15A=L15A+MD5K
 2040 LA=LA+MDUM
C
C-- PACK THE LIST ( PSEUDO 10 & LIST 5 )
C
C     WRITE(NCAWU,*) '------------------------------------'
C     LA=LDUM
C     DO 2051 I=1,NDUM
C     WRITE(NCAWU,2029) ISTORE(LA),(STORE(LA+J),J=1,MDUM-1)
C2029 FORMAT(1H ,A4,10F10.4)
C2051 LA=LA+MDUM
C     WRITE(NCAWU,*) '------------------------------------'
C
      JRE=0
      LA=LDUM
      LB=LDUM-MDUM
      L15A=L5K
      L15B=L5K-MD5K
      DO 2050 I=1,NDUM
      IF (STORE(LA+1).LT.0.0) GO TO 2048
      JRE=JRE+1
      LB=LB+MDUM
      L15B=L15B+MD5K
      IF (LA.NE.LB) THEN
                      CALL XMOVE(STORE(LA),STORE(LB),MDUM)
                      CALL XMOVE(STORE(L15A),STORE(L15B),MD5K)
                    ENDIF
      STORE(LB+1)=JRE
 2048 L15A=L15A+MD5K
 2050 LA=LA+MDUM
C
C     WRITE(NCAWU,*) '------------------------------------'
C     WRITE(NCAWU,*) '-------',JRE,'  ----------------------'
C     LA=LDUM
C     DO 2052 I=1,NDUM
C     WRITE(NCAWU,2029) ISTORE(LA),(STORE(LA+JJ),JJ=1,MDUM-1)
C2052 LA=LA+MDUM
C     WRITE(NCAWU,*) '------------------------------------'
C               M5A=L5K
C               DO 1451 I=1,N5K
C               OCC = STORE(M5A+2)
C               OCC=OCC-FLOAT(INT(STORE(M5A+2)/10)) * 10
C               WRITE(NCAWU,1430) ISTORE(M5A),STORE(M5A+1),OCC,
C    *                            (STORE(M5A+J),J=3,13)
C1430            FORMAT(1H ,A4,F6.0,F10.4,F7.4,3X,3F7.4,3X,6F2.0,2F8.1)
C               M5A=M5A+MD5K
C1451           CONTINUE
      I=NDUM-JRE
      IF (I.GT.0) THEN
         WRITE ( CIOBUF ,2060) CCRCHR(1:2),I,CCRCHR(1:2)
         CALL FLBUFF( 35, 0, -1 )
      ENDIF
 2060 FORMAT(A2,' +++ ',I5,' PEAK(S) REJECTED +++',A2)
      WRITE ( CIOBUF,'(A38,2I5)')
     2 ' +++ LUNGH. LISTA PRIMA E DOPO IL PACK', NDUM,JRE
      CALL FLBUFF( 48, 0, -1 )
C
      NDUM=JRE
      N5K =JRE
C
C
C-- COMPUTE THE NUMBER OF ATOMS TO DEAL WITH
C
      MAXPEA=0
      SUM=0.0
      LA=LDUM
      DO 2070 I=1,NDUM
      OCCT2=STORE(LA+6)*T2
      SUM=SUM+OCCT2
      IF ((SUM-ANAT).LT.0.083333) MAXPEA=MAXPEA+1
 2070 LA=LA+MDUM
C
C-- MAXPEA IS THE EXACT NUMBER OF PEAKS TO CONSIDER
C
      NDUM=MAXPEA
C
C-- LOAD THE ARRAY OF POINTERS
C
      IVET(1)=LDUM
      IVET(2)=NDUM
      IVET(3)=MDUM
      IVET(4)=LSIR
      IVET(5)=NSIR
      IVET(6)=MDSIR
      IVET(7)=LSIR
      IVET(8)=NSIR
      IVET(9)=MDSIR
      IVET(10)=L2
      IVET(11)=N2
      IVET(12)=MD2
 3720 CONTINUE
      RETURN
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPREF , IOPABN , 0 )
      GO TO 3720
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPREF , IOPCMI , 0 )
      GO TO 9900
9920  CONTINUE
C -- INSUFFICIENT SPACE
      CALL XOPMSG ( IOPREF , IOPSPC , 0 )
      GO TO 9900
      END
C-----------------------------------------------------------------------
CODE FOR CLUEND
      SUBROUTINE CLUEND(L5K,MD5K,IVET,IZPK,IPEAK,NONEW)
C
C--   THIS SUBROUTINE TERMINATES LABELLING
C
      INCLUDE 'ISTORE.INC'
      DIMENSION IZPK(500),IVET(12)
      INCLUDE 'STORE.INC'
      COMMON/SPEC/ SOPER(3,4,24),CENTRT(7,12),AAA(6),NOPER,NCENTR,ICENT,
     *            KPOL,JSYS,LAT,INDV(32),MPV(64),JSPINI,DDMIN,NCAWU,NCWU
      INCLUDE 'XIOBUF.INC'
      INCLUDE 'QSTORE.INC'
C
      MAXPEA=IVET(2)
      L3  =IVET(4)
      N3  =IVET(5)
      MD3 =IVET(6)
C
      NONEW=1
      M5A=L5K
      DO 2000 I=1,MAXPEA
      IZPKC=ISTORE(L3+(IZPK(I)-1)*MD3)
      Z2   = STORE(L3+(IZPK(I)-1)*MD3+13)
      U1=STORE(M5A+3)
      N1=STORE(M5A+1)
      ITYP1=ISTORE(M5A)
      ITYP2=IZPKC
      IF (ITYP1.EQ.IPEAK) THEN
         NONEW=0
         STORE(M5A+13)=STORE(M5A+13)/1.33
      ELSE
         IF (U1.LT.0.0) THEN
C-- IF U[ISO] IF NEGATIVE SET IT TO 0.001
            STORE(M5A+3) = 0.001 + ABS(U1)
         ELSE
            IF (ITYP1.NE.IZPKC) THEN
               NONEW=0
C--  OTHERWISE MODIFY U[ISO] ACCORDING TO
C
C              Z1 : U1 = Z2 : U2
               Z1=1.0
               M3=L3
               DO 1200 J=1,N3
                  IF (ITYP1.NE.ISTORE(M3)) GO TO 1100
                  Z1=STORE(M3+13)
 1100             M3=M3+MD3
 1200          CONTINUE
C            ARGL=Z1*EXP(-U1)/Z2
C            U2=-ALOG(ARGL)
               U2=Z2*U1/Z1
               WRITE ( CIOBUF,1300) ITYP1,N1,U1,Z1,ITYP2,N1,U2,Z2
               CALL FLBUFF( 69, 0, -1 )
 1300 FORMAT(' MODIFICA DI U[ISO] -->',2(1X,A4,I4,F8.4,F6.1))
               STORE(M5A+3) = U2
            ENDIF
         ENDIF
      ENDIF
      ISTORE(M5A)=IZPKC
      M5A=M5A+MD5K
 2000 CONTINUE
      RETURN
      END
C-----------------------------------------------------------------------
CODE FOR NAMEPK
      SUBROUTINE NAMEPK(IVET,NFLPK,FOCC,N3N,DMNMX,IZPK,ICOPK,ICOGR,
     1NGRAMB,ICOEL,INP,ISTAT2)
C
C--GIVES  NAME TO THE PEAKS
      INCLUDE 'ISTORE.INC'
      DIMENSION IZPK(500),ICOPK(9),ICOGR(500),IVET(12)
      DIMENSION PIC(9),NPIC15(9),RAPIC(9),RAP(9),ICOEL(9),INP(9)
      DIMENSION DMNMX(10,10,2)
      INCLUDE 'STORE.INC'
      COMMON/XBUIL/DMAX,DMIN,G(18),IFT1,IFT2,IFT3,L3DUM,LCLUS,LADDR,LDIS
     1,LCON,LNEGL,MD,MDDIS,MDCON,MNEGL,NNEGL,LADCON,LANG,NCON,MCLUS
     2,NOK,NGH,NGL,NORHI,NORHI2,NPRES1,NPRES2,NPRES3,NPRE12,NGRUP,NFRAG
     3,IVE3I(9),IVE3S(9),IVE15I(9),IVE15S(9),IVE(9),DMN(9),DMX(9)
      COMMON/SPEC/ SOPER(3,4,24),CENTRT(7,12),AAA(6),NOPER,NCENTR,ICENT,
     *            KPOL,JSYS,LAT,INDV(32),MPV(64),JSPINI,DDMIN,NCAWU,NCWU
C
      INCLUDE 'QSTORE.INC'
C
      L15=IVET(1)
      N15=IVET(2)
      MD15=IVET(3)
      L3  =IVET(4)
      N3  =IVET(5)
      MD3 =IVET(6)
      L3  =IVET(7)
      N3  =IVET(8)
      MD3 =IVET(9)
      L2  =IVET(10)
      N2  =IVET(11)
      MD2 =IVET(12)
      NGH=0
      NGL=0
      NOK=0
      NGRUP=1
      NGRAMB=0
      DO 40 I=1,9
      INP(I)=0
      DMN(I)=0
      DMX(I)=0
      IVE(I)=0
      PIC(I)=0
      NPIC15(I)=0
      RAPIC(I)=0
      RAP(I)=0
      ICOPK(I)=0
      ICOEL(I)=0
      IVE3I(I)=0
      IVE3S(I)=0
      IVE15I(I)=0
40    IVE15S(I)=0
      DO 41 I=1,500
      ICOGR(I)=0
41    IZPK(I)=0
      DO 42 I=1,10
      DO 42 J=1,10
      DMNMX(I,J,1)=0.
42    DMNMX(I,J,2)=0.
C--
      L3DUM=NFLPK
      MD=8
      M=L3DUM
      M3=L3
      N3N=N3
      DO  50 I= 1,N3
      IF(STORE(M3+13).LT.1.5)N3N=N3-1
      IF(STORE(M3+13).GE.11)NGH=NGH+1
      STORE(M  )=STORE(M3+12)*FOCC
      STORE(M+1)=STORE(M3+15)
      STORE(M+2)=STORE(M3+13)
      STORE(M+3)=0
      STORE(M+4)=0
      STORE(M+5)=0
      STORE(M+6)=I
      STORE(M+7)=1
      M=M+MD
      M3=M3+MD3
50    CONTINUE
      L=L3DUM
      NFLPK=M
      NGL=N3N-NGH
      IF(ISTAT2.GT.2)WRITE(NCWU,1)NGH,NGL
1     FORMAT(1X,'N. GRUPPI HEAVY=',I3,2X,'N. GRUPPI LIGHT =',I3)
C--SORT DECREASING RADIUS  MODE
      JUMP=-2
      CALL SORTZ(L3DUM,N3,MD,JUMP)
      DMI=STORE(L+1+(N3N-1)*MD)
      DMA=STORE(L+1)
      DMIN=2*DMI-.35
      DMAX=2*DMA+.41
      DMIN=DMIN*DMIN
      DMAX=DMAX*DMAX
C--SORT DECREASE-Z MODE
      JUMP=-3
      CALL SORTZ(L3DUM,N3,MD,JUMP)
      LM=NFLPK
      MM=LM
      M=L3DUM
      DO 60 I=1,N3
      STORE(M+3)=0
      IF(I.LE.NGH)THEN
      IF(I.LT.N3N)STORE(M+3)=STORE(M+2)/STORE(M+2+MD)
      IF(I.GE.N3N)STORE(M+3)=1
      IF(STORE(M+2).GT.18)STORE(M+7)=2
      ENDIF
      STORE(M+4)=DMI+STORE(M+1)-.35
      STORE(M+5)=DMA+STORE(M+1)+.41
      STORE(MM)=STORE(M)
      STORE(MM+1)=STORE(M+1)
      STORE(MM+2)=STORE(M+2)
      STORE(MM+3)=STORE(M+3)
      STORE(MM+4)=STORE(M+4)
      DMN(I)=STORE(M+4)
      STORE(MM+5)=STORE(M+5)
      DMX(I)=STORE(M+5)
      STORE(MM+6)=STORE(M+6)
      STORE(MM+7)=STORE(M+7)
      MM=MM+MD
60    M=M+MD
      IVE3I(1)=1
      IVE3S(1)=N3N
      IVE15I(1)=1
      IVE15S(1)=N15
      IVE(1)=2
      IF(NGH.EQ.0)GO TO 560
      A=0.
      MLM=L3DUM
      DO 100  I=1,NGH
      PIC(I)=A+STORE(MLM)
      A=PIC(I)
      IFIN=I
      CALL PIC15(IVET,FOCC,A,NP)
      NPIC15(I)=NP
      IF(STORE(MLM+3).LT.1.35)GO TO 100
      M15=L15+(NPIC15(I)-1)*MD15+5
      MM15=M15+MD15
      RAPIC(I)=STORE(M15)/STORE(MM15)
      RAP(I)=STORE(MLM+3)*.222+1.167
      IF(RAPIC(I).LT.RAP(I))GO TO 100
      IFIN=0
      NOK=1
      IVE3S(NGRUP)=I
      IVE15S(NGRUP)=NPIC15(I)
      IJ=IVE3I(NGRUP)
      DO 110 J=IJ,I
110   ICOEL(J)=ICOEL(J)+10**(NGRUP-1)
      IVE(NGRUP)=1
      NGRUP=NGRUP+1
      IVE3I(NGRUP)=I+1
      IVE15I(NGRUP)=NPIC15(I)+1
100   MLM=MLM+MD
C--
      IF(IFIN.NE.0)GO TO 200
      IF(N3N.EQ.NGH)THEN
      IVE3I(NGRUP)=0
      IVE15I(NGRUP)=0
      NGRUP=NGRUP-1
      GO TO 590
      ELSE
      IVE3S(NGRUP)=N3N
      IVE15S(NGRUP)=N15
      IVE(NGRUP)=2
      GO TO 560
      ENDIF
200   CONTINUE
C-- PROCEDURA NOK=0
      INF=IVE3I(NGRUP)
      MLM=L3DUM+3+(INF-1)*MD
      A=0.
      INFG=INF
      DO 300 I=INF,NGH
      IF(A.GE.STORE(MLM))GO TO 300
      IF(NPIC15(I).LE.1)GO TO 300
      A=STORE(MLM)
      ML=MLM
      INFG=I
300   MLM=MLM+MD
      INF=IVE15I(NGRUP)
      ISUP=NPIC15(INFG)
      IVE(NGRUP)=3
      IVE3S(NGRUP)=NGH
      MM=NPIC15(INFG)
      MM15=L15+MM*MD15+5
      FF=STORE(MM15)*RAP(INFG)
      M15=L15+(IVE15I(NGRUP)-1)*MD15+5
      DO 400 I=INF,ISUP
      IJ=I-1
      IF(STORE(M15).LE.FF)GO TO 450
400   M15=M15+MD15
      GO TO 500
C--PEAKS LIKE HEAVY
450   CONTINUE
      IF(IJ.LT.INF)GO TO 470
      IVE3S(NGRUP)=INFG
      II=IVE3I(NGRUP)
      DO 460 L=II,INFG
460   ICOEL(L)=ICOEL(L)+10**(NGRUP-1)
C460   ICOEL(L)=NGRUP
      IVE15S(NGRUP)=IJ
      IVE(NGRUP)=1
C--PEAK LIKE AMBIGUI
      NGRUP=NGRUP+1
470   IVE(NGRUP)=3
      IVE15I(NGRUP)=IJ+1
      IVE15S(NGRUP)=NPIC15(NGH)
      IVE3I(NGRUP)=1
      IF(NGRUP.GT.1)IVE3I(NGRUP)=IVE3I(NGRUP-1)
      IVE3S(NGRUP)=NGH
      IF(N3N.GT.NGH)IVE3S(NGRUP)=NGH+1
      II=IVE3I(NGRUP)
      DO 480 I=II,NGH
480   ICOEL(I)=ICOEL(I)+10**(NGRUP-1)
500   IF(N3N.EQ.NGH)GO TO 590
C-- CARBONI
      NGRUP=NGRUP+1
      IVE3I(NGRUP)=NGH+1
      IVE3S(NGRUP)=N3N
      IVE15I(NGRUP)=IVE15S(NGRUP-1)+1
      IVE15S(NGRUP)=N15
      IVE(NGRUP)=2
560   II=IVE3I(NGRUP)
      DO 570 I=II,N3N
570   ICOEL(I)=ICOEL(I)+10**(NGRUP-1)
C--SET DISTANCES
590   CONTINUE
      IVE15S(NGRUP)=N15
      DO 600 I=1,NGRUP
      INF=IVE3I(I)
      ISUP=IVE3S(I)
      MLM=L3DUM+(INF-1)*MD+1
      DMN(I)=1000.
      DMX(I)=0.
      DO 650 J=INF,ISUP
      IF(STORE(MLM).LE.DMN(I))DMN(I)=STORE(MLM)
      IF(STORE(MLM).LT.DMX(I))GO TO 650
      DMX(I)=STORE(MLM)
      ICOPK(I)=STORE(MLM+6)
650   MLM=MLM+MD
600   CONTINUE
      DO 700 I=1,NGRUP
      DO 710 J=1,NGRUP
      DMNMX(I,J,1)=DMN(I)+DMN(J)-.35
      DMNMX(I,J,2)=DMX(I)+DMX(J)+.41
710   CONTINUE
700   CONTINUE
C--SET THE LIMITS FROM INPUT
      DO 900 I=1,NGRUP
      INF=IVE15I(I)
      ISUP=IVE15S(I)
      INF2=IVE3I(I)
      ISUP2=IVE3S(I)
      DO 900 J=INF,ISUP
      IZPK(J)=IVE3S(I)
      ICOGR(J)=I
900   CONTINUE
      NPRES2=1
      DO 950 I=1,NGRUP
      IF(IVE(I).EQ.1)NPRES2=IVE15S(I)
950   CONTINUE
      RETURN
      END
C
CODE FOR PIC15
      SUBROUTINE PIC15(IVET,FOCC,A,NB)
      INCLUDE 'ISTORE.INC'
      DIMENSION IVET(12)
      INCLUDE 'STORE.INC'
      INCLUDE 'QSTORE.INC'
C
C
      L15=IVET(1)
      N15=IVET(2)
      MD15=IVET(3)
      M15=L15
      SOM=A
      ERRO=.5*FOCC
      DO 100 I=1,N15
      SOM=SOM-STORE(M15+6)
      NB=I
      IF(SOM.GT.ERRO.OR.SOM.GT.0)GO TO  99
      IF(ABS(SOM).LE.ERRO)RETURN
      RETURN
99    M15=M15+MD15
100   CONTINUE
      RETURN
      END
C-----------------------------------------------------------------------
CODE FOR SORTZ
      SUBROUTINE SORTZ(LIND,NUMB,IBLK,JUMP)
C--SORT THE DATA IN STORE
C----- SHOULD NOW USE SRTDWN IN SORT.SRC
C
C  LIND  ADDRES IN STORE
C  NUMB  NUMBER OF BLOCK OF DATA TO BE SORTED
C  IBLK  BLOCK LENGHT OF THE DATA (I.E. NUMBER OF ITEMS PER BLOCK)
C  JUMP  < 0 SORT IN DECREASING ORDER
C  JUMP  > 0 SORT IN INCREASING ORDER
C  IABS(JUMP) = RELATIVE ADDRES OF THE KEY OF SORT
C
      INCLUDE 'ISTORE.INC'
      INCLUDE 'STORE.INC'
      INCLUDE 'QSTORE.INC'
C
      JSIG=1
      IF (JUMP.LT.0) THEN
                       JUMP=IABS(JUMP)
                       JSIG=-1
                     ENDIF
      IF (NUMB.EQ.1) RETURN
      JUMP=JUMP-1
      JA=2
2010  CONTINUE
      JB=NUMB/JA
      IF(JB) 2020,2020,2030
2020  CONTINUE
      JB=1
2030  CONTINUE
      JC=NUMB-JB
2040  CONTINUE
      JD=0
      M=LIND
      DO 2070 I=1,JC
      MK=M+JB*IBLK
      IF ((STORE(M+JUMP)-STORE(MK+JUMP))*JSIG) 2060,2060,2050
 2050 CONTINUE
      MM=M
      MMK=MK
      DO 2055 JE=1,IBLK
      F=STORE(MM)
      STORE(MM)=STORE(MMK)
      STORE(MMK)=F
      MM=MM+1
      MMK=MMK+1
 2055 CONTINUE
      JD=1
 2060 CONTINUE
      M=M+IBLK
 2070 CONTINUE
      IF (JD) 2080,2080,2040
 2080 CONTINUE
      IF (JB-1) 2100,2100,2090
 2090 CONTINUE
      JA=JA*2
      GO TO 2010
 2100 CONTINUE
      RETURN
      END
C---------------------------------------------------------------------
      FUNCTION ULTIMR(IFLAG)
C
      INCLUDE 'ISTORE.INC'
      INCLUDE 'STORE.INC'
      INCLUDE 'XLST06.INC'
      INCLUDE 'QSTORE.INC'
C
C-- LOAD LIST 6 READ ONLY( TO GET R-VALUEX AND MINIMIZATION FUNCTION )
C
      CALL XFAL06 (6,0)
      ULTIMR=STORE(L6P+1)
      RETURN
      END

