CODE FOR XSFLSB
      SUBROUTINE XSFLSB (MODE)
C--MAIN CONTROL ROUTINE FOR THE S.F.L.S. ROUTINES
C
C--
C      IF MODE EQ 0, DONT READ DATA STREAM
C
\TYPE11
\ISTORE
\ICOM30
\ICOM33
      CHARACTER *12 CTEMP
C
C
C
C
      DIMENSION IWORKA(52)
C
\STORE
\XCONST
\XLISTI
\XUNITS
\XSSVAL
\XUSLST
\XLST01
\XLST02
\XLST03
\XLST05
\XLST06
\XLST11
\XSTR11
\XLST12
\XLST13
\XLST22
\XLST23
\XLST28
\XLST25
\XLST30
\XLST33
\XERVAL
\XOPVAL
C
C
C
C
      COMMON /XSFWK/SCALE,R,RW,FOT,FCT,DFT,WDFT,AMINF,SFO,SFC,AP,BP,AT,
     2 BT,AC,BC,ACI,BCI,ACT,BCT,FO,FC,P,W,DF,WDF,TC,T,FOCC,TFOCC,SST,
     3 ST,A,C,S,COSP,SINP,LAYER,IBATCH,EXT,EXT1,EXT2,EXT3,FCEXT,FCEXS,
     4 PH,PK,PL,SH,SK,SL,WAVE,THETA1,THETA2,POL1,POL2,DEL,DELTA,D,B,
     5 ACONV,SCALEO,SCALEL,SCALEB,SCALES,SCALEK,SCALEG,SCALEW,PSHIFT,
     6 FRIED
\XWORKA
\XIOBUF
&PPC\XGSTOP
C
\QSTORE
\QLST33
\QSTR11
\QLST30
C
C
C
C
      EQUIVALENCE (IWORKA(1),JA)
      DATA IVERSN /801/
C----- V 810 INCLUDES THE SPECIAL SHAPES
      DATA IVERSN /810/
      WRITE(CMON,'('' Version with Special Shapes'')')
 
C----- USES DIFABS CORRECTION TO FC
C----- THE CODE HAS BEEN REORGANISED SO THAT FOR NONTWINNED REFINEMENT
C      THE CODE IS ALMOST CONTINUOUS. F**2 REFINEMENT HAS ALSO BEEN
C      LINEARISED.
C
      CALL XTIME1(1)
      IF (MODE .EQ. 0) THEN
C----- WE WONT READ ANY DATA, BUT WILL SET TYPE TO 'CALC'
            NUM = 3
            GOTO 1105
      ENDIF
C--LOAD THE NEXT '#INSTRUCTION'
1000  CONTINUE
      NUM=KNXTOP(LSTOP,LSTNO,ICLASS)
C--CHECK IF WE SHOULD RETURN
      IF(NUM)1050,1050,1100
1050  CONTINUE
      RETURN
C--BRANCH ON THE TYPE OF OPERATION
1100  CONTINUE
      I=KRDDPV(ISTORE(NFL),1)
1105  CONTINUE
      CALL XZEROF(IWORKA(1),52)
      GOTO(1200,1250,1300,1350,4550,4600,1150),NUM
1150  STOP 54
C
C--'#REFINE' HAS BEEN GIVEN
1200  CONTINUE
      JB=0
      JH=-1
      GOTO 1400
C
C--'#SCALE' HAS BEEN REQUESTED
1250  CONTINUE
      JB=-1
      JH=0
      GOTO 1400
C
C--'#CALCULATE' HAS BEEN GIVEN
1300  CONTINUE
      JB=-1
      JH=-1
      GOTO 1400
C
C--'#CYCLENDS' INSTRUCTION
1350  CONTINUE
      CALL XCYCLE
      GOTO 1000
C
C--SET THE VALUES FOR A S.F.L.S. CALCULATION
1400  CONTINUE
&PPCCS***
&PPC      CALL SETSTA( 'S.F.L.S.' )
&PPC      CALL nextcursor
&PPCCE***
      CALL XDUMP
C--CLEAR THE CORE
      CALL XRSL
C--LOAD LIST 13  -  THE EXPERIMENTAL CONDITIONS LIST
      CALL XFAL13
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET THE TWINNED/NON-TWINNED FLAG
      NB=ISTORE(L13CD+1)
C--FIND THE TYPE OF RADIATION
      NU=ISTORE(L13DT+1)
C--FETCH THE POLARISATION CONSTANTS
      WAVE=STORE(L13DC)
      THETA1=STORE(L13DC+1)
      THETA2=STORE(L13DC+2)
C--LOAD LIST 23  -  DEFINES CONDITIONS FOR S.F.L.S. CALCULATIONS
      CALL XFAL23
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET THE ANOMALOUS DISPERSION FLAG
      JE=ISTORE(L23M)
C--SET THE EXTINCTION FLAG
      NA=ISTORE(L23M+1)
C--SET THE LAYER SCALES APPLICATION FLAG
      NE=ISTORE(L23M+2)
C--SET THE BATCH SCALES APPLICATION FLAG
      NW=ISTORE(L23M+3)
C--SET THE PARTIAL CONTRIBUTIONS FLAG
      NC=ISTORE(L23M+4)
C--SET THE UPDATE PARTIAL CONTRIBUTIONS FLAG
      ND=ISTORE(L23M+5)
C----- SET THE ENANTIOPOLE REFINEMENT FLAG
      JL = ISTORE(L23M+6)
C--SET THE FLAG FOR REFINEMENT AGAINST /FO/ OR /FO/ **2
      NV=ISTORE(L23MN+1)
C----- CHECK IF WE  NEED REFLECTIONS (-1 IF NOT)
      IREFLS = ISTORE(L23MN+3)
C--FIND THE MINIMUM ALLOWED TEMPERATURE FACTOR
      UMIN=STORE(L23AC+8)
C----- SAVE THE TOLERANCE AND UPDATE VALUES
      STOLER = STORE(L23SP+5)
      IUPDAT = ISTORE(L23SP+1)
C--CLEAR THE CORE OUT AGAIN
      CALL XRSL
      CALL XCSAE
C----- SAVE SOME SPACE FOR THE U AXES
      IADDU = KCHLFL (4)
C--LOAD LIST 33  -  THE CONDITIONS FOR THIS S.F.L.S. CALCULATION
      CALL XFAL33
      IF ( IERFLG .LT. 0 ) GO TO 9900
      NF=-1
      JG=-1
C----- READ DOWN SOME LISTS
      CALL XFAL01
      CALL XFAL02
      CALL XFAL05
      CALL XFAL30
      IF (IERFLG .LT. 0) GOTO 9900
C
C--CHECK THAT ALL THE TEMPERATURE FACTORS ARE REASONABLE
C-C-C-CHECK THAT ALL T.F. AND SPECIAL PARAMETERS ARE REASONABLE
C-C-C-SIMILAR CHECKS ALSO IN XSFLSG (NO CHANGE OF LIST 5 BY XSFLSB)
      M5=L5
C--CHECK THAT THERE IS AT LEAST ONE ATOM IN LIST 5
      IF(N5 .LE. 0) GOTO 9940
C--LOOP OVER EACH ATOM
      A=0.0
      N=0
      DO 3300 I=1,N5
C-C-C-CHECK WHETHER ATOM IS ANISOTROPIC
      IF (ABS(STORE(M5+3)) .LE. UISO) THEN
C-C-C-CHECK ANISOTROPIC ATOMS
C--CHECK THE SMALLEST U AXIS
        CALL XEQUIV ( 1, M5, MD5, IADDU )
        IF (STORE(IADDU+1) .LT. UMIN) THEN
C--THIS ANISOTROPIC TEMPERATURE FACTOR IS NOT ALLOWED
          IF (ISSPRT .EQ. 0)
     1 WRITE(NCWU, 3110) STORE(M5),NINT(STORE(M5+1)),STORE(IADDU+1)
3110  FORMAT(/, ' Atom ', A4, I5, ' has U-min too small, ', F8.4)
      WRITE ( CMON, 3110) STORE(M5), NINT(STORE(M5+1)), STORE(IADDU+1)
      CALL XPRVDU(NCVDU, 1,0)
          A=AMIN1(A,STORE(IADDU+1))
          N=N+1
C      STORE(M5+3) = UMIN + ZERO
C-C-C-THE FOLLOWING CHANGES (4 LINES) ARE COMMENDED OUT,
C-C-C-BECAUSE THEY CAUSE DIFFICULTIES WITH KSET52
C-C-C-(LISTS 5 AND 12 DON'T CORRESPOND):
CC-C-C-SET MINIMUM-VALUE FOR ISOTR. (!) TEMP.FACTOR
C      STORE(M5+7) = UMIN + ZERO
CC-C-C-SET FLAG FOR TYPE OF THIS ATOM TO VALUE FOR ISOTROPIC ATOM
C      STORE(M5+3) = 1.0
        ENDIF
      ELSE
C-C-C-CHECK ISOTROPIC ATOM OR SPECIAL FIGURE
C--CHECK THE ISOTROPIC TEMPERATURE FACTOR
C        IF(STORE(M5+3) .LE. UMIN) THEN
        IF(STORE(M5+7) .LE. UMIN) THEN
C--THIS U[ISO] VALUE IS OUT OF RANGE
          WRITE ( CMON, 3120) STORE(M5),NINT(STORE(M5+1)), STORE(M5+7)
          CALL XPRVDU(NCVDU, 1,0)
      IF (ISSPRT .EQ. 0)
     1    WRITE(NCWU, '(A)') CMON(1)(:)
          WRITE(NCAWU, '(A)') CMON(1)(:)
3120  FORMAT(/, ' Atom ', A4, I5, ' has U-iso too small, ', F8.4)
C          A=AMIN1(A,STORE(M5+3))
          A=AMIN1(A,STORE(M5+7))
          N=N+1
C      STORE(M5+3) = UMIN + ZERO
      STORE(M5+7) = UMIN + ZERO
        ENDIF
C-C-C-CHECK OF SPECIAL FIGURE SPECIFIC PARAMETERS
        IF (NINT(STORE(M5+3)) .GE. 2) THEN
C-C-C-CHECK OF SIZE FOR ALL SPECIAL FIGURES
         IF (STORE(M5+8) .LT. 0.0005) THEN
          IF (ISSPRT .EQ. 0) THEN
           WRITE(NCWU, 3130) STORE(M5),NINT(STORE(M5+1)),STORE(M5+8)
          ENDIF
          WRITE(NCAWU, 3130) STORE(M5),NINT(STORE(M5+1)),STORE(M5+8)
3130      FORMAT(/,' Spec.Fig. ',A4,I5,' has SIZE too small:',F8.4,/,
     2           31X,'Reset to:  0.001',/,
     3           21X,'(in LIST 5 only in case of refinement !)')
          STORE(M5+8)=0.001
         ENDIF
C-C-C-CHECK OF DECLINAT AND AZIMUTH FOR LINE AND RING
         IF (NINT(STORE(M5+3)) .GE. 3) THEN
C-C-C-CHECK WHETHER DECLINAT MIGHT BE GIVEN IN DEGREES
C-C-C-(SUPPOSED IF ANGLES BIGGER THAN 5.0)
C-C-C-(THIS BLOCK CAN BE REMOVED WHEN IT IS MADE SURE THAT THE VALUE
C-C-C-OF ANGLES IS ALWAYS IN UNITS OF 100 DEGREES.)
          IF ((STORE(M5+9) .GE. 5.0).OR.(STORE(M5+9) .LE. -5.0)) THEN
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU, 3140) STORE(M5),NINT(STORE(M5+1)),STORE(M5+9)
           ENDIF
           WRITE(NCAWU, 3140) STORE(M5),NINT(STORE(M5+1)),STORE(M5+9)
3140       FORMAT(/,' Line/Ring ',A4,I5,' has DECLINAT probably',
     2       ' given in degrees: ', F8.4,/,
     3       21X,'Value devided by 100 to get units of 100 degrees',/,
     4       21X,'(in LIST 5 only in case of refinement !)')
           STORE(M5+9)=STORE(M5+9)/100
          ENDIF
C-C-C-BRING DECLINAT INTO PRACTICAL RANGE IF TOO FAR AWAY FROM IT
          IF ((STORE(M5+9) .GT. 3.6).OR.(STORE(M5+9) .LT. -3.6)) THEN
           STORE(M5+9)=MOD(STORE(M5+9),3.6)
          ENDIF
          IF (STORE(M5+9) .GT. 1.8) THEN
           STORE(M5+9)=STORE(M5+9)-3.6
          ELSE IF (STORE(M5+9) .LT. -1.8) THEN
           STORE(M5+9)=STORE(M5+9)+3.6
          ENDIF
C-C-C-CHECK WHETHER DECLINAT IS CLOSE TO 0.0 OR +/-1.8
          IF ((ABS(STORE(M5+9)+1.8) .LT. 0.001) .OR.
     2        (ABS(STORE(M5+9)-1.8) .LT. 0.001) .OR.
     3        (ABS(STORE(M5+9)) .LT. 0.001)) THEN
C-C-C-PRINT WARNING, GIVE AZIMUTH ARBITRARY VALUE
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU, 3145) STORE(M5),NINT(STORE(M5+1))
           ENDIF
           WRITE(NCAWU, 3145) STORE(M5),NINT(STORE(M5+1))
3145       FORMAT(/,' Line/Ring ',A4,I5,' has DECLINAT = n*180.0 deg.',
     2            /,21X,'==> AZIMUTH is not defined !!!',
     3            /,    ' It is reset to an arbitrary value (0.0)',
     4                  ' and should not be refined !',
     5            /,' (change in LIST 5 only in case of refinement !)')
C-C-C-PERHAPS IT'S REASONABLE TO REMOVE THE AUTOMATICAL CHANGE
           STORE(M5+10) = 0.0
          ELSE
C-C-C-CHECK WHETHER AZIMUTH MIGHT BE GIVEN IN DEGREES
C-C-C-(SUPPOSED IF ANGLES BIGGER THAN 5.0)
C-C-C-(THIS BLOCK CAN BE REMOVED WHEN IT IS MADE SURE THAT THE VALUE
C-C-C-OF ANGLES IS ALWAYS IN UNITS OF 100 DEGREES.)
           IF ((STORE(M5+10) .GE. 5.0).OR.(STORE(M5+10) .LE. -5.0)) THEN
            IF (ISSPRT .EQ. 0) THEN
             WRITE(NCWU, 3150) STORE(M5),NINT(STORE(M5+1)),STORE(M5+10)
            ENDIF
            WRITE(NCAWU, 3150) STORE(M5),NINT(STORE(M5+1)),STORE(M5+10)
3150        FORMAT(/,' Line/Ring ',A4,I5,' has AZIMUTH  probably',
     2        ' given in degrees: ', F8.4,/,
     3        21X,'Value devided by 100 to get units of 100 degrees',/,
     4        21X,'(in LIST 5 only in case of refinement !)')
            STORE(M5+10)=STORE(M5+10)/100
           ENDIF
C-C-C-BRING AZIMUTH INTO PRACTICAL RANGE IF TOO FAR AWAY FROM IT
           IF ((STORE(M5+10) .GT. 3.6).OR.(STORE(M5+10) .LT. -3.6)) THEN
            STORE(M5+10)=MOD(STORE(M5+10),3.6)
           ENDIF
           IF (STORE(M5+10) .GT. 1.8) THEN
            STORE(M5+10)=STORE(M5+10)-3.6
           ELSE IF (STORE(M5+10) .LT. -1.8) THEN
            STORE(M5+10)=STORE(M5+10)+3.6
           ENDIF
          ENDIF
         ENDIF
        ENDIF
      ENDIF
      M5 = M5 + MD5
3300  CONTINUE
C--CHECK IF THE T.F.'S ARE ALL OKAY
      IF (N .NE. 0) THEN
C -- INVALID TEMPERATURE FACTOR
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , 9935 ) N , UMIN , A
      WRITE(NCAWU,9935) N, UMIN, A
9935  FORMAT ( 1X , I6 , ' temperature factors less ' ,
     1 'than the lowest allowed value of ' , F10.5 ,
     2 /1X,' The minimum value  was ', F10.5)
      WRITE ( CMON, 9935) N, UMIN, A
      CALL XPRVDU(NCVDU, 2,0)
      ENDIF
      IF ((STORE(L5O+4) .LE. 1.) .AND. (STORE(L5O+4) .GE. 0.))
     1 GOTO 3340
      WRITE ( CMON, 3320) STORE(L5O+4)
      CALL XPRVDU(NCVDU, 1,0)
      IF (ISSPRT .EQ. 0)  WRITE(NCAWU, '(A)') CMON(1)(:)
      WRITE(NCAWU, '(A)') CMON(1)(:)
3320  FORMAT(1X,'Enantiopole parameter out of range. (',F6.3,' ) ')
3340  CONTINUE
C
C----- SET THE OCCUPANCIES
      IF (IUPDAT .GE. 0)  I = KSPINI( -1, STOLER)
       NUPDAT = 0
C----- SAVE SOME WORK SPACE
        J =NFL
        I = KCHNFL(40)
        M5 = L5
        DO 3350 I = 1, N5
          IF (IUPDAT .GE. 0) THEN
            IGSTAT =KSPGET ( STORE(J), STORE(J+10), ISTORE(J+20),
     2      STORE(J+30), MGM, M5, IUPDAT, NUPDAT)
          ELSE
            STORE(M5+13) = 1.0
          ENDIF
          M5 = M5 + MD5
3350  CONTINUE
        NFL= J
C
C--CHECK THAT THE SCALE FACTOR GIVEN IS NOT ZERO
      SCALE = STORE(L5O)
      IF (SCALE .LE. 0.000001) THEN
C--SCALE FACTOR IS UNREASONABLE  -  RESET IT TO 1.0
        IF (ISSPRT .EQ. 0) WRITE(NCWU,1420)
        WRITE(NCAWU,1420)
        WRITE ( CMON, 1420)
        CALL XPRVDU(NCVDU, 1,0)
1420  FORMAT(10X,' The overall scale factor has been set to 1.0' )
        SCALE = 1.
        STORE(L5O)=1.
        CALL XSTR05(5,0,-1)
      ENDIF
C----- CHECK ON THE TYPE OF MATRIX TO USE
      JK = ISTORE( M33CD + 6)
C----- SET THE STORE MAP LEVEL
      ISTAT2 = ISTORE (M33CD+3)
C----- CHECK FOR RESTRAINTS ONLY
      IF (IREFLS .LE. -1) GOTO 2350
C--CHECK ON THE TYPE OF LISTING REQUIRED
      IF(ISTORE(M33CD+2))1550,1500,1450
C--COMPLETE LISTING, INCLUDING ELEMENT CONTRIBUTIONS FOR A TWIN
1450  CONTINUE
      NF=0
C--LISTING OF EACH STRUCTURE FACTOR AS IT IS CALCULATED
1500  CONTINUE
      JG=0
1550  CONTINUE
C--CHECK IF THIS STRUCTURE IS TWINNED
      IF(NB)1700,1600,1600
C--TWINNED  -  CHECK ON THE TYPE OF OUTPUT FOR /FO/
1600  CONTINUE
      NB=0
      IF(ISTORE(M33CD+4))1700,1650,1650
C--SCALED /FOT/ IS REQUIRED
1650  CONTINUE
      NB=1
1700  CONTINUE
C--READ DOWN SOME LISTS
      CALL XFAL03
      CALL XFAL06(1)
C----- SIGMA THRESHOLD
         S6SIG = 0.0
         IF ( N28MN .GT. 0 ) THEN
          INDNAM = L28CN
          DO 1702 I = L28MN , M28MN , MD28MN
            WRITE ( CTEMP , '(3A4)')
     1      (ISTORE(J), J = INDNAM, INDNAM + 2 )
            IF (INDEX(CTEMP,'RATIO') .GT. 0) THEN
             S6SIG = STORE(I+1)
             ENDIF
            INDNAM = INDNAM + MD28CN
1702      CONTINUE
         ENDIF
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--INITIALISE THE COLLECTION OF THE DETAILS FOR /FC/ AND PHASE
      CALL XIRTAC(6)
      CALL XIRTAC(7)
      CALL XIRTAC(16)
C--SET UP DEFAULT VALUES FOR THE REFLECTION HOLDING STACK
      N12=0
      N25=1
C--CHECK IF THIS IS A TWINNED REFINEMENT
      IF(NB)1900,2000,2000
C--THIS IS NOT A TWINNED REFINEMENT
1900  CONTINUE
      NF=-1
C--CHECK IF WE ARE UPDATING THE PARTIAL DERIVATIVES
      IF(ND)2350,1950,1950
C--UPDATE  -  INITIALISE THE COLLECTION
1950  CONTINUE
      CALL XIRTAC(8)
      CALL XIRTAC(9)
      GOTO 2350
C--THIS IS A TWINNED REFINEMENT  -  SUPPRESS EXTINCTION CORRECTIONS
2000  CONTINUE
      NA=-1
C--SUPPRESS PARTIAL CONTRIBUTIONS
      NC=-1
      ND=-1
C----- SUPPRESS ENANTIOPOLE REFINEMENT
      JL = -1
C--INITIALISE THE DETAILS FOR /FO/
      CALL XIRTAC(4)
C--CHECK IF PRINTING IS BEING DONE
      IF(JG)2050,2100,2100
C--SUPPRESS ELEMENT PRINTING
2050  CONTINUE
      NF=-1
C--LOAD THE TWIN OPERATORS
2100  CONTINUE
      IF ( IERFLG .LT. 0 ) GO TO 9900
      CALL XFAL25
C--CHECK THAT THE NUMBER OF OPERATORS EQUALS THE NUMBER OF ELEMENTS
      IF ( MD5ES .NE. N25 ) GO TO 9910
C--FORM THE SQUARE ROOT OF THE ELEMENT SCALES
      LN=LN5
      IREC=1001
      M5ES=NFL
      I=KCHNFL(MD5ES)
C--SET UP THE VALUES
      J=M5ES
      K=L5ES
      DO 2300 I=1,MD5ES
      IF (STORE(K) .LT. 0) THEN
      WRITE(NCAWU,2301) ' Twin element error, Scale', I, ' = ', STORE(K)
      IF (ISSPRT .EQ. 0)
     1 WRITE(NCWU,2301) ' Twin element error, Scale', I, ' = ', STORE(K)
      WRITE ( CMON, 2301) ' Twin element error, Scale', I, ' = ',
     2                     STORE(K)
      CALL XPRVDU(NCVDU, 1,0)
2301  FORMAT(A,I3,A,F8.4)
      STORE(K) = 0.0
      ENDIF
      STORE(J)=SQRT(STORE(K))
      J=J+1
      K=K+1
2300  CONTINUE
2350  CONTINUE
C--CHECK ON WHETHER THERE IS A REFINEMENT TO BE DONE
      JQ=0
      IF(JB)2900,2400,2400
C--SET UP THE STORAGE LOCATIONS FOR THE PARTIAL DERIVATIVES
2400  CONTINUE
      JQ=(2-IC)*(JE+2)
      JQ=MAX0(JQ,2)
      JS=-1
C--LOAD LIST 12
      CALL XFAL12(JS,JQ,JR,JN)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET THE INITIAL DETAILS FOR LINKING LISTS 12 AND 5
      JA=1
      JJ=-1
C--LINK LIST 12 AND LIST 5
      IF(KSET52(0,0))2500,2450,2450
C--ANISO T.F.'S ARE STORED
2450  CONTINUE
      IF ( IERFLG .LT. 0 ) GO TO 9900
      JA=N2
      JJ=0
C--CHECK THAT THERE ARE SOME PARAMETERS TO REFINE
2500  CONTINUE
      IF ( IERFLG .LT. 0 ) GO TO 9900
      IF ( N12 .LE. 0 ) GO TO 9920
C--SET UP THE STACK FOR THE COMPLETE PARTIAL DERIVATIVES
      JO=JR
      JP=JO+N12-1
C--CHECK IF WE NEED THE L.H.S.
      IF(JK)2700,2750,2750
C--SET UP A NEW MATRIX
2700  CONTINUE
      CALL XSET11(JK,1,1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
      GOTO 2850
C--WE ONLY NEED THE R.H.S.
2750  CONTINUE
      CALL XSET11(JK,0,1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--CLEAR THE R.H.S. OF THE OLD NUMBERS
      M11R=L11R+N11R-1
      DO 2800 I=L11R,M11R
      STR11(I)=0.
2800  CONTINUE
C--CHECK THAT THERE IS ROOM TO OUTPUT THE MATRIX
2850  CONTINUE
      CALL XCL11(11)
C--INITIALISE THE MATRIX ACCUMULATION ROUTINES
      CALL XSETMT(JO,L11,L11R,N12,L12B,N12B)
      GOTO 3000
C--NO REFINEMENT
2900  CONTINUE
      JJ=-1
      JA=1
C--SET THE T.F. VALUES IN LIST 5
      IF(KSET52(-1,0))3000,2950,2950
2950  CONTINUE
      IF ( IERFLG .LT. 0 ) GO TO 9900
      JA=N2
      JJ=0
C--LINK LIST 5 AND 3
3000  CONTINUE
C----- CHECK FOR RESTRAINTS ONLY
      IF (IREFLS .GE. 0) THEN
      N3=KSET53(0)+1
      IF ( IERFLG .LT. 0 ) GO TO 9900
      ENDIF
C
C----- CHECK IF REFLECTIONS SHOULD BE USED
      IF (IREFLS .LE. -1) THEN
            NT    = 0
            R     = 0.
            RW    = 0.
            WDFT  = 0.
            AMINF = 0.
            CYCNO = STORE(M33V) + 1
      ELSE
C--SET UP THE REFLECTION HOLDING STACK
      NR=4
      NY=20
      NG=NFL
C--SET THE LIST AND RECORD TYPE
      LN=25
      IREC=1001
      NH=KCHNFL(N25*(N12*(JQ+1)+NY+NR*N2I)+1)
C--PREPARE TO INITIALISE THE STACK
      NH=NG+1
      NI=NG
      NJ=(N2T-1)*NR
C--SET UP THE STACK
      DO 3550 I=1,N25
      ISTORE(NI)=NH
      NI=NH
      ISTORE(NI)=NOWT
      ISTORE(NI+1)=NH+NY
      ISTORE(NI+2)=ISTORE(NI+1)+N12-1
      ISTORE(NI+18)=ISTORE(NI+2)+1
      ISTORE(NI+19)=ISTORE(NI+18)+N12*JQ-1
      ISTORE(NI+9)=ISTORE(NI+19)+1
      ISTORE(NI+10)=ISTORE(NI+9)+NJ
      NH=ISTORE(NI+10)+NR
C--INSERT DUMMY INITIAL INDICES
      NL=ISTORE(NI+9)
      NM=ISTORE(NI+10)
      DO 3500 NN=NL,NM,NR
      STORE(NN)=-1000000.
      STORE(NN+1)=-1000000.
      STORE(NN+2)=-1000000.
      STORE(NN+3) = 0.0
3500  CONTINUE
3550  CONTINUE
C--OUTPUT AN INITIAL CAPTION
      CALL XPRTCN
C--FIND THE NUMBER OF CYCLES CALCULATED
      STORE(L6P)=STORE(L6P)+1.
      JI=NINT(STORE(L6P))
      CYCNO = STORE(L6P)
C--PRINT THE TITLE HEADING
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3600)JI
      ENDIF
3600  FORMAT(' Structure factor least squares',5X,
     2 ' calculation number',I6)
C--PRINT THE ALLOCATED CORE STORE IF NECESSARY
      IF(ISTAT2)3650,4050,3650
3650  CONTINUE
      CALL XPCM(1)
C--CHECK IF WE SHOULD DUMP ANY OTHER GOODIES
      IF(ISTAT2)4050,4050,3700
3700  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3750)IWORKA
      ENDIF
3750  FORMAT(1X,13I9)
      M2=L2+MD2*N2-1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3800)(STORE(I),I=L2,M2)
      ENDIF
3800  FORMAT(1X,12F10.5)
      M2I=L2I+MD2I*N2I-1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3800)(STORE(I),I=L2I,M2I)
      ENDIF
      M3=L3+MD3*N3-1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3850)(STORE(I),I=L3,M3)
      ENDIF
3850  FORMAT(1X,A4,11F10.5)
      M5=L5+MD5*(N5-1)
      DO 3950 I=L5,M5,MD5
      L=I+2
      M=I+MD5-1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3900)ISTORE(I),ISTORE(I+1),(STORE(K),K=L,M)
      ENDIF
3900  FORMAT(1X,2I4,11F9.5)
3950  CONTINUE
      IF(JB)4050,4000,4000
4000  CONTINUE
      CALL XPRINT(L22,L22+(MD22*N22)-1)
C
C
C--CALL THE CALCULATION LINK
4050  CONTINUE
      CALL XSFLSC
      ENDIF
C
C
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--CHECK FOR L.S. REFINEMENT
      IF(JB)4150,4100,4100
C--STORE THE MATRIX  -  STORE THE NUMBER OF PARAMETERS
4100  CONTINUE
      STORE(L11P+23)=FLOAT(N12)
C--STORE THE NUMBER OF REFLECTIONS THAT HAVE BEEN USED
      STORE(L11P+24)=FLOAT(NT)
C--STORE THE SUM OF W*DF**2
      STORE(L11P+25)=WDFT
C--STORE THE SUM OF W* /FO/ **2
      IF (ABS (RW) .LE. ZERO) THEN
            A =1.
      ELSE
            A = 100. / RW
      ENDIF
      STORE(L11P+26)=WDFT*A*A
C--SET THE NUMBER OF DEGREES OF FREEDOM
      STORE(L11P+16)=STORE(L11P+24)-STORE(L11P+23)
C--STORE THE MINIMISATION FUNCTION
      STORE(L11P+17)=AMINF
C--OUTPUT LIST 11
      CALL XCL11(11)
      CALL XMKOWF(11,0)
      CALL XALTES(11,1)
C--TERMINATE THE OUTPUT OF LIST 6  -  STORE THE R-VALUE
4150  CONTINUE
      IF (IREFLS .LE. -1) GOTO 4355
      STORE(L6P+1)=R
C--STORE THE WEIGHTED R-VALUE
      STORE(L6P+2)=RW
C--STORE THE MINIMISATION FUNCTION
      STORE(L6P+3)=AMINF
C--COMPUTE THE REFLECTION TOTALS FOR /FC/ AND PHASE
      CALL XCRD(6)
      CALL XCRD(7)
      CALL XCRD(16)
C--CHECK FOR A TWINNED REFINEMENT
      IF(NB)4250,4200,4200
C--COMPUTE THE DETAILS FOR /FO/
4200  CONTINUE
      CALL XCRD(4)
C--CHECK IF WE HAVE UPDATED THE A AND B PARTS
4250  CONTINUE
      IF(ND)4350,4300,4300
C--UPDATE THEIR DETAILS
4300  CONTINUE
      CALL XCRD(8)
      CALL XCRD(9)
C--WRITE THE LIST TO THE DISC
4350  CONTINUE
      CALL XMONTR(-1)
      CALL XEND06
4355  CONTINUE
C--UPDATE THE DETAILS FOR LIST 33
      STORE(M33V) = CYCNO
      STORE(M33V+1)=R
      STORE(M33V+2)=RW
      STORE(M33V+3)=0.
      STORE(M33V+4)=AMINF
\IDIM33
C--OUTPUT THE NEW LIST 33 TO DISC
      CALL XWLSTD(33,ICOM33,IDIM33,-1,-1)
      IF (KHUNTR (11,0, IADDL,IADDR,IADDD, -1) .EQ. 0) THEN
        IF (KHUNTR (30,0, IADDL,IADDR,IADDD, -1) .NE. 0) CALL XFAL30
C----- UPDATE LIST 30
        STORE(L30RF +0 ) = R
        STORE(L30RF +1 ) = RW
CNOV98        STORE(L30RF +3 ) = MAX (STORE(L30RF +3 ), STORE(L11P+23))
        IF(STORE(L11P+23) .GT.ZERO) STORE(L30RF +2 ) = STORE(L11P+23)
        IF (STORE(L11P+16) .GT. ZERO) THEN
          STORE(L30RF +4 ) = SQRT(AMINF / STORE(L11P+16))
        ENDIF
        STORE(L30RF +8 ) = STORE(L11P+24)
C----- SIGMA THRESHOLD FOR REFINEMENT
      IF (JB .GE. 0)  STORE(L30RF+3) = S6SIG
C
C----- REFINEMENT TYPE
        ISTORE(L30RF +17 ) = NV + 2
        CALL XWLSTD ( 30, ICOM30, IDIM30, -1, -1)
      ENDIF
C--CLEAR THE CORE
      CALL XRSL
      CALL XCSAE
C--CHECK IF THE SCALE FACTOR HAS BEEN REFINED
      IF(JH)4450,4400,4400
4400  CONTINUE
      CALL XFAL05
      IF ( IERFLG .LT. 0 ) GO TO 9900
      STORE(L5O)=SCALE
C----- SAVE SOME WORK SPACE
        J =NFL
        I = KCHNFL(40)
        M5 = L5
        DO 4420 I = 1, N5
          IF (IUPDAT .GE. 0)
     1      IGSTAT =KSPGET ( STORE(J), STORE(J+10), ISTORE(J+20),
     2      STORE(J+30), MGM, M5, IUPDAT, NUPDAT)
          M5 = M5 + MD5
4420  CONTINUE
        NFL= J
C
      CALL XSTR05(LN5,0,-1)
      CALL XRSL
      CALL XCSAE
C--PRINT THE TERMINATION MESSAGES
4450  CONTINUE
      CALL XOPMSG(IOPSFS, IOPEND, IVERSN)
      CALL XTIME2(1)
      IF (MODE .EQ. 0)  GOTO 1050
      GOTO 1000
C
C--'#END' INSTRUCTION
4550  CONTINUE
      CALL XEND
&PPCCS***
&PPC      IF ( GLSTOP .EQ. 1 ) THEN
&PPC          GOTO 1050
&PPC      ELSE
&PPCCE***
      GOTO 1000
&PPCCS***
&PPC      ENDIF
&PPCCE***
C
C--'#TITLE' INSTRUCTION
4600  CONTINUE
      CALL XRCN
      GOTO 1000
C
9900  CONTINUE
C -- ERRORS
      IF (MODE .EQ. 0)  GOTO 1050
      GO TO 1000
9910  CONTINUE
C -- NUMBERS DON'T MATCH
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , 9915 )
      WRITE ( NCAWU , 9915 )
      WRITE ( CMON, 9915 )
      CALL XPRVDU(NCVDU, 1,0)
9915  FORMAT ( 1X , 'The number of elements in lists 5 and 25 is' ,
     1 ' different' )
      CALL XERHND ( IERERR )
      GO TO 9900
9920  CONTINUE
C -- NOTHING TO REFINE
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , 9925 )
      WRITE ( NCAWU , 9925 )
      WRITE ( CMON, 9925 )
      CALL XPRVDU(NCVDU, 1,0)
9925  FORMAT ( 1X , 'List 12 indicates that no parameters ' ,
     1 'are to be refined' )
      CALL XERHND ( IERERR )
      GO TO 9900
9940  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , 9945 )
      WRITE ( NCAWU , 9945 )
      WRITE ( CMON, 9945 )
      CALL XPRVDU(NCVDU, 1,0)
9945  FORMAT(1X ,'LIST 5 contains no atoms')
      GOTO 9900
      END
C
CODE FOR XSFLSC
      SUBROUTINE XSFLSC
C--MAIN STRUCTURE FACTOR CALCULATION ROUTINE
C
C--USEAGE OF CONTROL VARIABLES :
C
C  JA      SET TO 1 FOR ISO ATOMS ONLY, ELSE N2
C  JB      SET TO -1 FOR NO REFINEMENT, ELSE 0
C  JC      SET TO -1 FOR ONLY CALCULATE COS, ELSE 0
C  JD      SET TO -1 FOR CENTRO, ELSE 0
C  JE      SET TO -1 FOR NO ANOMALOUS DISPERSION, ELSE 0
C  JF      CURRENT VALUE OF JB, SET FOR EACH ATOM IF JB=0
C  JG      SET TO -1 FOR NO PRINT, ELSE THE NUMBER OF LINES BEFORE PAGE
C  JH      SET TO -1 IF THE SCALE FACTOR IS NOT TO BE REFINED, ELSE 0
C  JI      CYCLE NUMBER
C  JJ      SET TO -1 IF ONLY ISO-TERMS REQUIRED, ELSE 0 (SIMILAR TO JA)
C  JK      SET TO -1 IF BOTH LEFT AND RIGHT HAND SIDES ARE NEEDED
C  JL      SET TO -1 IF ENANTIOPOLE PARAMETER NOT USED, ELSE 0
C  JN      DUMMY LOCATION FOR NON-REFINED PARAMETERS
C  JO      ADDRESS COMPLETE PARTIAL DERIVATIVES
C  JP      LAST ADDRESS COMPLETE PARTIAL DERIVATIVES
C  JQ      NUMBER OF PARTIAL DERIVATIVES PER REFLECTION (0,1,2 OR 4)
C  JR      ADDRESS PARTIAL DERIVATIVES BEFORE THEY ARE ADDED TOGETHER
C  JS      WORK VARIABLE
C  JT      WORK VARIABLES USED DURING ACCUMULATION OF PARTIAL DERIVATIVE
C  JU
C  JV
C  JW
C  JX      LOOP VARIABLE FOR EQUIVALENT POSITIONS
C  JY      LOOP VARIABLE FOR ATOMS
C  JZ
C
C  NA      SET TO -1 FOR NO EXTINCTION CORRECTION TO /FC/, ELSE 0
C  NB      SET TO -1 FOR NO TWINNED DATA, ELSE TO 0 OR 1.
C          (0 MEANS PUT /FOT/ ETC. IN /FO/, WHILE 1 OR GREATER
C           MEANS PUT THE /FO/ AND /FC/ ETC. COMPUTED FOR THE
C           ELEMENT FOR WHICH THE INDICES ARE GIVEN).
C  NC      IF GREATER THAN -1, THEN THE GIVEN PARTIAL CONTRIBUTIONS
C          ARE TO BE USED, ELSE NOT.
C  ND      IF SET TO -1, THEN NO NEW PARTIAL CONTRIBUTIONS ARE
C          OUTPUT. IF GREATER THAN -1, THE NEW /FC/ ETC. ARE STORED
C          AS THE PARTIAL CONTRIBUTIONS.
C  NE      IF GREATER THAN -1, THEN THE LAYER SCALES ARE APPLIED TO /FO/
C          ELSE NOT.
C  NF      IF GREATER THAN -1, THE CONTRIBUTORS TO EACH TWINNED REFLECTI
C          ARE PRINTED.
C  NG      ADDRESS OF THE WORD THAT HOLDS THE ADDRESS OF THE FIRST
C          BLOCK OF THE REFLECTION HOLDING STACK
C  NH      USED TO PASS THROUGH THE REFLECTION HOLDING STACK
C  NI      SIMILAR TO NH.
C  NJ      THE VALUE OF THE VARIABLE 'ELEMENTS' FOR EACH REFLECTION.
C  NK      CURRENT VALUE OF 'NJ' FOR EACH REFLECTION .
C  NL      THE ELEMENT OF THE CURRENT REFLECTION
C  NM      THE NUMBER OF REFLECTIONS IN THE STACK USED SO FAR
C  NN      SET TO 0 IF NO NEW REFLECTIONS HAVE BEEN INTRODUCED,
C          ELSE THE NUMBER OF NEW REFLECTIONS FOUND
C  NO      DUMP OF 'JO'
C  NP      DUMP OF 'JP'
C  NQ      COUNTER WHEN THE TWIN COMPONENTS ARE BEING COMBINED
C  NR      NUMBER OF WORDS PER SYMMETRY RELATED REFLECTION IN THE
C          REFLECTION HOLDING STACK.
C          THE FORMAT OF THE SYMMETRY RELATED REFLECTION ENTRIES IS :
C
C          0  H TRANSFORMED
C          1  K TRANSFORMED
C          2  L TRANSFORMED
C          3  THE PHASE SHIFT FOR THIS GROUP OF INDICES
C
C  NT      THE NUMBER OF REFLECTIONS THAT HAVE BEEN USED
C  NU      -1 FOR XRAYS, AND 0 FOR NEUTRONS  -  ONLY USED FOR EXTINCTION
C  NV      -1 FOR REFINEMENT ON /FO/, ELSE REFINEMENT ON /FO/ **2
C  NW      -1 FOR NO BATCH SCALE APPLICATION, ELSE 0.
C
C--THE FORMAT OF THE REFLECTION HOLDING STACK WHICH STARTS AT
C      'ISTORE(NG)' IS :
C
C   0  LINK TO NEXT REFLECTION OR -1000000
C   1  ADDRESS OF THE FIRST WORD OF THE DERIVATIVES W.R.T. /FC/
C   2  ADDRESS OF THE LAST WORD OF THE DERIVATIVES W.R.T. /FC/
C   3  H FOR THE CURRENT REFLECTION
C   4  K FOR THE CURRENT REFLECTION
C   5  L FOR THE CURRENT REFLECTION (ALL IN FLOATING POINT).
C   6  /FC/ FOR THE CURRENT REFLECTION
C   7  PHASE FOR THE CURRENT REFLECTION
C   8  ELEMENT NUMBER WHICH THIS REFLECTION CURRENTLY REPRESENTS.
C   9  ADDRESS OF THE FIRST WORD OF THE FIRST GROUP OF
C      EQUIVALENT INDICES FOR  THIS BLOCK. (THE REFLECTIONS ARE
C      ARE EQUIVALENT TO THOSE INDICES GIVEN IN WORDS 3 TO 5).
C  10  ADDRESS OF THE LAST GROUP OF EQUIVALENT INDICES FOR THIS
C      REFLECTION BLOCK.
C      (EACH EQUIVALENT SET OF INDICES IS 'NR' WORDS LONG).
C  11  PHASE SHIFT NECESSARY FOR THE REFLECTION CURRENTLY USING THIS BLO
C  12  1.0 IF FRIEDEL'S LAW HAS NOT BEEN USED FOR THE CURRENT REFLECTION
C  13  REAL PART OF A FOR THE ORIGINAL REFLECTION
C  14  IMAGINARY PART OF A FOR THE ORIGINAL REFLECTION
C  15  REAL PART OF B FOR THE ORIGINAL REFLECTION
C  16  IMAGINARY PART OF B FOR THE ORIGINAL REFLECTION
C  17  NOT USED
C  18  ADDRESS OF THE FIRST WORD OF THE DERIVATIVES W.R.T. A, B ETC.
C  19  ADDRESS OF THE LAST WORD OF THE DERIVATIVES W.R.T. TO A, B ETC.
C
C--THE DERIVATIVES FOLLOW THIS INFORMATION.
C
C--NORMALLY, WHEN EACH REFLECTION IS READ FROM THE DISC,
C  IT IS CHECKED AGAINST THOSE ALREADY IN THE STACK TO SEE IF ITS
C  A AND B PARTS TOGETHER WITH THEIR DERIVATIVES ARE PRESENT.
C  IF THEY ARE NOT PRESENT, THEN THESE VALUES ARE CALCULATED
C  AND THE INFORMATION SET UP IN THE BLOCK AT THE TOP OF THE STACK.
C  THIS CORRESPONDS TO THE ORIGINAL VALUES IN WORDS 13-16 AND IN THE
C  DERIVATIVES STORED FOR THE A AND B PARTS.
C  ONCE THE VALUES REQUIRED FOR THE CURRENT REFLECTION ARE PRESENT,
C  /FC/ AND ITS DERIVATIVES ARE CALCULATED.
C  (AT THIS STAGE, THE CURRENT REFLECTION MAY CORRESPOND TO THE ORIGINAL
C   REFLECTION OR MAY BE ONE OF ITS EQUIVALENTS FROM THE STACK).
C  THE DERIVATIVES ARE THEN ADDED TO THE NORMAL EQUATIONS, AFTER
C  MODIFICATION FOR EXTINCTION AND REFINEMENT AGAINST /FO/ **2 IF
C  NECESSARY.
C
C--DURING THE PROCESSING OF ONE NOMINAL REFLECTION FOR A TWIN, THE STACK
C  IS SEARCHED FOR EACH ELEMENT IN TURN. IF THE ELEMENT HAS
C  ALREADY BEEN CALCULATED, THE BLOCK IS MOVED TO THE TOP OF THE STACK
C  AND CONTROL PASSES TO THE NEXT COMPONENT. IF THE ELEMENT OR
C  COMPONENT IS NOT IN THE STACK, THE LAST BLOCK IS SWITCHED TO
C  THE TOP OF THE STACK, AND THEN ITS A AND B PARTS WITH THEIR DERIVATIV
C  COMPUTED. AT THE END, THE ELEMENT FOR WHICH THE INDICES ARE GIVEN
C  IS LEFT AT THE TOP OF THE STACK AS THIS IS ALWAYS THE LAST
C  ELEMENT PROCESSED.
C  WHEN THE A AND B PARTS HAVE BEEN  FOUND FOR ALL THE ELEMENTS, /FC/
C  AND ITS DERIVATIVES ARE CALCULATED FOR EACH ELEMENT.
C  FOLLOWING THIS, /FCT/ AND ITS DERIVATIVES ARE CALCULATED, AND THEN AD
C  TO THE NORMAL EQUATIONS.
C
C      PARTIAL DERIVATIVE STACK
C                  FLACK SYMBOL
C      0   F.COS(HX)      A      AC
C      1   F.SIN(HX)      B      BC
C      2  -F".SIN(HX)    -D      ACI
C      3   F".COS(HX)     C      BCI
C
C      FC = (A-D) + I.(B+C)
C
C
C--THE FORMAT OF THE LIST 6 BUFFER AT 'M6' IS :
C
C   0  H
C   1  K
C   2  L (ALL IN FLOATING POINT).
C   3  /FO/
C   4  WEIGHT  -  REALLY THE SQUARE ROOT OF THE WEIGHT
C   5  /FC/
C   6  PHASE
C   7  PARTIAL CONTRIBUTION FOR A.
C   8  PARTIAL CONTRIBUTION FOR B.
C   9  T-BAR  -  EXTINCTION TERM FOR THIS REFLECTION.
C  10  /FOT/  -  TOTAL /FO/ FOR A TWINNED STRUCTURE
C  11  THE ELEMENTS OF A TWINNED STRUCTURE.
C
C--USEAGE OF GENERAL VARIABLES
C
C  TC     COEFFICIENT FOR THE ISO-TEMPERATURE FACTORS
C  SST    SIN(THETA)/LAMBDA SQUARED
C  ST     SIN(THETA)/LAMBDA
C  FOCC   FORMFACTOR * SITE OCC * CHEMICAL OCC * DIFABS CORECTION
C  T      TEMPERATURE FACTOR
C  TFOCC  T*FOCC
C  AP     A PART FOR EACH SYMMETRY POSITION FOR EACH ATOM
C  BP     B PART FOR EACH SYMMETRY POSITION FOR EACH ATOM
C  BT     TOTAL B PART FOR EACH ATOM
C  AT     TOTAL A PART FOR EACH ATOM
C  AC     TOTAL REAL A PART FOR THE REFLECTION
C  BC     TOTAL REAL B PART FOR THE REFLECTION
C  ACI    TOTAL IMAGINARY A PART FOR THE REFLECTION
C  BCI    TOTAL IMAGINARY B PART FOR THE REFLECTION
C  ACT    TOTAL A PART FOR THE RELFECTION
C  BCT    TOTAL B PART FOR THE REFLECTION
C  ACD    PARTIAL DERIVATIVE WITH RESPECT TO POLARITY PARAMETER
C  BCD    PARTIAL DERIVATIVE WRTO POLARITY PARAMETER
C  ACF    TOTAL PARTIAL DERIV WRTO POLARITY
C  ACN    TOTAL A PART FOR INVERSE STRUCTURE - USED IN ENANTIOPOLE REFIN
C  BCN    TOTAL B PART FOR INVERSE STRUCTURE - USED IN ENANTIOPOLE REFIN
C  ACE    PARTIAL DERIVATIVE FOR ENANTIOPOLE
C  ENANT  ENANTIOPOLE PARAMETER
C  APD    PARTIAL DERIVATIVES FOR  EACH ATOM WITH RESPECT TO A
C  BPD    PARTIAL DERIVATIVES FOR  EACH ATOM WITH RESPECT TO B
C  FO     SCALED FO
C  FC     FC ON ABSOLUTE SCALE
C  P      PHASE ANGLE IN RADIANS
C  W      SQUARE ROOT OF THE WEIGHT FOR THIS RELFECTION
C  DF     DIFFERENCE BETWEEN FO AND FC
C  WDF    WEIGHTED DIFFERENCE BETWEEN FO AND FC
C  FOT    SUM OF FO
C  FCT    SUM OF FC
C  DFT    SUM OF MOD(DF)
C  AMINF  MINIMIZATION FUNCTION - SUM WEIGHTED DIFFERENCE SQUARED
C  WDFT   MINIMISATION FUNCTION BASED ONLY ON /FO/.
C  RW     HAMILTON WEIGHTED R VALUE
C  R      NORMAL WEIGHTED R VALUE
C  COSP   COSINE OF THE PHASE ANGLE
C  SINP   SINE OF THE PHASE ANGLE
C  EXT    EXTINCTION PARAMETER (R*)  -  SEE LARSON IN C.C. 1970.
C  LAYER  THE INDEX OF THE CURRENT LAYER AS REQUIRED BY THE LAYER SCALES
C  IBATCH  THE BATCH OF THE CURRENT REFLECTION MINUS ONE.
C  FCEXT  FC CORRECTED FOR EXTINCTION EFFECTS.
C  FCEXS  FCEXT CORRECTED FOR THE SCALE FACTOR
C  EXT1   (1 + 2*(R*)* /FC/ **2*DELTA)
C  EXT2   (1 + (R*)* /FC/ **2*DELTA)
C  EXT3   EXT1/EXT2
C  WAVE   THE WAVELENGTH OF THE RADIATION USED TO COLLECT THE DATA
C  THETA1 THE MONOCHROMATOR BRAGG ANGLE
C  THETA2 THE ANGLE BETWEEN THE MONOCHROMATOR AND THE DIFFRACTING PLANES
C  POL1   FIRST PART OF THE POLARISATION CORRECTION
C  POL2   THE SECOND PART OF THE POLARISATION CORRECTION
C  DEL    THE FIXED PART OF DELTA
C  DELTA  THE EXTINCTION MULTILPLIER  -  SEE LARSON.
C
C  PH, PK AND PL ARE A DUMP OF THE NOMINAL INDICES FOR A TWIN.
C
C  SH, SK AND SL ARE THE INDICES OF A TWINNED REFLECTION IN THE
C        STANDARD SETTING.
C
C--THE VARIOUS SCALE FACTORS USED ARE :
C
C  SCALEO  THE OVERALL SCALE FACTOR FROM LIST 5.
C          'SCALEO' IS ASSUMED NOT TO BE ZERO.
C  SCALEL  THE LAYER SCALE FACTOR FOR THE CURRENT LAYER  -  THIS
C          SCALE MAY BE ZERO IF REQUIRED.
C  SCALEB  THE BATCH SCALE FACTOR FOR THE CURRENT REFLECTION  -  THIS
C          SCALE MAY BE ZERO IF REQUIRED.
C  SCALES  THE SCALE FACTOR TO BE USED WHEN STORING /FC/.
C          THIS EQUALS SCALEL*SCALEB, SINCE 'SCALEO' IS NOT APPLIED TO /
C  SCALEG  THE COMBINED /FC/ SCALE FACTOR (=SCALEO*SCALEL*SCALEB).
C          'SCALEG' WILL BE ZERO IF 'SCALEL' OR 'SCALEB' IS ZERO.
C  SCALEK  THE OVERALL /FO/ SCALE FACTOR (=1.0/SCALEG, UNLESS
C          'SCALEG' IS ZERO, WHEN 'SCALEK' IS SET TO 1.0).
C  SCALEW  SCALEG*W
C
C--IF 'SCALEL' IS ZERO, ITS DERIVATIVE IS CALCULATED CORRECTLY,
C  BUT ALL OTHER DERIVATIVES FOR THAT REFLECTION WILL BE ZERO.
C
C
C--ALL DERIVATIVES ARE INTIALLY COMPUTED ON THE SCALE OF /FC/, AND THEN
C  ON THE CORRECT SCALE (THAT OF /FO/) WHEN THE A AND B PARTS ARE ADDED
C  TOGETHER AND THE WEIGHTS APPLIED.
C
C--THE DERIVATIVES FOR THE OVERALL SCALE FACTORS ARE COMPUTED SEPARATELY
C  OTHER OVERALL PARAMETERS.
C
C----- PARTIAL DERIVATIVE RELATIONSHIPS
C
C      FTSQ  = (1-X)*FP**2 + X*FN**2
C      where FPSQ is for the given index, and FNSQ for its Friedel inver
C
C      dFTSQ = 2*FP*(1-X)*dFP + 2*FN*X*dFN
C
C      dFT   = (FP/FT)*(1-X)*dFP   +    (FN/FT)*dFN
C
C            COSA := (1-X)*FP/FT,       SINA := X*FN/FT
C
C      FPSQ  = Q**2 + S**2,             FNSQ = QN**2 + SN**2
C
C      dFP   = (Q/FP)*dQ + (S/FP)*dS,   dFN   = (QN/FN)*dQN + (SN/FN)*dS
C
C           COSP := Q/FP, SINP := S/FP, COSPN := QN/FN, SINPN := SN/FN
C
C            Q = A-D, S = B+C,          QN = A+D, SN = -B+C
C
C            AC := A, ACI := -D, BC := B, BCI = C
C
C            ACT := Q, BCT := S,        ACN := QN, BCN := SN
C
C      dQ/dp = dA/dp - dD/dp,           dQN/dp =  dA/dp + dD/dp
C      dS/dp = dB/dp + dC/dp,           dSN/dp = -dB/dp + dC/dp
C
C
C--
\TYPE11
\ISTORE
C
\STORE
\XSTR11
C
C
      COMMON /XSFWK/SCALE,R,RW,FOT,FCT,DFT,WDFT,AMINF,SFO,SFC,AP,BP,AT,
     2 BT,AC,BC,ACI,BCI,ACT,BCT,FO,FC,P,W,DF,WDF,TC,T,FOCC,TFOCC,SST,
     3 ST,A,C,S,COSP,SINP,LAYER,IBATCH,EXT,EXT1,EXT2,EXT3,FCEXT,FCEXS,
     4 PH,PK,PL,SH,SK,SL,WAVE,THETA1,THETA2,POL1,POL2,DEL,DELTA,D,B,
     5 ACONV,SCALEO,SCALEL,SCALEB,SCALES,SCALEK,SCALEG,SCALEW,PSHIFT,
     6 FRIED
\XWORKA
\XCONST
\XPDS
\XUNITS
\XSSVAL
\XLST01
\XLST02
\XLST03
\XLST05
\XLST06
\XLST11
\XLST12
\XLST25
\XERVAL
\XIOBUF
C
\QSTORE
\QSTR11
C
C
      EQUIVALENCE (JU,UJ),(JV,VJ),(JW,WJ),(JX,XJ)
C
C-C-C-AGREEMENT OF CONSTANTS AND VARIABLES
C-C-C-...FOR FLAG TO DECIDE BETWEEN KIND OF ATOM
      REAL FLAG
C-C-C-...FOR STRUCTURFACTOR-CALCULATION
      DOUBLE PRECISION SLRFAC
C-C-C-...FOR DERIVATIVES
      DOUBLE PRECISION DSIZE
      DOUBLE PRECISION DDECLINA
      DOUBLE PRECISION DAZIMUTH
 
C
C
      DATA S0/1.570795134/
      DATA S1/-.645925832/
      DATA S2/.079500304/
      DATA S3/-.004370784/
      DATA C0/.999993249/
      DATA C1/-1.233483666/
      DATA C2/.252578000/
      DATA C3/-.019094240/
C
C----- A BUFFER FOR ONE REFELCTION AND ITS R FACTOR
      LTEMPR = NFL
      NTEMPR = 7
      NFL = KCHNFL(NTEMPR)
C----- INITIALISE THE SORT BUFFER
      JSORT = -5
      MDSORT = NTEMPR
      NSORT = 30
      CALL SRTDWN(LSORT,MSORT,MDSORT,NSORT, JSORT, LTEMPR, XVALUR,
     1   0, DEF)
      JSORT = 5
C----- A BUFFER FOR ONE ENANTIOMER SENSITIVE REFLECTION
      LTEMPE = NFL
      NTEMPE = 7
      NFL = KCHNFL(NTEMPE)
C----- INITIALISE THE ENANTIOMER BUFFER
      JENAN = -6
      MDENAN = NTEMPE
      NENAN = 30
      CALL SRTDWN(LENAN,MENAN,MDENAN,NENAN, JENAN, LTEMPE, XVALUE,
     1   0, DEF2)
      JENAN = 6
C----- SET PRINT COUNTER
      IENPRT = -1
C----- SET BAD R FACTOR COUNTER
      IBADR = -1
C--INITIALISE THE TIMING FUNCTION
      ACONV=1./TWOPI
      JD=-IC
      D=180.0/PI
      JC=0
C--CHECK IF THIS STRUCTURE IS CENTRO
      IF(JD)1000,1100,1100
C--CHECK IF WE ARE DOING REFINEMENT
1000  CONTINUE
      IF(JB)1050,1100,1100
C--CENTRO WITH NO REFINEMENT  -  ONLY COS TERMS NEEDED
1050  CONTINUE
      JC=-1
C--CLEAR THE VARIABLES FOR HOLDING THE OVERALL TOTALS
1100  CONTINUE
      DD=1.0/TWOPI
C----- GET THE OLD R FACTOR AND SET PRINT RATIO
      R = STORE(L6P+1) * .01 *3.
      RW=0.0
      FOABS = 0.0
      FOT=0.0
      FCT=0.0
      DFT=0.0
      WDFT=0.0
      AMINF=0.
      SFO=0.0
      SFC=0.0
      NT=0
      ACE=0.
      ACF = 0.
C----- OVERALL SCALE
      SCALEO=STORE(L5O)
C----- ENANTIOPOLE PARAMETER
      ENANT = STORE(L5O+4)
      CENANT  =  (1.- ENANT)
C----- POLARITY PARAMETER
      ANOM = STORE(L5O+3)
C--SET UP THE EXTINCTION VARIABLE
      EXT=0.
      EXT1=1.0
      EXT2=1.0
      EXT3=1.0
      DELTA=0.
C--CHECK IF THE EXTINCTION PARAMETER IN LIST 5 SHOULD BE USED
      IF(NA)1250,1150,1150
1150  CONTINUE
      EXT=STORE(L5O+5)
      POL1=1.
      POL2=0.
      DEL=WAVE*WAVE/(STORE(L1P1+6)*STORE(L1P1+6))
C--CHECK IF WE ARE USING NEUTRONS OR XRAYS
      IF(NU)1200,1250,1250
C--WE ARE USING XRAYS
1200  CONTINUE
      DEL=DEL*WAVE*0.0794
C--SET UP THE POLARISATION CONSTANTS
      THETA2=THETA2/D
      A=COS(THETA2)
      C=SIN(THETA2)
      S=COS(THETA1/D)
      A=A*A
      C=C*C
      S=S*S
      POL1=A+C*S
1250  CONTINUE
      POL2=C+A*S
C--CHECK IF WE ARE DOING REFINEMENT IN THIS CALCULATION
      IF(JB)1650,1300,1300
C--REFINEMENT  -  SET UP CONSTANTS FOR PARTIAL DERIVATIVE ACCUMULATION
1300  CONTINUE
      IF(JD)1350,1400,1400
C--CENTRO, CHECK IF ANOMALOUS DISPERSION IS PRESENT
1350  CONTINUE
      IF(JE)1450,1500,1500
C--NON-CENTRO, CHECK IF ANOMALOUS DISPERSION IS PRESENT
1400  CONTINUE
      IF(JE)1550,1600,1600
C--CENTRO WITH NO ANOMALOUS DISPERSION
1450  CONTINUE
C**NO ASSIGNED GOTO INTO DO-LOOP. MARKUS NEUBURGER
C**   ASSIGN 9750 TO IN1
C**   ASSIGN 10150 TO IN2
C**   ASSIGN 11450 TO IN3
      JUMP = 1
      GOTO 1650
C--CENTRO WITH ANOMALOUS DISPERSION
1500  CONTINUE
C**   ASSIGN 9850 TO IN1
C**   ASSIGN 10250 TO IN2
C**   ASSIGN 11600 TO IN3
      JUMP = 2
      GOTO 1650
C--NON-CENTRO WITHOUT ANOMALOUS DISPERSION
1550  CONTINUE
C**   ASSIGN 9950 TO IN1
C**   ASSIGN 10350 TO IN2
C**   ASSIGN 11550 TO IN3
      JUMP = 3
      GOTO 1650
C--NON-CENTRO WITH ANOMALOUS DISPERSION
1600  CONTINUE
C**   ASSIGN 10050 TO IN1
C**   ASSIGN 10450 TO IN2
C**   ASSIGN 11700 TO IN3
      JUMP = 4
C**END OF EDIT. MARKUS NEUBURGER
C--CHECK IF A PRINT IS REQUIRED
1650  CONTINUE
      IF(JG)1800,1700,1700
1700  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1750)
      ENDIF
1750  FORMAT(/7X,'H',5X,'K',5X,'L',6X,'/FO/',5X,'/FC/',4X,'Phase',5X,
     2 'Delta    SQRT(W)*Delta',2X,'/FC''/',2X,'/FC''''/',2X,'D/F/ **2',
     3 1X,'T.B.R.(%)',2X,'SINTH/L/')
      JG=58
1800  CONTINUE
      NO=JO
      NP=JP
C
C--START OF THE LOOP OVER REFLECTIONS
1830  CONTINUE
      IF(KFNR(1))5850,1850,1850
C
C--UPDATE THE REFLECTION COUNTER FLAG
1850  CONTINUE
      NT=NT+1
C--SET THE LAYER SCALING CONSTANTS INITIALLY
      LAYER=-1
      SCALEL=1.0
C--CHECK IF THIS SCALE IS TO BE USED
      IF(NE)1950,1900,1900
C--FIND THE LAYER NUMBER AND SET ITS VALUE
1900  CONTINUE
      LAYER=KLAYER(I)-1
      IF ( IERFLG .LT. 0 ) GO TO 19900
      M5LS=L5LS+LAYER
      SCALEL=STORE(M5LS)
C--SET THE INITIAL VALUES FOR THE BATCH SCALE FACTOR
1950  CONTINUE
      IBATCH=-1
      SCALEB=1.
C--CHECK IF THE BATCH SCALE FACTOR SHOULD BE USED
      IF(NW)2050,2000,2000
C--FIND THE BATCH NUMBER AND SET THE SCALE
2000  CONTINUE
      IBATCH=KBATCH(I)-1
      IF ( IERFLG .LT. 0 ) GO TO 19900
      M5BS=L5BS+IBATCH
      SCALEB=STORE(M5BS)
C--SET UP THE SCALE FACTORS CORRECTLY
2050  CONTINUE
      SCALEK=1.
      SCALES=SCALEL*SCALEB
      SCALEG=SCALEO*SCALES
C--CHECK IF THE SCALE IS ZERO
      IF(SCALEG-0.000001)2150,2150,2100
C--THE /FC/ SCALE FACTOR IS NOT ZERO  -  COMPUTE THE /FO/ SCALE FACTOR
2100  CONTINUE
      SCALEK=1./SCALEG
C--CLEAR THE PARTIAL CONTRIBUTION FLAGS FOR THIS REFLECTION
2150  CONTINUE
      ACT=0.0
      BCT=0.0
      ACN = 0.
      BCN = 0.
C--CHECK IF THE PARTIAL CONTRIBUTIONS ARE TO BE ADDED IN
      IF(NC)2250,2200,2200
2200  CONTINUE
      ACT=STORE(M6+7)
      BCT=STORE(M6+8)
      ACN = ACT
      BCN = BCT
C--SET UP /FO/ ETC. FOR THIS REFLECTION
2250  CONTINUE
      FO=STORE(M6+3)
      W=STORE(M6+4)
      SCALEW=SCALEG*W
C--INITIALISE THE HOLDING STACK DUMP ENTRIES
      NM=0
      NN=0
      JO=NO
      JP=NP
C--CHECK IF THIS IS TWINNED CALCULATION
      IF(NB)2300,2400,2400
C
C--CALCULATION WITHOUT TWINNING  -  BRANCH TO THE S.F. ROUTINES
2300  CONTINUE
      NL=0
      ASSIGN 2350 TO ICONT
      GOTO 6300
C^
C--MAIN S.F.L.S. LOOP  -  CALCULATES A AND B AND THEIR DERIVATIVES
C
C  ICONT  SET TO THE RETURN ADDRESS
C  NL     ELEMENT NUMBER OF THIS REFLECTION (MAY BE SET TO 0)
C
C--CLEAR OUT A FEW CONSTANTS
6300  CONTINUE
      ISTACK=-1
      AC=0.
      BC=0.
      ACI=0.
      BCI=0.
      ACD=0.
      BCD=0.
C--SEARCH FOR THIS REFLECTION IN THE REFLECTION HOLDING STACK
      NH=NG
      JX=NM
C--FETCH THE INFORMATION FOR THE NEXT REFLECTION IN THE STACK
6350  CONTINUE
      NI=ISTORE(NH)
C--LOOP OVER THE EQUIVALENT POSITIONS STORED
      JU=ISTORE(NI+9)
      JV=ISTORE(NI+10)
      DO 6450 JW=JU,JV,NR
      PSHIFT=STORE(JW+3)
      FRIED=1.0
C--CHECK THE GIVEN INDICES
      IF(ABS(STORE(M6)-STORE(JW))+ABS(STORE(M6+1)-STORE(JW+1))
     2 +ABS(STORE(M6+2)-STORE(JW+2))-0.5)6600,6400,6400
C--USE FRIEDEL'S LAW
6400  CONTINUE
      PSHIFT=-PSHIFT
      FRIED=-1.0
      IF(ABS(STORE(M6)+STORE(JW))+ABS(STORE(M6+1)+STORE(JW+1))
     2 +ABS(STORE(M6+2)+STORE(JW+2))-0.5)6600,6450,6450
6450  CONTINUE
C--NOT THIS EQUIVALENT  -  CHECK IF THERE ARE MORE IN THE STACK
      IF(ISTORE(NI))6550,6550,6500
C--SET UP THE FLAGS FOR THE NEXT REFLECTION IN THE STACK
6500  CONTINUE
      JX=JX-1
      NH=NI
      GOTO 6350
C--THIS IS THE END OF THE STACK  -  WE MUST DO A CALCULATION HERE
6550  CONTINUE
      ISTACK=0
      NN=NN+1
      PSHIFT=0.
      FRIED=1.0
      GOTO 7050
C--REFLECTION FOUND IN THE STACK  -  CHECK IF WE HAVE USED IT BEFORE
6600  CONTINUE
      JY=NI
      IF(JX)7050,7050,6650
C--WE NEED THIS REFLECTION TWICE  -  FIND THE END BLOCK
6650  CONTINUE
      IF(ISTORE(NI))6750,6750,6700
6700  CONTINUE
      NH=NI
      NI=ISTORE(NI)
      GOTO 6650
C--DUPLICATE THE ENTRY  -  TRANSFER A, B ETC.
6750  CONTINUE
      JU=NI
      JV=JY
      DO 6800 JW=1,4
      STORE(JU+3)=STORE(JV+3)
      STORE(JU+13)=STORE(JV+13)
      JU=JU+1
      JV=JV+1
6800  CONTINUE
C--CHECK IF WE ARE DOING REFINEMENT
      IF(JB)6950,6850,6850
C--TRANSFER THE P.D.'S
6850  CONTINUE
      JX=ISTORE(NI+18)
      JU=ISTORE(JY+18)
      JV=ISTORE(JY+19)
      N = JV - JU
&CYBCVD$L NODEPCHK
      DO 6900 J = 0, N
      STORE(JX+J) = STORE(JU+J)
6900  CONTINUE
C--TRANSFER THE EQUIVALENT INDICES
6950  CONTINUE
      JX=ISTORE(NI+9)
      JU=ISTORE(JY+9)
      JV=ISTORE(JY+10)
      DO 7000 JW=JU,JV,NR
      STORE(JX)=STORE(JW)
      STORE(JX+1)=STORE(JW+1)
      STORE(JX+2)=STORE(JW+2)
      STORE(JX+3)=STORE(JW+3)
      JX=JX+NR
7000  CONTINUE
C--SWITCH THE CURRENT BLOCK TO THE TOP OF THE STACK
7050  CONTINUE
      ISTORE(NH)=ISTORE(NI)
      ISTORE(NI)=ISTORE(NG)
      ISTORE(NG)=NI
C--SET UP THE CURRENT SET OF INDICES
      STORE(NI+3)=STORE(M6)
      STORE(NI+4)=STORE(M6+1)
      STORE(NI+5)=STORE(M6+2)
      ISTORE(NI+8)=NL
      STORE(NI+11)=PSHIFT
      STORE(NI+12)=FRIED
      NM=NM+1
C--CHECK IF WE MUST CALCULATE THIS REFLECTION
      IF(ISTACK)11000,7100,7100
C
C--CALCULATE THE INFORMATION FOR THE SYMMETRY POSITIONS
7100  CONTINUE
      M2=L2
      M2T=L2T
      DO 7250 JZ=1,N2
      STORE(M2T)=STORE(M6)*STORE(M2)+STORE(M6+1)*STORE(M2+3)
     2 +STORE(M6+2)*STORE(M2+6)
      STORE(M2T+1)=STORE(M6)*STORE(M2+1)+STORE(M6+1)*STORE(M2+4)
     2 +STORE(M6+2)*STORE(M2+7)
      STORE(M2T+2)=STORE(M6)*STORE(M2+2)+STORE(M6+1)*STORE(M2+5)
     2 +STORE(M6+2)*STORE(M2+8)
C--CALCULATE THE H.T TERMS
      STORE(M2T+3)=(STORE(M6)*STORE(M2+9)+STORE(M6+1)*STORE(M2+10)
     2 +STORE(M6+2)*STORE(M2+11))*TWOPI
C--CHECK IF THE ANSIO CONTRIBUTIONS ARE REQUIRED
      IF(JA-JZ)7200,7150,7150
7150  CONTINUE
      STORE(M2T+4)=STORE(M2T)*STORE(M2T)
      STORE(M2T+5)=STORE(M2T+1)*STORE(M2T+1)
      STORE(M2T+6)=STORE(M2T+2)*STORE(M2T+2)
      STORE(M2T+7)=STORE(M2T+1)*STORE(M2T+2)
      STORE(M2T+8)=STORE(M2T)*STORE(M2T+2)
      STORE(M2T+9)=STORE(M2T)*STORE(M2T+1)
7200  CONTINUE
      STORE(M2T)=STORE(M2T)*TWOPI
      STORE(M2T+1)=STORE(M2T+1)*TWOPI
      STORE(M2T+2)=STORE(M2T+2)*TWOPI
      M2=M2+MD2
      M2T=M2T+MD2T
7250  CONTINUE
C--CALCULATE SIN(THETA)/LAMBDA SQUARED
      SST=STORE(L1S)*STORE(L2T+4)+STORE(L1S+1)*STORE(L2T+5)
     2 +STORE(L1S+2)*STORE(L2T+6)+STORE(L1S+3)*STORE(L2T+7)
     3 +STORE(L1S+4)*STORE(L2T+8)+STORE(L1S+5)*STORE(L2T+9)
      ST=SQRT(SST)
C--CALCULATE THE TEMPERATURE FACTOR COEFFICIENT
      TC=-SST*TWOPIS*4.
C--CHECK IF THE ANISO TERMS ARE REQUIRED
      IF(JJ)7400,7300,7300
7300  CONTINUE
      M2T=L2T
      DO 7350 JZ=1,N2
      STORE(M2T+4)=STORE(M2T+4)*STORE(L1A)
      STORE(M2T+5)=STORE(M2T+5)*STORE(L1A+1)
      STORE(M2T+6)=STORE(M2T+6)*STORE(L1A+2)
      STORE(M2T+7)=STORE(M2T+7)*STORE(L1A+3)
      STORE(M2T+8)=STORE(M2T+8)*STORE(L1A+4)
      STORE(M2T+9)=STORE(M2T+9)*STORE(L1A+5)
      M2T=M2T+MD2T
7350  CONTINUE
7400  CONTINUE
C
C--CALCULATE THE FORM FACTORS
      CALL XSCATT(ST)
C--COMPUTE THE RATIO OF IMAGINARY TO REAL FORM FACTORS
      M3TR=L3TR
      M3TI=L3TI
      DO 7600 JZ=1,N3
      STORE(M3TR)=STORE(M3TR)*G2
      STORE(M3TI)=STORE(M3TI)*G2
C--CHECK IF THE REAL PART IS ZERO
      IF(STORE(M3TR)-ZERO)7450,7450,7500
C--REAL PART IS ZERO  -  SO IS THE IMAGINARY NOW
7450  CONTINUE
      STORE(M3TI)=0.
      GOTO 7550
C--REAL PART IS OKAY
7500  CONTINUE
      STORE(M3TI)=STORE(M3TI)/STORE(M3TR)
C--UPDATE THE POINTERS
7550  CONTINUE
      M3TR=M3TR+MD3TR
      M3TI=M3TI+MD3TI
7600  CONTINUE
C--CHECK IF WE ARE DOING REFINEMENT
      IF(JB)7900,7650,7650
C--CLEAR THE FINAL PARTIAL DERIVATIVE AREA TO ZERO
7650  CONTINUE
      DO 7700 JZ=JO,JP
      STORE(JZ)=0.
7700  CONTINUE
C--CLEAR THE TEMPORARY PARTIAL DERIVATIVE AREAS TO ZERO
      JS=JR
      N = N12*JQ
&CYBCVD$L NODEPCHK
      DO 7800 J = 0, N-1
      STORE(JS+J) = 0.0
7800  CONTINUE
C--CLEAR THE DUMMY LOCATIONS
      JS=JN
&CYBCVD$L NODEPCHK
      DO 7850 J= 0, JQ-1
      STORE(JS+J)=0.
7850  CONTINUE
C--SET THE ATOM POINTER IN LIST 12
      M12=L12
C--CHECK IF THERE ARE ANY ATOMS TO PROCESS
7900  CONTINUE
      IF(N5)10700,10700,7950
C
C--START OF THE LOOP BASED ON THE ATOMS
7950  CONTINUE
      M5A=L5
      DO 10650 JY=1,N5
C--CLEAR THE ACCUMULATION VARIABLES
      AT=0.
      BT=0.
      JF=JB
C--CHECK IF REFINEMENT IS BEING DONE
      IF(JB)8100,8000,8000
C--CLEAR PARTIAL DERIVATIVE STACKS
8000  CONTINUE
      CALL XZEROF ( APD(1),11 )
      CALL XZEROF ( BPD(1),11 )
      JF=ISTORE(M12+1)
      L12A=ISTORE(M12+1)
      M12=ISTORE(M12)
C--PICK UP THE FORM FACTORS FOR THIS ATOM
8100  CONTINUE
      M3TR=L3TR+ISTORE(M5A)
      M3TI=L3TI+ISTORE(M5A)
      FOCC = STORE(M3TR) * STORE(M5A+2) * STORE(M5A+13)
C----- MODIFY FOCC FOR OTHER FC CORRECTIONS
C-C-C-PICK UP THE TYPE OF THIS ATOM
      FLAG=STORE(M5A+3)
C--CHECK THE TEMPERAURE TYPE FOR THIS ATOM
C      IF(ISTORE(M5A+1))8150,8200,8200
      IF(NINT(FLAG) .NE. 1) THEN
      GOTO 8200
      ENDIF
C--CALCULATE THE ISO-TEMPERATURE FACTOR COEFFICIENTS FOR THIS ATOM
8150  CONTINUE
C      T=EXP(STORE(M5A+3)*TC)
      T=EXP(STORE(M5A+7)*TC)
      TFOCC=T*FOCC
C
C--LOOP CYCLING OVER THE DIFFERENT EQUIVALENT POSITIONS FOR THIS ATOM
8200  CONTINUE
      M2T=L2T
C-C-C-M2 (ADDR. FOR TRANSF.MAT.) IS RESET TO ADDR. FOR 1ST SYM.OP.
      M2=L2
      DO 9300 JX=1,N2T
C--CALCULATE H'.X+H.T
      A=STORE(M5A+4)*STORE(M2T)+STORE(M5A+5)*STORE(M2T+1)+STORE(M5A+6)
     2 *STORE(M2T+2)+STORE(M2T+3)
C-C-C-STARTING-VALUES FOR ADDITIONAL FACTOR AND DERIVATIVES
      SLRFAC=1.0
      DSIZE=1.0
      DDECLINA=1.0
      DAZIMUTH=1.0
C--CHECK THE TEMPERATURE FACTOR TYPE
C      IF(ISTORE(M5A+1))8300,8250,8250
8240  CONTINUE
      IF (NINT(FLAG) .EQ. 1) THEN
      GOTO 8300
      ELSE IF (NINT(FLAG) .EQ. 2) THEN
      CALL XSPHERE (ST, M5A, SLRFAC, DSIZE)
      GOTO 8260
      ELSE IF (NINT(FLAG) .EQ. 3) THEN
      CALL XLINE (M2, M5A, M6, SLRFAC, DSIZE, DDECLINA, DAZIMUTH)
      GOTO 8260
      ELSE IF (NINT(FLAG) .EQ. 4) THEN
      CALL XRING (M2, ST, M5A, M6, SLRFAC, DSIZE, DDECLINA, DAZIMUTH)
      GOTO 8260
      ENDIF
C--CALCULATE THE ANISO-TEMPERATURE FACTOR
8250  CONTINUE
      T=EXP(STORE(M5A+7)*STORE(M2T+4)+STORE(M5A+8)*STORE(M2T+5)
     2 +STORE(M5A+9)*STORE(M2T+6)+STORE(M5A+10)*STORE(M2T+7)
     3 +STORE(M5A+11)*STORE(M2T+8)+STORE(M5A+12)*STORE(M2T+9))
      TFOCC=T*FOCC
      GOTO 8300
8260  CONTINUE
      T=EXP(STORE(M5A+7)*TC)
      TFOCC=T*FOCC
      TFOCC=TFOCC*SLRFAC
C--CALCULATE THE SIN/COS TERMS
8300  CONTINUE
      A=A*DD
      A=4.*(A-FLOAT(INT(A)))
      IF(A)8400,8350,8450
8350  CONTINUE
      S=0.
      C=1.
      GOTO 8850
8400  CONTINUE
      A=A+4.
8450  CONTINUE
      S=1.
      IF(A-2.)8600,8500,8550
8500  CONTINUE
      S=0.
      C=-1.
      GOTO 8850
8550  CONTINUE
      S=-1.
      A=A-2.
8600  CONTINUE
      C=S
      IF(A-1.)8750,8650,8700
8650  CONTINUE
      C=0.
      GOTO 8850
8700  CONTINUE
      C=-C
      A=2.-A
8750  CONTINUE
      B=A*A
      C=C*(C0+B*(C1+B*(C2+B*C3)))
      IF(JC)8900,8800,8800
8800  CONTINUE
      S=S*A*(S0+B*(S1+B*(S2+B*S3)))
8850  CONTINUE
C--CALCULATE THE B CONTRIBUTION
      BP=S*TFOCC
      BT=BT+BP
C--CALCULATE THE A CONTRIBUTION
8900  CONTINUE
      AP=C*TFOCC
      AT=AT+AP
C--CHECK IF ANY REFINEMENT IS BEING DONE
      IF(JF)9250,8950,8950
C-CALCULATE THE PARTIAL DERIVATIVES W.R.T. A FOR X,Y AND Z
C-C-C-CALCULATE THE PARTIAL DERIVATIVES W.R.T. A FOR OCC,X,Y AND Z
8950  CONTINUE
C      APD(1)=APD(1)+T*C
      APD(1)=APD(1)+T*C*SLRFAC
      APD(3)=APD(3)-STORE(M2T)*BP
      APD(4)=APD(4)-STORE(M2T+1)*BP
      APD(5)=APD(5)-STORE(M2T+2)*BP
C--CHECK THE TEMPERATURE FACTOR TYPE
C      IF(ISTORE(M5A+1))9000,9050,9050
      IF(NINT(FLAG) .NE. 1) THEN
      GOTO 9040
      ENDIF
C--CALCULATE THE PARTIAL DERIVATIVES W.R.T. A FOR U[ISO]
9000  CONTINUE
C      APD(2)=APD(2)+TC*AP
      APD(6)=APD(6)+TC*AP
C--GOTO THE NEXT PART - DEPENDS ON WHETHER THE STRUCTURE IS CENTRO
      IF(JD)9250,9100,9100
C-C-C-CHECK WHETHER WE HAVE SPHERE, LINE OR RING
9040  CONTINUE
      IF (NINT(FLAG) .LE. 1) THEN
      GOTO 9050
      ELSE
      GOTO 9060
      ENDIF
C--CALCULATE THE PARTIAL DERIVATIVES W.R.T. A FOR THE ANISO-TERMS
9050  CONTINUE
      APD(6)=APD(6)+STORE(M2T+4)*AP
      APD(7)=APD(7)+STORE(M2T+5)*AP
      APD(8)=APD(8)+STORE(M2T+6)*AP
      APD(9)=APD(9)+STORE(M2T+7)*AP
      APD(10)=APD(10)+STORE(M2T+8)*AP
      APD(11)=APD(11)+STORE(M2T+9)*AP
      GOTO 9070
9060  CONTINUE
C-C-C-CALC. THE PART. DERIV. W.R.T. A FOR ISO-TERM + SPECIAL FIGURES
      APD(6)=APD(6)+TC*AP
      APD(7)=APD(7)+((DSIZE*AP)/SLRFAC)
      APD(8)=APD(8)+((DDECLINA*AP)/SLRFAC)
      APD(9)=APD(9)+((DAZIMUTH*AP)/SLRFAC)
9070  CONTINUE
C--GOTO NEXT PART - DEPENDS ON WHETHER THE STRUCTURE IS CENTRO
      IF(JD)9250,9100,9100
C--CALCULATE THE PARTIAL DERIVATIVES W.R.T. B FOR X,Y AND Z
C-C-C-CALCULATE THE PARTIAL DERIVATIVES W.R.T. B FOR OCC,X,Y AND Z
9100  CONTINUE
C      BPD(1)=BPD(1)+T*S
      BPD(1)=BPD(1)+T*S*SLRFAC
      BPD(3)=BPD(3)+STORE(M2T)*AP
      BPD(4)=BPD(4)+STORE(M2T+1)*AP
      BPD(5)=BPD(5)+STORE(M2T+2)*AP
C--CHECK THE TEMPERATURE FACTOR TYPE
C      IF(ISTORE(M5A+1))9150,9200,9200
      IF(NINT(FLAG) .NE. 1) THEN
      GOTO 9190
      ENDIF
C--CALCULATE THE PARTIAL DERIVATIVES W.R.T. B FOR U[ISO]
9150  CONTINUE
C      BPD(2)=BPD(2)+TC*BP
      BPD(6)=BPD(6)+TC*BP
      GOTO 9250
C-C-C-CHECK WHETHER WE HAVE SPHERE, LINE OR RING
9190  CONTINUE
      IF (NINT(FLAG) .LE. 1) THEN
      GOTO 9200
      ELSE
      GOTO 9210
      ENDIF
C--CALCULATE THE PARTIAL DERIVATIVES W.R.T. B FOR THE ANISO-TERMS
9200  CONTINUE
      BPD(6)=BPD(6)+STORE(M2T+4)*BP
      BPD(7)=BPD(7)+STORE(M2T+5)*BP
      BPD(8)=BPD(8)+STORE(M2T+6)*BP
      BPD(9)=BPD(9)+STORE(M2T+7)*BP
      BPD(10)=BPD(10)+STORE(M2T+8)*BP
      BPD(11)=BPD(11)+STORE(M2T+9)*BP
      GOTO 9250
C-C-C-CALC. THE PART. DERIV. W.R.T. B FOR ISO-TERM + SPECIAL FIGURES
9210  CONTINUE
      BPD(6)=BPD(6)+TC*BP
      BPD(7)=BPD(7)+((DSIZE*BP)/SLRFAC)
      BPD(8)=BPD(8)+((DDECLINA*BP)/SLRFAC)
      BPD(9)=BPD(9)+((DAZIMUTH*BP)/SLRFAC)
C--UPDATE THE SYMMETRY INFORMATION POINTER
9250  CONTINUE
      M2T=M2T+MD2T
C-C-C-M2 (ADDR. FOR TRANSF.MAT.) IS INCREASED FOR NEXT SYM.OP.
      M2=M2+MD2
9300  CONTINUE
C
C--LOOP ON EQUIVALENT POSITIONS ENDS  -  COMPUTE THE TOTALS FOR THIS ATO
      AC=AC+AT
      BC=BC+BT
C--CHECK IF ANOMALOUS DISPERSION IS BEING CONSIDERED
      IF(JE)9400,9350,9350
C--CALCULATE THE IMAGINARY PARTS
9350  CONTINUE
      AIMAG=ANOM*STORE(M3TI)
      ACI=ACI-BT*AIMAG
      BCI=BCI+AT*AIMAG
C----- ANY REFINEMENT AT ALL?
      IF (JB) 9400,9360,9360
9360  CONTINUE
C----- DERIVATIVES FOR POLARITY PARAMETER
      ACD=ACD-BT*STORE(M3TI)
      BCD=BCD+AT*STORE(M3TI)
C--CHECK IF ANY REFINEMENT IS BEING DONE
9400  CONTINUE
      IF(JF)10600,9450,9450
C--CALCULATE THE PARTIAL DERIVATIVES W.R.T. A AND B FOR OCC
9450  CONTINUE
      APD(1) = STORE(M3TR) * STORE(M5A+13) * APD(1)
      BPD(1) = STORE(M3TR) * STORE(M5A+13) * BPD(1)
C
C--START OF THE LOOPS FOR ADDING THE PARTIAL DERIVATIVES INTO THE
C  TEMPORARY STACKS
9500  CONTINUE
      M12A=ISTORE(L12A+4)
C--SET UP THE CONDITIONS OF THIS ATOM
      MD12A=ISTORE(L12A+1)
      JU=ISTORE(L12A+2)
      JV=ISTORE(L12A+3)
C--CHECK ON WHETHER THE 'WEIGHTS' FOR THIS ATOM DIFFER FROM UNITY
      IF(MD12A-2)9650,9700,9700
C--WEIGHTS ARE UNITY
9650  CONTINUE
C**NO ASSIGNED GOTO INTO DO-LOOP. MARKUS NEUBURGER
C**   GOTOIN1,(9750,9850,9950,10050)
      GOTO (9750,9850,9950,10050) JUMP
C**PROVIDE ERROR EXIT HERE IF NO LABEL MATCHED. MARKUS NEUBURGER
C--WEIGHTS DIFFER FROM UNITY
9700  CONTINUE
C**NO ASSIGNED GOTO INTO DO-LOOP. MARKUS NEUBURGER
C**   GOTOIN2,(10150,10250,10350,10450)
      GOTO (10150,10250,10350,10450) JUMP
C**PROVIDE ERROR EXIT HERE IF NO LABEL MATCHED. MARKUS NEUBURGER
C--UNITY, CENTRO AND NO ANOMALOUS DISPERSION
9750  CONTINUE
      DO 9800 JW=JU,JV,MD12A
      JT=ISTORE(JW)
      STORE(JT)=STORE(JT)+APD(M12A-1)
      M12A=M12A+1
9800  CONTINUE
      GOTO 10550
C--UNITY, CENTRO AND ANOMALOUS DISPERSION
9850  CONTINUE
      DO 9900 JW=JU,JV,MD12A
      JT=ISTORE(JW)
      STORE(JT)=STORE(JT)+APD(M12A-1)
      STORE(JT+1)=STORE(JT+1)+APD(M12A-1)*AIMAG
      M12A=M12A+1
9900  CONTINUE
      GOTO 10550
C--UNITY, NON-CENTRO AND NO ANOMALOUS DISPERSION
9950  CONTINUE
      DO 10000 JW=JU,JV,MD12A
      JT=ISTORE(JW)
      STORE(JT)=STORE(JT)+APD(M12A-1)
      STORE(JT+1)=STORE(JT+1)+BPD(M12A-1)
      M12A=M12A+1
10000 CONTINUE
      GOTO 10550
C--UNITY, NON-CENTRO AND ANOMALOUS DISPERSION
10050 CONTINUE
      DO 10100 JW=JU,JV,MD12A
      JT=ISTORE(JW)
      STORE(JT)=STORE(JT)+APD(M12A-1)
      STORE(JT+3)=STORE(JT+3)+APD(M12A-1)*AIMAG
      STORE(JT+2)=STORE(JT+2)-BPD(M12A-1)*AIMAG
      STORE(JT+1)=STORE(JT+1)+BPD(M12A-1)
      M12A=M12A+1
10100 CONTINUE
      GOTO 10550
C--NON-UNITY, CENTRO AND NO ANOMALOUS DISPERSION
10150 CONTINUE
      DO 10200 JW=JU,JV,MD12A
      JT=ISTORE(JW)
      STORE(JT)=STORE(JT)+APD(M12A-1)*STORE(JW+1)
      M12A=M12A+1
10200 CONTINUE
      GOTO 10550
C--NON-UNITY, CENTRO AND ANOMALOUS DISPERSION
10250 CONTINUE
      DO 10300 JW=JU,JV,MD12A
      A=APD(M12A-1)*STORE(JW+1)
      JT=ISTORE(JW)
      STORE(JT)=STORE(JT)+A
      STORE(JT+1)=STORE(JT+1)+A*AIMAG
      M12A=M12A+1
10300 CONTINUE
      GOTO 10550
C--NON-UNITY, NON-CENTRO AND NO ANOMALOUS DISPERSION
10350 CONTINUE
      DO 10400 JW=JU,JV,MD12A
      JT=ISTORE(JW)
      STORE(JT)=STORE(JT)+APD(M12A-1)*STORE(JW+1)
      STORE(JT+1)=STORE(JT+1)+BPD(M12A-1)*STORE(JW+1)
      M12A=M12A+1
10400 CONTINUE
      GOTO 10550
C--NON-UNITY, NON-CENTRO AND ANOMALOUS DISPERSION
10450 CONTINUE
      DO 10500 JW=JU,JV,MD12A
      JT=ISTORE(JW)
      STORE(JT)=STORE(JT)+APD(M12A-1)*STORE(JW+1)
      A=STORE(JW+1)*AIMAG
      STORE(JT+3)=STORE(JT+3)+APD(M12A-1)*A
      STORE(JT+2)=STORE(JT+2)-BPD(M12A-1)*A
      STORE(JT+1)=STORE(JT+1)+BPD(M12A-1)*STORE(JW+1)
      M12A=M12A+1
10500 CONTINUE
C--END OF PART ACCUMULATION - PASS ONTO THE NEXT IF THERE IS ONE
10550 CONTINUE
      L12A=ISTORE(L12A)
      IF(L12A)10600,10600,9500
C--END OF ATOM CYCLING LOOP
10600 CONTINUE
      M5A=M5A+MD5A
10650 CONTINUE
C
C--END OF REFLECTION HOUSEKEEPING  -  CHECK IF THIS STRUCTURE IS CENTRO
10700 CONTINUE
      IF(JD)10750,10800,10800
C--THIS IS A CENTRO STRUCTURE
10750 CONTINUE
      BC=0.
      ACI=0.
C--STORE THE RESULTS OF THIS CALCULATION IN THE STACK
10800 CONTINUE
      STORE(NI+13)=AC
      STORE(NI+14)=ACI
      STORE(NI+15)=BC
      STORE(NI+16)=BCI
C--STORE THE EQUIVALENT INDICES AND THE PHASE SHIFT
      M2I=L2I
      JU=ISTORE(NI+9)
      JV=ISTORE(NI+10)
      DO 10850 JW=JU,JV,NR
      STORE(JW)=STORE(M6)*STORE(M2I)+STORE(M6+1)*STORE(M2I+3)
     2 +STORE(M6+2)*STORE(M2I+6)
      STORE(JW+1)=STORE(M6)*STORE(M2I+1)+STORE(M6+1)*STORE(M2I+4)
     2 +STORE(M6+2)*STORE(M2I+7)
      STORE(JW+2)=STORE(M6)*STORE(M2I+2)+STORE(M6+1)*STORE(M2I+5)
     2 +STORE(M6+2)*STORE(M2I+8)
      STORE(JW+3)=-(STORE(JW)*STORE(M2I+9)+STORE(JW+1)*STORE(M2I+10)
     2 +STORE(JW+2)*STORE(M2I+11))*TWOPI
      M2I=M2I+MD2I
10850 CONTINUE
C--CHECK IF WE ARE DOING REFINEMENT
      IF(JB)11000,10900,10900
C--TRANSFER THE P.D.'S TO THE STACK
10900 CONTINUE
      JU=ISTORE(NI+18)
      JV=ISTORE(NI+19)
      JS=JR
      DO 10950 JW=JU,JV
      STORE(JW)=STORE(JS)
      JS=JS+1
10950 CONTINUE
C--BRANCH ON THE TYPE OF CALCULATION TO RETURN
11000 CONTINUE
      GOTOICONT,(2750,2350)
C
C--DERIVE THE TOTALS AGAINST /FC/ FROM THOSE W.R.T. A AND B
2350  CONTINUE
      NH=ISTORE(NG)
      ASSIGN 4000 TO ICONT
      GOTO 11050
C^
C
C--CONVERSION OF THE A AND B PARTS INTO /FC/ TERMS
C
C  ICONT  SET TO THE RETURN ADDRESS
C  JO     ADDRESS OF THE AREA FOR THE OUTPUT DERIVATIVES W.R.T. /FC/
C  JP     LAST WORD OF THE ABOVE AREA
C  NH     ADDRESS OF THIS REFLECTION IN THE STACK
C
C--FETCH A AND B ETC. FROM THE STACK
11050 CONTINUE
      AC=STORE(NH+13)
      ACI=STORE(NH+14)
      BC=STORE(NH+15)
      BCI=STORE(NH+16)
      PSHIFT=STORE(NH+11)
      FRIED=STORE(NH+12)
      ACT=AC+ACI*FRIED+ACT
      BCT=BC*FRIED+BCI+BCT
C--CHECK THE MAGNITUDE OF THE A PART
      IF(ABS(ACT)-0.001)11100,11250,11250
C--A IS ZERO, CHECK THE B PART
11100 CONTINUE
      IF(ABS(BCT)-0.001)11150,11300,11300
C--BOTH THE A AND B PARTS ARE ZERO
11150 CONTINUE
      ACT=0.000001
C--SET THE B PART TO ZERO
11200 CONTINUE
      BCT=0.
      GOTO 11350
C--A PART IS NOT ZERO  -  CHECK THE B PART
11250 CONTINUE
      IF(ABS(BCT)-0.001)11200,11350,11350
C--THE A PART IS ZERO, BUT NOT THE  BPART
11300 CONTINUE
      ACT=0.
C--COMPUTE /FC/ AND THE PHASE
11350 CONTINUE
C----- FOR THE GIVEN ENANTIOMER
      FCSQ = ACT*ACT + BCT*BCT
      FP = SQRT(FCSQ)
C------ SAVE THE TOTAL MAGNITUDE
      FC = FP
      P=AMOD(ATAN2(BCT,ACT)+PSHIFT,TWOPI)
      IF (JL .GE. 0) THEN
C----- COMPUTE FRIEDEL PAIR
11360  CONTINUE
      ACN = ACN+AC-ACI*FRIED
      BCN = BCN+BCI-BC*FRIED
      IF (ABS(ACN) - .001) 11365,11365 ,11380
11365 CONTINUE
      IF (ABS(BCN) - .001) 11370,11370,11385
11370 CONTINUE
C----- BOTH PARTS ALMOST ZERO
      ACN = .000001
C----- SET B PART TO ZERO
11375 CONTINUE
      BCN = 0.0
      GOTO 11390
11380 CONTINUE
      IF(ABS(BCN) - .001) 11375,11375, 11390
11385 CONTINUE
      ACN = 0.0
11390 CONTINUE
      FNSQ = ACN*ACN + BCN*BCN
      FN = SQRT (FNSQ)
C^^^^
C----- LARGE ENANTIOMER DIFFERENCES
      DENAN = 200. * ABS(FN-FP)/(FN+FP)
      IF (DENAN .GT. XVALUE) THEN
C----  H,K,L,F+,FO,F-,R
      CALL XMOVE(STORE(M6), STORE(LTEMPE), 3)
      STORE(LTEMPE+3) = FP
      STORE(LTEMPE+4) = FO * SCALEK
      STORE(LTEMPE+5) = FN
      STORE(LTEMPE+6) = DENAN
      CALL SRTDWN(LENAN,MENAN,MDENAN,NENAN, JENAN, LTEMPE, XVALUE,
     1   0, DEF2)
      IENPRT = IENPRT +1
      ENDIF
C^^^
      PN = AMOD(ATAN2(BCN,ACN)+PSHIFT,TWOPI)
      FESQ = FCSQ * CENANT + ENANT*FNSQ
      IF (FESQ - .00001) 11391,11391,11392
11391 CONTINUE
      FESQ = .00001
11392 CONTINUE
C----- THE COMPOSITE AMPLITUDE IS A SCALAR SUM.
C----- THE PHASE HAS NO REAL MEANING.
C----- UPDATE THE TOTAL MAGNITUDE
      FC = SQRT (FESQ)
C----- THE RELATIVE CONTRIBUTIONS OF THE COMPONENTS
      COSA = CENANT * FP / FC
      SINA =  ENANT * FN / FC
      IF (ENANT - .5) 11394,11394,11393
C----- RESET THE PHASE - THE BEST WE CAN DO!
11393  CONTINUE
      P = PN
11394 CONTINUE
C
      ELSE
        FNSQ = FCSQ
      ENDIF
      STORE(NH+6) = FC
      STORE(NH+7)=P
C--CHECK IF WE ARE DOING REFINEMENT
      IF(JB)11900,11400,11400
C
C--ROUTINES TO TRANSFER PARTIAL DERIVATIVES FROM TEMPORARY TO
C  PERMANENT STORE
11400 CONTINUE
      JS=ISTORE(NH+18)
      TEMP = SCALEW / FC
      COSP = ACT * TEMP
      SINP = BCT * TEMP
      COSPN = ACN * TEMP
      SINPN = BCN * TEMP
      ACE  = 0.5 * (FNSQ-FCSQ) * TEMP
C**NO ASSIGNED GOTO. MARKUS NEUBURGER
C**   GOTOIN3,(11450,11550,11600,11700)
C**ASSIGNED GOTO USED AN OTHER JUMP ORDER. MARKUS NEUBURGER
      GOTO (11450,11600,11550,11700) JUMP
C**PROVIDE ERROR EXIT HERE IF NO LABEL MATCHED. MARKUS NEUBURGER
C--CENTRO WITHOUT ANOMALOUS DISPERSION
11450 CONTINUE
      N = JP-JO
&CYBCVD$L NODEPCHK
      DO 11500 J = 0, N
      STORE(JO+J) = STORE(JS+J*JQ)*COSP
11500 CONTINUE
      GOTO 11850
C--NON-CENTRO WITHOUT ANOMALOUS DISPERSION
11550 CONTINUE
      SINP=SINP*FRIED
C--NON-CENTRO WITHOUT ANOMALOUS DISPERSION OR CENTRO WITH ANOMALOUS
C  DISPERSION
11600 CONTINUE
      N = JP-JO
&CYBCVD$L NODEPCHK
      DO 11650 J = 0, N
      STORE(JO+J) = STORE(JS+J*JQ)*COSP+ STORE(JS+J*JQ+1)*SINP
11650 CONTINUE
      ACF = BCD*SINP
      IF (JL) 11680,11660,11660
11660 CONTINUE
C----- NOW MODIFY THE EXISTING DERIVATIVES
      JS = ISTORE(NH+18)
      N = JP-JO
&CYBCVD$L NODEPCHK
      DO 11670 J = 0, N
      STORE(JO+J) = STORE(JO+J)*COSA +
     1 SINA*(STORE(JS+J*JQ)*COSPN + STORE(JS+J*JQ+1)*SINPN)
11670 CONTINUE
      ACF = ACF * COSA + SINA * BCD * SINPN
11680 CONTINUE
      GOTO 11800
C--NON-CENTRO WITH ANOMALOUS DISPERSION
11700 CONTINUE
      N = JP-JO
&CYBCVD$L NODEPCHK
      DO 11750 J = 0, N
      STORE(JO+J) = (STORE(JS+J*JQ)+STORE(JS+J*JQ+2)*FRIED)*COSP
     1 + (STORE(JS+J*JQ+1)*FRIED+STORE(JS+J*JQ+3))*SINP
11750 CONTINUE
      ACF =  (ACD * COSP * FRIED) + (BCD * SINP)
      IF (JL) 11790,11760,11760
11760 CONTINUE
C----- NOW MODIFY THE EXISTING DERIVATIVES
      JS = ISTORE(NH+18)
      N = JP-JO
&CYBCVD$L NODEPCHK
      DO 11785 J = 0, N
      STORE(JO+J) = STORE(JO+J)*COSA + SINA*
     1 ((STORE(JS+J*JQ)-STORE(JS+J*JQ+2)*FRIED)*COSPN +
     2 (STORE(JS+J*JQ+3)-STORE(JS+J*JQ+1)*FRIED)*SINPN)
11785 CONTINUE
      ACF = ACF*COSA + SINA * (BCD*SINPN - ACD*COSPN*FRIED)
11790 CONTINUE
      STORE(JN+3)=0.0
      STORE(JN+2)=0.0
11800 CONTINUE
      STORE(JN+1)=0.0
11850 CONTINUE
      STORE(JN)=0.0
C--RETURN TO THE CALLING ROUTINE
11900 CONTINUE
      GOTOICONT,(3100,4000)
C^
C
C--FINISH OFF THIS REFLECTION  -  COMPUTE THE OVERALL TOTALS
4000  CONTINUE
      FCEXT=FC
C--CHECK IF WE SHOULD INCLUDE EXTINCTION
      IF(NA)4200,4050,4050
C--WE SHOULD INCLUDE EXTINCTION
4050  CONTINUE
      A=AMIN1(1.,WAVE*ST)
      A=ASIN(A)*2.
C----- CHECK MEAN PATH LENGTH
      PATH=STORE(M6+9)
      IF(PATH-ZERO)4055,4055,4056
4055  CONTINUE
C      PATH = 10.0E6
      PATH = 1.
4056  CONTINUE
C--COMPUTE DELTA FOR NEUTRONS
      DELTA=DEL*PATH/SIN(A)
C--CHECK IF WE ARE USING XRAYS
      IF(NU)4100,4150,4150
C--WE ARE USING XRAYS
4100  CONTINUE
      A=COS(A)
      A=A*A
      DELTA=DELTA*(POL1+POL2*A*A)/(POL1+POL2*A)
C--COMPUTE THE MODIFIED /FC/
4150  CONTINUE
      EXT1=1.+2.*EXT*FC*FC*DELTA
      EXT2=1.0+EXT*FC*FC*DELTA
      EXT3=EXT2/(EXT1**(1.25))
      FCEXT=FC*(EXT1**(-.25))
C
C--COMPUTE THE VALUE OF /FC/ AFTER THE SCALE FACTOR HAS BEEN APPLIED
4200  CONTINUE
      FCEXS=FCEXT*SCALEG
C--CHECK IF THIS IS A TWINNED STRUCTURE
      IF(NB)4250,4300,4300
C--STORE FC AND PHASE IN THE LIST 6 SLOTS
4250  CONTINUE
      STORE(M6+5)=FCEXT*SCALES
      STORE(M6+6)=P
C--CHECK IF THE PARTIAL CONTRIBUTIONS ARE TO BE OUTPUT
4300  CONTINUE
      IF(ND)4400,4350,4350
C--STORE THE NEW CONTRIBUTIONS
4350  CONTINUE
      STORE(M6+7)=ACT
      STORE(M6+8)=BCT
C--ACCUMULATE THE TOTALS FOR THE NEW PARTS
      CALL XACRT(8)
      CALL XACRT(9)
C--ADD IN THE COMPUTED VALUES OF /FC/ ETC., TO THE OVERALL TOTALS
4400  CONTINUE
      A=FO*W
      DF=FO-FCEXS
      WDF=W*DF
      S=SCALEK
      FOT=FOT+FO
      FOABS = FOABS + ABS(FO)
      FCT=FCT+FCEXS
      DFT=DFT+ABS(ABS(FO) - FCEXS)
C--CHECK IF WE REFINING AGAINST /FO/ **2
      IF(NV)4500,4450,4450
C--COMPUTE W-DELTA FOR /FO/ **2 REFINEMENT
4450  CONTINUE
      A=ABS(FO)*FO*W
      DF=ABS(FO)*FO-FCEXS*FCEXS
      WDF=W*DF
      S=SCALEK*SCALEK
C--COMPUTE THE MINIMISATION FUNCTION
4500  CONTINUE
      AMINF=AMINF+WDF*WDF
C--COMPUTE THE TERMS FOR THE WEIGHTED R-VALUE
      WDFT=WDFT+WDF*WDF
      RW=RW+A*A
C--CHECK IF A PRINT OF THE RELFECTIONS IS NEEDED
      IF(JG)4650,4550,4550
C--REFLECTION PRINT ROUTINES
4550  CONTINUE
      P=P*D
      UJ=FO*SCALEK
      VJ=WDF*S
      WJ=DF*S
      A=SQRT(AC*AC+BC*BC)
      S=SQRT(ACI*ACI+BCI*BCI)
      T=4.*(BC*BCI+AC*ACI)
      C=T*200.0/(2.*FC*FC-T)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4600)STORE(M6),STORE(M6+1),STORE(M6+2),UJ,FCEXT,P,WJ,
     2 VJ,A,S,T,C,ST
      ENDIF
4600  FORMAT(3X,3F6.0,3F9.1,E13.4,E13.4,F8.1,F8.1,F9.1,F10.1,F10.5)
      GOTO 4660
C--CHECK IF WE ARE DOING REFINEMENT
4650  CONTINUE
      UJ = FO*SCALEK
      RDJW = ABS(WDF)
      IF (RDJW .GT. ABS(XVALUR)) THEN
C----  H,K,L,FO,FC,/WDELTA/,FO/FC
      CALL XMOVE(STORE(M6), STORE(LTEMPR), 3)
      STORE(LTEMPR+3) = UJ
      STORE(LTEMPR+4) = FCEXT
      STORE(LTEMPR+5) = RDJW
      STORE(LTEMPR+6) = MIN(99., UJ / MAX(FCEXT , ZERO))
      CALL SRTDWN(LSORT,MSORT,MDSORT,NSORT, JSORT, LTEMPR, XVALUR,
     1 0, DEF)
      ENDIF
      IF ( ABS(UJ-FCEXT) .GE. R*UJ .AND. IBADR .LE. 50 ) THEN
      IF (IBADR .LT. 0) THEN
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,4651)
      ENDIF
            IBADR = 0
4651        FORMAT(10X,' Bad agreements ',/
     1      /1X,'   h    k    l      Fo        Fc '/)
      ELSE IF (IBADR .LT. 25) THEN
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,4652)STORE(M6),STORE(M6+1),STORE(M6+2),UJ,FCEXT
      ENDIF
4652        FORMAT(1X,3F5.0,2F9.2)
      ELSE IF (IBADR .EQ. 25) THEN
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,4653)
      ENDIF
4653        FORMAT(/' And so on ------------'/)
      ENDIF
      IBADR = IBADR + 1
      ENDIF
4660  CONTINUE
      IF(JB)4700,4750,4750
C--NO REFINEMENT  -  CHECK IF WE ARE REFINING ONLY THE SCALE FACTOR
4700  CONTINUE
      IF(JH)5750,5600,5600
C
C--ADD THE CONTRIBUTIONS OF THE OVERALL PARAMETERS AND SCALE FACTORS.
C  THESE ARE COMPUTED WITH RESPECT TO 'FC' MODIFIED FOR EXTINCTION, RATH
C  THAN WITH RESPECT TO 'FC'. THIS IS WHY THEY ALL CONTAIN '1./EXT3'
C  TERM WHICH IS REMOVED LATER WHEN THE DERIVATIVES ARE MODIFIED FOR
C  EXTINCTION. THE FIRST PARAMETER IS THE OVERALL SCALE FACTOR.
C^
4750  CONTINUE
      A=W*FCEXT*SCALES/EXT3
C---- TO REFINE SCALE OF F**2 (RATHER THAN F), SQUARE AND
C      TAKE OUT THE CORRECTION FACTOR TO BE APPLIED LATER,
C      NEAR LABEL 5300
      IF(NV .GE. 0) A = A * FCEXT * SCALES / ( 2. * FCEXS )
      JX=0
      M12=L12O
      ASSIGN 4800 TO IOVR
      GOTO 11950
C--OVERALL TEMPERATURE FACTORS NEXT
4800  CONTINUE
      JX=1
      A=W*FCEXS*TC/EXT3
      ASSIGN 4850 TO IOVR
      GOTO 11950
4850  CONTINUE
      JX=2
      ASSIGN 4855 TO IOVR
      GOTO 11950
4855  CONTINUE
C----- THE POLARITY PARAMETER
      JX=3
      A = ACF
      ASSIGN 4900 TO IOVR
      GOTO 11950
4900  CONTINUE
C--- THE ENANTIOPOLE PARAMETER - HOWARD FLACK ACTA 1983,A39,876
      JX = 4
      A = ACE
      ASSIGN 4920 TO IOVR
      GOTO 11950
4920  CONTINUE
C--NOW THE EXTINCTION PARAMETER DERIVED BY LARSON
      JX=5
      A=-0.5*SCALEW*FC*FC*FC*DELTA/EXT2
      ASSIGN 4950 TO IOVR
      GOTO 11950
C--THE LAYER SCALES  -  CHECK IF LAYER SCALES ARE BEING USED
4950  CONTINUE
      IF(LAYER)5050,5000,5000
5000  CONTINUE
      A=W*SCALEO*SCALEB*FCEXT/EXT3
      JX=LAYER
      M12=L12LS
      ASSIGN 5050 TO IOVR
      GOTO 11950
C--THE BATCH SCALES  -  CHECK IF BATCH SCALES ARE BEING USED
5050  CONTINUE
      IF(IBATCH) 5150,5100,5100
5100  CONTINUE
      A=W*SCALEO*SCALEL*FCEXT/EXT3
      JX=IBATCH
      M12=L12BS
      ASSIGN 5150 TO IOVR
      GOTO 11950
C
C
C--ROUTINES TO ADD P.D.'S WITH RESPECT TO /FC/ FOR THE OVERALL PARAMETER
C
C  A     THE DERIVATIVE TO BE ADDED
C  JX    ITS POSITION IN THE OVERALL PARAMETER LIST SET IN M12
C  M12   ADDRESS OF THE HEADER FOR THE PARAMETER IN LIST 12
C  IOVR  SET TO THE RETURN ADDRESS
C
C--SET UP THE LIST 12 FLAGS
11950 CONTINUE
      L12A=ISTORE(M12+1)
      IF(ISTORE(M12+1))12350,12350,12000
C--PROCESS THE NEXT PART
12000 CONTINUE
      IF(ISTORE(L12A+4)-JX)12050,12050,12300
C--THE PART STARTS LOW ENOUGH DOWN
12050 CONTINUE
      MD12A=ISTORE(L12A+1)
      JU=ISTORE(L12A+2)+(JX-ISTORE(L12A+4))*MD12A
C--CHECK IF THIS PARAMETER IS IN RANGE
      IF(JU-ISTORE(L12A+3))12100,12100,12300
C--COMPUTE THE ADDRESS OF THIS PARAMETER IN THE DERIVATIVE STACK
12100 CONTINUE
      JT=(ISTORE(JU)-JR)/JQ
C--CHECK IF THE PARAMETER HAS BEEN REFINED
      IF(JT)12300,12150,12150
12150 CONTINUE
      JT=JT+JO
C--CHECK IF THE WEIGHT IS GIVEN OR ASSUMED TO BE UNITY
      IF(MD12A-2)12200,12250,12200
C--THE WEIGHT IS UNITY
12200 CONTINUE
      STORE(JT)=STORE(JT)+A
      GOTO 12300
C--THIS WEIGHT IS GIVEN
12250 CONTINUE
      STORE(JT)=STORE(JT)+A*STORE(JU+1)
C--PASS ONTO THE NEXT PART
12300 CONTINUE
      L12A=ISTORE(L12A)
      IF(L12A)12350,12350,12000
12350 CONTINUE
      GO TO IOVR , ( 3900, 4800, 4850, 4855, 4900, 4920, 4950,
     1  5050, 5150 )
C
C--BRANCH ON THE TYPE OF CALCULATION THAT WE ARE DOING
5150  CONTINUE
      A=1.0
C--CHECK IF WE ARE REFINING AGAINST /FO/ OR /FO/ **2
      IF(NV)5250,5300,5300
C--REFINEMENT AGAINST /FO/  -  CHECK IF WE ARE USING EXTINCTION CORRECTI
5250  CONTINUE
      IF(NA)5500,5350,5350
C--REFINEMENT AGAINST /FO/ **2  -  COMPUTE THE CORRECTION TERM
5300  CONTINUE
C^^
      A=2.0*FCEXS
C--CHECK IF WE SHOULD APPLY THE EXTINCTION CORRECTION
      IF(NA)5400,5350,5350
C--ADD IN THE EXTINCTION CORRECTION MODIFIER
5350  CONTINUE
      A=A*EXT3
C--MODIFY THE PARTIAL DERIVATIVES FOR EXTINCTION AND REFINEMENT AGAINST
5400  CONTINUE
      DO 5450 JX=JO,JP
      STORE(JX)=STORE(JX)*A
5450  CONTINUE
C--ACCUMULATE THE RIGHT HAND SIDES
5500  CONTINUE
      CALL XADRHS(WDF)
C--CHECK IF WE MUST ACCUMULATE THE LEFT HAND SIDES
      IF(JK)5550,5750,5750
C--ACCUMULATE THE LEFT HAND SIDES
5550  CONTINUE
      CALL XADLHS
      GOTO 5750
C
C
C--COMPUTE THE TOTALS FOR REFINEMENT OF THE SCALE FACTOR ONLY
5600  CONTINUE
      A=W*SCALES*FCEXT
C--CHECK IF WE ARE REFINING AGAINST /FO/ **2
      IF(NV)5700,5650,5650
C--REFINEMENT AGAINST /FO/ **2
5650  CONTINUE
C----- ORIGINALLY, CRYSTALS COMPUTED THE SCALE WITH RESPECT TO F, BUT
C      THIS IS NONLINEAR, SO CONVERGENCE WAS POOR. NOW, THE SHIFTS ARE
C      WRTO F**2. THIS IS TAKEN CARE OF WHEN THE SHIFT IS APPLIED.
C      SEE NEAR LABEL 6100
C^^^      A=A*2.0*FCEXS
      A=A*SCALES*FCEXT
C--ACCUMULATE THE TERMS FOR THE SCALE FACTOR
5700  CONTINUE
      SFO=SFO+WDF*A
      SFC=SFC+A*A
C--STORE THE LAST REFLECTION ON THE DISC
5750  CONTINUE
      CALL XSLR(1)
C--ACCUMULATE TOTALS FOR /FC/ AND THE PHASE
      CALL XACRT(6)
      CALL XACRT(7)
      CALL XACRT(16)
C--PICK UP THE NEXT REFLECTION
5800  CONTINUE
      GOTO 1830
C
C--END OF THE REFLECTIONS  -  PRINT THE R-VALUES ETC.
5850  CONTINUE
      IF (NT .LE. 0) THEN
      WRITE(NCAWU,5851)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,5851)
      WRITE ( CMON, 5851)
      CALL XPRVDU(NCVDU, 1,0)
5851  FORMAT(
     1 ' No reflections have been used for the Structure Factor',
     2 ' calculation')
         R = 0.
         A = 0.
         T = 0.
         RW = 0.
         S = 0.
      ELSE
      IF (FOABS .LE. 0.0) GOTO 19940
      R=DFT/FOABS*100.0
C----- PATCH TO AVOID INCIPIENT DIVISION BY ZERO
      IF(RW .LE. 0) GOTO 19930
      RW=SQRT(WDFT/RW)*100.0
      A=FOT/SCALEO
      S=FCT/SCALEO
      T=DFT/SCALEO
      ENDIF
C--CHECK IF WE ARE TO CALCULATE A NEW SCALE FACTOR HERE
      IF(JH)6200,6000,6000
C--CALCULATE THE NEW SCALE FACTOR
6000  CONTINUE
      BC=0.
      IF(SFC-ZEROSQ)6100,6100,6050
6050  CONTINUE
      BC=SFO/SFC
C--STORE THE SCALE AND PRINT IT
6100  CONTINUE
C^^^
C----- REFINEMENT AGAINTS F**2?
      IF (NV .GE. 0) THEN
C           REMEMBER THE SHIFT IS IN F**2
            STORE(L5O) = SQRT(STORE(L5O)*STORE(L5O) + BC)
      ELSE
            STORE(L5O)=STORE(L5O)+BC
      ENDIF
C^^^
6200  CONTINUE
      SCALE=STORE(L5O)
      JX=IABS(JB)+IABS(JH)*2+(NB+1)*4
C----- ENATIOMER SENSITIVE REFLECTIONS
      IF (IENPRT .GE. 0) THEN
6110      FORMAT(I6,
     1    ' enantiomer sensitive reflections.',
     2    ' Rt = 100x abs(F+ - F-)/<F+,F-> ')
          WRITE ( CMON, 6110) IENPRT
          CALL XPRVDU(NCVDU, 1,0)
          WRITE(NCAWU, '(A)') CMON(1)(:)
          WRITE(CMON,6111)
6111      FORMAT
     1    (2('   h   k   l    F+     Fo     F-    Rt  '))
          WRITE(NCAWU, '(A)') CMON(1)(:)
          CALL XPRVDU(NCVDU, 1,0)
          DO 12 MENAN = LENAN, LENAN+(NENAN-1)*MDENAN, 2*MDENAN
          WRITE ( CMON,
     * '(3I4, 3F7.1, I4,1X,2X,3I4, 3F7.1, I4)')
     1 ( (NINT(STORE(IXAP)), IXAP=JXAP, JXAP+2),
     2 (STORE(IXAP), IXAP= JXAP+3,JXAP+5), NINT(STORE(JXAP+6)),
     3 JXAP= MENAN, MENAN+MDENAN, MDENAN)
          CALL XPRVDU(NCVDU, 1,0)
          WRITE(NCAWU, '(A)') CMON(1)(:)
12    CONTINUE
      ENDIF
C
      WRITE ( CMON ,'(/'' Target GOF ='',F6.2)') SQRT(AMINF/FLOAT(NT))
      CALL XPRVDU(NCVDU, 2,0)
      WRITE(NCAWU, '(/A)') CMON(2)(:)
      WRITE(NCAWU,11)
      WRITE ( CMON ,11)
      CALL XPRVDU(NCVDU, 1,0)
11    FORMAT(2('   h   k  l     Fo      Fc   GOF Fo/Fc','  '))
      DO 10 MSORT = LSORT, LSORT+(NSORT-1)*MDSORT, 2*MDSORT
      WRITE ( CMON ,
     * '(3I4, 2F7.1, F7.2, F5.2,2X,3I4, 2F7.1, F7.2, F5.2)')
     1 ( (NINT(STORE(IXAP)), IXAP=JXAP, JXAP+2),
     2 (STORE(IXAP), IXAP= JXAP+3,JXAP+6),
     3 JXAP= MSORT, MSORT+MDSORT, MDSORT)
      CALL XPRVDU(NCVDU, 1,0)
      WRITE(NCAWU, '(A)') CMON(1)(:)
10    CONTINUE
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,5900)R,RW,A,S,T
5900    FORMAT(/30X,3('*')/29X,3('*')/' R-value    Weighted R',6X,
     2  12('*'),14X,12('*')/27X,13('*'),2X,'HERE IT IS',2X,12('*')/
     3  F7.2,F12.2,9X,12('*'),14X,12('*')/29X,3('*')/30X,3('*')//
     4  ' Sum of /FO/    Sum of /FC/    Sum of /Delta/',
     5  '    Minimization function',//F11.1,F15.1,F16.1,34X,
     6  ' On scale of /FC/')
        WRITE(NCWU,5950)FOT,FCT,DFT,AMINF
5950    FORMAT(/F11.1,F15.1,F16.1,E25.8,9X,' On scale of /FO/')
      WRITE(NCWU,6150) STORE(L5O), NT
      WRITE(NCWU,6250)JI,JX
      ENDIF
C
6150  FORMAT(/,' New scale factor (G) is ',F10.5,
     1 ',  ',I6,' reflections used in refinement')
      WRITE ( NCAWU, 6253) JI
      WRITE ( NCAWU, 6254)
      WRITE ( NCAWU, 6256) R,RW,A,S,T
      WRITE ( NCAWU,6257)
     2 FOT,FCT,DFT,AMINF,STORE(L5O),NT
6253  FORMAT(' Results of structure factor calculation ',I5)
6254  FORMAT(' R-value Weighted-R  Sum /FO/  ',
     2 'Sum /FC/   Delta   Minimisation function' )
6256  FORMAT( 1X,2F7.2,/,20X,2F10.0,F8.0,16X,' Scale of /FO/  ')
6257  FORMAT(20X,2F10.0,F8.0,F16.0,' Scale of /FC/  '/,
     6 ' Scale factor is ',F10.4,',', 6X,I6,' reflections used')
6250  FORMAT(/,' Structure factor least squares calculation',I5,
     2 '  ends',I3)
C
      IF (S .GT. ZERO) S = A/S
      WRITE ( CMON, 6260) JI, NT, R, RW, S, AMINF
6260  FORMAT (
     1 ' Structure Factor cycle ', I5, 10X, I10, ' reflections',/
     1 , ' R-value=',F7.3, 34X, ' Rw=', F7.3,/
     1 ' (Sum Fo)/(Sum Fc)=', F7.2,' Minimisation function=', F12.0)
      CALL XPRVDU(NCVDU, 3, 0)
C
      RETURN
C^
C
C
C
C--THIS IS A TWINNED CALCULATION  -  PRESERVE THE NOMINAL INDICES
2400  CONTINUE
      PH=STORE(M6)
      PK=STORE(M6+1)
      PL=STORE(M6+2)
      NJ=NINT(STORE(M6+11))
C----- IF THERE IS NO ELEMENT KEY, SET IT TO MOROHEDRAL TWINNING
      IF (NJ .EQ. 0) NJ = 12
C--FIND THE ELEMENT FOR WHICH THE INDICES ARE GIVEN
      NK=NJ
2450  CONTINUE
      NL=NK
      NK=NK/10
      JX=NL-NK*10
C--CHECK THAT THIS IS A VALID ELEMENT NUMBER
      IF ( JX .LE. 0 ) GO TO 19910
      IF ( JX .GT. N25 ) GO TO 19910
C--CHECK IF 'NL' HOLDS THE ELEMENT NUMBER OF THE GIVEN INDICES.
      IF(NK)2700,2700,2450
C--COMPUTE THE INDICES IN THE STANDARD REFERENCE SYSTEM
2700  CONTINUE
      M25I=L25I+(NL-1)*MD25I
      SH=STORE(M25I)*PH+STORE(M25I+1)*PK+STORE(M25I+2)*PL
      SK=STORE(M25I+3)*PH+STORE(M25I+4)*PK+STORE(M25I+5)*PL
      SL=STORE(M25I+6)*PH+STORE(M25I+7)*PK+STORE(M25I+8)*PL
C--RESET THE FLAGS FOR THIS GROUP OF TWIN ELEMENTS
      NK=NJ
C--CHECK IF THERE ARE ANY MORE ELEMENTS TO PROCESS
2750  CONTINUE
      IF(NK)3000,3000,2800
C--FETCH THE NEXT ELEMENT
2800  CONTINUE
      JX=NK
      NK=NK/10
      NL=JX-NK*10
C--COMPUTE THE INDICES FOR THIS COMPONENT
      M25=L25+(NL-1)*MD25
      STORE(M6)=STORE(M25)*SH+STORE(M25+1)*SK+STORE(M25+2)*SL
      STORE(M6+1)=STORE(M25+3)*SH+STORE(M25+4)*SK+STORE(M25+5)*SL
      STORE(M6+2)=STORE(M25+6)*SH+STORE(M25+7)*SK+STORE(M25+8)*SL
C--CHECK THAT WE HAVE NOT USED TOO MANY ELEMENTS
      IF ( NM .GE. N25 ) GO TO 19920
C--THIS ELEMENT IS OKAY  -  ENTER THE S.F.L.S MAIN LOOP
      ASSIGN 2750 TO ICONT
      GOTO 6300
C
C--END OF THIS TWINNED REFLECTION  -  WIND UP AND CALCULATE THE TOTAL VA
3000  CONTINUE
      FCEXT=0.
C--CALCULATE /FC/ AND ITS DERIVATIVES FOR EACH ELEMENT
      NH=NG
      NQ=NM
      GOTO 3450
C--ACCESS THE NEXT ELEMENT IN THE STACK
3050  CONTINUE
      NH=ISTORE(NH)
C--COMPUTE THE TOTALS AGAINST /FC/ FOR THIS ELEMENT
      ASSIGN 3100 TO ICONT
C--CLEAR THE PARTIAL CONTRIBUTIONS
      ACT=0.
      BCT=0.
C--SET THE POINTER FOR THE DERIVATIVES WITH RESPECT TO /FC/
      JO=ISTORE(NH+1)
      JP=ISTORE(NH+2)
      GOTO 11050
C
C----- CONVERT A AND B PARTS TO FC
C--ACCUMULATE /FCT/
3100  CONTINUE
      NI=ISTORE(NH+8)
      ISTORE(NH+8)=ISTORE(NH+8)-1
      JU=L5ES+ISTORE(NH+8)
      JV=M5ES+ISTORE(NH+8)
      FCEXT=FCEXT+STORE(JU)*STORE(NH+6)*STORE(NH+6)
C--CHECK IF WE MUST PRINT THIS CONTRIBUTOR
      IF(NF)3400,3150,3200
C--CHECK IF THERE IS MORE THAN ONE CONTRIBUTOR
3150  CONTINUE
      IF(NM-1)3400,3400,3200
C--CHECK IF THIS IS THE FIRST CONTRIBUTOR
3200  CONTINUE
      IF(NQ-NM)3300,3250,3300
3250  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3350)
      ENDIF
C--PRINT THIS CONTRIBUTOR
3300  CONTINUE
      JS=NH+3
      A=STORE(NH+7)*D
      C=STORE(NH+6)*STORE(JV)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3350)(STORE(JT+3),JT=NH,JS),A,C,NI
      ENDIF
3350  FORMAT(3X,3F6.0,9X,2F9.1,22X,F12.1,I4)
C--UPDATE THE NUMBER OF ELEMENTS LEFT TO PROCESS
3400  CONTINUE
      NQ=NQ-1
C--CHECK IF THERE ARE ANY MORE ELEMENTS TO PROCESS
3450  CONTINUE
      IF(NQ)3500,3500,3050
C--COMPUTE THE OVERALL /FCT/ VALUE
3500  CONTINUE
      FC=SQRT(FCEXT)
      JO=NO
      JP=NP
C--CHECK WHICH TYPE OF /FO/ AND /FC/ WE ARE TO OUTPUT
      IF(NB)3550,3550,3600
C--OUTPUT THE TOTAL OVER ALL ELEMENTS
3550  CONTINUE
      STORE(M6+3)=STORE(M6+10)
      STORE(M6+5)=FC
      STORE(M6+6)=0.
      GOTO 3650
C--OUTPUT THE VALUES FOR THE GIVEN INDICES AND ELEMENT
3600  CONTINUE
      NH=ISTORE(NG)
      JV=ISTORE(NH+8)+M5ES
      STORE(M6+3)=STORE(M6+10)*STORE(NH+6)*STORE(JV)/FC
      STORE(M6+5)=STORE(NH+6)*STORE(JV)
      STORE(M6+6)=STORE(NH+7)
C--CALCULATE SOME NEEDED VALUES
3650  CONTINUE
      FO=STORE(M6+10)
      STORE(M6+5)=STORE(M6+5)*SCALES
      P=0.
C--ACCUMULATE THE /FO/ TOTALS
      CALL XACRT(4)
C--CHECK IF WE ARE DOING REFINEMENT
      IF(JB)4000,3700,3700
C--CALCULATE THE NECESSARY P.D.'S WITH RESPECT TO /FCT/.
3700  CONTINUE
      DO 3750 JV=JO,JP
      STORE(JV)=0.
3750  CONTINUE
C--PASS AMONGST THE VARIOUS CONTRIBUTORS
      NH=NG
      DO 3850 JU=1,NM
C--FIND THE ADDRESS OF THIS CONTRIBUTOR
      NH=ISTORE(NH)
      JV=ISTORE(NH+8)+L5ES
      A=STORE(NH+6)*STORE(JV)/FC
      JS=ISTORE(NH+1)
C--ADD IN THE DERIVATIVES
      N = JP - JO
&CYBCVD$L NODEPCHK
      DO 3800 J = 0, N
      STORE(JO+J) = STORE(JO+J) + STORE(JS+J)*A
3800  CONTINUE
3850  CONTINUE
C--ADD IN THE CONTRIBUTIONS FOR THE ELEMENT SCALE FACTORS
      M12=L12ES
      ASSIGN 3900 TO IOVR
      NH=NG
      NI=NM
C--CHECK IF THERE ANY MORE SCALES TO PROCESS
3900  CONTINUE
      IF(NI)4000,4000,3950
C--FETCH THE INFORMATION FOR THE NEXT ELEMENT SCALE FACTOR
3950  CONTINUE
      NH=ISTORE(NH)
      JX=ISTORE(NH+8)
      A=0.5*SCALEW*STORE(NH+6)*STORE(NH+6)/FC
      NI=NI-1
      GOTO 11950
C
C
C
19900 CONTINUE
C -- ERRORS
      RETURN
19910 CONTINUE
C -- INCORRECT ELEMENT NUMBER
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , 19915 ) JX , PH , PK , PL
      WRITE ( NCAWU , 19915 ) JX , PH , PK , PL
      WRITE ( CMON, 19915) JX , PH , PK , PL
      CALL XPRVDU(NCVDU, 1,0)
19915 FORMAT ( 1X , I5 , ' is an incorrect element number for ' ,
     1 'reflection ' , 3F5.0 )
      CALL XERHND ( IERERR )
      GO TO 19900
C
19920 CONTINUE
C -- TOO MANY ELEMENTS
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , 19925 ) PH , PK , PL
      WRITE ( NCAWU , 19925 ) PH , PK , PL
      WRITE ( CMON , 19925 ) PH , PK , PL
      CALL XPRVDU(NCVDU, 1,0)
19925 FORMAT ( 1X , 'Too many elements given for reflection ', 3F5.0 )
      CALL XERHND ( IERERR )
      GO TO 19900
C
19930 CONTINUE
C------ SIGMA W*FO*FO .LE. ZERO ---- SUGGESTS PROBABLY NO WEIGHTS
      WRITE(NCAWU,19935)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,19935)
      WRITE ( CMON, 19935)
      CALL XPRVDU(NCVDU, 2,0)
19935 FORMAT(1X,'The denominator for the weighted R factor ',
     1 'is less than or equal to zero.'/
     2 ' Check that you have applied weights.')
      CALL XERHND ( IERERR )
      GOTO 19900
C
19940 CONTINUE
C------ SIGMA FO .LE. ZERO ---- SUGGESTS PROBABLY NO CALCULATION
      WRITE(NCAWU,19945)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,19945)
      WRITE ( CMON, 19945)
      CALL XPRVDU(NCVDU, 2,0)
19945 FORMAT(1X,'The denominator for the R factor ',
     1 'is less than or equal to zero.',/,
     2 ' No structure factors have been stored.')
      END
C
CODE FOR KLAYER
      FUNCTION KLAYER(IN)
C--COMPUTE THE LAYER SCALE INDEX FOR THE CURRENT REFLECTION.
C
C  IN  A DUMMY ARGUMENT.
C
C--RETURN VALUES OF 'KLAYER' ARE :
C
C  -1  NO LAYER SCALES IN LIST 5.
C  >0  THE LAYER SCALE INDEX.
C
C--
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XLST05
\XLST06
\XERVAL
\XIOBUF
C
\QSTORE
C
      IDWZAP = IN
C--CHECK IF THERE ARE ANY LAYER SCALES STORED
      KLAYER=-1
      IF(MD5LS)1350,1350,1000
C--COMPUTE THE INDEX VALUE
1000  CONTINUE
      A=STORE(L5LSC)*STORE(M6)+STORE(L5LSC+1)*STORE(M6+1)
     2 +STORE(L5LSC+2)*STORE(M6+2)
C--CHECK IF THE ABSOLUTE VALUE SHOULD BE TAKEN
      IF(STORE(L5LSC+4))1100,1100,1050
C--TAKE THE ABSOLUTE VALUE
1050  CONTINUE
      A=ABS(A)
C--COMPUTE THE OUTPUT INDEX
1100  CONTINUE
      I=NINT(A+STORE(L5LSC+3))
C--CHECK IF THE VALUE IS LARGE ENOUGH
      IF(I)1150,1150,1250
C--ILLEGAL LAYER SCALE VALUE
1150  CONTINUE
      CALL XERHDR(0)
      IF (ISSPRT .EQ. 0)
     1 WRITE(NCWU,1200)NINT(STORE(M6)),NINT(STORE(M6+1)),
     2 NINT(STORE(M6+2)),I
       WRITE(NCAWU,1200)NINT(STORE(M6)),NINT(STORE(M6+1)),
     2 NINT(STORE(M6+2)),I
       WRITE(CMON,1200)NINT(STORE(M6)),NINT(STORE(M6+1)),
     2 NINT(STORE(M6+2)),I
      CALL XPRVDU(NCVDU, 1,0)
1200  FORMAT(' Reflection : ',3I5,
     2 '  generates an illegal layer scale index of ',I4)
      CALL XERHND ( IERERR )
      RETURN
C--CHECK THE MAXIMUM VALUE
1250  CONTINUE
      IF(I-MD5LS)1300,1300,1150
C--AND NOW RETURN
1300  CONTINUE
      KLAYER=I
1350  CONTINUE
      RETURN
      END
C
CODE FOR KBATCH
      FUNCTION KBATCH(IN)
C--COMPUTE THE BATCH SCALE INDEX FOR THE CURRENT REFLECTION.
C
C  IN  A DUMMY ARGUMENT.
C
C--RETURN VALUES OF 'KBATCH' ARE :
C
C  -1  NO BATCH SCALES IN LIST 5.
C  >0  THE BATCH SCALE INDEX.
C
C--
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XLST05
\XLST06
\XERVAL
\XIOBUF
C
\QSTORE
C
      IDWZAP = IN
C--CHECK IF THERE ARE ANY BATCH SCALES STORED
      KBATCH=-1
      IF(MD5BS)1250,1250,1000
C--COMPUTE THE INDEX VALUE
1000  CONTINUE
      I=NINT(STORE(M6+13))
C--CHECK IF THE VALUE IS LARGE ENOUGH
      IF(I)1050,1050,1150
C--ILLEGAL BATCH SCALE VALUE
1050  CONTINUE
      CALL XERHDR(0)
      IF (ISSPRT .EQ. 0)
     1 WRITE(NCWU,1100)NINT(STORE(M6)),NINT(STORE(M6+1)),
     2 NINT(STORE(M6+2)),I
       WRITE(NCAWU,1100)NINT(STORE(M6)),NINT(STORE(M6+1)),
     2 NINT(STORE(M6+2)),I
       WRITE(CMON,1100)NINT(STORE(M6)),NINT(STORE(M6+1)),
     2 NINT(STORE(M6+2)),I
      CALL XPRVDU(NCVDU, 1,0)
1100  FORMAT(' Reflection : ',3I5,
     2 '  generates an illegal batch scale index of ',I4)
      CALL XERHND ( IERERR )
      RETURN
C--CHECK THE MAXIMUM VALUE
1150  CONTINUE
      IF(I-MD5BS)1200,1200,1050
C--AND NOW RETURN
1200  CONTINUE
      KBATCH=I
1250  CONTINUE
      RETURN
      END
CODE FOR XLINE
      SUBROUTINE XLINE (M2LI, M5ALI, M6LI,
     2 LIFAC, DLFLILE, DLFTHE, DLFPHI)
\ISTORE
C-C-C-AGREEMENT OF CONSTANTS AND VARIABLES
C-C-C-CELL-CONSTANTS, REFLECTION-INDICES
      REAL CONA
      REAL CONB
      REAL CONC
      REAL CONAL
      REAL CONBET
      REAL CONGA
      REAL COGAST
      REAL REFLH
      REAL REFLK
      REAL REFLL
C-C-C-COORDINATES FOR LINE (POLAR, CARTESIAN, TRICLINIC)
      REAL LILE
      REAL ANGLZD
      REAL AZIMXD
      REAL ANGLZ
      REAL AZIMX
      REAL LINCX
      REAL LINCY
      REAL LINCZ
      REAL LINX
      REAL LINY
      REAL LINZ
C-C-C-SOME TRANSFERRED STARTING-ADDRESSES OF ACTUAL (!) PARAMETERS
      INTEGER M2LI
      INTEGER M5ALI
      INTEGER M6LI
C-C-C-TRANSF. BETWEEN COORD. SYST. (CARTESIAN TO TRIGONAL)
      REAL CATRI11
      REAL CATRI12
      REAL CATRI13
      REAL CATRI21
      REAL CATRI22
      REAL CATRI23
      REAL CATRI31
      REAL CATRI32
      REAL CATRI33
C-C-C-SOME ABBREVIATIONS
C-C-C-...FOR STRUCTURFACTOR-CALCULATION
      REAL COSIA
      REAL COSIB
      REAL COSIC
      REAL COSIRO
      REAL DOTHLX
      REAL DOTHLY
      REAL DOTHLZ
      REAL DOTHL
      DOUBLE PRECISION LIFAC
C-C-C-...FOR DERIVATIVES
      REAL DLINXLL
      REAL DLINYLL
      REAL DLINZLL
      REAL DLINXTHE
      REAL DLINYTHE
      REAL DLINZTHE
      REAL DLINXPHI
      REAL DLINYPHI
      REAL DLINZPHI
      REAL DDOTLL
      REAL DDOTTHE
      REAL DDOTPHI
      DOUBLE PRECISION DLFLILE
      DOUBLE PRECISION DLFTHE
      DOUBLE PRECISION DLFPHI
\STORE
\XCONST
\XLST01
\QSTORE
C-C-C-CALCULATE THE LINE
C-C-C-ABBREVIATIONS FOR CONSTANTS AND VARIABLES
      CONA=STORE(L1P1)
      CONB=STORE(L1P1+1)
      CONC=STORE(L1P1+2)
      CONAL=STORE(L1P1+3)
      CONBET=STORE(L1P1+4)
      CONGA=STORE(L1P1+5)
      REFLH=STORE(M6LI)
      REFLK=STORE(M6LI+1)
      REFLL=STORE(M6LI+2)
      LILE=STORE(M5ALI+8)
C-C-C-(POLAR ANGLES IN UNITS OF 100 DEGREES)
      ANGLZD=STORE(M5ALI+9)
      AZIMXD=STORE(M5ALI+10)
C-C-C-TRANSFORMATION OF DEGREES (IN UNITS OF 100 DEGREES) TO RADIANS
      ANGLZ=ANGLZD*TWOPI/3.6
      AZIMX=AZIMXD*TWOPI/3.6
C-C-C-PREP. OF CALC. OF THE DOT-PROD. OF LINE AND HKL AND HKL-LENGTH
      COSIA=COS(CONBET)*COS(CONGA)-COS(CONAL)
      COSIB=COS(CONAL)*COS(CONGA)-COS(CONBET)
      COSIC=COS(CONAL)*COS(CONBET)-COS(CONGA)
      COSIRO=1+2*COS(CONAL)*COS(CONBET)*COS(CONGA)
     2 -(COS(CONAL))**2-(COS(CONBET))**2-(COS(CONGA))**2
C-C-C-CALCULATION OF RECIPROCAL CELL-CONSTANTS FROM REAL CELL-CONSTANTS
      COGAST=((COS(CONAL)*COS(CONBET))-COS(CONGA))
     2 /(SIN(CONAL)*SIN(CONBET))
C-C-C-GETTING MATRIX (TRANSF. CART. --> TRICL.) FROM CRYSTALS
      CATRI11=STORE(L1O2+0)
      CATRI12=STORE(L1O2+3)
      CATRI13=STORE(L1O2+6)
      CATRI21=STORE(L1O2+1)
      CATRI22=STORE(L1O2+4)
      CATRI23=STORE(L1O2+7)
      CATRI31=STORE(L1O2+2)
      CATRI32=STORE(L1O2+5)
      CATRI33=STORE(L1O2+8)
C-C-C-CALC. OF THE CARTESIAN COORD. OF LINE IN REAL SPACE
      LINCX=LILE*SIN(ANGLZ)*COS(AZIMX)
      LINCY=LILE*SIN(ANGLZ)*SIN(AZIMX)
      LINCZ=LILE*COS(ANGLZ)
C-C-C-CALC. OF THE TRICLINIC COORD. OF LINE IN REAL SPACE
      LINX=LINCX*CATRI11+LINCY*CATRI12+LINCZ*CATRI13
      LINY=LINCX*CATRI21+LINCY*CATRI22+LINCZ*CATRI23
      LINZ=LINCX*CATRI31+LINCY*CATRI32+LINCZ*CATRI33
C-C-C-CALC. OF SYMMETRY-EQUIVALENT DIRECTIONS (TRANSF. OF VECTOR-
C-C-C-END-POINT BY ROTATIONAL PART ONLY)
      LINX=LINX*STORE(M2LI)+LINY*STORE(M2LI+1)+LINZ*STORE(M2LI+2)
      LINY=LINX*STORE(M2LI+3)+LINY*STORE(M2LI+4)+LINZ*STORE(M2LI+5)
      LINZ=LINX*STORE(M2LI+6)+LINY*STORE(M2LI+7)+LINZ*STORE(M2LI+8)
C-C-C-CALC. DOT-PRODUCT OF HKL-VECTOR AND LINE-VECTOR IN REC. SPACE
      DOTHLX=COSIC*((REFLK*CONA/CONB)+REFLH*COS(CONGA))
     2 +COSIB*((REFLL*CONA/CONC)+REFLH*COS(CONBET))
     3 +COSIA*((REFLL*CONA*COS(CONGA)/CONC)
     4         +(REFLK*CONA*COS(CONBET)/CONB))
     5 +REFLH*(SIN(CONAL)**2)
     6 +(REFLK*CONA*(SIN(CONBET)**2)*COS(CONGA)/CONB)
     7 +(REFLL*CONA*(SIN(CONGA)**2)*COS(CONBET)/CONC)
      DOTHLY=COSIC*(REFLK*COS(CONGA)+(REFLH*CONB/CONA))
     2 +COSIB*((REFLL*CONB*COS(CONGA)/CONC)
     3         +(REFLH*CONB*COS(CONAL)/CONA))
     4 +COSIA*((REFLL*CONB/CONC)+REFLK*COS(CONAL))
     5 +(REFLH*CONB*(SIN(CONAL)**2)*COS(CONGA)/CONA)
     6 +REFLK*(SIN(CONBET)**2)
     7 +(REFLL*CONB*(SIN(CONGA)**2)*COS(CONAL)/CONC)
      DOTHLZ=COSIC*((REFLK*CONC*COS(CONBET)/CONB)
     2              +(REFLH*CONC*COS(CONAL)/CONA))
     3 +COSIB*(REFLL*COS(CONBET)+(REFLH*CONC/CONA))
     4 +COSIA*(REFLL*COS(CONAL)+(REFLK*CONC/CONB))
     5 +(REFLH*CONC*(SIN(CONAL)**2)*COS(CONBET)/CONA)
     6 +(REFLK*CONC*(SIN(CONBET)**2)*COS(CONAL)/CONB)
     7 +REFLL*(SIN(CONGA)**2)
      DOTHL=(LINX*DOTHLX+LINY*DOTHLY+LINZ*DOTHLZ)/COSIRO
C-C-C-CALCULATE FINAL FACTOR FOR LINE s
C-C-C-TEST WHETHER DOTHL APPROACHES ZERO
      IF (ABS(DOTHL) .LE. ZEROSQ) THEN
      LIFAC=1.0
      ELSE
      LIFAC=SIN(PI*DOTHL)/(PI*DOTHL)
      ENDIF
C-C-C-CALCULATE DERIVATIVES
C-C-C-ABBR. FOR PART. DERIV. W.R.T. A AND (!) B FOR LINE (LILE)
      DLINXLL=SIN(ANGLZ)*COS(AZIMX)*CATRI11
     2       +SIN(ANGLZ)*SIN(AZIMX)*CATRI12
     3       +COS(ANGLZ)*CATRI13
      DLINYLL=SIN(ANGLZ)*COS(AZIMX)*CATRI21
     2       +SIN(ANGLZ)*SIN(AZIMX)*CATRI22
     3       +COS(ANGLZ)*CATRI23
      DLINZLL=SIN(ANGLZ)*COS(AZIMX)*CATRI31
     2       +SIN(ANGLZ)*SIN(AZIMX)*CATRI32
     3       +COS(ANGLZ)*CATRI33
      DDOTLL=(DLINXLL*DOTHLX+DLINYLL*DOTHLY+DLINZLL*DOTHLZ)/COSIRO
C-C-C-TEST WHETHER DOTHL APPROACHES ZERO
      IF (ABS(DOTHL) .LE. ZEROSQ) THEN
      DLFLILE=0.0
      ELSE
      DLFLILE=((DOTHL*COS(PI*DOTHL)-SIN(PI*DOTHL)/PI)*DDOTLL)
     2 /(DOTHL**2)
      ENDIF
C-C-C-ABBR. FOR PART. DERIV. W.R.T. A AND (!) B FOR LINE (ANGLZ)
      DLINXTHE=LILE*COS(ANGLZ)*COS(AZIMX)*CATRI11
     2        +LILE*COS(ANGLZ)*SIN(AZIMX)*CATRI12
     3        -LILE*SIN(ANGLZ)*CATRI13
      DLINYTHE=LILE*COS(ANGLZ)*COS(AZIMX)*CATRI21
     2        +LILE*COS(ANGLZ)*SIN(AZIMX)*CATRI22
     3        -LILE*SIN(ANGLZ)*CATRI23
      DLINZTHE=LILE*COS(ANGLZ)*COS(AZIMX)*CATRI31
     2        +LILE*COS(ANGLZ)*SIN(AZIMX)*CATRI32
     3        -LILE*SIN(ANGLZ)*CATRI33
      DDOTTHE=(DLINXTHE*DOTHLX+DLINYTHE*DOTHLY+DLINZTHE*DOTHLZ)
     2        *TWOPI/(3.6*COSIRO)
C-C-C-TEST WHETHER DOTHL APPROACHES ZERO
      IF (ABS(DOTHL) .LE. ZEROSQ) THEN
      DLFTHE=0.0
      ELSE
      DLFTHE=((DOTHL*COS(PI*DOTHL)-SIN(PI*DOTHL)/PI)*DDOTTHE)
     2 /(DOTHL**2)
      ENDIF
C-C-C-ABBR. FOR PART. DERIV. W.R.T. A AND (!) B FOR LINE (AZIMX)
      DLINXPHI=-LILE*SIN(ANGLZ)*SIN(AZIMX)*CATRI11
     2        +LILE*SIN(ANGLZ)*COS(AZIMX)*CATRI12
      DLINYPHI=-LILE*SIN(ANGLZ)*SIN(AZIMX)*CATRI21
     2        +LILE*SIN(ANGLZ)*COS(AZIMX)*CATRI22
      DLINZPHI=-LILE*SIN(ANGLZ)*SIN(AZIMX)*CATRI31
     2        +LILE*SIN(ANGLZ)*COS(AZIMX)*CATRI32
      DDOTPHI=(DLINXPHI*DOTHLX+DLINYPHI*DOTHLY+DLINZPHI*DOTHLZ)
     2        *TWOPI/(3.6*COSIRO)
C-C-C-TEST WHETHER DOTHL APPROACHES ZERO
      IF (ABS(DOTHL) .LE. ZEROSQ) THEN
      DLFPHI=0.0
      ELSE
      DLFPHI=((DOTHL*COS(PI*DOTHL)-SIN(PI*DOTHL)/PI)*DDOTPHI)
     2 /(DOTHL**2)
      ENDIF
      END
CODE FOR XRING
      SUBROUTINE XRING (M2RI, STRI, M5ARI, M6RI,
     2 RIFAC, DRFRA, DRFTHE, DRFPHI)
\ISTORE
C-C-C-AGREEMENT OF CONSTANTS AND VARIABLES
C-C-C-CELL-CONSTANTS, REFLECTION-INDICES
      REAL CONA
      REAL CONB
      REAL CONC
      REAL CONAL
      REAL CONBET
      REAL CONGA
      REAL REFLH
      REAL REFLK
      REAL REFLL
C-C-C-PARAMETERS/COORDINATES FOR RING (POLAR, CARTESIAN, TRICLINIC)
      REAL RIRA
      REAL ANGLZD
      REAL AZIMXD
      DOUBLE PRECISION ANGLZ
      DOUBLE PRECISION AZIMX
      DOUBLE PRECISION LINCX
      DOUBLE PRECISION LINCY
      DOUBLE PRECISION LINCZ
      DOUBLE PRECISION LINX
      DOUBLE PRECISION LINY
      DOUBLE PRECISION LINZ
C-C-C-SOME TRANSFERRED STARTING-ADDRESSES OF ACTUAL (!) PARAMETERS
      INTEGER M2RI
      INTEGER M5ARI
      INTEGER M6RI
C-C-C-TRANSFERRED VALUE OF ST
      REAL STRI
C-C-C-TRANSF. BETWEEN COORD. SYST. (CARTESIAN TO TRIGONAL)
      REAL CATRI11
      REAL CATRI12
      REAL CATRI13
      REAL CATRI21
      REAL CATRI22
      REAL CATRI23
      REAL CATRI31
      REAL CATRI32
      REAL CATRI33
C-C-C-SOME ABBREVIATIONS
C-C-C-...FOR STRUCTURFACTOR-CALCULATION
      DOUBLE PRECISION COSIA
      DOUBLE PRECISION COSIB
      DOUBLE PRECISION COSIC
      DOUBLE PRECISION COSIRO
      DOUBLE PRECISION DOTHLX
      DOUBLE PRECISION DOTHLY
      DOUBLE PRECISION DOTHLZ
      DOUBLE PRECISION DOTHL
      DOUBLE PRECISION COSPSI
      DOUBLE PRECISION SINPSI
      DOUBLE PRECISION BESSR1, BESSR2, BESSR3, BESSR4, BESSR5, BESSR6
      DOUBLE PRECISION BESSS1, BESSS2, BESSS3, BESSS4, BESSS5, BESSS6
      DOUBLE PRECISION BESSP1, BESSP2, BESSP3, BESSP4, BESSP5
      DOUBLE PRECISION BESSQ1, BESSQ2, BESSQ3, BESSQ4, BESSQ5
      DOUBLE PRECISION ARGBES
      DOUBLE PRECISION ARGSQ
      DOUBLE PRECISION SICARG
      DOUBLE PRECISION RAR8SQ
      DOUBLE PRECISION RIFAC
C-C-C-...FOR DERIVATIVES
      DOUBLE PRECISION DLINXTHE
      DOUBLE PRECISION DLINYTHE
      DOUBLE PRECISION DLINZTHE
      DOUBLE PRECISION DLINXPHI
      DOUBLE PRECISION DLINYPHI
      DOUBLE PRECISION DLINZPHI
      DOUBLE PRECISION DDOTTHE
      DOUBLE PRECISION DDOTPHI
      DOUBLE PRECISION DRFOUT
      DOUBLE PRECISION DARGRA
      DOUBLE PRECISION DARGTHE
      DOUBLE PRECISION DARGPHI
      DOUBLE PRECISION DRFRA
      DOUBLE PRECISION DRFTHE
      DOUBLE PRECISION DRFPHI
\STORE
\XCONST
\XLST01
\QSTORE
C-C-C-VARIABLES FOR BESSEL-FUNCTIONS ARE PREOCCUPIED
      DATA BESSR1,BESSR2,BESSR3,BESSR4,BESSR5,BESSR6
     2 /57568490574.D0, -13362590354.D0, 651619640.7D0,
     3 -11214424.18D0, 77392.33017D0, -184.9052456D0/
      DATA BESSS1,BESSS2,BESSS3,BESSS4,BESSS5,BESSS6
     2 /57568490411.D0, 1029532985.D0, 9494680.718D0,
     3 59272.64853D0, 267.8532712D0, 1.D0/
      DATA BESSP1,BESSP2,BESSP3,BESSP4,BESSP5
     2 /1.D0, -.1098628627D-2, .2734510407D-4,
     3 -.2073370639D-5, .2093887211D-6/
      DATA BESSQ1,BESSQ2,BESSQ3,BESSQ4,BESSQ5
     2 /-.1562499995D-1, .1430488765D-3, -.6911147651D-5,
     3 .7621095161D-6, -.934945152D-7/
C-C-C-CALCULATE THE RING
C-C-C-ABBREVIATIONS FOR CONSTANTS AND VARIABLES
      CONA=STORE(L1P1)
      CONB=STORE(L1P1+1)
      CONC=STORE(L1P1+2)
      CONAL=STORE(L1P1+3)
      CONBET=STORE(L1P1+4)
      CONGA=STORE(L1P1+5)
      REFLH=STORE(M6RI)
      REFLK=STORE(M6RI+1)
      REFLL=STORE(M6RI+2)
      RIRA=STORE(M5ARI+8)
C-C-C-(POLAR ANGLES IN UNITS OF 100 DEGREES)
      ANGLZD=STORE(M5ARI+9)
      AZIMXD=STORE(M5ARI+10)
C-C-C-TRANSFORMATION OF DEGREES (IN UNITS OF 100 DEGREES) TO RADIANS
      ANGLZ=ANGLZD*TWOPI/3.6
      AZIMX=AZIMXD*TWOPI/3.6
C-C-C-PREP. OF CALC. OF THE DOT-PROD. OF RING-NORMAL, HKL(-LENGTH)
      COSIA=COS(CONBET)*COS(CONGA)-COS(CONAL)
      COSIB=COS(CONAL)*COS(CONGA)-COS(CONBET)
      COSIC=COS(CONAL)*COS(CONBET)-COS(CONGA)
      COSIRO=1+2*COS(CONAL)*COS(CONBET)*COS(CONGA)
     2 -(COS(CONAL))**2-(COS(CONBET))**2-(COS(CONGA))**2
C-C-C-GETTING MATRIX (TRANSF. CART. --> TRICL.) FROM CRYSTALS
      CATRI11=STORE(L1O2+0)
      CATRI12=STORE(L1O2+3)
      CATRI13=STORE(L1O2+6)
      CATRI21=STORE(L1O2+1)
      CATRI22=STORE(L1O2+4)
      CATRI23=STORE(L1O2+7)
      CATRI31=STORE(L1O2+2)
      CATRI32=STORE(L1O2+5)
      CATRI33=STORE(L1O2+8)
C-C-C-CALC. OF THE CARTESIAN COORD. OF RING-NORMAL IN REAL SPACE
      LINCX=SIN(ANGLZ)*COS(AZIMX)
      LINCY=SIN(ANGLZ)*SIN(AZIMX)
      LINCZ=COS(ANGLZ)
C-C-C-CALC. OF THE TRICLINIC COORD. OF RING-NORMAL IN REAL SPACE
      LINX=LINCX*CATRI11+LINCY*CATRI12+LINCZ*CATRI13
      LINY=LINCX*CATRI21+LINCY*CATRI22+LINCZ*CATRI23
      LINZ=LINCX*CATRI31+LINCY*CATRI32+LINCZ*CATRI33
C-C-C-CALC. OF SYMMETRY-EQUIVALENT DIRECTIONS (TRANSF. OF VECTOR-
C-C-C-END-POINT BY ROTATIONAL PART ONLY)
      LINX=LINX*STORE(M2RI)+LINY*STORE(M2RI+1)+LINZ*STORE(M2RI+2)
      LINY=LINX*STORE(M2RI+3)+LINY*STORE(M2RI+4)+LINZ*STORE(M2RI+5)
      LINZ=LINX*STORE(M2RI+6)+LINY*STORE(M2RI+7)+LINZ*STORE(M2RI+8)
C-C-C-CALC. DOT-PROD. OF HKL-VECT. AND RING-NORMAL-VECT. IN REC. SPACE
      DOTHLX=COSIC*((REFLK*CONA/CONB)+REFLH*COS(CONGA))
     2 +COSIB*((REFLL*CONA/CONC)+REFLH*COS(CONBET))
     3 +COSIA*((REFLL*CONA*COS(CONGA)/CONC)
     4         +(REFLK*CONA*COS(CONBET)/CONB))
     5 +REFLH*(SIN(CONAL)**2)
     6 +(REFLK*CONA*(SIN(CONBET)**2)*COS(CONGA)/CONB)
     7 +(REFLL*CONA*(SIN(CONGA)**2)*COS(CONBET)/CONC)
      DOTHLY=COSIC*(REFLK*COS(CONGA)+(REFLH*CONB/CONA))
     2 +COSIB*((REFLL*CONB*COS(CONGA)/CONC)
     3         +(REFLH*CONB*COS(CONAL)/CONA))
     4 +COSIA*((REFLL*CONB/CONC)+REFLK*COS(CONAL))
     5 +(REFLH*CONB*(SIN(CONAL)**2)*COS(CONGA)/CONA)
     6 +REFLK*(SIN(CONBET)**2)
     7 +(REFLL*CONB*(SIN(CONGA)**2)*COS(CONAL)/CONC)
      DOTHLZ=COSIC*((REFLK*CONC*COS(CONBET)/CONB)
     2              +(REFLH*CONC*COS(CONAL)/CONA))
     3 +COSIB*(REFLL*COS(CONBET)+(REFLH*CONC/CONA))
     4 +COSIA*(REFLL*COS(CONAL)+(REFLK*CONC/CONB))
     5 +(REFLH*CONC*(SIN(CONAL)**2)*COS(CONBET)/CONA)
     6 +(REFLK*CONC*(SIN(CONBET)**2)*COS(CONAL)/CONB)
     7 +REFLL*(SIN(CONGA)**2)
      DOTHL=(LINX*DOTHLX+LINY*DOTHLY+LINZ*DOTHLZ)/COSIRO
C-C-C-CALCULATE COSINE OF ANGLE BETWEEN HKL-VECTOR AND RING-NORMAL
      COSPSI=DOTHL/(2*STRI)
      IF (COSPSI .GT. 1.0) THEN
      COSPSI=1.0
      ELSE IF (COSPSI .LT. -1.0) THEN
      COSPSI=-1.0
      ENDIF
C-C-C-CALCULATE SINE OF ANGLE BETWEEN HKL-VECTOR AND RING-NORMAL
      SINPSI=SQRT(1-COSPSI**2)
C-C-C-CALCULATE FINAL FACTOR FOR RING s
      ARGBES=2*TWOPI*STRI*RIRA*SINPSI
      IF (ARGBES .LT. 8.) THEN
      ARGSQ=ARGBES**2
      RIFAC=(BESSR1+ARGSQ*(BESSR2+ARGSQ*(BESSR3+ARGSQ
     2 *(BESSR4+ARGSQ*(BESSR5+ARGSQ*BESSR6)))))
     3 /(BESSS1+ARGSQ*(BESSS2+ARGSQ*(BESSS3+ARGSQ
     4 *(BESSS4+ARGSQ*(BESSS5+ARGSQ*BESSS6)))))
      ELSE
      SICARG=ARGBES-.785398164
      RAR8SQ=(8./ARGBES)**2
      RIFAC=SQRT(.636619772/ARGBES)*(COS(SICARG)
     2 *(BESSP1+RAR8SQ*(BESSP2+RAR8SQ*(BESSP3+RAR8SQ
     3 *(BESSP4+RAR8SQ*BESSP5))))
     4 -(8./ARGBES)*SIN(SICARG)
     5 *(BESSQ1+RAR8SQ*(BESSQ2+RAR8SQ*(BESSQ3+RAR8SQ
     6 *(BESSQ4+RAR8SQ*BESSQ5)))))
      ENDIF
C-C-C-ABBR. FOR PART. DERIV. W.R.T. A AND (!) B FOR RING (ANGLZ)
      DLINXTHE=COS(ANGLZ)*COS(AZIMX)*CATRI11
     2        +COS(ANGLZ)*SIN(AZIMX)*CATRI12
     3        -SIN(ANGLZ)*CATRI13
      DLINYTHE=COS(ANGLZ)*COS(AZIMX)*CATRI21
     2        +COS(ANGLZ)*SIN(AZIMX)*CATRI22
     3        -SIN(ANGLZ)*CATRI23
      DLINZTHE=COS(ANGLZ)*COS(AZIMX)*CATRI31
     2        +COS(ANGLZ)*SIN(AZIMX)*CATRI32
     3        -SIN(ANGLZ)*CATRI33
      DDOTTHE=(DLINXTHE*DOTHLX+DLINYTHE*DOTHLY+DLINZTHE*DOTHLZ)
     2        *TWOPI/(3.6*COSIRO)
C-C-C-ABBR. FOR PART. DERIV. W.R.T. A AND (!) B FOR RING (AZIMX)
      DLINXPHI=-SIN(ANGLZ)*SIN(AZIMX)*CATRI11
     2        +SIN(ANGLZ)*COS(AZIMX)*CATRI12
      DLINYPHI=-SIN(ANGLZ)*SIN(AZIMX)*CATRI21
     2        +SIN(ANGLZ)*COS(AZIMX)*CATRI22
      DLINZPHI=-SIN(ANGLZ)*SIN(AZIMX)*CATRI31
     2        +SIN(ANGLZ)*COS(AZIMX)*CATRI32
      DDOTPHI=(DLINXPHI*DOTHLX+DLINYPHI*DOTHLY+DLINZPHI*DOTHLZ)
     2        *TWOPI/(3.6*COSIRO)
C-C-C-ABBR. FOR PART. DERIV. W.R.T. A AND (!) B FOR RING
C-C-C-OUTER DERIV. FOR RIRA, ANGLZ AND AZIMX (FOR ARGBES < 8.)
      IF (ARGBES .LT. 8.) THEN
      DRFOUT=ARGBES
     2 *((2*BESSR2+ARGSQ*(4*BESSR3+ARGSQ*(6*BESSR4+ARGSQ
     3 *(8*BESSR5+ARGSQ*10*BESSR6))))
     4 *(BESSS1+ARGSQ*(BESSS2+ARGSQ*(BESSS3+ARGSQ
     5 *(BESSS4+ARGSQ*(BESSS5+ARGSQ*BESSS6)))))
     6 -(2*BESSS2+ARGSQ*(4*BESSS3+ARGSQ*(6*BESSS4+ARGSQ
     7 *(8*BESSS5+ARGSQ*10*BESSS6))))
     8 *(BESSR1+ARGSQ*(BESSR2+ARGSQ*(BESSR3+ARGSQ
     9 *(BESSR4+ARGSQ*(BESSR5+ARGSQ*BESSR6))))))
     A /((BESSS1+ARGSQ*(BESSS2+ARGSQ*(BESSS3+ARGSQ
     B *(BESSS4+ARGSQ*(BESSS5+ARGSQ*BESSS6)))))**2)
C-C-C-OUTER DERIV. FOR RIRA, ANGLZ AND AZIMX (FOR ARGBES >/= 8.)
      ELSE
      DRFOUT=(SQRT(.636619772/ARGBES)/ARGBES)*((8./ARGBES)
     2 *(BESSQ1*(1.5*SIN(SICARG)-ARGBES*COS(SICARG))+RAR8SQ
     3 *(BESSQ2*(3.5*SIN(SICARG)-ARGBES*COS(SICARG))+RAR8SQ
     4 *(BESSQ3*(5.5*SIN(SICARG)-ARGBES*COS(SICARG))+RAR8SQ
     5 *(BESSQ4*(7.5*SIN(SICARG)-ARGBES*COS(SICARG))+RAR8SQ
     6  *BESSQ5*(9.5*SIN(SICARG)-ARGBES*COS(SICARG))))))
     7 -(BESSP1*(ARGBES*SIN(SICARG)+0.5*COS(SICARG))+RAR8SQ
     8 *(BESSP2*(ARGBES*SIN(SICARG)+2.5*COS(SICARG))+RAR8SQ
     9 *(BESSP3*(ARGBES*SIN(SICARG)+4.5*COS(SICARG))+RAR8SQ
     A *(BESSP4*(ARGBES*SIN(SICARG)+6.5*COS(SICARG))+RAR8SQ
     B  *BESSP5*(ARGBES*SIN(SICARG)+8.5*COS(SICARG)))))))
      ENDIF
C-C-C-INNER DERIV. FOR RIRA
      DARGRA=2*TWOPI*STRI*SINPSI
C-C-C-CHECK, WHETHER SINPSI APPROACHES ZERO
      IF (SINPSI .LT. ZEROSQ) THEN
      DRFTHE=0.0
      DRFPHI=0.0
      GOTO 8960
      ENDIF
C-C-C-INNER DERIV. FOR ANGLZ
      DARGTHE=-TWOPI*RIRA*DOTHL*DDOTTHE/(2*STRI*SINPSI)
C-C-C-INNER DERIV. FOR AZIMX
      DARGPHI=-TWOPI*RIRA*DOTHL*DDOTPHI/(2*STRI*SINPSI)
C-C-C-PART. DERIV. W.R.T. A AND (!) B FOR RING (ANGLZ,AZIMX,RIRA)
      DRFTHE=DRFOUT*DARGTHE
      DRFPHI=DRFOUT*DARGPHI
 8960 CONTINUE
      DRFRA=DRFOUT*DARGRA
      END
CODE FOR XSPHERE
      SUBROUTINE XSPHERE (STSP, M5ASP, SPHEFAC, DSFRAD)
\ISTORE
C-C-C-TRANSFERRED STARTING-ADDRESSES OF M5A
      INTEGER M5ASP
C-C-C-TRANSFERRED VALUE OF ST
      REAL STSP
C-C-C-AGREEMENT OF VARIABLES (SPHERE-FACTOR AND DERIVATIV)
      DOUBLE PRECISION SPHEFAC
      DOUBLE PRECISION DSFRAD
\STORE
\XCONST
\QSTORE
C-C-C-CALCULATE THE SPHERE-FACTOR
      SPHEFAC=(SIN(4*PI*STORE(M5ASP+8)*STSP))/(4*PI*STORE(M5ASP+8)*STSP)
C-C-C-CALCULATE THE DERIVATIVE W.R.T. SPHERE-FACTOR FOR RADIUS
      DSFRAD=((COS(4*PI*STSP*STORE(M5ASP+8))
     2 *4*PI*STSP*STORE(M5ASP+8))-(SIN(4*PI*STSP*STORE(M5ASP+8))))
     3 /(4*PI*STSP*(STORE(M5ASP+8))**2)
      END
