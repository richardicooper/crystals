CODE FOR XDIST
      SUBROUTINE XDIST
C--CALCULATE AND PRINT DISTANCES AND ANGLES
C
C  AT      MINIMUM CONTACT FOR DISTANCES.
C  AC      MAXIMUM CONTACT FOR DISTANCES.
C  BT      MINIMUM CONTACT FOR ANGLES.
C  BC      MAXIMUM CONTACT FOR ANGLES.
C  BP      MINIMUM OVERALL CONTACT SQUARED.
C  AP      MAXIMUM OVERALL CONTACT SQUARED.
C  AO      MAXIMUM OVERALL CONTACT.
C  IDIST   DISTANCE OR BOX FLAG :
C          -1  D/A CALCULATION.
C
C----- CONTROL VARIABLES IN XPROCD
C
C  IALL    DISTANCE CONTROL FLAG :
C          -1  PRINT CONTACTS TO THOSE ATOMS BELOW THE CURRENT ONE IN LI
C           0  PRINT ALL CONTACTS TO THE CURRENT ATOM.
C  IP      PRINT CONTROL FLAG FOR COORDINATES :
C          -1  DO NOT PRINT GENERATED COORDINATE FOR A DISTANCE.
C           0  PRINT GENERATED COORDINATES FOR A DISTANCE.
C  IESD    E.S.D. CALCULATION CONTROL FLAG :
C          -1  DO NOT CALCULATE E.S.D.'S.
C           0  CALCULATE E.S.D.'S.
C  ICELL   CELL E.S.D. CONTROL FLAG :
C          -1  DO NOT THE CELL E.S.D.'S IN THE E.S.D. CALCULATIONS.
C           0  INCLUDE THE UNIT CELL E.S.D.'S IN THE E.S.D. CALCULATIONS
C  ISORT   DETERMINES WHETHER THE DISTANCES ARE SORTED :
C          -1  DO NOT SORT THE DISTANCES AT EACH ATOM
C           0  SORT THE DISTANCES.
C  INTRA   CONTROLS WHETHER ONLY INTRA-MOLECULAR DISTANCES AND ANGLES
C          ARE PRODUCED :
C          -1  ALL D/A OUTPUT IS PRODUCED.
C           0  ONLY INTRA-MOLECULAR D/A OUTPUT IS LISTED.
C           1  ONLY INTER-MOLECULAR OUTPUT IS PRODUCED.
C
C  LEVEL   CONTROLS LISTING LEVEL
C            -1 OFF
C             0 LOW
C             1 HIGH
C             2 HIGH
C
C  IULN    THE INPUT LIST TYPE.
C  IRDUS     TYPE OF RADIUS TO USE
C            0 OVERALL LIMITS
C            N N'TH RADIUS FROM LIST 29
C
C  IDSPDA   MONITOR LEVEL
C            0 OFF
C            1 DISTANCES
C            2 ANGLES
C            3 ALL
C  IPUNCH    PUNCHED OUTPUT
C            -1 NOTHING
C            -1 NOTHING
C             0 RESTRAINTS
C             1 PUBLICATION
C             2 CIF
C
C  ISYMOD   SYMMETRY MODIFIER
C           -1  PATTERSON
C            0  NORMAL
C            1  NOSYMMETRY
C
C  ITRANS   TRANSLATION MODIFIER
C           -1 DO NOT APPLY UNIT CELL TRANSLATIONS
C            0 DO APPLY UNIT CELL TRANSLATIONS
C
C
C
C----- A FUNCTION VECTOR IS DEFINED TO INDICATE THE TREATMENT OF ATOMS
C
C----- JFNVC - 0 DONOT USE THE FUNCTION VECTOR
C              1 DO    USE THE FUNCTION VECTOR
C             -1 USE THE FUNCTION VECTOR FOR INCLUDE/EXCLUDE ONLY
C      LFNVC,MFNVC ECT, THE FUNCTION VECTOR POINTERS
C
C      (MFNVC +0)      USE FLAG
C                        -1      DO NOT USE ATOM
C                         0      CAN BE USED DURING INPUT TO INDICATE
C                                  ACTION NOT YET SPECIFIED
C                         1      DO USE ATOM
C      (MFNVC +1)      RADIUS FOR CONTACT
C
C      IDEFFN      THE VALUE TO BE USED FOR ATOMS WHOSE INCLUDE/EXCLUDE
C                  STATUS IS NOT EXPLICITLY STATED.
C                    -1      EXCLUDE UNSPECIFIED ATOMS
C                     0      INITIAL VALUE. IF STILL 0 WHEN INPUT IS
C                            COMPLETE, THIS IS CHANGED TO 1.
C                     1      INCLUDE SPECIFIED ATOMS
C
C -- THE POSSIBLE INCLUSION / EXCLUSION SPECIFICATIONS ARE:-
C
C            DIRECTIVES USED   IDEFFN      ACTION
C            ---------- ----   ------      ------
C            NONE              0           ALL ATOMS INCLUDED
C            INCLUDE ONLY      -1          UNSPECIFIED ATOMS EXCLUDED
C            EXCLUDE ONLY      +1          UNSPECIFIED ATOMS INCLUDED
C            INCLUDE + EXCLUDE -1          UNSPECIFIED ATOMS EXCLUDED
C
C
C
C--THE COMMON BLOCK XWORKA IS USED AS :
C
C  JA  ADDRESS OF FIRST ATOM IN ATOM COORDINATE STACK
C  JB  ADDRESS OF THE SECOND ATOM IN THE COORDINATE STACK
C  JC  ADDRESS OF ANY ATOM IN THE STACK
C  JD  WORK SPACE
C  JE  WORK SPACE
C  JF  WORK SPACE
C
C--ALL THE ABOVE WORK SPACE WILL HOLD THE LARGEST USED MATRIX
C
C  JG  ADDRESS OF THE SYMMETRY MATRIX FOR THE FIRST ATOM IN DISTANCES
C  JH  ADDRESS OF THE SYMMETRY MATRIX FOR THE SECOND ATOM IN DISTANCES
C  JI  ADDRESS OF THE SYMMETRY MATRIX FOR ANY ATOM IN DISTANCES
C
C  JJ  ADDRESS OF THE SYMMETRY MATRIX FOR THE FIRST ATOM IN ANGLES
C  JK  ADDRESS OF THE SYMMETRY MATRIX OF THE SECOND ATOM IN ANGLES
C  JL  ADDRESS OF THE SYMMETRY MATRIX OF THE THIRD ATOM IN ANGLES
C
C  JM  ADDRESS OF THE FIRST ELEMENT OF THE V/CV MATRIX FOR DISTANCES
C  JN  ADDRESS OF THE FIRST ELEMENT OF THE FIRST ATOM IN THE V/VC
C      MATRIX FOR DISTANCES
C
C  JP  ADDRESS OF THE FIRST ELEMENT OF THE V/VC MATRIX FOR ANGLES
C  JQ  ADDRESS OF THE FIRST ELEMENT OF THE FIRST ATOM IN THE V/VC
C      MATRIX FOR ANGLES
C
C  JS  THE NEXT ADDRESS THAT CAN BE USED IN THE STACK ON RETURN
C      FROM 'XDIST1'.
C      (THE STACK STARTS AT 'NFL' AND GOES UP).
C  JT  THE NUMBER OF WORDS PER ENTRY IN THE STACK.
C
C  JU  FIRST ANGLE TO CALCULATE
C  JV  LAST ANGLE TO CALCULATE
C  IJW  START OF PRINT BUFFER
C  IJX  CURRENT ITEM IN BUFFER
C  IJY  LAST POSITION IN BUFFER
C
C--FOR ANGLES THE ATOMS ARE GIVEN BY :
C
C  B - A - C
C
C  ANGLE(1) IS AT C
C  ANGLE(2) IS AT A
C  ANGLE(3) IS AT B
C
C  L(1)  A TO B
C  L(2)  B TO C
C  L(3)  C TO A
C
C--
C
      CHARACTER *4 RESTR, RESTR1, RESTR2
      CHARACTER *12 CBUFF
      CHARACTER *32 CATOM1, CATOM2, CATOM3, CBLANK
C
\TYPE11
\ISTORE
C
      DIMENSION B(3), PROCS(17)
      DIMENSION CC(4),TT(2)
      DIMENSION IS(9),ANGLE(3),DIST(3),DISTSQ(3)
      DIMENSION IAPD(13)
      DIMENSION INTRAD(5)
C----- TO HOLD HE NUMBER OF 'PARTS' PER ATOM
      DIMENSION IPART(3)
C
\STORE
\XSTR11
\XDSTNC
C
      COMMON /XPROCD/DISTS(4),IALL,IP,IESD,ICELL,ISORT,INTRA,LEVEL,IULN
     1 ,IRDUS,IDSPDA,IPUNCH,ISYMOD,ITRANS
      COMMON /XDISTW/A,BB,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
\XLEXIC
\XWORKA
\XPDS
\XLISTI
\XCONST
\XCHARS
\XUNITS
\XSSVAL
\XTAPES
\XLST01
\XLST02
\XLST05
\XLST11
\XLST12
\XLST29
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
\QSTR11
C
      EQUIVALENCE (DISTS(1),PROCS(1))
      EQUIVALENCE (B(1),C)
      EQUIVALENCE (CC(1),AC),(TT(1),AT)
      EQUIVALENCE (APD(1),IAPD(1))
C
C
      DATA RESTR1 /'DIST'/, RESTR2 /'ENER'/
      DATA TOLER1 / .2 /, TOLER2 / .5 /
C
      DATA IDIMN /17/
C
      DATA IS(1)/0/,IS(2)/3/,IS(3)/6/
      DATA IS(4)/3/,IS(5)/3/,IS(6)/3/
      DATA IS(7)/6/,IS(8)/-6/,IS(9)/9/
C
      DATA IVERSN /620/
      DATA ANGLE(1)/0.0/,DIST(1)/0.0/,DISTSQ(1)/0.0/
C
      DATA CBLANK /' '/
#HOL      DATA JAKEY /' KEY'/
&HOL      DATA JAKEY /4H KEY/
C
      DATA INTRAD(1)/1/,INTRAD(2)/1/,INTRAD(3)/0/
      DATA INTRAD(4)/0/,INTRAD(5)/0/
C----- MAXIMUM PARTS PER PARAMETER
      DATA MXPPP /10/
C
C--SET THE TIMING FUNCTION
      CALL XTIME1(2)
      CALL XCSAE
C----- INITIALISE FUNCTION VECTOR USE
      JFNVC = 1
C -- ALLOCATE A BUFFER FOR COMMAND PROCESSING
      MQ = KSTALL ( 100 )
C----- INITIALISE LEXICAL INPUT
      ICHNG=0
      CALL XLXINI (INEXTD, ICHNG)
C---- RESERVE A COMMAND LINE BUFFER OF 8 ELEMENTS
      JDIMBF = 8
      IDIMBF=JDIMBF+IDIMN
      ICOMBF=KSTALL(IDIMBF)
      JCOMBF = ICOMBF+JDIMBF
C----- ZERO THE BUFFER
      CALL XZEROF( ISTORE(ICOMBF), IDIMBF)
C--READ THE INITIAL CONSTANTS
C----- INSTRUCTION READING LOOP
100   CONTINUE
C----- READ A DIRECTIVE
      IDIRNM = KLXSNG(ISTORE(ICOMBF),IDIMBF,INEXTD)
      IF (IDIRNM .LT. 0) GOTO 100
      IF (IDIRNM .EQ. 0) GOTO 1000
      GOTO( 100, 100, 100, 100, 220, 230, 240, 200, 9910), IDIRNM
      GOTO 9910
C
C
200   CONTINUE
C------ LOAD LIST 5/10
      IULN= ISTORE(JCOMBF+11)
      IULN = KTYP05 (IULN)
      CALL XLDR05 (IULN)
      IF (IERFLG .LT. 0) GOTO 9900
C----- ALLOCATE A FUNCTION VECTOR
      MDFNVC = 2
      NFNVC = N5
      I=N5*MDFNVC
      LFNVC = KSTALL (I)
      CALL XZEROF ( ISTORE(LFNVC) , I )
      IDEFFN = 0
      GOTO 100
220   CONTINUE
C -- 'INCLUDE' DIRECTIVE
      CALL XDSSEL ( ISTORE(LFNVC) , MDFNVC , NFNVC , 1 , IDEFFN )
C----- SET SELECT ALLDIST=YES IF INCLUDE GIVEN
      IF (ISTORE(JCOMBF+4) .NE. 1 ) THEN
       ISTORE(JCOMBF+4) = 1
       IF (ISSPRT .EQ. 0) WRITE(NCWU,221)
       WRITE(NCAWU,221)
C       WRITE ( CMON ,221)
C       CALL XPRVDU(NCVDU, 2,0)
221    FORMAT(' ALLDIST  set to YES. Use the SELECT Directive after'/
     1  ,' the INCLUDE/ONLY directive if you want ALLDIST set to NO')
      ENDIF
      GO TO 100
230   CONTINUE
C -- 'EXCLUDE' DIRECTIVE
      CALL XDSSEL ( ISTORE(LFNVC) , MDFNVC , NFNVC , -1 , IDEFFN )
      GO TO 100
C----- ONLY. INDICATE FUNCTION VECTOR ONLY USED FOR INCLUDE/EXCLUDE
240   CONTINUE
      JFNVC = -1
      GOTO 220
C--SET A FEW INITIAL CONSTANTS AND PRINT THE CAPTION
1000  CONTINUE
C
C -- COMMAND INPUT COMPLETE. CHECK FOR ERRORS
      IF ( LEF .GT. 0 ) GO TO 9910
C
&PPCCS***
&PPC      CALL SETSTA( 'Distance' )
&PPC      CALL nextcursor
&PPCCE***
C----- RELOCATE THE COMMON BLOCK DATA
      CALL XMOVE( STORE(JCOMBF), PROCS(1),IDIMN)
C----- EXTRACT THE FUNCTION FLAG
      JFNVC = MIN0(JFNVC, IRDUS)
      IRDUS = MAX0(1,IRDUS)
      CHECK = VALUE + ZERO
C----- SET RESTRAINT DIRECTIVE NAME AND DISTANCE TOLERANCE
      IF (IRDUS .EQ. 2) THEN
            RESTR = RESTR2
            TOLER = TOLER2
      ELSE
            RESTR = RESTR1
            TOLER = TOLER1
      ENDIF
C
C -- SET DEFAULT VALUE FOR 'IDEFFN'
      IF ( IDEFFN .EQ. 0 ) IDEFFN = 1
C----- LOAD LIST 29
      CALL XFAL29
C----- SCAN LIST 5 SETTING FUNCTION VECTOR TO APPROPRIATE RADIUS
      IFNVC=LFNVC
      I29=L29 + (N29-1)*MD29
      I5 = L5 + (N5-1)*MD5
      BMAX = 0.
      BMIN = 0.
      DO 7450 M5=L5,I5,MD5
      DO 7250 M29= L29,I29,MD29
      JZ=M29+IRDUS
      IF (ISTORE(M5) - ISTORE(M29)) 7250,7350,7250
7250  CONTINUE
C----- NO MATCH - POINT TO DEFAULT ATOM
      JZ = L29 + IRDUS
7350  CONTINUE
C----- MATCH
      STORE(IFNVC+1) = STORE(JZ)
      BMAX = AMAX1( BMAX, STORE(JZ))
C -- SET USE FLAG FOR THIS ATOM TO THE DEFAULT, IF THE FLAG IS NOT
C    ALREADY SET.
      IF ( ISTORE(IFNVC) .EQ. 0 ) ISTORE(IFNVC) = IDEFFN
C
      IFNVC = IFNVC + MDFNVC
7450  CONTINUE
C
      AT = DISTS(1)
      AC = DISTS(2)
      BT = DISTS(3)
      BC = DISTS(4)
C----- RESET FUNCTION VECTOR AND LIMITS IF NECESSARY
      IF(JFNVC) 7670,7670,7660
7660  CONTINUE
      BMAX = 2.*BMAX + TOLER
      AT = CHECK
      AC = BMAX
      BT = AT
C----- DONT COMPUTE ANGLES IF USING VDW RADII
      IF (IRDUS .NE. 2) BC = BMAX
7670  CONTINUE
C----- LOAD LISTS 1 AND 2, AND SET UP SOME CONSTANTS
      CALL XDIST2
      IF( IERFLG .LT. 0 ) GOTO 9900
C
C----- REDUCE SYMMETRY IF NECESSARY
      CALL KSYMOD (ISYMOD, IC, IL, N2P, L2C, L2, N2, MD2)
C
C----- WRITE OUT THE CELL CONTENT PROPERTIES
C----- SKIP THE MOLECULAR PROPERTIES CALCULATION - FOR NOW
      JZ=IESD+2
      JZ=MAX0(1,JZ)
      JZ=MIN0(2,JZ)
      CALL XPRTCN
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1050)(IB,I=1,JZ)
      ENDIF
1050  FORMAT(21H Distances and angles,2A1,1H-,2X,
     2 39Hwith standard deviations estimated from,
     3 36H the full variance-covariance matrix)
C
      IF (JFNVC .LE. 0) THEN
       IF (ISSPRT .EQ. 0) WRITE(NCWU,1100)AT,AC,BT,BC
       WRITE(NCAWU,1100) AT,AC,BT,BC
1100   FORMAT(' Distance limits',F7.3,' to',F7.3/
     2 ' Angles   limits',F7.3,' to',F7.3)
      ELSE
        IF (ISSPRT .EQ. 0) WRITE(NCWU,1130) TOLER, AT
        WRITE(NCAWU,1130) TOLER, AT
1130    FORMAT(' Tolerance in determining contacts = ',G10.5,
     1      / ,'        Minimum resolved distance  = ',G10.5)
      ENDIF
C
      REWIND (MTE)
C
C----- SET LEVEL TO HIGH IF COORDINATES REQUESTED
      IF ((IP .GE. 0) .AND. (LEVEL . GE. 0)) LEVEL = 1
C----- WRITE HEADER IF RESTRAINTS TO BE GENERATED
      IF (IPUNCH .EQ. 0) CALL XPCHLH (16)
C
C----- ALLOCATE ONE SLOT FOR THE MOMENT
      JF = KSTALL(1)
C--CHECK IF E.S.D.'S ARE TO CALCULATED
      IF(IESD)1150,1200,1200
C--E.S.D.'S ARE NOT TO BE CALCULATED
1150  CONTINUE
      NW=12
C----- SAVE SOME SPACE FOR THE TARGET RADIUS IN RESTRAINTS
      IF (IPUNCH .EQ. 0) NW = 14
      NCOL=9
C----- RESET COLUMNS FOR BRIEF O/P
      IF (LEVEL .LE. 0) NCOL = 11
      L12=-1
      JU=2
      JV=2
      GOTO 1800
C--SET UP THE SYSTEM FOR E.S.D.'S
1200  CONTINUE
      JQ=0
      JS=1
C--LOAD LIST 12
      CALL XFAL12(JS,JQ,JU,JV)
C--CHECK IF THE E.S.D.'S OF THE CELL PARAMETERS ARE TO INCLUDED
      IF(ICELL)1250,1300,1300
C--DO NOT INCLUDE THE CELL ERRORS
1250  CONTINUE
      NWDT=6
      NWAT=9
      GOTO 1350
C--INCLUDE THE CELL ERRORS
1300  CONTINUE
      NWDT=12
      NWAT=15
C--SET VARIOUS CONSTANTS FOR E.S.D. CALCULATIONS
1350  CONTINUE
      NWD=6
      NWA=9
      NWS=4
      NW=13
C----- SAVE SOME SPACE FOR THE TARGET RADIUS IN RESTRAINTS
      IF (IPUNCH .EQ. 0) NW = 14
      JU=1
      JV=3
      NCOL=5
C----- RESET COLUMN FOR BRIEF O/P
      IF (LEVEL .LE. 0) NCOL = 6
C--SET A FEW AREAS OF CORE FOR E.S.D. CALCLATION
      JA=NFL
      JD = JA + NWA * NWS * MXPPP
      NO=JD+NWAT*3-1
      NZ=NWAT*NWAT
      JE=JD+NZ
      JF=JE+NZ
      JG=JF+NZ
      JH=JG
      JJ=JG+NWD*NWD
      JK=JJ
      JM=JJ+NWA*NWA
      JN=JM
      JP=JM+NWDT*NWDT
      JQ=JP
C--COMPUTE THE LENGTH OF THE DATA AREA
      JS=JP+NWAT*NWAT-NFL
C--ALLOCATE THE SPACE
      LN=9
      IREC=1001
      I=KCHNFL(JS)
C--ZERO THE AREA INITIALLY
      CALL XZEROF(STORE(JA),JS)
C--SET UP THE UNIT MATRIX SYMMETRY OPERATOR FOR THE FIRST ATOM
C  IN THE AREA FOR DISTANCES AND ANGLES
      DO 1400 I=1,3
      STORE(JH)=1.
      STORE(JK)=1.
      JH=JH+NWD+1
      JK=JK+NWA+1
      JN=JN+2*(NWDT+1)
      JQ=JQ+2*(NWAT+1)
1400  CONTINUE
      JL=JK+3*(NWA+1)
C--LOAD LIST 11
      CALL XFAL11(1,1)
      IF ( IERFLG .LT. 0 ) THEN
           IF (ISSPRT .EQ. 0) WRITE(NCWU,1405)
           WRITE(NCAWU,1405)
           WRITE ( CMON ,1405)
           CALL XPRVDU(NCVDU, 3,0)
1405  FORMAT(
     1 'The covariance matrix does not correspond to the atom list'/
     2 'You have changed LIST 12 or LIST 5'/
     3 'You must do another cycle of refinement')
           GO TO 9900
      ENDIF
      IF(ISTORE(L11P+15))1600,1450,1450
1450  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1500)
      WRITE(NCAWU,1500)
      WRITE ( CMON ,1500)
      CALL XPRVDU(NCVDU, 3,0)
1500  FORMAT(' Matrix is wrong type for e.s.d.''s')
      CALL XERHND ( IERWRN )
      IESD=-1
      GOTO 1000
C--APPLY THE CORRECT MULTIPLICATION FACTOR TO THE MATRIX
1600  CONTINUE
      C=STORE(L11P+17)/STORE(L11P+16)
      M11=L11+N11-1
      DO 1650 I=L11,M11
      STR11(I)=STR11(I)*C
1650  CONTINUE
C--PREPARE TO INITIATE THE CELL ERROR AREA IF NECESSARY
      IF(ICELL)1750,1700,1700
1700  CONTINUE
      CALL XFAL31(JM,JP)
      IF ( IERFLG .LT. 0 ) GO TO 9900
      GOTO 1800
C--RESET THE FIRST ATOM ADDRESSES FOR NO CELL ERRORS
1750  CONTINUE
      JN=JM
      JQ=JP
C--SET THE NUMBER OF WORDS PER ATOM IN THE DISTANCES STACK
1800  CONTINUE
      JT=NW
C----- GET A LINE BUFFER
      IJW=NFL
      IJY=IJW+12
      I=KCHNFL(16)
C--SET THE ANGLE DETAILS
      G=360./PI
      GS=0.5*G
      SIN45=SIN(0.25*PI)
C--PREPARE A SORT BUFFER AT THE TOP OF CORE
      LN=9
      IREC=1002
      ITEMP1=KCHLFL(JT)
C--PREPARE ONE EMPTY SLOT AT THE TOP AS WELL
      IREC=1003
      I=KCHLFL(JT)
C
C
C
C --             **** MAIN DISTANCE / ANGLES LOOP ****
C
C
C
      M5A=L5
      M12A=L12
      MFNVCA = LFNVC
C
C
C----- SAVE THE NEXT FREE ADDRESS
      NFLBAS = NFL
      DO 6000 I=1,N5
C----- RESTORE THE NEXT FREE ADDRESS
      NFL = NFLBAS
C
C -- CAN WE USE THIS ATOM ?
      IF ( ISTORE(MFNVCA) .LE. 0 ) GO TO 5900
      M12=L12
      M5=L5
      MFNVC = LFNVC
C--CALCULATE ALL THE DISTANCES AND ANGLES ABOUT THIS ATOM
1850  FORMAT(/,' Distances about atom  ',A4,F5.0,10X,'X =',F9.5,5X,
     2 'Y =',F9.5,5X,'Z =',F9.5)
C--CHECK IF ANY DISTANCES OR ANGLES HAVE BEEN FOUND AT THIS ATOM
C
      K = KDIST1( N5, JS, JT, JFNVC, TOLER, ITRANS)
C
C----- DISTANCE STACK STARTS AT NFL AND RUNS TO JS
C----- RESET NFL (ITS BEEN CHECKED) TO UPPER  LIMIT
      NFL = JS
C--CHECK THE REPLY
      IF ( K ) 9920 , 5900 , 1950
1950  CONTINUE
      IF (IALL .LE. 0) THEN
C----- ELIMINATE DUPLICATE ATOMS
      IF (K .GE. 2) THEN
        L = NFLBAS
1960    CONTINUE
        J = L + NW
        LV = J
        LU = JS - NW
        NREJ = 0
          DO 1970 M =  J, LU, NW
C-----    ARE ATOM ADDRESSES SAME?
          IF   (ISTORE(L) .EQ. ISTORE(M))  THEN
C-----      ARE DISTANCES SAME?
            IF (ABS(STORE(L+10) - STORE(M+10)) .LE. CHECK) THEN
C-----      ARE ATOMS COINCIDENT?
              IF ( XDSTN2 (STORE(L+7), STORE(M+7)) .LE. CHECK) THEN
                NREJ = NREJ + 1
                GOTO 1970
              ENDIF
            ENDIF
          ENDIF
          IF (LV .NE. M) THEN
C-----      SHUFFLE ITEMS UP IF ADDRESSES DIFFERENT
            CALL XMOVE (STORE(M), STORE(LV), NW)
          ENDIF
          LV = LV + NW
1970      CONTINUE
        L = L + NW
        JS = JS - NREJ*NW
        K = K - NREJ
        IF (L .LT. JS-NW) GOTO 1960
      ENDIF
      ENDIF
C----- SAVE THE PIVOT ADDRESS
      M5P = M5A
C----- INDICATE NO CAPTION YET FOR THIS PIVOT
      LEVEL2 = 0
C--CHECK IF WE SHOULD SORT THE DISTANCES
      IF(ISORT)2050,2000,2000
C--THAT OUTPUT DISTANCES MUST BE SORTED
2000  CONTINUE
      ITEMP2=JT*K
       CALL XSHELQ( STORE(NFLBAS), JT, 11, K, ITEMP2, STORE(ITEMP1) )
C--SET UP THE PROCESSING FLAGS
2050  CONTINUE
      JS=JS-NW
      K = NFLBAS
      N=0
C--CHECK IF ERRORS ARE TO BE CALCULATED
      IF(IESD)2150,2100,2100
C--SET UP THE ATOM STACK FOR THE PIVOT ATOM
2100  CONTINUE
      JB=JA
      CALL XFPCES( M12A, JB, NWS, IPART(1) )
2150  CONTINUE
C----- INITIALIZE BUFFER
      IJX=IJW
C--PRINT THE CALCULATED DISTANCES
      DO 3750 J = NFLBAS, JS, NW
      M=J+1
C--CHECK IF WE WANT ALL DISTANCES
      IF(INTRA)2400,2200,2300
C--INTRA-MOLECULAR DISTANCES ONLY
2200  CONTINUE
      DO 2250 L=1,5
      M=M+1
      IF(ISTORE(M)-INTRAD(L))3750,2250,3750
2250  CONTINUE
      GOTO 2400
C--ONLY INTER-MOLECULAR DISTANCES REQUIRED
2300  CONTINUE
      DO 2350 L=1,5
      M=M+1
      IF(ISTORE(M)-INTRAD(L))2400,2350,2400
2350  CONTINUE
      GOTO 3750
C--PROCESS THIS DISTANCE
2400  CONTINUE
      L=ISTORE(J+1)
      M=J+4
C--BRANCH ON THE TYPE OF DISTANCE FOUND
      GOTO(3750,2450,3600,2450),L
C--DISTANCE ACCEPTABLE
2450  CONTINUE
      L=ISTORE(J)
C--CHECK IF ALL THE DISTANCES ARE  REQUIRED
      IF(IALL)2500,2550,2550
2500  CONTINUE
      IF(M5A-L)2550,2550,3550
C--CHECK IF THE ERRORS ARE TO BE CALCULATED
2550  CONTINUE
C----- SET ESD TO ZERO
      STORE(IJX+3)=.00000001
      STORE(JF)=0.0
      IF(IESD)2800,2600,2600
C--CALCULATE THE E.S.D.
2600  CONTINUE
      JC=JB
C--ADD THE SECOND ATOM INTO THE STACK
      CALL XFPCES( ISTORE(J+12), JC, NWS, IPART(2) )
C--SET UP THE V/CV MATRIX AT 'JD'
      CALL XCOVAR( JA, NWD, NWS, JD, JE, IPART, 2)
C--SET UP THE RELEVANT SYMMETRY MATRIX  AT JH
      CALL XMVCSP(J,JH,NWD)
C--APPLY THE SYMMETRY MATRIX AND STORE THE TRANSFORMATION MATRIX AT 'JF'
      CALL XMD3B(JE,JG,JF,2,NWD)
C--MOVE THE V/CV MATRIX TO DISTANCE V/CV AREA  (THIS WILL INCLUDE CELL)
      CALL XMVCD(JD,NWD,JN,NWDT)
C--CALCULATE 'DX','DY' AND 'DZ'
      CALL XSUBTR(STORE(M5A+4),STORE(J+7),B(1),3)
C--CALCULATE THE RECIPROCAL OF THE DISTANCE
      F=1./STORE(J+10)
      NY=JD
C--CHECK IF THE CELL ERRORS ARE TO BE USED
      IF(ICELL)2700,2650,2650
C--CALCULATE THE CELL ERRORS
2650  CONTINUE
      CALL XAPP31(NY)
      NY=NY+6
C--CALCULATE THE ERROR CONTRIBUTIONS FOR ATOM ONE
2700  CONTINUE
      CALL XMULTR(B(1),F,B(1),3)
      CALL XMLTMM(STORE(L1M1),B(1),BPD(4),3,3,1)
C--APPLY THE DERIVATIVE VECTOR TO THE TRANSFORMATION MATRIX
      J1=JF
      DO 2750 I1=1,3
      STORE(NY)=STORE(J1)*BPD(4)+STORE(J1+6)*BPD(5)+STORE(J1+12)*BPD(6)
      STORE(NY+3)=-STORE(J1+21)*BPD(4)-STORE(J1+27)*BPD(5)-STORE(J1+33)
     2 *BPD(6)
      NY=NY+1
      J1=J1+1
2750  CONTINUE
C--CALCULATE THE VARIANCE
      CALL XMLTMM(STORE(JM),STORE(JD),STORE(JE),NWDT,NWDT,1)
      CALL XMLTTM(STORE(JD),STORE(JE),STORE(JF),1,NWDT,1)
C--CALCULATE THE E.S.D.
C -- CALCULATE E.S.D. FROM THE VARIANCE, PRODUCING NEGATIVE E.S.D.'S
C    FROM 'NEGATIVE VARIANCES'
      STORE(JF) = XDSESD ( STORE(JF) , STORE(JN) , NWDT )
      STORE(IJX+3)=STORE(JF)
2800  CONTINUE
C----- COMPRESS ATOMS INTO CHARACTER FORM
      CALL CATSTR (STORE(M5P), STORE(M5P+1),1,1,0,0,0, CATOM1, LATOM1)
      CALL CATSTR (STORE(L), STORE(L+1),
     1 ISTORE(J+2), ISTORE(J+3), ISTORE(J+4), ISTORE(J+5),
     2 ISTORE(J+6), CATOM2, LATOM2)
C
      IF (IDSPDA .EQ. 1  .OR. IDSPDA .EQ. 3 ) THEN
      LATOM1 = MIN(10, LATOM1)
      IF (STORE(JF) .GT. ZERO) THEN
        WRITE ( CMON ,2806)
     1 CBLANK(1: 21-LATOM1), CATOM1(1:LATOM1), CATOM2(1:25),
     2 STORE(J+10), STORE(JF)
      ELSE
        WRITE ( CMON ,2806)
     1 CBLANK(1: 21-LATOM1), CATOM1(1:LATOM1), CATOM2(1:25),
     2 STORE(J+10)
      ENDIF
      CALL XPRVDU(NCVDU, 1,0)
      WRITE(NCAWU, '(A)') CMON( 1)(:)
2806    FORMAT (1X,A, A, ' to ', A, F6.3, F6.3)
      ENDIF
C
      IF (IPUNCH .EQ. 0) THEN
C----- WRITE RESTRAINT
            WRITE (NCPU,'(A,'' '', F7.3, '',.01= '', A,'' to '',A)' )
     1      RESTR, STORE(J+13), CATOM1(1:LATOM1),
     2      CATOM2(1:LATOM2)
      ELSE IF (IPUNCH .EQ. 1) THEN
C----- WRITE UNFORMATTED PUBLICATION LIST
            IF (STORE(JF) .GT. ZERO) THEN
                WRITE(NCPU,2806)
     1          CBLANK(1: 23-LATOM1), CATOM1(1:LATOM1), CATOM2(1:21),
     2          STORE(J+10), STORE(JF)
            ELSE
                WRITE(NCPU,2806)
     1          CBLANK(1: 23-LATOM1), CATOM1(1:LATOM1), CATOM2(1:21),
     2          STORE(J+10)
            ENDIF
      ENDIF
      IF (IPUNCH .GE. 1) THEN
C----- CIF AND FORMATTED PUBLICATION
            WRITE( MTE) 'D',STORE(J+10),STORE(JF),
     1      STORE(M5A), STORE(M5A+1), 1,1,0,0,0,
C--- ATOM 2
     2      STORE(L), STORE(L+1), ISTORE(J+2),
     3      ISTORE(J+3), ISTORE(J+4), ISTORE(J+5), ISTORE(J+6),
C----- DUMMY WRITES AT END FOR COMPATIBILITY WITH TORSION
     4      IB, ZERO, 1,1,0,0,0,
     5      IB, ZERO, 1,1,0,0,0
      ENDIF
C
      IF ((LEVEL2 .EQ. 0) .AND. (LEVEL .GE. 0)) THEN
C----- WRITE A CAPTION
        IF (LEVEL .EQ. 0) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,2825) STORE(M5P),STORE(M5P+1)
      ENDIF
2825  FORMAT(/,1X,'Pivot atom   ',A4,F5.0)
        ELSE IF (LEVEL .GE. 1) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,1850) STORE(M5P),STORE(M5P+1),
     1  (STORE(MMN),MMN=M5P+4,M5P+6)
      ENDIF
        ENDIF
        LEVEL2 = 1
      ENDIF
      IF (LEVEL) 3500, 2830, 2860
2830  CONTINUE
C----- STORE CURRENT DISTANCE IN BUFFER
      STORE(IJX)=STORE(L)
      STORE(IJX+1)= STORE(L+1)
      STORE(IJX+2)=STORE(J+10)
      IJX=IJX+4
      IF(IJX-IJY) 3500,3500,2840
2840  CONTINUE
C----- PRINT BUFFER
      IJX=IJX-4
C -- CHECK FOR E.S.D.
      IF (IESD .LT. 0) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,2850) ((STORE(IJZ),IJZ=I1,I1+2),I1=IJW,IJX,4)
      ENDIF
2850    FORMAT(11X,4(5X,A4,F5.0,F7.3,6X))
      ELSE
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,2851) ((STORE(IJZ),IJZ=I1,I1+3),I1=IJW,IJX,4)
      ENDIF
2851    FORMAT(11X,4(5X,A4,F5.0,F7.3,F6.3))
      ENDIF
      IJX=IJW
      GOTO 3500
2860  CONTINUE
C----- FULL PRINT
C----- CHECK IF THE TRANSFORMED COORDINATES ARE TO BE PRINTED
      IF(IP) 2870,3200,3200
C----- CHECK IF THIS IS FIRST DISTANCE
2870  CONTINUE
      IF(N)2900,2900,3000
C--PRINT THE CAPTION HEADING
2900  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2950)IB
      ENDIF
2950  FORMAT(/1X,A4,2X,'Atom',3X,'Serial',3X,'S(I)',2X,'L',2X,'T(X)',
     2 1X,'T(Y)',1X,'T(Z)',A4,25X,'X''',8X,'Y''',8X,'Z''')
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3100)
      ENDIF
C--CHECK IF THE ERRORS ARE TO BE PRINTED
3000  CONTINUE
      IF(IESD)3050,3150,3150
C--NO ERRORS TO BE PRINTED
3050  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3100)STORE(L),STORE(L+1),(ISTORE(NX+2),NX=J,M),
     2 STORE(J+10)
      ENDIF
3100  FORMAT(7X,A4,F8.0,4X,I3,I4,3I5,F11.3,14X,3F10.5)
      GOTO 3500
C--ERRORS TO BE PRINTED
3150  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3450)STORE(L),STORE(L+1),(ISTORE(NY+2),NY=J,M),
     2 STORE(J+10),STORE(JF)
      ENDIF
      GOTO 3500
C--PRINT THE GENERATED COORDINATES  -  CHECK IF THIS IS THE FIRST ATOM
3200  CONTINUE
      IF(N)3250,3250,3300
3250  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2950)IB,IB
      ENDIF
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3100)
      ENDIF
C--CHECK IF THE ERRORS ARE TO BE PRINTED
3300  CONTINUE
      NX=J+2
      IF(IESD)3350,3400,3400
C--NO ERRORS
3350  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3100)STORE(L),STORE(L+1),(ISTORE(NY+2),NY=J,M),
     2 STORE(J+10),(STORE(NY+7),NY=J,NX)
      ENDIF
      GOTO 3500
C--PRINT THE ERRORS
3400  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3450)STORE(L),STORE(L+1),(ISTORE(NY+2),NY=J,M),
     2 STORE(J+10),STORE(JF),(STORE(NY+7),NY=J,NX)
      ENDIF
3450  FORMAT(7X,A4,F8.0,4X,I3,I4,3I5,F11.3,F7.3,7X,3F10.5)
3500  CONTINUE
      N=N+1
C--CHECK WHETHER THIS DISTANCE IS ACCEPTABLE FOR ANGLES.
C  IF THIS IS GOOD FOR ANGLES MOVE IT UP SO THAT ALL NON-ANGLES
C  DISTANCE ENTRIES ARE EXCLUDED BY THE END OF THE DISTANCE PRINT
3550  CONTINUE
      IF(ISTORE(J+1)-3)3750,3600,3600
C--CHECK IF IT IS NECESSARY TO MOVE THE DISTANCE BLOCK
3600  CONTINUE
      IF(K-J)3650,3700,3650
C--MOVE THE DATA
3650  CONTINUE
      CALL XMOVE(STORE(J),STORE(K),NW)
C--UPDATE THE CURRENT LAST POINTER
3700  CONTINUE
      K=K+NW
3750  CONTINUE
C----- EMPTY PRINT BUFFER
      IF(IJX-IJW) 3790,3790,3760
3760  CONTINUE
      IJX=IJX-4
C -- CHECK FOR E.S.D.
      IF (IESD .LT. 0) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,2850) ((STORE(IJZ),IJZ=I1,I1+2),I1=IJW,IJX,4)
      ENDIF
      ELSE
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,2851) ((STORE(IJZ),IJZ=I1,I1+3),I1=IJW,IJX,4)
      ENDIF
      ENDIF
3790  CONTINUE
      IJX=IJW
C
C--START OF THE ANGLES PRINT LOOP
      M=1
      L = NFLBAS
      K=K-NW
C--CHECK IF ANY ANGLES REMAIN TO BE CALCULATED AND PRINTED
3800  CONTINUE
      IF(K-L)5900,5900,3850
3850  CONTINUE
C--CHECK IF THIS IS THE FIRST TIME OR A CONTINUATION
      IF (NFLBAS - L) 3890, 3990, 3990
C
C----- CONTINUATION
3890  CONTINUE
      IF (LEVEL) 4110, 3900, 3900
3900  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3950)
      ENDIF
3950  FORMAT(//,' Continuation')
      IF (LEVEL) 4110, 4110, 4100
C
C----- FIRST TIME
3990  CONTINUE
      IF ((LEVEL2 .EQ. 0) .AND. (LEVEL .GE. 0)) THEN
C----- WRITE A CAPTION
        IF (LEVEL .EQ. 0) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,2825) STORE(M5P),STORE(M5P+1)
      ENDIF
        ELSE IF (LEVEL .GE. 1) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,1850) STORE(M5P),STORE(M5P+1),
     1  (STORE(MMN),MMN=M5P+4,M5P+6)
      ENDIF
        ENDIF
        LEVEL2 = 1
      ENDIF
      IF (LEVEL) 4110, 4110, 4000
4000  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4050)STORE(M5A),STORE(M5A+1)
      ENDIF
4050  FORMAT(//,' Angles about atom  ',A4,F5.0)
4100  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2950)JAKEY
      ENDIF
4110  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3100)
      ENDIF
      N=M
      NX=L+4
      NY=ISTORE(L)
      IF (LEVEL) 4165, 4160, 4140
4140  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4150)N,STORE(NY),STORE(NY+1),(ISTORE(NZ+2),NZ=L,NX)
      ENDIF
4150  FORMAT(I4,3X,A4,F8.0,4X,I3,I4,3I5,3X,9F8.2)
      GOTO 4180
4160  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4170) N,STORE(NY),STORE(NY+1)
      ENDIF
      GOTO 4180
4165  CONTINUE
4170  FORMAT(I4,2X,A4,F5.0,3X,13F8.2)
4180  CONTINUE
      NX=L+(NCOL-1)*NW
      NY=L+NW
C--MAIN PRINT AND CALCULATION LOOP
      DO 5550 NZ=NY,K,NW
      N=N+1
      NB=NZ-NW
      NB=MIN0(NB,NX)
      NC=0
C--CHECK IF E.S.D.'S ARE REQUIRED
      IF(IESD)4250,4200,4200
C--INSERT THE SECOND ATOM  -  ATOM (B)
4200  CONTINUE
      JC=JB
      CALL XFPCES( ISTORE(NZ+12), JC, NWS, IPART(2) )
      CALL XMVCSP(NZ,JK,NWA)
C--STARTING FROM THE FIRST ATOM OF THE CURRENT LIST ,
C  CALCULATE ALL THE ANGLES TO THE PRESENT ATOM
C
C  ATOM A IS AT M5A
C  ATOM B IS AT ISTORE(NZ)
C  ATOM C IS AT ISTORE(NA)
C
4250  CONTINUE
      DO 5350 NA=L,NB,NW
C--CHECK THAT A AND B ARE NOT THE SAME ATOM
      IF(STORE(NZ+10)-CHECK)4300,4300,4350
C--EITHER B OR C DUPLICATES A  -  ANGLE IS SET TO 0.0
4300  CONTINUE
      APD(NC+1)=0.
      APD(NC+2)=0.
      NC=NC+3-JU
      GOTO 5350
C--CHECK THAT A AND C ARE NOT THE SAME ATOM
4350  CONTINUE
      IF(STORE(NA+10)-CHECK)4300,4300,4400
C--COMPUTE THE COORDINATES OF 'E'  -  AE BISECTS THE ANGLE AT A.
4400  CONTINUE
      F=STORE(NZ+10)/STORE(NA+10)
      B(1)=0.5*(STORE(M5A+4)+STORE(NZ+7)+F*(STORE(NA+7)-STORE(M5A+4)))
      B(2)=0.5*(STORE(M5A+5)+STORE(NZ+8)+F*(STORE(NA+8)-STORE(M5A+5)))
      B(3)=0.5*(STORE(M5A+6)+STORE(NZ+9)+F*(STORE(NA+9)-STORE(M5A+6)))
C--SET L1 AS THE DISTANCES FROM A TO B
      DIST(1)=STORE(NZ+10)
      DISTSQ(1)=STORE(NZ+11)
C--COMPUTE 'DX', 'DY' AND 'DZ' FOR THE BOND B TO E.
      CALL XSUBTR(STORE(NZ+7),B(1),BPD(7),3)
C--CALCULATE THE DISTANCE BETWEEN THE TWO NON-PIVOT ATOMS
      DISTSQ(2)=XDSTN2(STORE(NZ+7),B(1))
C--CALCULATE THE DISTANCE FROM 'A' TO 'E'
      DISTSQ(3)=XDSTN2(STORE(M5A+4),B(1))
C--COMPUTE THE DISTANCES
      DO 4450 NF=2,3
      DIST(NF)=SQRT(DISTSQ(NF))
4450  CONTINUE
C--CHECK IF THE POINTS 'B' AND 'E' ARE COINCIDENT
      IF(DIST(2)-CHECK)4300,4300,4500
C--CALCULATE THE OUTPUT ANGLE
4500  CONTINUE
      F=DIST(2)/DIST(1)
C--CHECK IF THE SIN OR COS SHOULD BE USED
      IF(F-SIN45)4550,4550,4600
4550  CONTINUE
      ANGLE(2)=ASIN(F)
      GOTO 4650
C--USE THE COS
4600  CONTINUE
      ANGLE(2)=ACOS(DIST(3)/DIST(1))
4650  CONTINUE
      NC=NC+1
      APD(NC)=ANGLE(2)*G
C--CHECK IF THE E.S.D. IS TO BE CALCULATED
      IF(IESD) 5345,4700,4700
C--CALCULATE THE E.S.D.
4700  CONTINUE
      NF=JC
C--ADD THE THIRD ATOM (C) INTO THE STACK
      CALL XFPCES( ISTORE(NA+12), NF, NWS, IPART(3) )
C--CALCULATE THE V/CV MATRIX FOR THE POSITIONAL ERRORS
      CALL XCOVAR( JA, NWA, NWS, JD, JE, IPART, 3)
C--MOVE THE V/CV MATRIX TO THE FINAL AREA, WHICH CONTAIN THE CELL ERRORS
      CALL XMVCD(JD,NWA,JQ,NWAT)
C--ADD THE SYMMETRY MATRIX OF THE LAST ATOM
      CALL XMVCSP(NA,JL,NWA)
C--APPLY THE SYMMETRY INFORMATION
      CALL XMD3B(JE,JJ,JD,3,NWA)
C--CALCULATE 'DX' ETC. FOR BOND 1 (A - B)
      CALL XSUBTR(STORE(M5A+4),STORE(NZ+7),BPD(4),3)
C--CALCULATE 'DX' ETC. FOR BOND 3 (C - A)
      CALL XSUBTR(STORE(NA+7),STORE(M5A+4),BPD(10),3)
C--SET UP THE MATRIX TO TRANFORM FROM V/CV MATRIX OF 'ABC' TO 'ABE'
      CALL XZEROF(STORE(JE),54)
C--ADD THE TRANSFORMATIONS FOR A AND B.
      STORE(JE)=1.
      STORE(JE+10)=1.
      STORE(JE+20)=1.
      STORE(JE+30)=1.
      STORE(JE+40)=1.
      STORE(JE+50)=1.
C--CALCULATE THE DERIVATIVES WITH RESPECT TO 'AB' AND 'CA'
      CALL XMLTMM(STORE(L1M1),BPD(4),STORE(JF),3,3,1)
      CALL XMLTMM(STORE(L1M1),BPD(10),STORE(JF+3),3,3,1)
C--FINISH OFF THE DERIVATIVES BY DIVIDING BY THE BOND LENGTHS
      NF=JF+2
      DO 4750 NE=JF,NF
      STORE(NE)=STORE(NE)/STORE(NZ+10)
      STORE(NE+3)=STORE(NE+3)/STORE(NA+10)
4750  CONTINUE
      NL=JE+54
C--COMPUTE AB/AC
      F=0.5*STORE(NZ+10)/STORE(NA+10)
C--LOOP OVER THE COORDINATES OF E  -  'X' FIRST ETC..
      DO 4850 NF=1,3
      B(1)=0.5*BPD(NF+9)/STORE(NA+11)
      B(2)=0.5*BPD(NF+9)/STORE(NA+10)
      B(3)=0.5*BPD(NF+9)*STORE(NZ+10)/STORE(NA+11)
      NG=JF
C--LOOP OVER THE COORDINATES OF A, B AND C
      DO 4800 NE=1,3
C--DERIVATIVES FOR A
      STORE(NL)=B(1)*(STORE(NG)*STORE(NA+10)+STORE(NZ+10)*STORE(NG+3))
C--DERIVATIVES FOR B
      STORE(NL+3)=-B(2)*STORE(NG)
C--DERIVATIVES FOR C
      STORE(NL+6)=-B(3)*STORE(NG+3)
      NG=NG+1
      NL=NL+1
4800  CONTINUE
C--ADD IN THE ODD TERMS FOR X W.R.T. X, ETC..
      NL=NL-4+NF
      STORE(NL)=STORE(NL)+0.5-F
      STORE(NL+3)=STORE(NL+3)+0.5
      STORE(NL+6)=STORE(NL+6)+F
      NL=NL+10-NF
4850  CONTINUE
C--APPLY THE TRANSFORMATION AT 'JE' TO THE TRANSFORMATION MATRIX AT 'JD'
      L1=JE
      M1=JF
      DO 4950 I1=1,NWA
      K1=JD
      DO 4900 J1=1,3
      STORE(M1)=STORE(L1)*STORE(K1)+STORE(L1+1)*STORE(K1+9)+STORE(L1+2)
     2 *STORE(K1+18)
      STORE(M1+3)=STORE(L1+3)*STORE(K1+30)+STORE(L1+4)*STORE(K1+39)
     2 +STORE(L1+5)*STORE(K1+48)
      STORE(M1+6)=STORE(L1+6)*STORE(K1+60)+STORE(L1+7)*STORE(K1+69)
     2 +STORE(L1+8)*STORE(K1+78)
      M1=M1+1
      K1=K1+1
4900  CONTINUE
      L1=L1+NWA
      M1=M1+6
4950  CONTINUE
C--COMPUTE 'DX', ETC., FOR THE BOND E - A.
      BPD(10)=-BPD(4)-BPD(7)
      BPD(11)=-BPD(5)-BPD(8)
      BPD(12)=-BPD(6)-BPD(9)
C
C--BEGIN TO COMPUTE THE V/CV MATRIX FOR THREE BONDS  -  AB, BE AND EA.
      I1=JE
      NF=JD
C--CLEAR THE AREA TO ZERO
      DO 5000 NE=JD,NO
      STORE(NE)=0.
5000  CONTINUE
C--ADD IN THE TERMS FOR EACH OF THE THREE BONDS IN TURN
      DO 5150 NE=1,3
      ND=NE*3
C--MOVE 'DX' ETC.
      CALL XMOVE(BPD(ND+1),B(1),3)
      F=1./DIST(NE)
C--APPLY THE CELL ERRORS IF NEC.
      IF(ICELL)5100,5050,5050
5050  CONTINUE
      CALL XAPP31(I1)
      I1=I1+6
5100  CONTINUE
      J1=NF
      NF=NF+IS(ND-2)
      CALL XMULTR(B(1),F,B(1),3)
C--CALCULATE THE CONTRIBUTIONS FOR THE FIRST ATOM
      CALL XMLTMM(STORE(L1M1),B(1),STORE(NF),3,3,1)
C--CALCULATE THE CONTRIBUTIONS FOR THE SECOND ATOM
      NG=NF
      NF=NF+IS(ND-1)
      CALL XNEGTR(STORE(NG),STORE(NF),3)
      NF=NF+IS(ND)
C--CALCULATE THE FINAL TRANSFORMATION MATRIX AND STORE IT AT JE
      CALL XMLTTT(STORE(J1),STORE(JF),STORE(I1),1,NWA,NWA)
      I1=I1+NWA
5150  CONTINUE
C--MULTIPLY THE DERIVATIVES ONTO THE V/CV MATRIX
      CALL XMLTMM(STORE(JP),STORE(JE),STORE(JD),NWAT,NWAT,3)
      CALL XMLTTM(STORE(JE),STORE(JD),STORE(JF),3,NWAT,3)
C--CHECK IF THE SIN OR COS HAS BEEN USED
      IF(APD(NC)-90.)5200,5200,5250
C--THE SIN WAS USED  -  ANGLE IS LESS THAN 90
5200  CONTINUE
      BPD(6)=COS(ANGLE(2))
C--CALCULATE THE DERIVATIVES FOR AB AND BE.
      BPD(4)=-2.*DIST(2)/(DISTSQ(1)*BPD(6))
      BPD(5)=2./(DIST(1)*BPD(6))
      BPD(6)=0.
      GOTO 5300
C--THE COS WAS USED  -  ANGLE IS GREATER THAN 90
5250  CONTINUE
      BPD(5)=SIN(ANGLE(2))
C--CALCULATE THE DERIVATIVES FOR AB AND AE
      BPD(4)=2.*DIST(3)/(DISTSQ(1)*BPD(5))
      BPD(6)=-2./(DIST(1)*BPD(5))
      BPD(5)=0.
C--CALCULATE THE VARIANCE OF THE ANGLE
5300  CONTINUE
      NC=NC+1
      CALL XMLTMM(STORE(JF),BPD(4),STORE(JD),3,3,1)
      CALL XMLTTM(BPD(4),STORE(JD),APD(NC),1,3,1)
C -- CALCULATE E.S.D. FROM THE VARIANCE, PRODUCING NEGATIVE E.S.D.'S
C    FROM 'NEGATIVE VARIANCES'
      APD(NC) = GS * XDSESD ( APD(NC) , STORE(JP) , NWAT )
5345  CONTINUE
      IZZ = ISTORE(NZ)
      IXX = ISTORE(NA)
      TERM = APD(NC-1-IESD)
      IF (IESD .LT. 0) THEN
        ESD = 0.0
      ELSE
        ESD = APD(NC)
      ENDIF
C----- STRIP AND PACK ATOM NAMES
      CALL CATSTR (STORE(IXX), STORE(IXX+1), ISTORE(NA+2),
     1 ISTORE(NA+3), ISTORE(NA+4), ISTORE(NA+5), ISTORE(NA+6),
     2 CATOM1, LATOM1)
      CALL CATSTR (STORE(M5A), STORE(M5A+1),
     1 1,1,0,0,0, CATOM2, LATOM2)
      CALL CATSTR (STORE(IZZ), STORE(IZZ+1), ISTORE(NZ+2),
     1 ISTORE(NZ+3), ISTORE(NZ+4), ISTORE(NZ+5), ISTORE(NZ+6),
     2 CATOM3, LATOM3)
      IF (IPUNCH .GE. 1) THEN
C--- NOTE THAT TWO ITEMS ARE OUTPUT EVEN WHEN ESDS ARE NOT COMPUTED
        WRITE(MTE) 'A',TERM,ESD,
     *  STORE(IXX), STORE(IXX+1), ISTORE(NA+2),
     1  ISTORE(NA+3), ISTORE(NA+4), ISTORE(NA+5), ISTORE(NA+6),
C--- PIVOT
     2  STORE(M5A), STORE(M5A+1), 1,1,0,0,0,
C--- ATOM 3
     3  STORE(IZZ), STORE(IZZ+1), ISTORE(NZ+2),
     4  ISTORE(NZ+3), ISTORE(NZ+4), ISTORE(NZ+5), ISTORE(NZ+6),
C--- DUMMY
     5  IB, ZERO, 1,1,0,0,0
C
      ELSE IF (IPUNCH .EQ. 0) THEN
        NANG = NINT (TERM)
      WRITE(NCPU, '(''ANGL '',I3,'',1= '',A,'' to '',A,'' to '',A)')
     1  NANG, CATOM1(1:LATOM1), CATOM2(1:LATOM2), CATOM3(1:LATOM3)
      ENDIF
      IF (IDSPDA .GE. 2 ) THEN
        CBUFF = ' '
        NANG = MAX((12 - LATOM2) /2, 1)
        CBUFF(NANG:NANG+LATOM2-1) = CATOM2(1:LATOM2)
        IF( ESD .GE. ZERO) THEN
          WRITE(CMON,5348)
     1 CBLANK(1: 21-LATOM1), CATOM1(1:LATOM1), CBUFF(1:12),
     2 CATOM3(1:21), TERM, ESD
        ELSE
          WRITE(CMON,5348)
     1 CBLANK(1: 21-LATOM1), CATOM1(1:LATOM1), CBUFF(1:12),
     2 CATOM3(1:21), TERM
        ENDIF
        CALL XPRVDU(NCVDU, 1,0)
        WRITE(NCAWU, '(A)') CMON( 1)(:)
      ENDIF
5348    FORMAT (1X,A, A, ' to ', A, ' to ', A,  F7.2, F5.2)
C
C
5350  CONTINUE
C--START OF THE PRINT LOOP
      ND=ISTORE(NZ)
      NE=NZ+4
C--CHECK IF THE E.S.D.'S ARE TO BE PRINTED
      IF(IESD)5400,5450,5450
C--NO ERRORS TO BE PRINTED
5400  CONTINUE
      IF (LEVEL) 5550, 5410, 5440
5410  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4170)N,STORE(ND),STORE(ND+1),
     1 (APD(NF),NF=1,NC)
      ENDIF
      GOTO 5550
5440  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4150)N,STORE(ND),STORE(ND+1),(ISTORE(NF+2),NF=NZ,NE),
     2 (APD(NF),NF=1,NC)
      ENDIF
      GOTO 5550
C--PRINT WITH ERRORS
5450  CONTINUE
      IF (LEVEL) 5550, 5510, 5540
5510  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,5520)N,STORE(ND),STORE(ND+1),
     1 (APD(NF),NF=1,NC)
      ENDIF
5520  FORMAT(I4,2X,A4,F5.0,3X,7(F8.2,F6.2))
      GOTO 5550
5540  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,5500)N,STORE(ND),STORE(ND+1),(ISTORE(NF+2),NF=NZ,NE),
     2 (APD(NF),NF=1,NC)
      ENDIF
5500  FORMAT(I4,3X,A4,F8.0,4X,I3,I4,3I5,3X,5(F8.2,F6.2))
5550  CONTINUE
      DO 5600 NA=1,NC
      IAPD(NA)=NA+M-1
5600  CONTINUE
C--CHECK FOR E.S.D.'S
      IF(IESD)5650,5750,5750
C--NO E.S.D.'S
5650  CONTINUE
      IF (LEVEL) 5850, 5840, 5660
5660  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,5700)JAKEY,(IAPD(NA),NA=1,NC)
      ENDIF
5700  FORMAT(/1X,A4,41X,9I8)
      GOTO 5850
C--E.S.D.'S HAVE BEEN PRINTED
5750  CONTINUE
      NC=NC/2
      IF (LEVEL) 5850, 5840, 5760
5760  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,5800)JAKEY,(IAPD(NA),NA=1,NC)
      ENDIF
5800  FORMAT(/1X,A4,41X,I9,4I14)
      GOTO 5850
5840  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,5500)
      ENDIF
5850  CONTINUE
      M=M+NCOL
      L=L+NCOL*NW
      GOTO 3800
5900  CONTINUE
      M5A=M5A+MD5A
      MFNVCA = MFNVCA + MDFNVC
      IF(M12A)6000,6000,5950
5950  CONTINUE
      M12A=ISTORE(M12A)
6000  CONTINUE
C
C
C
C --                   **** MAIN LOOP COMPLETED ****
C
C
C
C -- WRITE PUBLICATION LISTING
      IF (IPUNCH .EQ. 0) THEN
C----- FINISH RESTRAINT LIST
        CALL XPCHUS
      ELSE IF (IPUNCH .EQ. 1) THEN
        CALL XPRTDA(3,IESD,NCPU)
      ELSE IF (IPUNCH .EQ. 2) THEN
C----- CIF
        CALL XPRTDA(13,IESD,NCPU)
      ENDIF
C
C--TERMINATION MESSAGES
6050  CONTINUE
      CALL XOPMSG ( IOPDIS, IOPEND, IVERSN )
      CALL XTIME2(2)
      RETURN
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPDIS , IOPABN , 0 )
      GO TO 6050
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPDIS , IOPCMI , 0 )
      GO TO 9900
9920  CONTINUE
C -- INSUFF. CORE
      CALL XOPMSG ( IOPDIS , IOPSPC , 0 )
      WRITE(NCAWU,9921) K
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,9921)  K
      ENDIF
9921  FORMAT(1X, I10, ' Contacts to current atom.' )
      GO TO 9900
C
      END
C
C
C
C
C
C
CODE FOR XDSSEL
      SUBROUTINE XDSSEL ( IFUNC , MDFUNC , NFUNC , IMARK , IDEFLT )
C
C
C      IFUNC(MDFUNC,NFUNC)  FUNCTION VECTOR. IFUNC(1,*) IS MARKED WITH
C                           THE FLAG TO INDICATE WHETHER ATOM IS TO BE
C                           INCLUDED
C      IMARK       MARK TO PLACE IN FUNCTION VECTOR FOR ATOMS INDICATED
C                  BY INPUT
C      IDEFLT      MARK TO PLACE ON UNSPECIFIED ATOMS. SET BY THIS
C                  ROUTINE IF APPROPRIATE. ( IN GENERAL, IN SOME ATOMS
C                  ARE INCLUDED BY THIS ROUTINE, THE REMAINDER WILL BE
C                  ASSUMED TO BE EXCLUDED, AND VICE VERSA )
C                    INITIAL VALUE     IMARK       FINAL VALUE
C                    0                 <ANY>       - 'IMARK'
C                   -1                 <ANY>       -1
C                    1                 <ANY>       - 'IMARK'
C
C
      DIMENSION IFUNC(MDFUNC,NFUNC)
C
      LOGICAL SETTHS
C
\ISTORE
C
\STORE
\XLST05
\XLEXIC
\XUNITS
\XSSVAL
\XERVAL
C
\QSTORE
C
C
C -- SEARCH INPUT FOR TYPE/ATOM SPECIFIERS
C
1000  CONTINUE
C
      ISAVME = ME
      ISAVMF = MF
C
      IF ( ME .LE. 0 ) GO TO 9000
C
      IF ( ISTORE(MF) .GE. 0 ) GO TO 9910
C
C -- CHECK FOR A ATOM HEADER
C
      ITYPE = ISTORE(MF+2)
      ME = ME - 1
      MF = MF + LK2
C
      IOPER = 1
      LSCAN = L5
      MSCAN = L5 + ( N5 - 1 ) * MD5
C
C -- TRY FOR '(', INDICATING AN ATOM SPECIFICATION
      IF ( KOP(6) .EQ. 0 ) THEN
        ME = ISAVME
        MF = ISAVMF
C
      IN = 0
        ISTAT = KATOMU ( IN )
        IF ( ISTAT .LE. 0 ) GO TO 9900
        IOPER = 2
        LSCAN = M5A
        MSCAN = LSCAN + ( N5A - 1 ) * MD5A
      ENDIF
C
      MFUNC = 1 + ( LSCAN - L5 ) / MD5
      DO 1100 J = LSCAN , MSCAN , MD5
        SETTHS = .FALSE.
C
        IF ( IOPER .EQ. 1 ) THEN
          SETTHS = ( ISTORE(J) .EQ. ITYPE )
        ELSE
          SETTHS = .TRUE.
        ENDIF
C
        IF ( SETTHS ) THEN
          IFUNC(1,MFUNC) = IMARK
        ENDIF
C
        MFUNC = MFUNC + 1
1100  CONTINUE
C
C -- CHECK FOR ',' BETWEEN ARGUMENTS
      ISTAT = KOP ( 8 )
C
      GO TO 1000
C
C
9000  CONTINUE
C
C -- SET ASSUMED MARK FOR REMAINING ATOMS
      IF ( IDEFLT .GE. 0 ) IDEFLT = - IMARK
C
      RETURN
C
C
9900  CONTINUE
      RETURN
9910  CONTINUE
      CALL XILOPD ( ISTORE(MF+1) )
      CALL XERHND ( IERWRN )
      GO TO 9900
C
      END
C
C
C
C
C
CODE FOR XDSESD
      FUNCTION XDSESD ( VARIAN , VCVMAT , NVCV )
C
C -- CALCULATE AN E.S.D. FROM A VARIANCE.
C
C    E.S.D.                  ACTION
C    ------                  ------
C    LESS THEN 'TOLER'       A WARNING MESSAGE AND THE VARIANCE-
C                            COVARIENCE MATRIX ARE PRINTED
C    'TOLER' TO 'ZERO'       THE E.S.D. IS SET TO 0.0. NO MESSAGE IS
C                            PRODUCED
C    GREATER THAN 'ZERO'     E.S.D. OK
C
C      'TOLER' IS A SMALL NEGATIVE REAL NUMBER WHICH GIVES A LIMIT TO
C      THE RANGE OF VALUES ASSUMED TO BE ROUNDING ERRORS ON '0.0'
C
      DIMENSION VCVMAT(NVCV,NVCV)
C
\XUNITS
\XSSVAL
\XCHARS
\XCONST
\XERVAL
\XIOBUF
C
      DATA TOLER / -1.0E-5 /
C
      XDSESD = SIGN (  SQRT ( ABS ( VARIAN ) )  ,  VARIAN )
C
      IF ( XDSESD .LT. TOLER ) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE ( NCWU , 1005 ) XDSESD , IB
      ENDIF
        WRITE ( NCAWU , 1005 ) XDSESD
        WRITE ( CMON , 1005 ) XDSESD
        CALL XPRVDU(NCVDU, 1,0)
1005    FORMAT ( 1X , 'Negative e.s.d. output ' , F14.10 , A1 , / ,
     2 1X , 'Variance-covariance matrix follows' )
C
        DO 1100 I = 1 , NVCV
      IF (ISSPRT .EQ. 0) THEN
          WRITE ( NCWU , 1015 ) ( VCVMAT(J,I) , J = 1 , NVCV )
      ENDIF
1015      FORMAT ( 1X , 1P , 3 ( 3E13.4 , 5X ) )
1100    CONTINUE
C
        CALL  XERHND ( IERWRN )
C
      ELSE IF ( XDSESD .LT. ZERO ) THEN
        XDSESD = 0.0
      ENDIF
C
      RETURN
      END
C
C
C
C
C
C
CODE FOR XCOND
      SUBROUTINE XCOND
C--CONDENSE A LIST 5 OR LIST 10 AND ASSEMBLE MOLECULAR FRAGMENTS
C
C
C  IACT    OPERATION - SET IN COMMAND FILE
C          -1 FOR #PEAKS
C           0 FOR #PEAKS
C           1 FOR #REGROUP
C
C  ITYPE   TYPE OF ATOMS TO BE MODIFIED
C           -1 FOR ALL
C            0 FOR PEAKS ONLY
C
C  LN1    INPUT LIST TYPE
C  LN2    OUTPUT LIST TYPE
C  D1     ELIMINATE ATOMS OR PEAKS CLOSER THAN 'D1' TO THE CURRENT ATOM
C  D2     CONTACT DISTANCE FOR ATOM MOVING AND FRAGMENT ASSEMBLY
C  NATOM  THE MAXIMUM NUMBER OF ATOMS THAT THE FINAL LIST CAN CONTAIN
C  ILIST   THE LIST CONTROL FLAG :
C
C          -1  DO NOT LIST THE MOVED OR DELETED ATOMS.
C           0  LIST THE MOVED OR DELETED ATOMS.
C
C  D3      THE MAXIMUM DISTANCE THAT IS ALLOWED WHEN FOURIER TYPE
C          COORDINATE CORRECTIONS ARE TO BE MADE.
C  AMULT   THE FOURIER TYPE CORRECTION MULTIPLIER.
C  IREF    THE FOURIER TYPE CORRECTION CONTROL FLAG :
C
C          -1  MAKE NO CORRECTIONS.
C           0  MAKE ANY SUITABLE CORRECTIONS.
C
C--THE COMMON BLOCK /XWORKA/ IS USED :
C
C  JB  ADDRESS OF THE TEMP. STORAGE FOR ATOMS
C  JC  ADDRESS OF THE ATOM HEADER FOR MOVING ATOMS FROM 'JB'
C  JD  WORK SPACE FOR 'KATOMS'
C  JE  START OF DISTANCE STACK.
C  JF  NUMBER OF ATOMS LEFT TO SCAN
C  JG  CURRENT LAST ENTRY IN LIST 5 OR 10
C  JH  MD5-1
C  JI  MD5+MD5
C  JK  ZERO FOR THE FIRST OPERATION FOR THE CURRENT PIVOT ATOM,
C      ELSE NON-ZERO.
C  JL  ZERO FOR THE FIRST OPERATION FOR THE CURRENT CALL,
C      ELSE NON-ZERO.
C
C--
\ISTORE
C
      DIMENSION IAPD(13), PROCS(15)
      DIMENSION JPEAK(1)
C
      CHARACTER*8 CDELET , CMOVED , CCORRE
C
\STORE
\XDSTNC
C
      COMMON /XPROCC/DISTS(4),LN1,LN2,ITYPE,NATOM,ILIST,ISEQ,D3,AMULT,
     2 IACT, ISYMOD, ITRANS
      COMMON /XDISTW/A,BB,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
\XWORKA
\XPDS
\XLISTI
\XCONST
\XUNITS
\XSSVAL
\XLST01
\XLST02
\XLST05
\XLST12
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
C
      EQUIVALENCE (DISTS(1),PROCS(1))
      EQUIVALENCE (D1,DISTS(2)),(D2,DISTS(4))
      EQUIVALENCE (APD(1),IAPD(1))
C
C
      DATA IDIMN /15/
C
      DATA IVERSN / 303 /
C
      DATA CDELET / 'Deleted ' / , CMOVED / ' Moved  ' /
      DATA CCORRE / 'Corrects' /
      DATA TOLER / .2 /
C
#HOL      DATA JPEAK(1) /'Q   '/
&HOL      DATA JPEAK(1) /4HQ   /
C
C--CALLL THE TIMING FUNCTION
      CALL XTIME1(2)
C -- READ THE REST OF THE INSTRUCTIONS AND CHECK FOR ERRORS
      IF (   KRDDPV ( PROCS(1) , IDIMN )    .LT.   0   ) GO TO 9910
C--LOAD A FEW PIECES OF DATA
      AT=DISTS(1)
      AC=AMAX1(DISTS(2),D3)
      BT=DISTS(3)
      BC=DISTS(4)
      CALL XDIST2
C
C----- REDUCE SYMMETRY IF NECESSARY
      CALL KSYMOD (ISYMOD, IC, IL, N2P, L2C, L2, N2, MD2)
C--LOAD THE INPUT LIST
      LN1=KTYP05(LN1)
      CALL XLDR05(LN1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--FIND THE OUTPUT LIST TYPE
      LN2=KTYP05(LN2)
C----- FIDDLE THINGS FOR 'AVERAGE'. CHECKED VALUES OF D1 AND D3 ARE
C      IN COMMANDS.SRC
      IF (ITYPE .EQ. 1) THEN
            IF (ABS(D1-0.5) .LE. ZERO) D1 = VALUE
            IF (ABS(D3) .LE. ZERO) D3 = .5
      ENDIF
C--CHECK IF FOURIER TYPE REFINEMENT IS REQUIRED
      IREF=-1
C--CHECK THE CONTACT DISTANCE GIVEN
      IF(D3-ZERO)1200,1200,1100
C--FOURIER REFINEMENT IS REQUIRED
1100  CONTINUE
      IREF=0
C--CHECK IF A MULTIPLIER HAS BEEN GIVEN
      IF (AMULT + 99.) 1150, 1150, 1200
C--ASSIGN THE DEFAULT MULTIPLIER
1150  CONTINUE
      AMULT=FLOAT(2-IC)
C--SET A FEW CONSTANTS
1200  CONTINUE
      JT=12
      L12=-1
      M12=-1
C--SET UP A FEW STACK CONSTANTS
      JB=NFL
      JC=JB+MD5
      JD=JC+20
      JE=JD+30
C--CHECK THE STORE AREA
      IF ( JE - LFL ) 1350 , 9920 , 9920
C--SET UP A FEW CONSTANTS FOR THE PASSAGE THROUGH THE ATOMS
1350  CONTINUE
      M5A=L5
      JF=N5
      JG=L5+(N5-1)*MD5
      JL=0
      SEQ=1.0
C
C--SET UP THE CONTROL VARIABLES FOR THIS PASS AND CHECK IF ANY ATOMS ARE
1400  CONTINUE
      M5=M5A+MD5
      JF=JF-1
      IF(JF)3400,3400,1450
C--CHECK THE REMAINING ATOMS WITH THE CURRENT PIVOT
1450  CONTINUE
      NFL=JE
      JJ=M5
C -- CHECK SPACE AVAILABLE
      IF (KDIST1(JF, J, JT, 0, TOLER, ITRANS)) 9920, 3350, 1550
C--REMOVE DUPLICATE ENTRIES FOR EACH ATOM, LEAVING THE MIN. CONTACT DIST
1550  CONTINUE
      NFL=J
      I=JE
      JS=JE
C--CHECK IF THERE ARE ANY MORE ATOMS IN THE STACK
1600  CONTINUE
      IF(I-J)1650,2000,2000
C--BEGIN THE SEARCH FOR ALL CONTACTS TO THIS CURRENT ATOM
1650  CONTINUE
      E=STORE(I+10)
      K=I
C--CHECK IF THERE ARE ANY MORE ATOMS IN THE STACK
1700  CONTINUE
      IF(I-J)1750,1950,1950
C--CHECK IF THIS IS THE SAME ATOM
1750  CONTINUE
      IF(ISTORE(I)-ISTORE(K))1950,1800,1950
C--CHECK THE DISTANCE
1800  CONTINUE
      IF(STORE(I+10)-E)1850,1900,1900
1850  CONTINUE
      E=STORE(I+10)
      K=I
C--MOVE TO THE NEXT ATOM
1900  CONTINUE
      I=I+JT
      GOTO 1700
C--MOVE THE STACK INFORMATION
1950  CONTINUE
      CALL XMOVE(STORE(K),STORE(JS),JT)
      K=K+JT
      JS=JS+JT
      GOTO 1600
C--CHECK IF ANY ATOMS HAVE BEEN FOUND
2000  CONTINUE
      IF(JS-JE)3350,3350,2050
C--ATOMS FOUND  -  CHECK FOR ATOMS TO BE DELETED
2050  CONTINUE
      JK=0
      JS=JS-JT
      IPOINT=NOWT
      IF (IACT) 2100, 2100, 3000
C-----  CONDENSING A PEAKS OR ATOM LIST
C--CHECK IF FOURIER TYPE REFINEMENT IS BEING DONE
2100  CONTINUE
      IF(IREF)2450,2150,2150
C--CHECK THAT THE PIVOT IS AN ATOM AND NOT A PEAK
2150  CONTINUE
      IF(KCOMP(1,JPEAK(1),STORE(M5A),1,MD5A))2200,2200,2450
C--NOT A PEAK  -  SEARCH FOR AN ACCEPTABLE CONTACT
2200  CONTINUE
      E=D3
C--LOOP OVER ALL THE ATOMS
      DO 2400 I=JE,JS,JT
      K=ISTORE(I)
C----- ONLY INSIST THE CONTACT IS A PEAK DURING CONDENSING OR
C      FOURIER REFINEMENT
      IF (ITYPE .NE. 1) THEN
       IF(KCOMP(1,JPEAK(1),STORE(K),1,MD5A))2400,2400,2250
      ENDIF
C--CHECK THAT THE TWO HAVE THE SAME OCCUPANCY
2250  CONTINUE
      IF(ABS(XOCC(K)-XOCC(M5A))-ZERO)2300,2300,2400
C--COMPARE THE CURRENT MINIMUM DISTANCE
2300  CONTINUE
      IF(STORE(I+10)-E)2350,2400,2400
C--DISTANCE IS OKAY TOO  -  ALTER THE POINTERS
2350  CONTINUE
      E=STORE(I+10)
      IPOINT=I
2400  CONTINUE
C--ELIMINATE UNWANTED ATOMS
2450  CONTINUE
C----- SAVE THE POINTERS IN CASE WE NEED TO REGROUP ATOMS
      JSS = JE
      JJS = J
      DO 2950 I=JE,JS,JT
C----- GET THE ADDRESS IN LIST 10
      KKKI = ISTORE(I)
C--UPDATE THE ATOM ADDRESS
      ISTORE(I)=ISTORE(I)+JK
C--CHECK IF THIS PEAK SHOULD BE USED TO CORRECT THE COORDS.
      IF(IPOINT-I)2600,2500,2600
C--CORRECTING PEAK  -  MOVE ALONG THE COORDINATES
2500  CONTINUE
      K=I
      L=M5A
      DO 2550 M=1,3
      IF (ITYPE .EQ. 1) THEN
C       'AVERAGE'
        STORE(L+4) = 0.5 * (STORE(L+4) + STORE(K+7))
      ELSE
C       'REFINE'
        STORE(L+4)=STORE(L+4)+AMULT*(STORE(K+7)-STORE(L+4))
      ENDIF
      K=K+1
      L=L+1
2550  CONTINUE
C---- REPLACE ATOM HEIGHT BY CORRESPONDING PEAK HEIGHT
      IF( (KCOMP(1,JPEAK(1),STORE(KKKI),1,MD5A) .GE. 1) .AND.
     1 (MD5A .GE. 14) ) STORE(M5A+13) = STORE(KKKI+13)
C--PRINT THE DETAILS IF NECESSARY
      CALL XPRTCD ( I , J , CCORRE )
      GOTO 2700
C--CHECK IF THIS ATOM SHOULD BE DELETED
2600  CONTINUE
      IF( STORE(I+10) - D1) 2650,2650, 2900
C--CHECK FOR LISTING WITH THIS CALL
2650  CONTINUE
      IF ( ITYPE .EQ. 0) THEN
C----- ONLY DELETE PEAKS.
        K = ISTORE(I)
        IF ( KCOMP(1, JPEAK(1), STORE(K), 1, MD5A) .LE. 0) GOTO 2900
      ENDIF
      CALL XPRTCD ( I , J , CDELET )
C--CHECK IF THIS ATOM IS AT THE BOTTOM
2700  CONTINUE
      IF(J-JG)2750,2850,2850
C--MOVE THE STACK UP INTO THE SLOT FOR THIS ATOM
2750  CONTINUE
      K=J+MD5
      DO 2800 L=K,JG,MD5
      CALL XMOVE(STORE(L),STORE(J),MD5)
      J=J+MD5
2800  CONTINUE
      JK=JK-MD5
C--UPDATE THE VARIOUS POINTERS
2850  CONTINUE
      JF=JF-1
      JG=JG-MD5
      N5=N5-1
C--MARK THE ATOM AS DELETED IN THE STACK
      STORE(I+10)=-1.
2900  CONTINUE
      JSS = JSS + JT
2950  CONTINUE
C----- RESTORE POINTERS
      JS = JSS - JT
      J  = JJS
      IF (IACT) 3350, 3000, 3000
C
C--BEGIN MOVING NON-DELETED ATOMS
3000  CONTINUE
      NFL=JD
C--MAIN ATOM MOVING LOOP
      DO 3300 I=JE,JS,JT
      IF (STORE(I+10) .LE. -1.) GOTO 3300
      IF(STORE(I+10)-D2)3050,3050,3300
C--CHECK IF WE ARE PRINTING THE MOVED ATOMS
3050  CONTINUE
      CALL XPRTCD ( I , J , CMOVED )
      JK=-1
C--SHIFT THE SYMMETRY OPERATORS TO THE HEADER PLACE
      CALL XMOVE(STORE(I+2),STORE(JC+7),5)
C--SHIFT THE ATOM TO TEMP. STORAGE
      CALL XMOVE(STORE(J),STORE(JB),MD5)
C--MOVE THE REST OF THE ATOMS DOWN TO MAKE ROOM FOR THIS ATOM AT THE TOP
      K=J
      L=J-MD5
C--CHECK IF WE HAVE REACHED THE TOP
3150  CONTINUE
      IF(L-JJ)3250,3200,3200
C--MOVE THE NEXT ATOM DOWN
3200  CONTINUE
      CALL XMOVE(STORE(L),STORE(K),MD5)
      K=K-MD5
      L=L-MD5
      GOTO 3150
C--MOVE THE NEW ATOM FROM TEMP. STORAGE TO THE TOP OF THE STACK
3250  CONTINUE
      JJ=KATOMS(JC,JB,JJ)
3300  CONTINUE
C--UPDATE FOR THE NEXT PIVOT ATOM
3350  CONTINUE
      IF(ISEQ)3370,3360,3360
C--CHANGE THE SERIAL NUMBER
3360  CONTINUE
      STORE(M5A+1)=SEQ
      SEQ=SEQ+1.0
C--UPDATE THE POINTER
3370  CONTINUE
      M5A=M5A+MD5
      GOTO 1400
C
C--END OF THE CONDENSING LOOP  -  OUTPUT THE NEW LIST
3400  CONTINUE
C----- WE MUST ASLO CHECH THE LAST ATOM
      IF(ISEQ) 3430,3420,3420
3420  CONTINUE
C----- UPDATE SERIAL NUMBER OF LAST ATOM
      STORE(M5A+1)=SEQ
3430  CONTINUE
      IF(N5 .GT. NATOM) THEN
C--THE LIST MUST BE SHORTENED
3450  CONTINUE
      N=N5-NATOM
      WRITE(NCAWU ,3451)NATOM, N5
      WRITE ( CMON ,3451)NATOM, N5
      CALL XPRVDU(NCVDU, 1,0)
3451  FORMAT(' First', I5, ' atoms kept out of', I6, ' found')
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3500)N,NATOM
      ENDIF
3500  FORMAT(//,' The following',I5,
     2 '  atom(s) have been omitted to reduce',
     3 ' the number of atoms to',I5/)
      CALL XERHND ( IERWRN )
      J=L5+NATOM*MD5
      K=L5+(N5-1)*MD5
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3550)(ISTORE(I),STORE(I+1),I=J,K,MD5)
      ENDIF
3550  FORMAT((5(3X,A4,F8.0,7X)))
      N5=NATOM
C--PRINT THE NEW ATOM TOTAL
      ELSE
3600  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3650)N5
      ENDIF
      WRITE(NCAWU ,3650) N5
      WRITE ( CMON ,3650) N5
      CALL XPRVDU(NCVDU, 1,0)
3650  FORMAT(' List now contains ',I5,' atoms')
      ENDIF
C--CREATE THE OUTPUT LIST TYPE WHERE NECESSARY
      N=N5
      NEW=1
      CALL XCPYL5(LN1,LN2,N,NEW)
C--OUTPUT THE LIST TO THE DISC
      CALL XSTR05(LN2,0,NEW)
C
C
3720  CONTINUE
C
C -- FINAL MESSAGES
C
      CALL XOPMSG ( IOPREF, IOPEND, IVERSN )
C
      CALL XTIME2(2)
      CALL XCSAE
      CALL XRSL
      RETURN
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPREF , IOPABN , 0 )
      GO TO 3720
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPREF , IOPCMI , 0 )
      GO TO 9900
9920  CONTINUE
C -- INSUFFICIENT SPACE
      CALL XOPMSG ( IOPREF , IOPSPC , 0 )
      GO TO 9900
      END
C
CODE FOR XCOLL
      SUBROUTINE XCOLL
C----- COLLECT
C--CONDENSE A LIST 5 OR LIST 10 AND ASSEMBLE MOLECULAR FRAGMENTS
C
C  LN1    INPUT LIST TYPE
C  LN2    OUTPUT LIST TYPE
C  ILIST   THE LIST CONTROL FLAG :
C          -1  DO NOT LIST THE MOVED OR DELETED ATOMS.
C           0  LIST THE MOVED OR DELETED ATOMS.
C  TOLER   THE TOLLERANCE ADDED TO SUM OF RADII FOR BOND LIMIT
C  ITYPE    ALL(-1) OR PEAKS ONLY(0)
C
C--THE COMMON BLOCK /XWORKA/ IS USED :
C
C  JB  ADDRESS OF THE TEMP. STORAGE FOR ATOMS
C  JC  ADDRESS OF THE ATOM HEADER FOR MOVING ATOMS FROM 'JB'
C  JD  WORK SPACE FOR 'KATOMS'
C  JE  START OF DISTANCE STACK.
C  JF  NUMBER OF ATOMS LEFT TO SCAN
C  JG  CURRENT LAST ENTRY IN LIST 5 OR 10
C  JH  MD5-1
C  JI  MD5+MD5
C  JK  ZERO FOR THE FIRST OPERATION FOR THE CURRENT PIVOT ATOM,
C      ELSE NON-ZERO.
C  JL  ZERO FOR THE FIRST OPERATION FOR THE CURRENT CALL,
C      ELSE NON-ZERO.
C
C--
\ISTORE
C
      DIMENSION IAPD(13), PROCS(15)
C
      CHARACTER*8 CMOVED
C
\STORE
\XDSTNC
C
      COMMON /XPROCC/DISTS(4),LN1,LN2,ITYPE,NATOM,ILIST,ISEQ,D3,AMULT,
     2 IACT, ISYMOD, ITRANS
      COMMON /XDISTW/A,BB,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
\XWORKA
\XPDS
\XLISTI
\XCONST
\XUNITS
\XSSVAL
\XLST01
\XLST02
\XLST05
\XLST12
\XLST29
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
C
      EQUIVALENCE (DISTS(1),PROCS(1))
      EQUIVALENCE (TOLER,DISTS(4))
      EQUIVALENCE (APD(1),IAPD(1))
C
C
      DATA IDIMN /15/
C
      DATA CMOVED / ' Moved  ' /
C
#HOL      DATA IPEAK/'Q   '/
&HOL      DATA PEAK(1)/4HQ   /, IPEAK/'Q   '/
C
C--CALLL THE TIMING FUNCTION
      CALL XTIME1(2)
C -- READ THE REST OF THE INSTRUCTIONS AND CHECK FOR ERRORS
      IF (   KRDDPV ( PROCS(1) , IDIMN )    .LT.   0   ) GO TO 9910
C
&PPCCS***
&PPC      CALL SETSTA( 'Collect' )
&PPC      CALL nextcursor
&PPCCE***
C--LOAD THE INPUT LIST
      LN1=KTYP05(LN1)
      CALL XLDR05(LN1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--FIND THE OUTPUT LIST TYPE
      LN2=KTYP05(LN2)
C
C----- ALLOCATE A FUNCTION VECTOR TO HOLD RADII OF EACH ATOM AND STATUS
      MDFNVC = 2
      NFNVC = N5
      I=N5*MDFNVC
      LFNVC = KSTALL (I)
      CALL XZEROF ( ISTORE(LFNVC) , I )
C
C----- LOAD THE FUNCTION VECTOR WITH RADIUS 1 (VDW)
      JFNVC = 1
      IRDUS = 1
C----- LOAD LIST 29
      CALL XFAL29
C----- SCAN LIST 5 SETTING FUNCTION VECTOR TO APPROPRIATE RADIUS
      MFNVC=LFNVC
      I29=L29 + (N29-1)*MD29
      I5 = L5 + (N5-1)*MD5
      BMAX = 0.
      BMIN = 0.
      DO 7450 M5=L5,I5,MD5
      DO 7250 M29= L29,I29,MD29
      JZ=M29+IRDUS
      IF (ISTORE(M5) - ISTORE(M29)) 7250,7350,7250
7250  CONTINUE
C----- NO MATCH - POINT TO DEFAULT ATOM
      JZ = L29 + IRDUS
7350  CONTINUE
C----- MATCH
      STORE(MFNVC+1) = STORE(JZ)
      BMAX = AMAX1( BMAX, STORE(JZ))
C----- SET THE FUNCTION TO 'USE'  I.E.  +1
      ISTORE(MFNVC ) = 1
      MFNVC = MFNVC + MDFNVC
7450  CONTINUE
      IF (ILIST .GE. 0) THEN
        WRITE(NCAWU,7460) TOLER
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU ,7460) TOLER
      ENDIF
7460    FORMAT(' Tolerance used in determining bonds is ',F4.2)
      ENDIF
C
C----- RESET FUNCTION VECTOR AND LIMITS USED BY D/A IF NECESSARY
      IF(JFNVC) 7670,7670,7660
7660  CONTINUE
      BMAX=2.*BMAX + TOLER
      AT = 0.
      AC = BMAX
      BT = 0.
      BC = BMAX
7670  CONTINUE
C----- LOAD LISTS 1 AND 2, AND SET UP SOME CONSTANTS
      CALL XDIST2
C
C
C----- REDUCE SYMMETRY IF NECESSARY
      CALL KSYMOD (ISYMOD, IC, IL, N2P, L2C, L2, N2, MD2)
      JT=12
      L12=-1
      M12=-1
C--SET UP A FEW STACK CONSTANTS
      JB=NFL
      JC=JB+MD5
      JD=JC+20
      JE=JD+30
C--CHECK THE STORE AREA
      IF ( JE - LFL ) 1350 , 9920 , 9920
1350  CONTINUE
C----- THE 'USE' FLAG IS DECREMENTED WHEN AN ATOM IN THE FOUND LIST MAKE
C      A CONTACT TO AN UNFOUND ATOM
C----- SET CUTTENT LEVEL OF ACTIVITY (NEGATIVE)
      ICURR = -1
C----- MARK FIRST ATOM AS FOUND
      ISTORE(LFNVC) = ICURR
      IF (ITYPE .EQ. 0) THEN
C----- ONLY MOVE PEAKS - MARK ALL NON-PEAKS AS FOUND
            I5 = L5 + (N5-1)*MD5
            MFNVC = LFNVC
            DO 1360 M5 = L5, I5, MD5
            IF(ISTORE(M5) .NE. IPEAK) ISTORE(MFNVC) = ICURR
            MFNVC = MFNVC + MDFNVC
1360        CONTINUE
      ENDIF
C----- FRAGMENT PRINT FLAG
      IFRGPT = -1
1370  CONTINUE
C----- LOOP BACK HERE IF ICHNG NOT ZERO
C--SET UP THE CONTROL VARIABLES FOR THIS PASS
C----- SET NO NEW CHANGES YET
      ICHNG = 0
      MATOM = 0
C----- OUTER PIVOT LOOP ALWAYS RE-START FROM BEGINNING
      M5A = L5
      MFNVCA = LFNVC
1400  CONTINUE
C----- INNER CONTACT LOOP, STARTING FROM M5, ALWAYS GOES OVER ALL ATOMS
      M5=L5
      MFNVC = LFNVC
      IF (MATOM  .GE. N5) GOTO 3400
C----- DONT REUSE PREVIOUS FOUND OR UNFOUND ATOMS AS PIVOT.
      IF (ISTORE(MFNVCA) .NE. ICURR) GOTO 3350
      NFL=JE
C -- COMPUTE DISTANCE STACK
      NDIST = KDIST1( N5, J, JT, 1, TOLER, ITRANS)
      IF(NDIST .LE. -1 ) THEN
C----- ERROR
            GOTO 9920
      ELSE IF (NDIST .EQ. 0) THEN
        IF (ITYPE .LT. 0) THEN
            IF (ISTORE(MFNVCA) .EQ. 1) THEN
C----- AN ISOLATED ATOM
                  WRITE(NCAWU,1451) ISTORE(M5A), STORE(M5A+1)
      IF (ISSPRT .EQ. 0) THEN
                  WRITE(NCWU,1451) ISTORE(M5A), STORE(M5A+1)
      ENDIF
1451              FORMAT(' Isolated atom : ', A4,F6.0)
            ELSE IF ( (ICHNG .EQ. 0) .AND. ( IFRGPT .LT. 0) ) THEN
C----- START OF A NEW FRAGMENT - SET FLAG TO 'PRINT'
                  IFRGPT = +1
            END IF
        END IF
            GOTO 3350
      ENDIF
C--REMOVE DUPLICATE ENTRIES FOR EACH ATOM, LEAVING THE MIN. CONTACT DIST
      NFL=J
      I=JE
      JS=JE
C--CHECK IF THERE ARE ANY MORE ATOMS IN THE STACK
1600  CONTINUE
      IF(I-J)1650,2000,2000
C--BEGIN THE SEARCH FOR ALL CONTACTS TO THIS CURRENT ATOM
1650  CONTINUE
      E=STORE(I+10)
      K=I
C--CHECK IF THERE ARE ANY MORE ATOMS IN THE STACK
1700  CONTINUE
      IF(I-J)1750,1950,1950
C--CHECK IF THIS IS THE SAME ATOM
1750  CONTINUE
      IF(ISTORE(I)-ISTORE(K))1950,1800,1950
C--CHECK THE DISTANCE
1800  CONTINUE
      IF(STORE(I+10)-E)1850,1900,1900
1850  CONTINUE
      E=STORE(I+10)
      K=I
C--MOVE TO THE NEXT ATOM
1900  CONTINUE
      I=I+JT
      GOTO 1700
C--MOVE THE STACK INFORMATION
1950  CONTINUE
      CALL XMOVE(STORE(K),STORE(JS),JT)
      K=K+JT
      JS=JS+JT
      GOTO 1600
C--CHECK IF ANY ATOMS HAVE BEEN FOUND
2000  CONTINUE
      IF(JS-JE)3350,3350,2050
C--ATOMS FOUND  -  CHECK FOR ATOMS TO BE DELETED
2050  CONTINUE
      JK=0
      JS=JS-JT
      IPOINT=NOWT
C
C--BEGIN MOVING NON-DELETED ATOMS
      NFL=JD
C--MAIN ATOM MOVING LOOP
      DO 3300 I=JE,JS,JT
C----- CHECK IF ACCEPTABLE
      IF(ISTORE(I+1) .LE. 1) GOTO 3300
C--CHECK IF WE ARE PRINTING THE MOVED ATOMS
      IF (IFRGPT .GT. 0) THEN
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,'(A)' ) ' Start of a new fragment '
      ENDIF
            WRITE(NCAWU,'(A)' ) ' Start of a new fragment '
C            NOW INHIBIT PRINTING
            IFRGPT = -1
      ENDIF
      CALL XPRTCD(I,J,CMOVED)
      JK=-1
C--SHIFT THE SYMMETRY OPERATORS TO THE HEADER PLACE
      CALL XMOVE(STORE(I+2),STORE(JC+7),5)
C--SHIFT THE ATOM TO TEMP. STORAGE
      CALL XMOVE(STORE(J),STORE(JB),MD5)
C
C----- LIST 5 ADDRESS
      IADDR = ISTORE(I)
C----- WHICH ATOM
      IATOM = (IADDR-L5)/MD5 + 1
C----- FUNCTION VECTOR ADDRESS
      IADDF = LFNVC + (IATOM-1)*MDFNVC
C--MOVE THE NEW ATOM FROM TEMP. STORAGE TO CORRECT POSITION
3250  CONTINUE
      JJ=KATOMS(JC,JB,IADDR)
      ISTORE(IADDF) = ICURR -1
      ICHNG = ICHNG + 1
3300  CONTINUE
C--UPDATE FOR THE NEXT PIVOT ATOM
3350  CONTINUE
      M5A = M5A + MD5
      MFNVCA = MFNVCA + MDFNVC
      MATOM = MATOM + 1
      GOTO 1400
C
C
3400  CONTINUE
C----- SEE IF THERE ARE ANY UNMOVED ATOMS LEFT
      ICURR = ICURR - 1
      IF (ICHNG .EQ. 0) THEN
            K = LFNVC + MDFNVC*(NFNVC-1)
            DO 3370 I = LFNVC, K, MDFNVC
            IF (ISTORE(I) .EQ. 1) THEN
                  ISTORE(I) = ICURR
                  ICHNG = ICHNG + 1
                  GOTO 3380
            END IF
3370        CONTINUE
3380  CONTINUE
      END IF
      IF (ICHNG .NE. 0) GOTO 1370
C
C
C--END OF THE CONDENSING LOOP  -  OUTPUT THE NEW LIST
C--CREATE THE OUTPUT LIST TYPE WHERE NECESSARY
      N=N5
      NEW=1
      CALL XCPYL5(LN1,LN2,N,NEW)
C--OUTPUT THE LIST TO THE DISC
      CALL XSTR05(LN2,0,NEW)
C
C
3720  CONTINUE
C
C -- FINAL MESSAGES
C
      CALL XOPMSG ( IOPREF , IOPEND , 301 )
C
      CALL XTIME2(2)
      CALL XCSAE
      CALL XRSL
      RETURN
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPREF , IOPABN , 0 )
      GO TO 3720
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPREF , IOPCMI , 0 )
      GO TO 9900
9920  CONTINUE
C -- INSUFFICIENT SPACE
      CALL XOPMSG ( IOPREF , IOPSPC , 0 )
      GO TO 9900
      END
C
C
CODE FOR XPRTCD
      SUBROUTINE XPRTCD(I,J,MESS)
C--PRINT AN ATOM THAT IS TO BE DELETED OR MOVED BY 'XCOND'
C
C  I       ADDRESS OF THE DISTANCE CONTROL BLOCK FOR THIS CONTACT.
C  J       SET TO THE ADDRESS OF THE ATOM TO BE ALTERED ON RETURN.
C  MESS    MESSAGE THAT IS TO BE PRINTED.
C
C--THIS ROUTINE CHECKS 'ILIST' TO SEE IF THE PRINT IS REQUIRED,
C  AND ASSUMES THAT THE CURRENT PIVOT ATOM IS AT 'M5A'.
C
C--TWO VARIABLES IN 'XWORKA' ARE USED TO CONTROL THE PRINTING :
C
C  JK  ZERO IF THIS IS THE FIRST PRINT FOR THIS PIVOT ATOM,
C      ELSE NON-ZERO.
C  JL  ZERO IF THIS IS THE FIRST PRINT OF ANY KIND FOR THIS CALL
C      OF 'XCOND', ELSE NON-ZERO.
C
C--
\ISTORE
C
      DIMENSION PROCS(15)
      CHARACTER*(*) MESS
C
\STORE
\XDSTNC
C
      COMMON /XPROCC/DISTS(4),LN1,LN2,ITYPE,NATOM,ILIST,ISEQ,D3,AMULT,
     2 IACT, ISYMOD, ITRANS
\XWORKA
\XCHARS
\XUNITS
\XSSVAL
\XLST05
\XIOBUF
C
\QSTORE
      EQUIVALENCE (PROCS(1), DISTS(1))
C
C--FIND THE ADDRESS OF THE ATOM TO BE ALTERED
      J=ISTORE(I)
      K=I+4
C--CHECK FOR LISTING WITH THIS CALL
      IF(ILIST)1400,1000,1000
C--PRINT REQUIRED  -  CHECK IF THIS THE FIRST DELETION FOR THIS ATOM
1000  CONTINUE
      IF(JL)1100,1100,1160
C--THIS IS THE FIRST CALL  -  OUTPUT THE HEADING
1100  CONTINUE
      JL=1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1150)
      ENDIF
1150  FORMAT(///' Current pivot atom',7X,'Atom',3X,'Serial',3X,'S(I)',
     2 2X,'L',2X,'T(X)',1X,'T(Y)',1X,'T(Z)',2X,'Distance',5X,'Action',
     3 6X, 'x/a', 5X, 'y/b', 5X, 'z/c', 5X, 'Rho', /)
      WRITE ( NCAWU , 1155 )
1155  FORMAT ( 1X , '  Pivot      Atom   Distance       Action',
     3 5X, 'x/a', 5X, 'y/b', 5X, 'z/c', 5X, 'Rho', /)
      WRITE(CMON,1156)
      CALL XPRVDU(NCVDU, 1,0)
1156  FORMAT(3X,'Pivot', 4X'Atom',5X,'Dist',5X,'Rho',6X,'Action')
C
1160  CONTINUE
      WRITE ( CMON , 1256 )  STORE(M5A), NINT(STORE(M5A+1)),
     3  STORE(J), NINT(STORE(J+1)), STORE(I+10), STORE(J+13), MESS
      CALL XPRVDU(NCVDU, 1,0)
1256  FORMAT ( 2(1X,A4 , I4), 2F8.2, 4X,A8)
      IF(JK)1300,1050,1300
C--CHECK IF THIS IS THE FIRST ACTION IN THIS CALL
1050  CONTINUE
C--PRINT THE ATOM TO BE ALTERED WITH THE PIVOT ATOM
1200  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1250)STORE(M5A),STORE(M5A+1),ISTORE(J),STORE(J+1),
     2 (ISTORE(L+2),L=I,K) , STORE(I+10) , MESS,
     3 STORE(J+4), STORE(J+5), STORE(J+6), STORE(J+13)
      ENDIF
1250  FORMAT (/, 1X,4X,A4,F8.0,9X,A4,F8.0,4X,I3,I4,3I5,F9.3,6X,A8,
     1 3F8.3, F9.1 )
      WRITE ( NCAWU , 1255 ) STORE(M5A) , STORE(M5A+1)
1255  FORMAT ( 1X, A4 , F5.0 )
      WRITE ( NCAWU , 1355 ) STORE(J) , STORE(J+1) , STORE(I+10) , MESS,
     3 STORE(J+4), STORE(J+5), STORE(J+6), STORE(J+13)
      GOTO 1400
C--PRINT THE ALTERED ATOM WITHOUT THE CURRENT PIVOT
1300  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1350)ISTORE(J),STORE(J+1),(ISTORE(L+2),L=I,K),
     2 STORE(I+10) , MESS,
     3 STORE(J+4), STORE(J+5), STORE(J+6), STORE(J+13)
      ENDIF
1350  FORMAT ( 26X,A4,F8.0,4X,I3,I4,3I5,F9.3,6X,A8,
     1 3F8.3, F9.1 )
      WRITE ( NCAWU , 1355 ) STORE(J) , STORE(J+1) , STORE(I+10) , MESS,
     3 STORE(J+4), STORE(J+5), STORE(J+6), STORE(J+13)
1355  FORMAT ( 1X , 13X , A4 , F5.0 ,  F8.5 , 4X , A8,
     1 3F8.3, F9.1 )
C--AND NOW RETURN
1400  CONTINUE
      RETURN
      END
C
CODE FOR XOCC
      FUNCTION XOCC(IADD)
C--COMPUTE THE OCCUPANCY OF AN ATOM.
C
C  IADD    THE ADDRESS OF THE ATOM IN 'STORE'.
C
C--RETURN VALUES OF 'XOCC' ARE :
C
C  -1.  INSUFFICIENT CORE.
C  >0.  THE OCCUPANCY.
C
C--THE DETAILS FOR 'KDIST1' SHOULD ALREADY HAVE BEEN SET UP, WITH A
C  MAXIMUM DISTANCE CONTACT OF AT LEAST '2.0*VALUE'.
C  THE RESULTS FROM 'KDIST1' OVERWRITE THE DATA AT 'NFL', SO THAT
C  THIS SHOULD BE PROTECTED IF IT IS IMPORTANT.
C
C--
\STORE
\XCONST
\XLST05
\XLST12
C
C--PRESERVE THE LIST 5 POINTERS
      KA=M5A
      M5A=IADD
      KB=M5
      M5=IADD
C--PRESERVE THE LIST 12 POINTERS
      KC=M12
      M12=NOWT
C--SET THE ENTRY LENGTH
      KD=12
C--COMPUTE SOME DISTANCES
      IF(KDIST1( 1, I, KD, 0, .2, 0)) 1000, 1050, 1150
C--NOT ENOUGH CORE
1000  CONTINUE
      XOCC=-1.
      GOTO 1100
C--NO OTHER CONTACTS
1050  CONTINUE
      XOCC=1.
1100  CONTINUE
      M5A=KA
      M5=KB
      M12=KC
      RETURN
C--SOME CONACTS  -  CHECK THEM OUT
1150  CONTINUE
      I=I-KD
      A=1.
      B=2.*VALUE
      DO 1250 K=NFL,I,KD
      IF(STORE(K+10)-B)1200,1200,1250
C--UPDATE THE POINTER
1200  CONTINUE
      A=A+1.
1250  CONTINUE
      XOCC=1./A
      GOTO 1100
      END
C
CODE FOR KDIST1
      FUNCTION KDIST1( IN, JS, JT, JFNVC, TOLER, ITRANS)
C--ENTRY THAT CALCULATES DISTANCES AND STORES THE RESULTS AT NFL
C
C  IN  THE NUMBER OF ATOMS TO BE MOVED AROUND.
C  JS  POINTER TO THE DISTANCES STACK  -  ORIGINALLY SET TO 'NFL'
C      AND POINTING TO THE NEXT FREE LOCATION AFTER THE STACK ON EXIT.
C  JT  THE NUMBER OF WORDS PER ENTRY IN THE DISTANCES STACK.
C JFNVC SET TO ZERO IF NO FUNCTION VECTOR SUPPLIED
C JFNVC SET -VE IF VCTOR ONLY USED FOR INCLUDE/EXCLUDE STATUS
C TOLER SET TO TOTAL TOLERANCE IF FUNCTION VECTOR SUPPLIED
C ITRANS SET TO -1 TO SUPPRESS UNIT CELL TRANSLATIONS
C
C--THE RETURN VALUES OF 'KDIST1' ARE :
C
C  -1  NOT ENOUGH CORE IS AVAILABLE.
C   0  NO SUITABLE CONTACTS HAVE BEEN FOUND.
C  >0  THE NUMBER OF ENTRIES IN THE DISTANCES STACK.
C
C--THE VARIABLE 'IDIST' DETERMINES THE TYPE OF SEARCH
C  THAT IS PERFORMED :
C
C  -1  NORMAL DISTANCES AND ANGLES.
C   0  PLACEMENT WITHIN THE VOLUME DEFINED BY 'BPD(4-9)'.
C  >0  PLACEMENT WITHIN THE VOLUME GIVEN BY THE FACE
C      EQUATIONS. THE VALUES IN 'BPD(4-9)' ARE USED IN THE
C      INITIAL SEARCH AND MUST BE THE MIN. AND MAX.
C      VALUES TO BE FOUND.
C
C--THE BOX VARIABLES FOLLOW 'IDIST' IN 'XDSTNC' :
C
C  LBOX    LOCATION OF THE BOX CONTROL DATA.
C  MBOX    WORK VARIABLE.
C  MDBOX   NUMBER OF WORDS PER BOX CONTROL BLOCK ENTRY
C  NBOX    NUMBER OF CONTROL BLOCKS MINUS ONE.
C
C--THE FIRST ENTRY IN THIS TABLE IS THE CENTROID OF THE BOX IN CRYSTAL
C  FRACTIONS, AND THE REMAINING ENTRIES CONTAIN THE EQUATION OF ONE
C  OF THE PLANES BOUNDING THE SHAPE TO BE FILLED. THE EQUATIONS USE
C  COORDINATES IN CRYSTAL FRACTIONS AND ARE OF THE FORM A*X+Y*B+Z*C-D=0.
C
C--FOR THE BOX ALGORITHM, THE REPLIES ARE THE SAME, EXCEPT THAT THE
C  DISTANCE ENTRIES ARE NOT SET, ONLY THE COORDINATES.
C
C--THE FOLLOWING VARIABLES MUST BE SET ON ENTRY
C
C  AT     MINIMUM ALLOWED DISTANCE FOR DISTANCES
C  AC     MAXIMUM ALLOWED DISTANCE FOR DISTANCES
C  BT     MINIMUM ALLOWED DISTANCE FOR ANGLES
C  BC     MAXIMUM ALLOWED DISTANCE FOR ANGLES
C  AO    MAXIMUM ALLOWED DISTANCE OVERALL
C  AP     MAXIMUM ALLOWED DISTANCES SQUARED OVERALL
C  BP     MINIMUM ALLOWED DISTANCE SQUARED OVERALL
C  M5A    ADDRESS OF THE CURRENT PIVOT ATOM IN LIST 5
C  M5     ADDRESS OF THE FIRST ATOM TO MOVE AROUND IN LIST 5
C----  MFNVCA  ADDRESS IN FUNVTION VECTOR OF PIVOT ATOM
C      MFNVC   ADDRESS IN FUNCTION VECTOR OF FIRST ATOM
C
C--ATOMS WHICH FORM ACCEPTABLE CONTACTS ARE STORED IN A STACK
C  WHICH HAS THE FOLLOWING FORMAT :
C
C   0  ADDRESS OF THE ATOM IN LIST 5
C   1  ACCEPTANCE FLAG
C
C      1  ACCEPTABLE TO NONE
C      2  DISTANCES ONLY
C      3  ANGLES ONLY
C      4  ACCEPTABLE TO BOTH
C
C   2  S, THE SYMMETRY MATRIX TO BE USED (NEGATIVE FOR CENTRE OF SYM.)
C   3  NON-PRIMITIVE LATTICE INDICATOR
C   4  T(X)
C   5  T(Y)
C   6  T(Z)
C   7  TRANSFORMED X
C   8  TRANSFORMED Y
C   9  TRANSFORMED Z
C  10  DISTANCE
C  11  DISTANCE SQUARED
C  12  ADDRESS IN LIST 12  (IF USED).
C  13  TARGET CONTACT DISTANCE FOR RESTRAINTS (OPTIONAL)
C
C--THE STACK STARTS AT NFL, AND GOES UPWARDS SO THAT THE LAST ENTRY IS
C  AT JS, AND THE STEP IS JT.
C
C--THE COMMON BLOCK /XAPD/ IS USED AS :
C
C  APD(1-3)  SYMMETRY RELATED X, Y AND Z, WITH TRANSLATION PART OMITTED.
C  APD(4-6)  INITIAL SYMMETRY RELATED X, Y AND Z.
C  APD(7-9)  FINAL SYMMETRY RELATED X, Y AND Z AFTER A SUCCESSFUL FIND.
C
C  BPD(1-3)  D(L,M,N) IN ANGSTROM  -  CORRESPONDS TO A UNIT CELL SHIFT.
C  BPD(4-6)  MINIMUM FRACTIONAL COORDINATES OF THE SEARCH VOLUME.
C  BPD(7-9)  MAXIMUM FRACTIONAL COORDINATES OF THE SEARCH VOLUME.
C
C--
\ISTORE
C
      DIMENSION XX(3)
C
\STORE
\XDSTNC
\XCONST
\XPDS
\XUNITS
\XSSVAL
\XLST01
\XLST02
\XLST05
\XLST12
C
\QSTORE
C
      EQUIVALENCE (E,XX(1)),(F,XX(2)),(G,XX(3))
C
C--SET UP A FEW INITIAL POINTERS
      NJ=0
      JS=NFL
C--SET DEFAULT DISTANCES
      E=0.
      F=0.
C--CHECK IF WE ARE CALCULATING DISTANCES OR A BOX FUNCTION
      IF(IDIST)1000,1100,1100
C--DISTANCES ARE BEING CALCULATED
1000  CONTINUE
      I=M5A
C--SET UP THE MAXIMUM AND MINIMUM VALUES FOR EACH DIRECTION FOR A DISTAN
      DO 1050 J=1,3
      BPD(J+3)=STORE(I+4)-AO/BPD(J)
      BPD(J+6)=STORE(I+4)+AO/BPD(J)
      I=I+1
1050  CONTINUE
C--SET UP THE OTHER FLAGS
1100  CONTINUE
      NC=2*IC+1
      ND=IN
C----- LOOP BACK HERE FOR NEXT ATOM
1150  CONTINUE
CAB97> CHECK IF CONTACT HAS ALREADY BEEN FOUND
      IF (JFNVC .EQ. NOWT) THEN
        IF (NJ) 2800, 1175, 2800
      ENDIF
1175  CONTINUE
CAB97<
C--CHECK IF THERE MORE ATOMS TO PROCESS
      IF(ND)2800,2800,1200
1200  CONTINUE
C----- CHECK IF THIS ATOM IS SELECTED
C RIC AUG 00 > I think this is supposed to be
C      IF ((JFNVC .EQ. -1) .AND. (ISTORE(MFNVC) .EQ. -1)) GOTO 2725
C this:
      IF ((JFNVC .EQ. 1) .AND. (ISTORE(MFNVC) .EQ. -1)) GOTO 2725
C--LOOP OVER EACH SYMMETRY OPERATOR COMBINATION FOR THIS ATOM
      M2=L2
      DO 2700 NE=1,N2
C--APPLY THIS SYMMETRY OPERATOR
      CALL XMLTTM(STORE(M2),STORE(M5+4),APD(1),3,3,1)
C--LOOP OVER EACH REQUIRED SIGN FOR THE CENTRE OF SYMMETRY FLAG
      DO 2650 NF=1,NC,2
      M2P=L2P
C--LOOP OVER EACH OF THE NON-PRIMITIVE LATTICE TRANSLATIONS
      DO 2600 NG=1,N2P
      NH=M2
C--ADD IN THE VARIOUS TRANSLATION PARTS
      DO 1250 NI=1,3
      APD(NI+3)=APD(NI)+STORE(M2P)+STORE(NH+9)
      APD(NI+6)=APD(NI+3)
      M2P=M2P+1
      NH=NH+1
1250  CONTINUE
      IF (ITRANS .EQ. -1) GOTO 1550
C--MOVE THE X COORDINATE SO THAT IT IS OUT OF THE REQUIRED VOLUME
      CALL XSHIFT(1)
C--ADVANCE THE X COORDINATE BY ONE OR MORE UNIT CELLS
1300  CONTINUE
      IF(KDIST(1))2600,1350,1350
C--MOVE THE Y COORDINATE SO THAT IT IS OUT OF THE REQUIRED VOLUME
1350  CONTINUE
      CALL XSHIFT(2)
C--ADVANCE THE Y COORDINATE BY ONE OR MORE UNIT CELLS
1400  CONTINUE
      IF(KDIST(2))1300,1450,1450
C--MOVE THE Z COORDINATE SO THAT IT IS OUT OF THE REQUIRED VOLUME
1450  CONTINUE
      CALL XSHIFT(3)
C--ADVANCE THE Z COORDINATE BY ONE OR MORE UNIT CELLS
1500  CONTINUE
      IF(KDIST(3))1400,1550,1550
C--A SUCCESSFUL FIND  -  CHECK THE CORE CONTROL
1550  CONTINUE
      IF(JS+MAX0(JT,13)-LFL)1650,1600,1600
C--NOT ENOUGH CORE FOR THIS ENTRY
1600  CONTINUE
C----- NEGATE NUMBER OF CONTACTS TO SIGNAL STORE OVERFLOW
      NJ = -NJ
      GOTO 2800
C--ASSIGN A DEFAULT ACCEPTANCE FLAG
1650  CONTINUE
      ISTORE(JS+1)=1
C--CHECK ON THE TYPE OF FUNCTION
      IF(IDIST)1800,2500,1700
C--FILLING A MULTI-SIDED BOX  -  MOVE TO THE CENTROID
1700  CONTINUE
      CALL XSUBTR(APD(7),STORE(LBOX),XX(1),3)
C--CHECK THAT THE POINT IS WITHIN THE BOX
      MBOX=LBOX
      DO 1750 NH=1,NBOX
      MBOX=MBOX+MDBOX
      IF(STORE(MBOX)*XX(1)+STORE(MBOX+1)*XX(2)+STORE(MBOX+2)*XX(3)
     2 -STORE(MBOX+3))1750, 1750, 2570
1750  CONTINUE
      GOTO 2500
1800  CONTINUE
C----- SHALL WE USE THE FUNCTION VECTOR?
      IF (JFNVC) 1840,1840,1810
1810  CONTINUE
C----- CHECK IF THE SECOND ATOM IS PERMITTED
      IF (ISTORE(MFNVC)) 2725,2725,1840
1840  CONTINUE
C----- CHECK FOR SELF-SELF CONTACT
      IF(M5-M5A)2100,1850,2100
1850  CONTINUE
C----- CHECK X
      IF (ABS(STORE(M5A+4)-APD(7)) - ZERO)1950,1950,2050
1950  CONTINUE
C----- CHECK Y
      IF (ABS(STORE(M5A+5)-APD(8)) - ZERO)2000,2000,2050
2000  CONTINUE
      IF (ABS(STORE(M5A+6)-APD(9)) - ZERO) 2570, 2570, 2050
2050  CONTINUE
C--THIS IS NOT A SELF-SELF CONTACT WITH NO OPERATORS  -  CALC. DIST.
2100  CONTINUE
      F=XDSTN2(STORE(M5A+4),APD(7))
      IF(F-BP) 2570, 2150, 2150
C--CHECK THE DISTANCE AGAINST THE MAXIMUM ALLOWED VALUE SQUARED
2150  CONTINUE
      IF(AP-F) 2570, 2200, 2200
C--COMPUTE THE DISTANCE
2200  CONTINUE
      E=SQRT(F)
C---- USE THE FUNCTION VECTOR ?
      IF (JFNVC) 2225,2225,3000
2225  CONTINUE
C----- SET TARGET TO CURRENT VALUE
      BOND = E
C----- USE OVERALL LIMITS
C--WRITE IN ACCEPTANCE FLAGS
      IF(E-AT)2350,2250,2250
2250  CONTINUE
      IF(AC-E)2350,2300,2300
C--DISTANCE ACCEPTABLE
2300  CONTINUE
      ISTORE(JS+1)=ISTORE(JS+1)+1
2350  CONTINUE
      IF(E-BT)2500,2400,2400
2400  CONTINUE
      IF(BC-E)2500,2450,2450
C--ANGLE ACCEPTABLE
2450  CONTINUE
      ISTORE(JS+1)=ISTORE(JS+1)+2
      GOTO 2500
C
3000  CONTINUE
C-----  CHECK THE DISTANCE AGAINST THE RADII
C----- DONT PUT INTO STACK IF TOO LONG COMPARED WITH FUNCTION VECTOR
      BOND = STORE(MFNVC+1) + STORE(MFNVCA+1)
      IF ((E .GT. (BOND + TOLER)).OR. ( E .LE. AT)) THEN
      GOTO 2570
      ELSE
            ISTORE(JS+1) = 4
      ENDIF
C--SET THE REMAINING FLAGS
2500  CONTINUE
      ISTORE(JS)=M5
      ISTORE(JS+2)=(2-NF)*NE
      ISTORE(JS+3)=NG
      NJ=NJ+1
      J=JS+4
      DO 2550 I=1,3
      ISTORE(J)=NINT(APD(I+6)-APD(I+3))
      STORE(J+3)=APD(I+6)
      J=J+1
2550  CONTINUE
      STORE(JS+10)=E
      STORE(JS+11)=F
      ISTORE(JS+12)=M12
      IF (JT .EQ. 14) STORE(JS+13) = BOND
      JS=JS+JT
2570  CONTINUE
      IF (ITRANS .EQ. 0) GOTO 1500
2600  CONTINUE
      CALL XNEGTR(APD(1),APD(1),3)
2650  CONTINUE
      M2=M2+MD2
2700  CONTINUE
2725  CONTINUE
      IF (JFNVC .NE. 0) MFNVC = MFNVC+MDFNVC
      ND=ND-1
      M5=M5+MD5
C--CHECK IF LIST 12 NEEDS UPDATING
      IF(M12)1150,1150,2750
C--UPDATE THE LIST 12 POINTER
2750  CONTINUE
      M12=ISTORE(M12)
      GOTO 1150
2800  CONTINUE
      KDIST1=NJ
      RETURN
      END
C
CODE FOR XDSTN2
      FUNCTION XDSTN2(A,B)
C--COMPUTE THE DISTANCE SQUARED BETWEEN TWO POINTS
C
C  A  VECTOR CONTAINING THE COORDINATES OF THE FIRST POINT.
C  B  VECTOR CONTAINING THE COORDINATES OF THE SECOND POINT.
C
C--THE RETURN VALUE OF 'XDSTN2' IS THE DISTANCE SQUARED.
C
C--
C
      DIMENSION A(3),B(3),C(3),D(3)
C
\STORE
\XCONST
\XLST01
C
C--SUBTRACT THE VECTORS
      CALL XSUBTR(A(1),B(1),C(1),3)
C--ORTHOGONALISE THE DIFFERENCE VECTOR
      CALL XMLTTM(STORE(L1O1),C(1),D(1),3,3,1)
C--COMPUTE THE DISTANCE
      C(1)=D(1)*D(1)+D(2)*D(2)+D(3)*D(3)
C--CHECK THE VALUE
      IF(C(1)-ZEROSQ)1000,1050,1050
C--LESS THAN 'ZERO'  -  ASSIGN THE ANSWER TO 'VALUE'
1000  CONTINUE
      C(1)=VALUSQ
1050  CONTINUE
      XDSTN2=C(1)
      RETURN
      END
C
CODE FOR XSHIFT
      SUBROUTINE XSHIFT(NOC)
C--SHIFTS THE ATOM OUT OF RANGE SO THAT IT CAN START COMING BACK
C
C  NOC  THE NUMBER OF THE PARAMETER TO MOVE, IN THE RANGE 1 TO 3.
C
C--THE COMMON BLOCK 'XPDS' IS USED AS :
C
C  APD(7-9)  CURRENT SET OF ATOMIC COORDINATES TO ALTER.
C  BPD(4-6)  MIINIMUM ALONG EACH OF THE AXIAL DIRECTIONS.
C  BPD(7-9)  MAXIMUM ALONG EACH OF THE AXIAL DIRECTIONS.
C
C--
\XPDS
C
C--CHECK IF WE GONE FAR ENOUGH BACKWARDS
1000  CONTINUE
      IF(APD(NOC+6)-BPD(NOC+3))1050,1100,1100
C--SUCCESS  -  NOW RETURN
1050  CONTINUE
      RETURN
C--MOVE BACK ONE MORE UNIT CELL
1100  CONTINUE
      APD(NOC+6)=APD(NOC+6)-1.
      GOTO 1000
      END
C
CODE FOR KDIST
      FUNCTION KDIST(NOC)
C--MOVES AN ATOM POSITIVELY FORWARD ONE UNIT CELL, AND CHECKS IF
C  THE ATOM IS STILL WITHIN THE SEARCH VOLUME FOR THE GIVEN AXIAL DIRECT
C
C  NOC  THE AXIAL DIRECTION ALONG WHICH TO MOVE.
C
C--THE RETURN VALUES OF 'KDIST' ARE :
C
C  -1  ATOM CANNOT BE FITTED IN THE REQUIRED VOLUME ANY MORE.
C   0  ATOM IS STILL WITHIN THE REQUIRED VOLUME FOR THIS DIRECTION.
C
C--THE ATOM IS ASSUMED TO HAVE BEEN POSITIONED OUTSIDE THE VOLUME BY
C  'XSHIFT', AND IT IS ALWAYS MOVED AT LEAST ONE UNIT CELL FOR EACH CALL
C  OF THIS ROUTINE.
C
C--THE COMMON BLOCK 'XPDS' IS USED AS :
C
C  APD(7-9)  CURRENT SET OF ATOMIC COORDINATES TO ALTER.
C  BPD(4-6)  MIINIMUM ALONG EACH OF THE AXIAL DIRECTIONS.
C  BPD(7-9)  MAXIMUM ALONG EACH OF THE AXIAL DIRECTIONS.
C
C--
\XPDS
C
      KDIST=-1
C--MOVE FORWARD ONE UNIT CELL
1000  CONTINUE
      APD(NOC+6)=APD(NOC+6)+1.
C--CHECK IF WE HAVE ARRIVED IN THE REQUIRED VOLUME
      IF(APD(NOC+6)-BPD(NOC+3))1000,1050,1050
C--CHECK IF WE HAVE GONE TOO FAR ALONG THIS AXIAL DIRECTION
1050  CONTINUE
      IF(APD(NOC+6)-BPD(NOC+6))1100,1100,1150
C--WE ARE IN THE REQUIRED VOLUME
1100  CONTINUE
      KDIST=0
1150  CONTINUE
      RETURN
      END
C
CODE FOR XDIST2
      SUBROUTINE XDIST2
C--SET UP A FEW CONSTANTS
C
\ISTORE
C
      DIMENSION IAPD(13)
      DIMENSION CC(4)
C
\STORE
\XDSTNC
\XCNTRL
\XCONST
\XUNITS
\XSSVAL
\XPDS
\XLST01
\XLST02
\XLST12
C
\QSTORE
C
      EQUIVALENCE (APD(1),IAPD(1))
      EQUIVALENCE (CC(1),AT)
C
      ISTAT2=0
C--LOAD LIST 1 AND LIST 2
      CALL XFAL01
      CALL XFAL02
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET UP THE SHIFT DATA
      DO 1050 I=1,3
      K=L1O2+I-1
      BPD(I)=0.
      DO 1000 J=1,I
      BPD(I)=BPD(I)+STORE(K)*STORE(K)
      K=K+3
1000  CONTINUE
      BPD(I)=1./SQRT(BPD(I))
1050  CONTINUE
C--CHECK THE INPUT DISTANCES PROVIDED
      DO 1150 I=1,4
      IF(CC(I)-ZERO)1100,1150,1150
C--SET UP THE DEFAULT
1100  CONTINUE
      CC(I)=ZERO
1150  CONTINUE
      AO=AMAX1(AC,BC)
      AP=AO*AO
      BP=AMIN1(AT,BT)
      BP=BP*BP
C--INDICATE THAT LIST 12 IS NOT STORE INITIALLY
      L12=NOWT
      M12=NOWT
C--DEFAULT TO AN INTER-ATOMIC DISTANCES CALCULATION
      IDIST=-1
9900  CONTINUE
C -- NORMAL AND ERROR RETURN
      RETURN
      END
C
CODE FOR KSYMOD
      SUBROUTINE KSYMOD (ISYMOD, IC, IL, N2P, L2C, L2, N2, MD2)
C
C----- MODIFY THE SYMMETRY CONDITIONS FOR PATTERSONS OR NO SYMMETRY CASE
C
\ISTORE
\STORE
\XUNITS
\XSSVAL
\QSTORE
\XIOBUF
C
      IF (ISYMOD .EQ. -1) THEN
C-----  PATTERSON PEAKS - MAKE CENTRIC AND DROP TRANSLATIONS
        WRITE(NCAWU,7710)
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,7710)
      ENDIF
7710    FORMAT(//,' Symmetry of the Patterson space group being used')
        IC = 1
        STORE(L2C) = 1.
        M2 = L2
        DO 7700 I = 1, N2
        CALL XZEROF (STORE(M2+9), 3)
        M2 = M2 + MD2
7700    CONTINUE
      ELSE IF (ISYMOD .EQ. 1) THEN
C----- NO SYMMETRY OPTION. MAKE NONCENTRO WITHOUT OPERATORS
        WRITE(NCAWU,7720)
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,7720)
      ENDIF
7720    FORMAT(//,' No symmetry operators will be used')
        IC = 0
        STORE(L2C) = 0.
C-----  NO CENTRINGS
        STORE(L2C+1) = 1.
        IL = 1
        N2P = IL
C-----  IDENTITY OPERATOR ONLY
        N2 = 1
      ENDIF
C
      RETURN
      END
CODE FOR XFAL31
      SUBROUTINE XFAL31(IADDD,IADDA)
C--LOAD LIST 31 INTO STORE AND SET UP THE CONSTANTS TO ALLOW FOR CELL
C  PARAMETER ERRORS
C
C  IADDD  ADDRESS OF THE AREA ASSIGNED TO THE DISTANCE V/VC MATRIX
C         (AN AREA OF 144 WORDS)
C  IADDA  ADDRESS OF THE AREA ASSIGNED TO THE ANGLES V/CV MATRIX.
C         (225 WORDS LONG)
C
C
C--LIST 1 MUST ALREADY HAVE BEEN LOADED
C
C--THE TERMS ARE STORED AT 'L31T', AND OCCUPY 12 LOCATIONS
C
C--
C
\ICOM31
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XLST01
\XLISTI
C
\XLST31
C
C
\QLST31
\QSTORE
C
C--LOAD LIST 31 FROM DISC
\IDIM31
      CALL XLDLST(31,ICOM31,IDIM31,0)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C----- SCALE DOWN THE ELEMENTS OF THE V/CV MATRIX
      A = STORE(L31K)
      M31 = L31
      M31L = M31 + MD31 -1
      DO 900 I = M31, M31L
        STORE(I)  =  STORE(I) * A
900   CONTINUE
C--FORM THE WORK AREA
      M31T=L31T
      L=L1M1
      N=L1P1
C--SET UP THE TERMS FOR THE CELL LENGTHS
      DO 1050 I=1,3
      A=1./STORE(N)
      DO 1000 J=1,3
      STORE(M31T)=STORE(L)*A
      M31T=M31T+1
      L=L+1
1000  CONTINUE
      N=N+1
1050  CONTINUE
C--SET UP THE TERMS FOR THE ANGLES
      STORE(M31T)=-STORE(L1P1+1)*STORE(L1P1+2)*SIN(STORE(L1P1+3))
      STORE(M31T+1)=-STORE(L1P1)*STORE(L1P1+2)*SIN(STORE(L1P1+4))
      STORE(M31T+2)=-STORE(L1P1)*STORE(L1P1+1)*SIN(STORE(L1P1+5))
C--SET UP THE V/VC MATRIX IN THE DISTANCE AND ANGLES AREAS
      M31=L31
      I=IADDD
      M=IADDA
      DO 1150 I1=1,6
      J=I
      N=M
      DO 1100 I2=I1,6
      STORE(I)=STORE(M31)
      STORE(J)=STORE(M31)
      STORE(M)=STORE(M31)
      STORE(N)=STORE(M31)
      I=I+1
      J=J+12
      M31=M31+1
      M=M+1
      N=N+15
1100  CONTINUE
      I=I+6+I1
      M=M+9+I1
1150  CONTINUE
9900  CONTINUE
C -- NORMAL AND ERROR RETURN
      RETURN
      END
C
CODE FOR XAPP31
      SUBROUTINE XAPP31(IADD)
C--CALCULATE THE TERMS NEEDED FOR THE CELL ERRORS FOR THE
C  CURRENT PAIR OF ATOMS
C
C--'IADD' IS THE ADDRESS AT WHICH TO PUT THE RESULTS
C
C--'DX', 'DY' AND 'DZ' ARE STORED IN C, D AND E, WHILE F CONTAINS
C  THE RECIPROCAL OF THE DISTANCE
C
C--
\ISTORE
C
\STORE
\XLST01
      COMMON /XDISTW/A,BB,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
C
\XLST31
C
\QSTORE
C
C--COMPUTE A FEW INITIAL CONSTANTS
      YZ=D*E
      XZ=C*E
      XY=C*D
C--CALCULATE THE DIFFERENTIALS FOR THE CELL LENGTHS
      STORE(IADD)=F*(C*C*STORE(L31T)+XY*STORE(L31T+1)+XZ*STORE(L31T+2))
      STORE(IADD+1)=F*(XY*STORE(L31T+3)+D*D*STORE(L31T+4)
     2 +YZ*STORE(L31T+5))
      STORE(IADD+2)=F*(XZ*STORE(L31T+6)+YZ*STORE(L31T+7)
     2 +E*E*STORE(L31T+8))
C--CALCULATE THE DIFFERENTIALS FOR THE ANGLES
      STORE(IADD+3)=F*YZ*STORE(L31T+9)
      STORE(IADD+4)=F*XZ*STORE(L31T+10)
      STORE(IADD+5)=F*XY*STORE(L31T+11)
      RETURN
      END
C
CODE FOR XFPCES
      SUBROUTINE XFPCES( IADD12, ISTACK, NW, NPART)
C--FORM THE POSITIONAL COORDINATE ERROR STACK
C
C--ENTRY PARAMETERS ARE :
C
C  IADD12  ADDRESS OF THE PREAMBLE BLOCK FOR THIS ATOM IN LIST 12
C  ISTACK  ADDRESS AT WHICH TO PUT THE RESULTS FOR THIS ATOM
C          (THIS IS UPDATED BY THIS SUBROUTINE)
C  NW      NUMBER OF WORDS PER STACK ENTRY
C  NPART   SET BY THIS ROUTINE TO THE NUMBER OF 'LS PARTS' FOR THE ATOM
C
C--THIS STACK IS USED BY 'XCOVAR' TO FORM THE CORRECT V/VC MATRIX
C
C--THE FORMAT OF THE STACK IS :
C
C  0  PARAMETER NUMBER
C  1  ADDRESS OF THE DATA FOR THE BLOCK CONTAINING THIS PARAMETER
C  2  ADDRESS OF THE DIAGONAL ELEMENT IN LIST 11 FOR THIS PARAMETER
C  3  MULTIPLIER FOR THIS PARAMETER
C
C--IF THE COORDINATE HAS NOT BE REFINED, THE FORMAT IS :
C
C  0  -1
C  1  NOT DEFINED
C  2  DIAGONAL ELEMENT TO BE USED
C  3  MULTIPLIER FOR THIS PARAMETER
C
C----- THE STACK IS REPEATED NPART TIMES
C--
\ISTORE
C
\STORE
\XLST12
\XUNITS
\XSSVAL
C
\QSTORE
C
      NPART = 0
C----- GET THE FIRST PART HEADER
      J = KFPH (IADD12)
C
900   CONTINUE
C----- WE MUST ALWAYS TRY FOR A FIRST PART
C--LOOP OVER COORDINATES
      DO 1200 I=4,6
C----- FIND THE PARAMETER POSITION
      ISTORE(ISTACK) = KFPP (I, J, K)
C--IS THIS PARAMETER REFINED
      IF(ISTORE(ISTACK))1000,1000,1050
C--COORDINATE NOT REFINED
1000  CONTINUE
      STORE(ISTACK+2)=0.
      STORE(ISTACK+3)=0.
      GOTO 1150
C--SET UP THE REMAINING INFORMATION
1050  CONTINUE
      ISTORE(ISTACK+2)=KBLCK(ISTORE(ISTACK))
      ISTORE(ISTACK+1)=M12B
      STORE(ISTACK+3)=1.
C--CHECK IF THE 'WEIGHT' CAN DIFFER FROM UNITY
      IF(ISTORE(J+1)-1)1150,1150,1100
C--'WEIGHT' CAN DIFFER FROM UNITY
1100  CONTINUE
      STORE(ISTACK+3)=STORE(K+1)
1150  CONTINUE
      ISTACK=ISTACK+NW
1200  CONTINUE
      NPART = NPART+1
C----- ANY MORE PARTS TO PROCESS ?
      IF (J) 1350, 1350, 1250
1250  CONTINUE
      IF (ISTORE(J)) 1350, 1350, 1300
1300  CONTINUE
C----- MORE PARTS TO BE SET UP
      J = ISTORE (J)
      GOTO 900
1350  CONTINUE
C
      RETURN
      END
C
CODE FOR XMVCD
      SUBROUTINE XMVCD(IADD1,NW1,IADD2,NW2)
C--MOVE VARIANCE - COVARIANCE DATA
C
C  IADD1  ADDRESS OF THE INFORMATION TO MOVE
C  NW1    LENGTH OF EACH ROW AS STORED AT IADD1
C  IADD2  ADDRESS AT WHICH TO PUT THE INFORMATION
C  NW2    LENGTH OF A ROW AT IADD2
C
C--NW1 IS ASSUMED TO BE LESS THAN OR EQUAL TO NW2
C
C--
\STORE
C
      I=IADD1
      J=IADD2
      DO 1050 K=1,NW1
      L=I
      M=J
      DO 1000 N=1,NW1
      STORE(M)=STORE(L)
      L=L+1
      M=M+1
1000  CONTINUE
      I=I+NW1
      J=J+NW2
1050  CONTINUE
      RETURN
      END
C
CODE FOR XMVCSP
      SUBROUTINE XMVCSP(IADD1,IADD2,NW2)
C--SET UP THE SYMMETRY INFORMATION IN THE V/VC AREA
C
C  IADD1  ADDRESS OF THE ATOM HEADER FROM WHICH THE SYMMETRY INFORMATION
C         SHOULD BE EXTRACTED.
C  IADD2  ADDRESS AT WHICH TO PUT THE INFORMATION
C  NW2    LENGTH OF A ROW AT IADD2
C
C--
\ISTORE
C
\STORE
\XLST02
C
\QSTORE
C
      NW1=3
      I=(IABS(ISTORE(IADD1+2))-1)*MD2+L2
      A=1.
      IF(ISTORE(IADD1+2))1000,1050,1050
1000  CONTINUE
      A=-1.
1050  CONTINUE
      J=IADD2
      DO 1150 K=1,NW1
      L=I
      M=J
      DO 1100 N=1,NW1
      STORE(M)=STORE(L)*A
      L=L+1
      M=M+1
1100  CONTINUE
      I=I+NW1
      J=J+NW2
1150  CONTINUE
      RETURN
      END
C
CODE FOR XCOVAR
      SUBROUTINE XCOVAR ( LS, NS, NW, LF, JA, IPART, NATOM)
C
C----- CALCULATE AN ATOMIC PARAMETER VARIANCE COVARIANCE MATRIX
C      FROM THE GIVEN LS PARAMETER V/COV MATRIX
C
C
C  LS  ADDRESS OF THE FIRST WORD OF THE STACK
C  NS  NUMBER OF ENTRIES IN THE STACK
C  NW  NUMBER OF WORDS PER ENTRY IN THE STACK
C  LF  ADDRESS AT WHICH TO SET UP THE V/CV MATRIX
C  JA  ADDRESS AT WHICH TO SET UP THE 'MULTIPLIERS' OR 'WEIGHTS'
C      AS A DIAGONAL MATRIX
C  IPART(NATOM) HOLDS THE NUMBER OF 'PARTS' FOR EACH ATOM
C
C--FORMAT OF THE STACK :
C
C  0  LEAST SQUARES PARAMETER NUMBER
C  1  ADDRESS OF THE BLOCK INFORMATION FOR THIS PARAMETER
C  2  ADDRESS OF THE DIAGONAL ELEMENT FOR THIS PARAMETER
C  3  COEFFICIENT FOR THIS PARAMETER
C
C--IF THE PARAMETER NUMBER IS NEGATIVE, THE FORMAT IS :
C
C  0  -1
C  1  NOT DEFINED
C  2  DIAGONAL ELEMENT TO USE
C  3  COEFFICIENT TO USE
C
C--THIS PATTERN IS REPEATED 'NS' TIMES STARTING FROM 'LS' EVERY 'NW' WOR
C
C--
      DIMENSION IPART(NATOM)
\ISTORE
\STORE
\XUNITS
\XSSVAL
\QSTORE
\XIOBUF
C
      DATA NPAR/3/
C
C----- CHECK IF ALL ATOMS HAVE ONLY ONE PART, GET NO. OF LS PARAMETERS
      NLS = 0
      MPART = 0
      DO 900 I = 1,NATOM
      NLS = NLS + NPAR * IPART(I)
      MPART = MAX( MPART, IPART(I) )
900   CONTINUE
      IF (MPART .EQ. 1) GOTO 950
C
C
C----- CONVERT THE VCV MATRIX FOR THE LS PARAMETERS INTO ONE FOR
C      THE PHYSICAL PARAMETERS.
C
C----- RESERVE SOME SPACE FOR THE LS VCV MATRIX
      NSS = NLS * NLS
      IVCV = KSTALL(NSS)
C----- RESERVE SOME SPACE FOR THE PARTIAL PRODUCT
      NPHYS = 3 * NATOM
      NPP = NLS * NPHYS
      IPP = KSTALL(NPP)
C----- RESERVE A PARTS PER PARAMETER VECTOR
      IPPV = KSTALL(NPHYS)
C----- RESERVE SPACE FOR THE DIAGONAL 'WEIGHTS' MATRIX
      IWTS = KSTALL(NSS)
C----- DID WE HAVE ENOUGH ROOM?
      IF (IERFLG .LE. 0) GOTO 9000
C
C----- FETCH THE LS VCV MATRIX
      CALL XGVCV (LS, NLS, NW, IVCV, IWTS)
C----- COMPRES THE 'WEIGHTS' MATRIX TO A VECTOR IN COLUMN 1
      J = IWTS
      K = IWTS
      DO 1300 I = 1,NLS
      STORE(J) = STORE(K)
      J = J + 1
      K = K + 1 + NLS
1300  CONTINUE
C
C----- SET UP THE PARTS-PER-PARAMETER VECTOR
      K = IPPV
      DO 1400 I = 1, NATOM
      ISTORE(K)   = IPART(I)
      ISTORE(K+1) = IPART(I)
      ISTORE(K+2) = IPART(I)
      K = K + 3
1400  CONTINUE
C
C----- FORM THE FIRST PARTIAL PRODUCT
      CALL XFVCV (NLS, NLS, NPHYS, STORE(IVCV), STORE(IWTS), STORE(IPP),
     1 ISTORE(IPPV), 1, 3 )
C
C----- FORM THE FINAL PRODUCT
      CALL XFVCV (NLS, NPHYS, NPHYS, STORE(IPP), STORE(IWTS), STORE(LF),
     1 ISTORE(IPPV), 2, 3 )
C
C----- GENERATE THE MODIFIED 'WEIGHT' MATRIX
      CALL XFWM ( NLS, NPHYS, STORE(IWTS), STORE(JA), ISTORE(IPPV), 3)
C
C----- RESTORE THE WORK AREA
      CALL XSTRLL (IVCV)
      GOTO 9900
C
950   CONTINUE
C----- ONE TO ONE CORRESPONDANCE BETWEEN PHYSICAL AND LS PARAMETERS
      CALL XGVCV ( LS, NS, NW, LF, JA)
      GOTO 9900
C
9000  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU,9100)
      WRITE(NCAWU,9100)
      WRITE ( CMON ,9100)
      CALL XPRVDU(NCVDU, 1,0)
9100  FORMAT(' Error allocating space for e.s.d. calculation')
9900  CONTINUE
      RETURN
      END
C
C
CODE FOR XFVCV
      SUBROUTINE XFVCV (IDM1, IDM2, IDM3, V, A, U, NPARTS, IPOINT, NPAR)
C
C----- MATRIX MULTIPLIER FOR GENERATION OF V/CV MATRIX FOR DERIVED PARAM
C
C---- CALLED TWICE.
C      IPOINT =  1 FOR FIRST CALL
C      ON BOTH CALLS,
C      IDM1 = NO OF LS PARAM
C      IDM3 = NO OF PHYSICAL PARAMS
C      NPAR = NUMBER OF PARAMETERS PER ATOM
C------ON FIRST CALL,
C      V IS LS V/CV MATRIX,
C      A IS 'WEIGHT' VECTOR, REPRESENTING TRANSPOSE OF DIAGONAL 'WEIGHT'
C      U IS THE PARTIAL PRODUCT MATRIX
C      NPARTS IS VECTOR OF LS PATRTS PER PHYSICAL PARAMETER
C      IDM2 = NO OF LS PARAMS
C
C------ON SECOND CALL
C      V IS PARTIAL PRODUCT MATRIX
C      A IS 'WEIGHT' VECTOR, REPRESENTING TRANSPOSE OF DIAGONAL 'WEIGHT'
C      U IS PHYSICAL V/CV MATRIX
C      IDM2 = NO OF PHYSICAL PARAMS
C
      DIMENSION V(IDM1,IDM2), A(IDM1), U(IDM2,IDM3), NPARTS(IDM3)
C
C      U(I,J) = SUM [ A(L)*V(L,I)], L = WEIGHT ELEMENTS FOR PARAMETER J
C
      LBASE = 0
      DO 1300 I = 1, IDM2
      IF (IPOINT .EQ. 1)    LBASE = 0
      INDEXF = I
      ISUB  = I
C
            DO 1200 J = 1,IDM3
            IF (IPOINT .EQ. 1) THEN
                  INDEXF = J
            ELSE
                  ISUB = J
            ENDIF
            LOFF = MOD (INDEXF-1, NPAR) + LBASE + 1
            SUM = 0.0
C
                  DO 1100 K = 1, NPARTS(INDEXF)
                  L = NPAR * (K-1)  + LOFF
                  SUM = SUM + V(L,ISUB) * A(L)
1100              CONTINUE
C
            U(I,J) = SUM
            IF (IPOINT .EQ. 1) THEN
             IF (MOD(INDEXF,NPAR).EQ.0) LBASE=LBASE+NPAR*NPARTS(INDEXF)
            ENDIF
1200        CONTINUE
C
      IF (IPOINT .NE. 1)  THEN
            IF (MOD(INDEXF,NPAR).EQ.0) LBASE=LBASE+NPAR*NPARTS(INDEXF)
      ENDIF
1300  CONTINUE
      RETURN
      END
C
CODE FOR XFWM
      SUBROUTINE XFWM (IDM1, IDM2, A, B, NPARTS, NPAR)
C
C----- GENERATE MODIFIED WEIGHT MATRIX FOR V-CV MATRIX
C
C      IDM1 = NO OF LS PARAM
C      IDM2 = NO OF PHYSICAL PARAMS
C      NPAR = NUMBER OF PARAMETERS PER ATOM
C      A IS 'WEIGHT' VECTOR, REPRESENTING DIAGONAL 'WEIGHT' MATRIX
C      B IS THE NEW 'WEIGHT' MATRIX FOR PHYSICAL PARAMS
C      NPARTS IS VECTOR OF LS PATRTS PER PHYSICAL PARAMETER
C
C
      DIMENSION A(IDM1), B(IDM2,IDM2), NPARTS(IDM2)
C
C      B(I,I) = SUM [ A(L)**2], L = WEIGHT ELEMENTS FOR PARAMETER I
C
C----- ZERO THE WEIGHT MATRIX
      NS = IDM2*IDM2
      CALL XZEROF (B(1,1),NS)
C
C
      LBASE = 0
      DO 1200 I = 1, IDM2
      INDEXF = I
C
      LOFF = MOD (INDEXF-1, NPAR) + LBASE + 1
      SUM = 0.0
C
             DO 1100 K = 1, NPARTS(INDEXF)
             L = NPAR * (K-1)  + LOFF
             SUM = SUM + A(L) * A(L)
1100         CONTINUE
C
      B(I,I) = SUM
      IF (MOD(INDEXF,NPAR).EQ.0) LBASE = LBASE + NPAR * NPARTS(INDEXF)
1200  CONTINUE
      RETURN
      END
C
C
CODE FOR XGVCV
      SUBROUTINE XGVCV ( LS, NS, NW, LF, JA)
C
C----- GET THE V/COV MATRIX FOR THE GIVEN LS PARAMETERS
C
C  LS  ADDRESS OF THE FIRST WORD OF THE STACK
C  NS  NUMBER OF ENTRIES IN THE STACK
C  NW  NUMBER OF WORDS PER ENTRY IN THE STACK
C  LF  ADDRESS AT WHICH TO SET UP THE V/CV MATRIX
C  JA  ADDRESS AT WHICH TO SET UP THE 'MULTIPLIERS' OR 'WEIGHTS'
C      AS A DIAGONAL MATRIX
C
C--FORMAT OF THE STACK :
C
C  0  LEAST SQUARES PARAMETER NUMBER
C  1  ADDRESS OF THE BLOCK INFORMATION FOR THIS PARAMETER
C  2  ADDRESS OF THE DIAGONAL ELEMENT FOR THIS PARAMETER
C  3  COEFFICIENT FOR THIS PARAMETER
C
C--IF THE PARAMETER NUMBER IS NEGATIVE, THE FORMAT IS :
C
C  0  -1
C  1  NOT DEFINED
C  2  DIAGONAL ELEMENT TO USE
C  3  COEFFICIENT TO USE
C
C--THIS PATTERN IS REPEATED 'NS' TIMES STARTING FROM 'LS' EVERY 'NW' WOR
C
C--
\TYPE11
\ISTORE
C
\STORE
\XSTR11
C
\QSTORE
\QSTR11
C
      N=LS
      IA=LF
      L=NS*NS
      JB=LF+L-1
      IC=JA
      IB=JA
      DO 1000 I=LF,JB
      STORE(I)=0.
      STORE(IC)=0.
      IC=IC+1
1000  CONTINUE
C--FORM THE VARIANCE-COVARIANCE MATRIX
      DO 1600 I=1,NS
C--CHECK THAT THIS PARAMETER HAS BEEN REFINED
      IF(ISTORE(N))1050,1050,1100
C--NOT REFINED
1050  CONTINUE
      STORE(IA)=STORE(N+2)
      STORE(IB)=STORE(N+3)
      IA=IA+NS+1
      GOTO 1550
1100  CONTINUE
      K=ISTORE(N+2)
C--STORE THE DIAGONAL ELEMENTS
      STORE(IA)=STR11(K)
      STORE(IB)=STORE(N+3)
C--CHECK IF THIS IS THE LAST PARAMETER
      IF(I-NS)1150,1650,1650
1150  CONTINUE
      IC=IA+NS
      IA=IA+1
      ID=I+1
      M=N+NW
C--SET UP THE OFF-DIAGONAL TERMS
      DO 1500 J=ID,NS
C--CHECK THAT THE PARAMETER THAT WE HAVE MET IS TO BE REFINED
      IF(ISTORE(M))1450,1450,1200
C--CHECK IF THE TWO PARAMETERS ARE IN THE SAME BLOCK
1200  CONTINUE
      IF(ISTORE(N+1)-ISTORE(M+1))1450,1250,1450
C--COMPUTE THE ADDRESS OF THE OFF-DIAGONAL TERM IN THE L.S. MATRIX
1250  CONTINUE
      K=ISTORE(N)-ISTORE(M)
      IF(K)1300,1300,1350
1300  CONTINUE
      K=ISTORE(N+2)-K
      GOTO 1400
1350  CONTINUE
      K=ISTORE(M+2)+K
1400  CONTINUE
      STORE(IA)=STR11(K)
      STORE(IC)=STR11(K)
1450  CONTINUE
      M=M+NW
      IA=IA+1
      IC=IC+NS
1500  CONTINUE
      IA=IA+I
1550  CONTINUE
      IB=IB+NS+1
      N=N+NW
1600  CONTINUE
1650  CONTINUE
      RETURN
      END
C
CODE FOR XMD3B
      SUBROUTINE XMD3B(IADD1,IADD2,IADD3,N,N3)
C--MULTIPLY A DIAGONAL MATRIX ONTO A 3 BLOCK BAND MATRIX
C
C  IADD1  ADDRESS OF THE DIAGONAL MATRIX
C  IADD2  ADDRESS OF THE BAND MATRIX
C  IADD3  ADDRESS OF THE PRODUCT  -  ZEROS ARE NOT SET.
C  N      ORDER OF THE MATRICES DIVIDED BY 3
C  N3 (I.E. THE ORDER OF THE MATRICES)     =N*3
C
C--
\STORE
C
      K=IADD3
      L=IADD2
      M=IADD1
      DO 1050 I=1,N
      DO 1000 J=1,3
      A=STORE(M)
      STORE(K)=STORE(L)*A
      STORE(K+1)=STORE(L+1)*A
      STORE(K+2)=STORE(L+2)*A
      K=K+N3
      L=L+N3
      M=M+N3+1
1000  CONTINUE
      K=K+3
      L=L+3
1050  CONTINUE
      RETURN
      END
C
CODE FOR XPRTA
      SUBROUTINE XPRTA(A,L,M)
C
C
      DIMENSION A(L,M)
C
\XUNITS
\XSSVAL
C
      CALL XLINES
      DO 1050 I=1,L
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1000)(A(I,J),J=1,M)
      ENDIF
1000  FORMAT(1X,9F13.9)
1050  CONTINUE
      RETURN
      END
CODE FOR XVOID
      SUBROUTINE XVOID
C       CODE DEVISED AND PRODUCED BY ANDY BROWN AS A PART II PROJECT
C       FINDS VOIDS IN CRYSTAL STRUCTURE
C
C       THIS ROUTINE SEARCHES FOR THE ALL POINTS IN AN ASSYMETRIC
C       UNIT AND CHECKS IF IT IS WITHIN A CERTAIN DISTANCE OF ANY
C       OF THE ATOMS IN THE STRUCTURE SAVING THE POINTS WITH NO CONTACT.
C
C
C       LN1    INPUT LIST TYPE
C       LN2    OUTPUT LIST TYPE
C       TOLER   CURRENTLY A DUMMY
C
C       THE COMMON BLOCK /XWORKA/ IS USED :
C
C       JB  ADDRESS OF THE TEMP. STORAGE FOR ATOMS
C       JC  ADDRESS OF THE ATOM HEADER FOR MOVING ATOMS FROM 'JB'
C       JD  WORK SPACE FOR 'KATOMS'
C       JE  START OF DISTANCE STACK.
C       JF  NUMBER OF ATOMS LEFT TO SCAN
C       JG  CURRENT LAST ENTRY IN LIST 5 OR 10
C       JH  MD5-1
C       JI  MD5+MD5
C       JK  ADDRESS OF LAST ATOM ON PRINCIPAL DISTANCE STACK
C       JL  NEXT FREE ADDRESS AFTER PRINCIPAL DISTANCE STACK
C       JT  WORDS PER ENTRY IN THE STACK
C       JU  5 WORD WORK AREA
C       SX  DISTANCE NO BONDED CONTACT TO USE
C
C       THE FOLLOWING VARIABLES MUST BE SET ON ENTRY TO KDIST1:-
C
C       AT     MINIMUM ALLOWED DISTANCE FOR DISTANCES
C       AC     MAXIMUM ALLOWED DISTANCE FOR DISTANCES
C       BT     MINIMUM ALLOWED DISTANCE FOR ANGLES
C       BC     MAXIMUM ALLOWED DISTANCE FOR ANGLES
C       AO     MAXIMUM ALLOWED DISTANCE OVERALL
C       AP     MAXIMUM ALLOWED DISTANCES SQUARED OVERALL
C       BP     MINIMUM ALLOWED DISTANCE SQUARED OVERALL
C       M5A    ADDRESS OF THE CURRENT TARGET ATOM IN LIST 5
C       M5     ADDRESS OF THE FIRST ATOM TO MOVE AROUND IN LIST 5
C
C
C       ATOMS WHICH FORM ACCEPTABLE CONTACTS ARE STORED IN A STACK
C       WHICH HAS THE FOLLOWING FORMAT :
C
C       0  ADDRESS OF THE ATOM IN LIST 5
C       1  ACCEPTANCE FLAG
C
C          1  ACCEPTABLE TO NONE
C          2  DISTANCES ONLY
C          3  ANGLES ONLY
C          4  ACCEPTABLE TO BOTH
C
C       2  S, THE SYMMETRY MATRIX TO BE USED (NEGATIVE FOR CENTRE OF SYM
C       3  NON-PRIMITIVE LATTICE INDICATOR
C       4  T(X)
C       5  T(Y)
C       6  T(Z)
C       7  TRANSFORMED X
C       8  TRANSFORMED Y
C       9  TRANSFORMED Z
C      10  DISTANCE
C      11  DISTANCE SQUARED
C      12  ADDRESS IN LIST 12  (IF USED).
C      13  TARGET CONTACT DISTANCE FOR RESTRAINTS (OPTIONAL)
C
C
      CHARACTER *80 CSRQ
C
\ISTORE
\ICOM12
C
      PARAMETER (NCONT=2)
      DIMENSION INCONT(NCONT)
C
\STORE
\XDSTNC
\XSSVAL
\XLISTI
\XCONST
\XCHARS
\XLEXIC
\XWORKA
\XLST01
\XLST02
\XLST05
\XLST12
\XLST14
\XERVAL
\XOPVAL
\XIOBUF
\XUNITS
C
\QSTORE
\QLST12
C
C----- MAXIMUM DISTANCE FOR A 1-3 CONTACT, AND ITS SQUARE
      DATA D13 / 3.0 /, D13S / 9.0 /
      DATA TOLER /0.6/, ITRANS / 0 /
C
      WRITE(NCAWU,'(A)') 'This is VOIDS'
C
C-------SET THE INITIAL TIMING
C
      CALL XTIME1(2)
C
C-------READ THE INPUT DATA
C
      IF ( KLEXAN(IULN,IFIRST,LENGTH) .LT. 0 ) GO TO 9910
C
C-------DATA INPUT  -  CLEAR THE STORE
C
      CALL XRSL
      CALL XCSAE
C
C-------CLEAR A BUFFER
C
      JU = NFL
      NFL = NFL + 5
C
C-------LOAD THE INPUT LIST
C
      LN1=KTYP05(MX)
      CALL XLDR05(LN1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C
C-------FIND THE OUTPUT LIST TYPE
C
      LN2=KTYP05(MY)
C
C-------SET THE DEFAULT TEMPERATURE FACTOR OR MULTIPLIER(****CHANGE THIS
C
      JT=12
      BMAX = D13
      AT = 0.5
      AC = D13
C-------NO ANGLES TO BE LOOKED FOR
      BT = 0.
      BC = 0.
C-------SET THE INPUT PARAMETER DEFAULTS
      SX=3.0
C
C-------LOAD LISTS 1 AND 2, AND SET UP SOME CONSTANTS
      CALL XDIST2
C
C-------LOAD THE FOURIER LIMITS
      CALL XFAL14
C
C-------RESOLUTION
      RES=0.8
      J = 27
      DO 500 I = 1,NCONT
      INCONT(I) = J
      J = J -12
500   CONTINUE
C
      IF ( IERFLG .LT. 0 ) GO TO 9900
C
C--SET THE DIMENSION OF THE COMMON BLOCK FOR LIST 12
      IDIM12=40
C--INDICATE THAT LIST 12 IS NOT TO BE USED
      DO 1050 I=1,IDIM12
      ICOM12(I)=NOWT
1050  CONTINUE
      L12=-1
      M12=-1
C-------SET UP A FEW STACK CONSTANTS
      JB=NFL
      JC=JB+MD5
      JD=JC+20
      JE=JD+30
C-------CHECK THE STORE AREA
      IF ( JE - LFL ) 1000 , 9920 , 9920
1000  CONTINUE
C
C-------PREPARE FOR PROCESSING OF THE LEXICAL SCANNER OUTPUT
      CALL XILEXP(IULN,IFIRST)
C
C-------MAIN INSTRUCTION CYCLING LOOP  -  SET THE BUFFER ADDRESS AFTER T
1100  CONTINUE
      IF(KLDNLR(I))2100, 1150, 4200
C
C-------SET THE POINTER TO THE ATOM STACK
1150  CONTINUE
      GOTO (1250, 1750, 1600, 1200), MG
1200  STOP346
C
C-------'DISTANCE' INSTRUCTION
1250  CONTINUE
      IF(ME)1300,1300,1400
1300  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1350)
      ENDIF
      WRITE(NCAWU,1350)
1350  FORMAT(/19H No arguments found)
      GOTO 4200
C
C-------READ THE DISTANCE FOR NON-BONDED CONTACT
1400  CONTINUE
      IF(KSYNUM(Z))1450,1550,1450
1450  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1500)ISTORE(MF+1)
      ENDIF
      WRITE(NCAWU,1500) ISTORE(MF+1)
1500  FORMAT(/35H New value of wrong type or missing,
     2 16H at about column,I5)
      GOTO 4200
1550  CONTINUE
      SX=Z
      BMAX = SX
      AT = 0.5
      AC = SX
      GOTO 4250
C
C-------'CONTACTS' INSTRUCTION
1600  CONTINUE
      IF(ME)1300,1300,1650
1650  CONTINUE
      DO 1665 I = 1, NCONT
C
C-------READ THE DISTANCE FOR NON-BONDED CONTACT
      IF(KSYNUM(Z))1450,1660,1450
1660  CONTINUE
      INCONT(I) = NINT(Z)
1665  CONTINUE
      GOTO 4250
C
C-------'RESOLUTION' INSTRUCTION
1750  CONTINUE
      IF(ME)1300,1300,1800
C
C-------CHECK THE TYPE OF ARGUMENT
1800  CONTINUE
      IF(KSYNUM(Z))1450,2000,1450
C
C-------STORE THE NUMBER AND RESET THE FLAG
2000  CONTINUE
      RES = Z
      GOTO 4250
C
C
C-------MAIN TERMINATION ROUTINES
2100  CONTINUE
C(****CHANGE THIS****)
2110  FORMAT ('Dist. of contacts is',F6.2/'Grid resolution is'
     2,F6.2/'Contact are R gt ',I2,',L lt ',I2,',else M atoms')
      WRITE(NCAWU,2110) AC,RES,INCONT(1),INCONT(2)
C
C-------ASSYMETRIC UNIT DIMENSIONS
      AS1=STORE(L14+2)-STORE(L14)
      AS2=STORE(L14+8)-STORE(L14+6)
      AS3=STORE(L14+14)-STORE(L14+12)
C
C-------WE NEED TO SCALE THE LIMITS BY THE RESOLUTION AND TURN INTO
C-------INTEGERS-GET NWE RESOLUTIONS IN EACH DIRECTION SO NO PART
C-------OF RELEVANT CELL IS LOST.
C
      NARBA=NINT((STORE(L1P1)*AS1)/RES)
      RESX =(STORE(L1P1)*AS1)/FLOAT(NARBA)
      NARBA=NINT(STORE(L1P1)/RESX)
 
      NARBB=NINT((STORE(L1P1+1)*AS2)/RES)
      RESY =(STORE(L1P1+1)*AS2)/FLOAT(NARBB)
      NARBB=NINT(STORE(L1P1+1)/RESY)
 
      NARBC=NINT((STORE(L1P1+2)*AS3)/RES)
      RESZ =(STORE(L1P1+2)*AS3)/FLOAT(NARBC)
      NARBC=NINT(STORE(L1P1+2)/RESZ)
C
C
C-------SET THE TARGET ATOM ADDRESSES
      IATOM = 0
      IABAT=NFL
      M5A = IABAT
      NFL=NFL+6
C
C-------SAVE CURRENT SRQ
C
      CALL XSSRQ(IADSRQ,NSRQ)
C
C-------LOOP OVER ASSYMETRIC UNIT
C
      DO 3351 IABX=NARBA*STORE(L14)+1,NARBA*STORE(L14+2)+1
      STORE(IABAT+4)=FLOAT(IABX-1)/FLOAT(NARBA)
         DO 3352 IABY=NARBB*STORE(L14+6)+1,NARBB*STORE(L14+8)+1
         STORE(IABAT+5)=FLOAT(IABY-1)/FLOAT(NARBB)
            DO 3353 IABZ=NARBC*STORE(L14+12)+1,
     2                   NARBC*STORE(L14+14)+1
            STORE(IABAT+6)=FLOAT(IABZ-1)/FLOAT(NARBC)
C
C-------INITIALISE A DUMMY ATOM
C
            STORE(IABAT+2)=1.0
            STORE(IABAT+3)=.05
C
C-------FIX THE RADII FOR 1-2 CONTACTS
            AO = AC
            AP = AC * AC
C
C-------BEGINNING OF LIST 5
C-------RESET THE CONTACT ATOM AND FUNCTION VECTOR ADDRESSES
            M5=L5
C
C
C-------RESET BEGINNING OF DISTANCE STACK TO JE EVERY TIME
            NFL=JE
C
C
C ----- SET JFNVC TO 'NOWT' TO REDUCE SEARCH TIME
            JFNVC = NOWT
            NBONDS = 0
C-------COMPUTE DISTANCE STACK TO A TWO BOND MAXIMUM
            NDIST = KDIST1( N5, JL, JT, JFNVC, TOLER, ITRANS)
            NBONDS = NDIST
C-------JK IS CURRENT NEXT FREE ADDRESS - SAVE AND SET LAST ENTRY
            NFL = JL
            JK = JL - JT
C
3350   CONTINUE
            IF(NBONDS.LE.0) THEN
C-------WE ARE INTERESTED IN THIS POINT
            IATOM = IATOM + 1
            IF(IATOM.EQ.1) THEN
C-------WRITE TO THE SYSTEM REQUEST FILE(SRQ)
C
            CSRQ(1:80) = ' '
            CSRQ(1:80) = '#EDIT'
            CALL XISRC(CSRQ)
            END IF
C
C-------LOOP OVER 26 ADJACENT POINTS TESTING FOR CONTACTS
C
            CONT=0
            DO 3354 IX1=-1,1
            STORE(IABAT+4)=(FLOAT(IABX-1)/FLOAT(NARBA))
     2                     +IX1/(FLOAT(NARBA))
               DO 3355 IY1=-1,1
               STORE(IABAT+5)=(FLOAT(IABY-1)/FLOAT(NARBB))
     2                        +IY1/(FLOAT(NARBB))
                  DO 3356 IZ1=-1,1
                  STORE(IABAT+6)=(FLOAT(IABZ-1)/FLOAT(NARBC))
     2                          +IZ1/(FLOAT(NARBC))
C
C
C-------BEGINNING OF LIST 5
C-------RESET THE CONTACT ATOM AND FUNCTION VECTOR ADDRESSES
                  M5=L5
C
C
C-------RESET BEGINNING OF DISTANCE STACK TO JE EVERY TIME
                  NFL=JE
C
C
                  MBONDS = 0
C-------COMPUTE DISTANCE STACK TO A TWO BOND MAXIMUM
                  MDIST = KDIST1( N5, JL, JT, -1, TOLER, ITRANS)
                  MBONDS = MDIST
C-------JK IS CURRENT NEXT FREE ADDRESS - SAVE AND SET LAST ENTRY
                  NFL = JL
                  JK = JL - JT
C
3357  CONTINUE
                  IF(MBONDS.LE.0) THEN
C-------ADJACENT POINT IN VOID
                  CONT = CONT + 1
                  END IF
3356              CONTINUE
3355           CONTINUE
3354        CONTINUE
C
C-------RESET TO ORIGINAL ATOM
C
            STORE(IABAT+4)=FLOAT(IABX-1)/FLOAT(NARBA)
            STORE(IABAT+5)=FLOAT(IABY-1)/FLOAT(NARBB)
            STORE(IABAT+6)=FLOAT(IABZ-1)/FLOAT(NARBC)
C
C-------WE NOT IN AN ATOM SO SAVE POINT IN SRQ
C
            CSRQ = ' '
            IF (CONT.GE.INCONT(1)) THEN
            WRITE(CSRQ,'(A7,I4,5F11.6)')'ATOM R ',
     2         IATOM, STORE(IABAT+2), STORE(IABAT+3),
     3         STORE(IABAT+4), STORE(IABAT+5), STORE(IABAT+6)
            ELSE IF (CONT.LE.INCONT(2)) THEN
            WRITE(CSRQ,'(A7,I4,5F11.6)')'ATOM L ',
     2         IATOM, STORE(IABAT+2), STORE(IABAT+3),
     3         STORE(IABAT+4), STORE(IABAT+5), STORE(IABAT+6)
            ELSE
            WRITE(CSRQ,'(A7,I4,5F11.6)')'ATOM M ',
     2         IATOM, STORE(IABAT+2), STORE(IABAT+3),
     3         STORE(IABAT+4), STORE(IABAT+5), STORE(IABAT+6)
            END IF
            CALL XISRC(CSRQ)
            END IF
3353        CONTINUE
3352     CONTINUE
3351  CONTINUE
C
      IF (IATOM.GT.0) THEN
C-------END EDIT LIST5
C
      CSRQ(1:80) = ' '
      CSRQ(1:80) = 'END'
      CALL XISRC(CSRQ)
      END IF
      WRITE (NCAWU,*) 'no. of pseudo atoms=',IATOM
C
C-------REINSTATE PREVIOUS SRQ
C
      CALL XRSRQ(IADRSQ,NSRQ)
C
C
3720  CONTINUE
C
C-------END ROUTINE
      GO TO 9000
C
C
C-------ERROR EXIT FOR THESE ROUTINES
4200  CONTINUE
      CALL XPCA(ISTORE(MD+4))
      LEF=LEF+1
4250  CONTINUE
      GOTO 1100
C
C-------FINAL MESSAGES
9000  CONTINUE
C
      CALL XOPMSG ( IOPLSM , IOPEND , 500 )
C
      CALL XTIME2(2)
      CALL XCSAE
      CALL XRSL
      RETURN
9900  CONTINUE
C
C-------ERRORS
      CALL XOPMSG ( IOPHYD , IOPABN , 0 )
      GO TO 3720
9910  CONTINUE
C
C-------INPUT ERRORS
      CALL XOPMSG ( IOPHYD, IOPCMI, 0 )
      GO TO 9900
9920  CONTINUE
C
C-------INSUFFICIENT SPACE
      CALL XOPMSG ( IOPHYD , IOPSPC , 0 )
      GO TO 9900
C
      END
