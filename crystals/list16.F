C $Log: not supported by cvs2svn $
C
CODE FOR XPRC16
      SUBROUTINE XPRC16
C--FORM THE RELOCATABLE VERSION OF LIST 16  -  LIST 26 ON THE DISC.
C
C--THIS ROUTINE USES AND SETS WHERE NECESSARY THE FOLLOWING VARIABLES :
C
C  LK      THE LENGTH OF THE STORED ARGUMENT DETAILS IN WORDS.
C  LK1     THE LENGTH OF THE COMPLETE ARGUMENT IN WORDS MINUS ONE.
C  LK2     THE LENGTH OF THE COMPLETE ARGUMENT PRODUCED BY THE LEXICAL
C          SCANNER. THE FORMAT OF THIS IS AS FOLLOWS :
C
C          0  THE ARGUMENT TYPE :
C
C             -1  A VARIABLE, STORED AS 'LK' WORDS OF A4 CHARACTER DATA.
C              0  A NUMBER, WHOSE VALUE IS GIVEN IN WORD 2.
C             >0  AN OPERATOR, WHOSE TYPE IS GIVEN BY THE NUMBER IN THIS
C                 LOCATION. ALLOWED VALUES ARE :
C
C                 1  +
C                 2  -
C                 3  *
C                 4  /
C                 5  **
C                 6  (
C                 7  )
C                 8  ,
C                 9  =
C
C          1  THE CHARACTER NUMBER ON THE CARD WHERE THIS ARGUMENT ENDED
C          2  THE FIRST WORD OF THE ARGUMENT. FOR A NUMBER THIS IS THE
C             VALUE, WHILE FOR THE OTHERS IT IS THE START OF OF 'LK' WOR
C             CONTAINING THE ARGUMENT IN CHARACTER FORM.
C          3  THE SECOND WORD OF THE ARGUMENT.
C
C  NWCARD  THE NUMBER OF WORDS PER CARD WHEN IT IS STORED IN A4 FORMAT.
C  LARG    THE DISC ADDRESS OF THENEXT DATA RECORD HEADER BLOCK TO
C          BE PROCESSED.
C  MARG    THE DISC ADDRESS OF THE LAST DATA RECORD HEADER BLOCK
C          LOOKED AT BY 'KLDNLR'.
C  MDARG   THE NUMBER OF WORDS PER ARGUMENT, EQUAL TO 'LK2'.
C  NARG    THE NUMBER OF ARGUMENTS CURRENTLY IN CORE, EQUAL TO 'ME'.
C  MA      THE DISC ADDRESS OF THE NEXT DATA RECORD HEADER BLOCK TO
C          BE PROCESSED BY THE PRINT ROUTINE 'XPCLNN'.
C  MB      THE DISC ADDRESS OF THE LAST DATA RECORD HEADER BLOCK
C          PROCESSED BY THE PRINT ROUTINE 'XPCLNN'.
C  MC      THE NUMBER OF CARDS PRINTED MINUS ONE.
C  MD      THE ADDRESS IN CORE OF THE CURRENT SET OF ARGUMENTS.
C  ME      THE NUMBER OF ARGUMENTS ON THE CURRENT CARD.
C  MF      THE ADDRESS IN CORE OF THE CURREN ARGUMENT.
C  MG      THE FUNCTION OF THIS CARD, IN THE RANGE 1 TO N.
C
C  MQ      THE ADDRESS IN CORE AT WHICH ATOM AND PARAMETER HEADER BLOCKS
C          ARE SET UP.
C
C--THE COMMON BLOCK 'XLST26' CONTROLS THE OUTPUT OF DATA TO
C  THE DISC. THE VARIABLES ARE USED AS FOLLOWS :
C
C  L26D    THE ADDRESS OF THE LAST DATA RECORD OUTPUT TO THE DISC.
C  M26D    THE ADDRESS OF THE NEXT DATA RECORD TO BE OUTPUT.
C  MD26D   THE ADDRESS OF THE FIRST DATA RECORD OUTPUT FOR THIS LIST.
C  N26D    THE CURRENT LENGTH OF THE LIST ON DISC.
C
C  L26IR   THIS GROUP OF VARIABLES CONTROL THE INTERDEPENDENCIES
C          RECORD.
C
C  L26CB   THIS GROUP OF VARIABLES CONTROL THE DATA RECORD USED TO
C          HOLD THE CONTROL BLOCK 'XCNTRL' ON DISC. THE RECORD
C          ASSOCIATED WITH THIS SET OF POINTERS IS -101.
C          ONLY THE VARIABLES FROM 'LCG' TO 'NCS' ARE OUTPUT TO THE
C          DISC, AS 'LC' IS DETERMINED DYNAMICALLY AT EXECUTION TIME.
C
C  L26CA   THIS GROUP OF VARIABLES CONTROLS THE DATA RECORD THAT
C          CONTAINS GENERATED CODE ON THE DISC. THE RECORD
C          ASSOCIATED WITH THIS SET OF POINTERS IS -102.
C
C--THE COMMON BLOCK 'XCNTRL' CONTROLS THE FORMAT OF THE
C  INFORMATION OUTPUT TO THE DISC. WHILE THE LIST IS STILL IN
C  CORE, THE VARIABLES HAVE THE FOLLOWING SIGNIFICANCE :
C
C  LC      BASE ADDRESS OF THE WORK STACK, WHICH HOLDS CONSTANTS
C          AND VARIABLES GENERATED BY THE CODE.
C          THIS VARIABLE SET UP DYNAMICALLY BOTH DURING SYNTAX
C          ANALYSIS AND DURING EXECUTION, AND IS THUS NOT OUTPUT TO
C          DISC.
C  ISTAT2  THIS IS A PRINT CONTROL FLAG :
C
C          -1  PRINT THE CARD IMAGES AS THEY ARE PROCESSED.
C           0  NO PRINTING.
C          +1  PRINT THE CARD IMAGES AND THE GENERATED CODE.
C
C--THE REMAINING 12 WORDS OF THIS COMMON BLOCK ARE OUTPUT TO THE
C  DISC AND DEFINE THE LOCATIONS AND LENGTH OF THE REMAINING BLOCKS
C  ASSOCIATED WITH THIS INSTRUCTION. IN CORE THE FORMAT OF THIS CONTROL
C  BLOCK IS :
C
C  LCG   ADDRESS IN CORE OF THE HEADER BLOCK FOR THE GENERAL CHAIN.
C        FOR OUTPUT PRODUCED BY THE PARSE ROUTINES, THIS CHAIN CONTAINS
C        ONLY INSTRUCTIONS OR CODE. IN OTHER CASES THE CONTENTS
C        OF THE CHAIN ARE DEFINED BY THE FUNCTION OF THE ROUTINE
C        THAT SET IT UP.
C        (ON THE DISC, THIS VARIABLE IS STORED RELATIVE TO 'LCG',
C        THAT IS AS ZERO).
C  MCG   CURRENT ADDRESS IN CORE OF THE NEXT FREE WORD FOR THE GENERAL,
C        PARAMETER HEADER AND CONSTANT CHAINS. THESE CHAINS MOVE UP THE
C        STORE AND MUST UPDATE 'MCG' AS THEY DO SO.
C  MDCG  CURRENT ADDRESS IN CORE OF THE LAST GENERAL (OR INSTRUCTION)
C        BLOCK INSERTED.
C  NCG   NOT DEFINED.
C        (ON THE DISC, THIS VARIABLE IS SET TO THE TOTAL LENGTH
C        OF ALL THE CHAINS FORMED AT THE BOTTOM OF CORE  -  THE
C        GENERAL, PARAMETER AND CONSTANT CHAINS).
C
C  LCA   ADDRESS IN CORE OF THE FIRST BLOCK ON THE PARAMETER HEADER
C        BLOCK CHAIN.
C        (ON THE DISC, THIS VARIABLE IS STORED WITH ITS ADDRESS
C        SET RELATIVE TO 'LCG').
C  MCA   USED TO PROCESS THE PARAMETER HEADER BLOCK CHAIN.
C  MDCA  USED TO PROCESS THE PARAMETER HEADER BLOCK CHAIN.
C  NCA   NUMBER OF PARAMETER HEADER BLOCKS ON THE CHAIN.
C
C  LCS   ADDRESS IN CORE OF THE CONSTANT AND WORK STACK HEADER BLOCK.
C        (ON THE DISC, THIS VARIABLE IS STORED WITH ITS ADDRESS
C        SET RELATIVE TO 'LCG').
C  MCS   CURRENT ADDRESS OF THE LAST BLOCK INSERTED ON THE CONSTANT
C        CHAIN. THIS MUST BE UPDATED WHEN A NEW BLOCK IS ADDED.
C  MDCS  NEXT FREE ADDRESS IN THE WORK STACK. THIS STACK STARTS AT
C        'LC' AND COMES DOWN THE STORE.
C        (THIS PARAMETER SHOULD BE UPDATED WHENEVER SPACE IS
C        ALLOCATED IN THE WORK STACK).
C
C--DURING ALL OPERATIONS EXCEPT PARSING BY 'KPARSE', THE NEXT FREE
C  LOCATION IS STORED IN 'MCG' AND THE LAST FREE LOCATION IS HELD IN 'LF
C
C--FORMAT OF THE GENERAL CHAIN HEADER BLOCK IS :
C
C  0  ADDRESS OF THE FIRST BLOCK ON THE CHAIN REL. TO 'LCG' OR 'NOWT'.
C  1  TYPE OF OPERATION DESCRIBED BY THIS HEADER BLOCK AND ALL THE
C     OTHER HEADER BLOCKS DEFINED BY THE CONTROL BLOCK.
C  2  NOT DEFINED  -  FOR RESTRAINTS MAY BE A WORK STACK ADDRESS REL.
C                     TO 'LC'..
C  3  NOT DEFINED  -  FOR RESTRAINTS THE WEIGHT.
C  4  NOT DEFINED  -  FOR RESTRAINTS THE INPUT OR OBSERVED VALUE.
C
C--THE FORMAT OF THE INSTRUCTION BLOCKS ON THE CHAIN IS :
C
C  0  ADDRESS OF THE NEXT BLOCK RELATIVE TO 'LCG' OR 'NOWT'.
C  1  FUNCTION OF THIS BLOCK.
C  2  ADDRESS IN THE WORK STACK RELATIVE TO 'LC'  -  OPERAND 1.
C  3  ADDRESS IN THE WORK STACK RELATIVE TO 'LC'  -  OPERAND 2.
C  4  ADDRESS IN THE WORK STACK RELATIVE TO 'LC'  -  THE RESULT.
C
C--THE TERMS IN WORDS 2, 3 AND 4 ARE THOSE SET UP BY THE PARSE ROUTINES,
C  AND THE ADDRESSES ARE CONVERTED TO ABSOLUTE VALUES BY 'KLOADR' WHEN
C  THE INFORMATION IS READ BACK FROM THE DISC.
C  THE FORMAT OF THE BLOCK BEYOND WORD 4 IS NOT DEFINED, AND THESE
C  LOCATIONS MAY BE USED AS REQUIRED.
C
C--THE PARAMETER HEADER BLOCKS ARE DIVIDED INTO THOSE FOR ATOMS
C  AND THOSE FOR OVERALL PARAMETERS. THE FORMAT OF THE FORMER IS
C  AS FOLLOWS :
C
C  0   ADDR. OF NEXT HEADER BLOCK REL. TO LCG OR 'NOWT'
C  1   TYPE OF HEADER BLOCK :
C         0  HEADER BLOCK FOR ONE ATOM
C      1024  HEADER BLOCK FOR THE FIRST ATOM OF AN 'UNTIL' SEQUENCE
C  2   ATOM TYPE
C  3   ATOM SERIAL
C  4   NOT USED
C  5   NUMBER OF PARAMETERS
C  6   ADDR. OF FIRST PARAMETER ENTRY REL. TO 'LCG'
C  7   S
C  8   L
C  9   T(X)
C  10  T(Y)
C  11  T(Z)
C  12  ADDR. OF THIS ATOM IN LIST 5 (NOT SET HERE)
C  13  ADDR. OF THIS ATOM IN LIST 12 (NOT SET HERE)
C  14  NOT USED
C  15  ADDR. OF GENERATED PARAMETERS IN WORK STACK REL. TO 'LC'
C  16  ADDR. OF PARAMETERS TO BE USED IN WORK STACK REL. TO 'LC'
C
C--FOR EACH PARAMETER :
C
C  0   LINK TO NEXT PARAMETER REL. TO 'LCG' OR 'NOWT'.
C  1   REL. ADDR. IN LIST 5 (U[ISO]=4, FOR EXAMPLE).
C  2   PARTIAL DERIVATIVE WHEN CALCULATED.
C  .
C
C--THE INFORMATION FOR EACH OVERALL PARAMETER ALSO CONSISTS OF A HEADER
C  WITH THE SPECIFIED PARAMETER GIVEN AS THE COORDINATE ON THE CHAIN AT
C  WORD 6.
C
C  0   ADDR. OF NEXT HEADER BLOCK REL. TO 'LCG' OR 'NOWT'.
C  1   TYPE :
C      1  OVERALL PARAMETER
C      2  LAYER SCALE
C      3  ELEMENT SCALE
C  2   THE POSITION OF THE PARAMETER IN ITS GROUP
C  3   0.0
C  4   NOT USED
C  5   THE NUMBER OF PARAMETERS ON THE CHAIN GIVEN AT WORD 6.
C  6   ADDRESS OF THE PARAMETER CHAIN REL. TO 'LCG' (STARTS AT WORD 7).
C  7   'NOWT'  LINK TO THE NEXT PARAMETER ON THE CHAIN
C  8   THE POSITION OF THE PARAMETER IN ITS GROUP (STARTING FROM 1).
C  9   NOT USED
C  10  'NOWT'
C  11  'NOWT'
C  12  ADDR. OF THE GROUP CONTAINING THIS PARAMETER IN LIST 5 ('NOWT')
C  13  ADDR. OF THE GROUP CONTAINING THIS PARAMETER IN LIST 12 ('NOWT'
C  14  NOT USED
C  15  ADDR. OF THE PARAMETER IN THE WORK STACK REL. TO 'LC'
C  16  ADDR. OF THE SPACE TO BE USED IN THE WORK STACK REL. TO 'LC'
C
C--THE FORMAT OF THE CONSTANT AND WORK STACK HEADER IS :
C
C  0  ADDRESS OF THE NEXT CONSTANT OR WORK STACK HEADER RELATIVE
C     TO 'LCG' OR 'NOWT'.
C  1  LENGTH OF THIS BLOCK (=6)
C  2  ADDRESS AT WHICH THE WORK STACK BEGINS REL. TO 'LC' OR 'NOWT'
C  3  NUMBER OF WORDS REQUIRED FOR THE WORK STACK.
C  4  ADDRESS OF THE FIRST CONSTANT BLOCK ON THE CONSTANT CHAIN REL. TO
C     'LCG' OR 'NOWT'.
C  5  NUMBER OF CONSTANTS ON THE CONSTANT CHAIN.
C
C--THE FORMAT OF THE CONSTANT CHAIN IS :
C
C  0  ADDRESS OF THE NEXT CONSTANT BLOCK RELATIVE TO 'LCG' OR 'NOWT'
C  1  ADDRESS OF THIS CONSTANT IN THE WORK STACK RELATIVE TO 'LC'.
C  2  THE VALUE TO BE PLACED IN THE WORK STACK.
C
C--
C----- COMMAND FILE SWITCHES
C
C   1.DEFINE         2.RESTRAIN       3.DISTANCES      4.ANGLES
C   5.VIBRATIONS     6.COMPILER       7.EXECUTION      8.NO
C   9.FUNCTION      10.U(IJ)'S       11.TERM          12.EQUATE
C  13.PLANAR        14.SUM           15.FORM          16.AVERAGE
C  17.LIMIT         18.ENERGY        19.ORIGIN
C
C----- ISTORE (LCG + 1) OPERATIONS
C      1  DEFINE    2  RESTRAIN  3  DISTANCE 4
C      5            6  ANGLE     7           8
C      9  VIBRATION 10 EXECUTION 11 NOLIST   12 UIJ
C      13 EQUATE    14 PLANAR    15 SUM      16 FORM
C      17 AVERAGE   18 LIMIT     19 ENERGY   20 ORIGIN
\ICOM05
\ICOM12
\ICOM26
\ISTORE
C
      DIMENSION IEQU(10)
C
\STORE
\XLISTI
\XLEXIC
\XUNITS
\XSSVAL
\XCNTRL
\XAPK
\XLST05
\XLST12
\XCONST
\XLST26
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
C
      EQUIVALENCE (Z,MZ)
\QLST05
\QLST12
\QLST26
C
C
      DATA IVERSN /421/
C
      DATA IEQU(1)/'DIST'/,IEQU(2)/'ANGL'/,IEQU(3)/'FROM'/
      DATA IEQU(4)/'TO  '/,IEQU(5)/'FOR '/,IEQU(6)/'AND '/
C
C--SET THE TIMING FUNCTION
      CALL XTIME1(2)
\IDIM26
C--READ THE REMAINDER OF THE INPUT DATA
      IF (  KRDDPV ( ICOM26 , IDIM26 )  .LT.  0 ) GO TO 9910
C--RESET THE CORE LIMITS
      KA=NFL
      CALL XRSL
      NFL=KA
C--SET UP THE OUTPUT LIST
      KE=26
      CALL XFCOLS(KE)
C--SET UP THE REQUIRED LISTS FOR THE PARSING ROUTINES
      CALL XLSV
      IF ( IERFLG .LT. 0 ) GO TO 9900
\IDIM05
C--INDICATE THAT LIST 5 IS NOT IN CORE
      DO 1050 I=1,IDIM05
      ICOM05(I)=NOWT
1050  CONTINUE
\IDIM12
C--INDICATE THAT LIST 12 IS NOT IN CORE
      DO 1100 I=1,IDIM12
      ICOM12(I)=NOWT
1100  CONTINUE
C--SET THE INPUT LIST TYPE
      KD=16
C----- INDICATE LIST 17 NOT YET USED
      L17USD = 0
1120  CONTINUE
C--SET UP THE INPUT LIST FOR PROCESSING
      CALL XLDLST(-KD,ISTORE(NFL),1,0)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--INITIALISE THE LEXICAL SCANNER
      CALL XILEXP(KD,ISTORE(NFL))
C--SET THE INITIAL 'ABORT' LIMIT
      ABORT=0.5
C--SET THE ERROR COUNT TO ZERO
      LEF=0
C
C--FETCH THE NEXT RECORD PROCESSED BY THE LEXICAL SCANNER
1150  CONTINUE
      IDWZAP = 0
      IF(KLDNLR(IDWZAP))5950,1200,1150
C--INITIALISE THE CONTROL VARIABLES
1200  CONTINUE
      CALL XSETCC
C--RECORD THE NUMBER OF ERRORS SO FAR
      LSTLEF=LEF
      MZ=0
C--JUMP ON THE FUNCTION OF THE CARD
      GOTO(1300,1350,1500,1800,1850,2050,2100,2150,2200,2250,2300,2450,
     2 4050,4550,5400,5650,5660,7000,7200,1250) ,MG
1250  CONTINUE
      CALL XOPMSG (IOPL16, IOPINT, 0)
      GOTO 9900
C
C--'DEFINE' CARD  -  RESET MO AND MP
1300  CONTINUE
      ISTORE(LCG+1)=1
      IF(KFMDEF(KD))5850,5700,5850
C
C--'RESTRAIN' CARD
1350  CONTINUE
      ISTORE(LCG+1)=2
      IF(KRCI(LN))5850,1450,1400
1400  CONTINUE
      CALL XCFE
      GOTO 5850
C--PRODUCE THE CODE
1450  CONTINUE
      IF(KPARSE(LN))5850,5700,5850
C
C--'DISTANCE' CARD
1500  CONTINUE
      ISTORE(LCG+1)=3
      K=1
1550  CONTINUE
      L=3
      M=5
      I=KRCI(LN)
      IF(I)5850,1700,1650
1650  CONTINUE
      ISTORE(LCG+1)=ISTORE(LCG+1)+I
      I=1
1700  CONTINUE
      J=KGCAS(K,L,M)
      IF(J)5850,5850,1750
1750  CONTINUE
      MDCS=MDCS-I*J
      ISTORE(LCG+2)=MDCS
      GOTO 5700
C
C--'ANGLE' CARD
1800  CONTINUE
      ISTORE(LCG+1)=6
      K=2
      GOTO 1550
C
C--'VIBRATION' CARD
1850  CONTINUE
      ISTORE(LCG+1)=9
      K=1
      L=9
      M=5
1900  CONTINUE
      IF(KRCI(LN))5850,2000,1950
1950  CONTINUE
      CALL XCFE
      GOTO 5850
2000  CONTINUE
      IF(KGCAS(K,L,M))5850,5850,5700
C
C--'COMPILER LISTING' CARD
2050  CONTINUE
      ISTAT2=1
      GOTO 5800
C
C--'EXECUTION LISTING' CARD
2100  CONTINUE
      ISTORE(LCG+1)=10
      GOTO 5700
C
C--'NO LISTING' CARD
2150  CONTINUE
      ISTORE(LCG+1)=11
      ISTAT2=0
      GOTO 5700
C
C--'FUNCTION' CARD
2200  CONTINUE
      IF(KFUNCT(LN))5850,5700,5850
C
C--'U(IJ)' RESTRAINT
2250  CONTINUE
      ISTORE(LCG+1)=12
      K=1
      L=6
      M=8
      GOTO 1900
C
C--'ABORT' CARD  -  RESET THE ABORTION LIMIT FOR 'EQUATE'
2300  CONTINUE
      IF(KNUMBR(ABORT))2350,5750,2350
C--ERROR BECAUSE THERE IS NO ARGUMENT
2350  CONTINUE
      CALL XPCL16
      IF (ISSPRT .EQ. 0) WRITE(NCWU,2400)
      WRITE(NCAWU,2400)
      WRITE ( CMON ,2400)
      CALL XPRVDU(NCVDU, 1,0)
2400  FORMAT(' This instruction requires one numeric argument')
      GOTO 5850
C
C--AN 'EQUATE' CARD  -  SET UP THE INITIAL D/A LIMITS
2450  CONTINUE
      ESD=0.0001
      ISTORE(LCG+1)=13
      STORE(LCG+2)=ABORT
C--CHECK IF THERE IS MORE INFORMATION ON THE CARD
2500  CONTINUE
      IF(ME)2550,2550,2600
C--FORMAT ERROR IN THE DEFINITION OF A RESTRAINT
2550  CONTINUE
      CALL XCFE
      GOTO 5850
C--CHECK THE TYPE OF THE NEXT ARGUMENT
2600  CONTINUE
      IF(ISTORE(MF))2750,2650,2700
C--NUMERIC ARGUMENT  -  NOT ALLOWED
2650  CONTINUE
      CALL XILNUM(ISTORE(MF+1))
      GOTO 5850
C--AN OPERATOR  -  ALSO ILLEGAL
2700  CONTINUE
      CALL XILOP(ISTORE(MF+1))
      GOTO 5850
C--CHECK THE ALPHA-NUMERIC STRING THAT HAS BEEN GIVEN
2750  CONTINUE
      I=KCOMP(1,ISTORE(MF+2),IEQU(1),5,1)
      IF(I)4000,4000,2800
C--UPDATE THE CARD POINTERS
2800  CONTINUE
      ME=ME-1
      MF=MF+LK2
C--CHECK FOR END OF CARD
      IF(ME)2550,2550,2850
C--BRANCH ON THE INPUT DIRECTIVE
2850  CONTINUE
      J=1
      GOTO(3000,2950,2550,2550,4000,2900),I
2900  CONTINUE
      CALL XOPMSG (IOPL16, IOPINT, 0)
      GOTO 9900
C--THE WORD 'ANGLES' HAS BEEN FOUND  -  ALTER THE POINTER
2950  CONTINUE
      J=2
C--SET UP THE CONTROL BLOCK FOR THIS CONDITION
3000  CONTINUE
      ISTORE(MDCG)=MCG-LCG
      MDCG=MCG
      ISTORE(MCG)=NOWT
      ISTORE(MCG+1)=J
      MCG=MCG+5
      J=MDCG+2
      IF(MCG-LFL)3050,3050,6150
C--FETCH THE REMAINING THREE NUMBERS FOR THIS RESTRAINT
3050  CONTINUE
      IF(ISTORE(MF))3100,3200,2650
C--AN ALPHA-NUMERIC STRING  -  ONLY 'FROM' IS ALLOWED HERE
3100  CONTINUE
      IF(KCOMP(1,ISTORE(MF+2),IEQU(3),1,1))2550,2550,3150
C--UPDATE THE CARD POINTERS
3150  CONTINUE
      ME=ME-1
      MF=MF+LK2
C--READ THE MINIMUM COMPARISON DISTANCE
3200  CONTINUE
      IF(KNUMBR(Z))2550,3250,2550
C--CHECK FOR A COMMA
3250  CONTINUE
      IF(KOP(8))2550,3450,3300
C--NOT A COMMA  -  CHECK FOR 'TO'
3300  CONTINUE
      IF(ISTORE(MF))3350,2650,2700
C--IT IS ALPHA-NUMERIC
3350  CONTINUE
      IF(KCOMP(1,ISTORE(MF+2),IEQU(4),1,1))2550,2550,3400
C--UPDATE THE CARD POINTERS
3400  CONTINUE
      ME=ME-1
      MF=MF+LK2
C--READ THE MAXIMUM ALLOWED VALUE FOR THIS RESTRAINT
3450  CONTINUE
      ISTORE(J)=KACTWS(Z)
      J=J+1
      IF(KNUMBR(Z))2550,3500,2550
C--CHECK FOR THE OPTIONAL COMMA THAT CAN FOLLOW THE SECOND VALUE
3500  CONTINUE
      IF(KOP(8))2550,3550,3550
C--READ THE E.S.D. WHICH IS THE THIRD PARAMETER
3550  CONTINUE
      ISTORE(J)=KACTWS(Z)
      J=J+1
      IF(KNUMBR(Z))2550,3600,2550
C--CHECK THAT THE E.S.D. IS VALID
3600  CONTINUE
      IF(Z-ESD)3650,3650,3750
C--E.S.D. IS NOT CORRECT
3650  CONTINUE
      CALL XPCL16
      IF (ISSPRT .EQ. 0) WRITE(NCWU,3700)
      WRITE(NCAWU,3700)
      WRITE ( CMON ,3700)
      CALL XPRVDU(NCVDU, 1,0)
3700  FORMAT(' Negative or zero e.s.d.')
      GOTO 5850
C--CONVERT TO A WEIGHT
3750  CONTINUE
      Z=1./(Z*Z)
      ISTORE(J)=KACTWS(Z)
      IF(MCG-LFL)3800,3800,6150
C--CHECK FOR END OF CARD
3800  CONTINUE
      IF(ME)2550,2550,3850
C--CHECK THE TYPE OF THE NEXT ARGUMENT
3850  CONTINUE
      IF(ISTORE(MF))3900,2500,2500
C--ALPHA-NUMERIC ARGUMENT  -  CHECK FOR 'AND'
3900  CONTINUE
      IF(KCOMP(1,ISTORE(MF+2),IEQU(6),1,1))2500,2500,3950
C--IT IS AN 'AND'  -  UPDATE THE POINTERS
3950  CONTINUE
      ME=ME-1
      MF=MF+LK2
      GOTO 2500
C--ALL THE LIMITS ARE PROCESSED  -  NOW READ THE ATOMS
4000  CONTINUE
      IF(KGCAS(-1,3,5))5850,5850,5700
C
C--A 'PLANAR' CARD  -  DEFINING A MEAN PLANE OF ATOMS
4050  CONTINUE
      ISTORE(LCG+1)=14
C--INSERT THE DEFAULT VALUES
      STORE(LCG+4)=0.
      STORE(LCG+3)=10000.
      ESD=0.0001
      J=LCG+3
C--CHECK FOR AN ARGUMENT
      IF(ME)2550,2550,4100
C--SEE IF WE CAN READ A NUMBER
4100  CONTINUE
      IF(KSYNUM(Z))4400,4150,2700
C--A NUMBER HAS BEEN READ  -  IT MUST BE THE E.S.D.
4150  CONTINUE
      ME=ME-1
      MF=MF+LK2
C--CHECK THE VALUE OF THE ESD
      IF(Z-ESD)3650,3650,4250
C--COMPUTE  AND STORE THE WEIGHT
4250  CONTINUE
      STORE(J)=1./(Z*Z)
C--CHECK FOR MORE ARGUMENTS
      IF(ME)2550,2550,4350
C--CHECK THE TYPE OF THE NEXT ARGUMENT  -  IT SHOULD 'FOR'
4350  CONTINUE
      IF(ISTORE(MF))4400,2650,2700
C--IT IS AN ALPHA-NUMERIC ARGUMENT  -  CHECK IF IT IS 'FOR'
4400  CONTINUE
      IF(KCOMP(1,ISTORE(MF+2),IEQU(5),1,1))4500,4500,4450
C--UPDATE THE POINTERS AFTER A 'FOR'
4450  CONTINUE
      ME=ME-1
      MF=MF+LK2
C--READ THE ATOMS ON THE CARD
4500  CONTINUE
      IF(KGCAS(0,3,5))5850,5850,5700
C
C--'SUM' DIRECTIVE FOR FLOATING ORIGINS
4550  CONTINUE
      ISTORE(LCG+1)=15
C--SET UP THE DEFAULT VALUES FOR THIS RESTRAINT
4600  CONTINUE
      STORE(LCG+3)=100000000.
4610  CONTINUE
      STORE(LCG+4) = 0.
      J=LCG+3
      ESD=0.000001
C--CHECK FOR SOME ARGUMENTS
      IF(ME)2550,2550,4650
C--CHECK THE TYPE OF THE FIRST ARGUMENT  -  IT MAY NOT BE AN OPERATOR
4650  CONTINUE
      IF(KSYNUM(Z))4850,4700,2700
C--WE HAVE FOUND A NUMBER WHICH MUST BE THE E.S.D.
4700  CONTINUE
      IF(Z-ESD)3650,3650,4750
C--STORE THE E.S.D.
4750  CONTINUE
      STORE(J)=1./(Z*Z)
      ME=ME-1
      MF=MF+LK2
C--CHECK FOR MORE ARGUMENTS ON THE CARD
      IF(ME)2550,2550,4800
C--CHECK THE TYPE OF THE NEXT ARGUMENT
4800  CONTINUE
      IF(ISTORE(MF))4850,2650,2700
C--THIS ARGUMENT IS ALPHA-NUMERIC  -  CHECK FOR 'FOR'
4850  CONTINUE
      IF(KCOMP(1,ISTORE(MF+2),IEQU(5),1,1))4950,4950,4900
C--WE HAVE FOUND 'FOR'  -  UPDATE THE POINTERS
4900  CONTINUE
      ME=ME-1
      MF=MF+LK2
      IF(ME)2550,2550,4950
C--SET UP THE HEADER BLOCK POINTER
4950  CONTINUE
      MQ=MCG
C--CHECK FOR AN OVERALL PARAMETER
      IDWZAP = 0
      I=KOVPMU(IDWZAP)
C--CHECK THE REPLY
      IF(I)5850,5000,5150
C--NOT AN OVERALL PARAMETER  -  CHECK FOR AN ATOMIC COORDINATE
5000  CONTINUE
      J=NKA
      IDWZAP = 0
      I=KCORCH(IDWZAP)
C--AGAIN CHECK THE REPLY
      IF(I)2550,5050,5100
C--NOT AN ATOMIC PARAMETER EITHER  -  MUST BE AN ATOM WITH A PARAMETER
5050  CONTINUE
      IDWZAP = 0
      I=KATOMU(IDWZAP)
      IF(I)2550,5850,5100
C--WE HAVE FOUND ONE OR MORE ATOMS  -  CHECK FOR ONE PARAMETER AS WELL
5100  CONTINUE
      IF(ISTORE(MQ+5)-1)2550,5150,2550
C--LINK THE HEADER INTO THE CHAIN
5150  CONTINUE
      IF(KPARCH(MCA,I,LFL,J))6150,5200,5200
C--INSERT THE PARAMETERS GROUPS AS NECESSARY
5200  CONTINUE
      J=ISTORE(MCA+6)+MCA
      IF(KPARIN(MCA,1,ISTORE(J+1),LFL))6150,5250,5250
C--CHECK FOR AN 'UNTIL' SEQUENCE
5250  CONTINUE
      IF(ISTORE(MCA+1)/1024)5350,5350,5300
C--THIS IS AN 'UNTIL' SEQUENCE  -  ADJUST THE ADDRESSES
5300  CONTINUE
      J=MCA
      MCA=ISTORE(MCA)
      ISTORE(J)=ISTORE(J)-LCG
C--CHECK FOR THE END OF THE CARD
5350  CONTINUE
      IF(ME)5700,5700,4950
C
C--A 'FORM' MACRO COMMAND
5400  CONTINUE
      ISTORE(LCG+1)=16
C--SET UP THE MULTIPLIER IN THE LAST WORD OF THE CONTROL BLOCK
      STORE(LCG+4)=1.
      J=LCG+4
C--CHECK FOR AN ARGUMENT OR TWO
      IF(ME)2550,2550,5450
C--CHECK THE TYPE OF THE ARGUMENT  -  MUST DEFINE THE ATOMIC GROUP NAME
5450  CONTINUE
      IF(ISTORE(MF))5600,5500,5500
C--THIS DOES NOT DEFINE THE GROUP
5500  CONTINUE
      CALL XPCL16
      IF (ISSPRT .EQ. 0) WRITE(NCWU,5550)
      WRITE(NCAWU,5550)
      WRITE ( CMON ,5550)
      CALL XPRVDU(NCVDU, 1,0)
5550  FORMAT(' The atomic group has not been defined')
      GOTO 5850
C--STORE THE GROUP NAME IN THE SECOND AND THIRD WORDS OF THE BLOCK
5600  CONTINUE
      N=MIN0(LK,2)
      CALL XMOVE(STORE(MF+2),STORE(LCG+2),N)
      ME=ME-1
      MF=MF+LK2
      ESD=0.001
C--CHECK FOR THE OPTIONAL COMMA
      IF(KOP(8))2550,4100,4100
C
C--'AVERAGE' DIRECTIVE  -  RESTRAIN THE PARAMETERS TO THEIR MEAN
5650  CONTINUE
      ISTORE(LCG+1)=17
      GOTO 4600
C
C
C----- 'LIMIT'  -  RESTRAIN PARAMETER SHIFTS
5660  CONTINUE
      ISTORE(LCG+1) = 18
C----- SET ESD TO .001
      STORE(LCG+3) = 1 00 00 00.
      GOTO 4610
C
C--'ENERGY' CARD
7000  CONTINUE
      ISTORE(LCG+1) = 19
C----- SET POWER FACTOR TO UNITY
      STORE (LCG+3) = 1
      K=1
      L=3
      M=5
      I=KRCI(LN)
      IF(I)5850,1700,5850
C
C--'ORIGIN' CARD
7200  CONTINUE
      ISTORE(LCG+1) = 20
      GOTO 4600
C--SUNDRY TERMINATION OPERATIONS FOR EACH CARD
5700  CONTINUE
      CALL XOGCTD(KE)
C--CHECK THE PRINT FLAG
5750  CONTINUE
      IF(ISTAT2)5900,5900,5800
5800  CONTINUE
      CALL XPCL16
      GOTO 5900
C--ERROR RETURN  -  PRINT THE CARD ABANDONED MESSAGE
5850  CONTINUE
      CALL XPCA(ISTORE(MD+4))
      LEF=LEF+1
C--AND NOW GO BACK FOR THE NEXT CARD
5900  CONTINUE
      GOTO 1150
C
5950  CONTINUE
C---- CHECK IF WE NEED OR CAN USE LIST 17
C      IF (L23???) GOTO 5970
      IF (L17USD .NE. 0) GOTO 5970
      IF (KEXIST(17) .LE. 0) GOTO 5970
C----- WE CAN USE LIST 17 - DISABLE IT FOR NEXT TIME
      L17USD = 1
C----- SET UP INPUT LIST AND RECYCLE
      KD = 17
      GOTO 1120
C
5970  CONTINUE
C--END OF THE INPUT LIST  -  CHECK FOR ERRORS
      IF(LEF)6200,6000,6200
C--TERMINATE THE COMPILER OUTPUT SEQUENCE
6000  CONTINUE
      CALL XTCO(KE)
6020  CONTINUE
      CALL XOPMSG (IOPL16, IOPEND, IVERSN)
C--AND NOW RETURN
      CALL XTIME2(2)
      LEF=0
      LSTLEF=0
      RETURN
C
C--CORE OVERFLOW
6150  CONTINUE
      CALL XOPMSG ( IOPL16 , IOPSPC , 0 )
      GO TO 9900
C
C--ERRORS FOUND
6200  CONTINUE
      CALL XALTES ( KE , -1 )
      CALL XERHND ( IERERR )
      GO TO 9900
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPLSC , IOPLSP , KE )
      GO TO 6020
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPL16 , IOPCMI , 0 )
      GO TO 9900
      END
C
CODE FOR KRCI
      FUNCTION KRCI(IN)
C--READ THE RESTRAINTS INFORMATION
C
C--THIS LINK FIXES THE FORMAT OF THE INPUT FOR A RESTRAINT CARD
C
C--RETURN VALUES ARE :
C
C -1  AN ERROR HAS BEEN FOUND
C  0  A NORMAL RESTRAINT CARD
C  1  A 'DIFFERENCE' RESTRAINT CARD
C  2  A 'MEAN' RESTRAINT CARD
C
C--
\ISTORE
\KCHAR
C
      DIMENSION ICV(2)
C
\STORE
\XLISTI
\XUNITS
\XSSVAL
\XLEXIC
\XCNTRL
\XCHARS
\XIOBUF
C
\QSTORE
\QCHAR
C
      EQUIVALENCE (Z,MZ)
C
C
      DATA NWCV/1/, NCV/2/, LCV/1/, ICV(1)/ 'DIFF'/, ICV(2)/ 'MEAN'/
      IDWZAP = IN
C--CHECK THAT THE CARD CONTAINS SOME INFORMATION
      IF(ME)1000,1000,1050
1000  CONTINUE
      CALL XCFE
      GOTO 1750
1050  CONTINUE
      KRCI=0
C--READ THE OBSERVED VALUE
      IF(KSYNUM(Z))1000,1150,1100
1100  CONTINUE
      CALL XILOP(ISTORE(MF+1))
      GOTO 1750
C--STORE THE OBSERVED VALUE
1150  CONTINUE
      STORE(LCG+4)=Z
      ME=ME-1
      MF=MF+LK2
C--CHECK FOR THE OPTIONAL ','
      IF(KOP(8))1000,1200,1200
1200  CONTINUE
      IF(KSYNUM(Z))1000,1250,1100
C--STORE THE 'WEIGHT'
1250  CONTINUE
C--CHECK THAT THE E.S.D. IS NOT ZERO
      IF(Z)1300,1300,1400
1300  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1350)
      WRITE(NCAWU,1350)
      WRITE ( CMON ,1350)
      CALL XPRVDU(NCVDU, 1,0)
1350  FORMAT(' Negative or zero e.s.d.')
      LEF=LEF+1
      GOTO 1750
1400  CONTINUE
      STORE(LCG+3)=1./(Z*Z)
      ME=ME-1
      MF=MF+LK2
C--CHECK FOR THE '=' SIGN
      IF(KOP(9))1450,1550,1500
1450  CONTINUE
      MF=MF-LK2
1500  CONTINUE
      CALL XMISOP(KCHAR(9),ISTORE(MF+1))
      GOTO 1750
C--BEGIN SEARCHING  FOR THE 'DIFFERENCE' FUNCTION
1550  CONTINUE
      IF(ME)1000,1000,1600
1600  CONTINUE
      IF(ISTORE(MF))1650,1800,1800
C--CHECK AGAINST THE LIST
1650  CONTINUE
      I = KCOMP(NWCV, ISTORE(MF+2), ICV, NCV, LCV)
      IF(I)1800,1800,1700
1700  CONTINUE
      ME=ME-1
      MF=MF+LK2
      KRCI=I
      IF(ME)1000,1000,1800
1750  CONTINUE
      KRCI=-1
1800  CONTINUE
      RETURN
      END
C
CODE FOR KGCAS
      FUNCTION KGCAS(IN,IM,IL)
C--GENERATE THE RESTRAINED ATOM STACK
C
C  IN  CONNECTOR CONTROL FLAG :
C
C      >0  THE NUMBER OF 'TO' CONNECTORS EXPECTED FOR EACH INDIVIDUAL
C          RESTRAINT  -  BONDS AND ANGLES ARE FOUND THIS WAY
C          IN = 1  THE RESTRAINT REQUIRES A BOND TO BE DEFINED.
C          IN = 2  THE RESTRAINT REQUIRES AN ANGLE TO BE DEFINED.
C      <1  MINUS THE NUMBER OF 'WITH' CONNECTORS ALLOWED BETWEEN
C          SUCCESSIVE GROUPS OF ATOMS. IN THIS CASE, THE GROUPS OF
C          ATOMS MAY BE DEFINED USING 'UNTIL'.
C          EACH GROUP OF ATOMS THAT IS PRECEDED BY 'WITH' HAS 2048
C          ADDED TO WORD 1 OF THE FIRST ATOM HEADER BLOCK IN THE GROUP.
C
C  IM  THE NUMBER OF PARAMETERS TO PROVIDE SLOTS FOR
C  IL  NUMBER OF THE FIRST PARAMETER TO INCLUDE
C      ('TYPE' IS 1, 'X' 5, ETC.)
C
C--RETURNS SET EQUAL TO THE NUMBER OF RESTRAINTS UNLESS THERE IS
C  AN ERROR
C
C--
\ISTORE
C
      DIMENSION IAS(2)
C
\STORE
\XLEXIC
\XCNTRL
\XUNITS
\XSSVAL
\XAPK
\XLISTI
\XCONST
C
\QSTORE
C
      EQUIVALENCE (MZ,Z)
C
C
      DATA NWAS/1/, IAS(1)/ 'TO  '/, IAS(2)/ 'WITH'/
C
C--COMPUTE THE LENGTH OF EACH RESTRAINT
      NW=(3*IM+17)*(MAX0(1,IN)+1)
      LCA=NOWT
      MO=0
C--CHECK THAT THERE ARE SOME ARGUMENTS
      KA=IN
      KB=0
1000  CONTINUE
      IF(ME)1200,1200,1050
C--START ON THE NEXT GROUP OF ATOMS
1050  CONTINUE
      MP=IN
      GOTO 1500
C
C--PICK UP THE NEXT ATOM
1100  CONTINUE
      KB=0
      MP=MP-1
C--CHECK IF THERE ARE MORE ATOMS TO BE CONNECTED
      IF(MP)2000,1150,1150
C--CHECK FOR END OF CARD
1150  CONTINUE
      IF(ME)1200,1200,1250
C--RESTRAINT FORMAT ERROR
1200  CONTINUE
      CALL XCFE
      GOTO 2300
C--CHECK THE TYPE OF THE NEXT ARGUMENT
1250  CONTINUE
      IF(ISTORE(MF))1400,1300,1350
1300  CONTINUE
      CALL XILNUM(ISTORE(MF+1))
      GOTO 2300
1350  CONTINUE
      CALL XILOP(ISTORE(MF+1))
      GOTO 2300
C--SEARCH FOR THE CONNECTIVE ELEMENT
1400  CONTINUE
      IF (KCOMP (NWAS, ISTORE(MF+2), IAS(1), 1, 1)) 1200, 1200, 1450
1450  CONTINUE
      ME=ME-1
      MF=MF+LK2
      IF(ME)1200,1200,1500
C--PICK UP THE NEXT ATOM AFTER THE CONNECTOR
1500  CONTINUE
      MQ=MCG
C--CHECK THAT THERE IS ENOUGH CORE FOR THIS RESTRAINT
      IF(MQ+NW-LFL)1600,1600,1550
C--NOT ENOUGH CORE
1550  CONTINUE
      CALL XCSO(ISTORE(MF+1))
      GOTO 2300
C--READ THE ATOM(S) OFF THE CARD
1600  CONTINUE
      IDWZAP = 0
      MS=KATOMU(IDWZAP)
C--CHECK THE REPLY
      IF(MS)2300,2300,1650
C--PRESERVE THE ADDRESS OF THE FIRST ATOM AND CHECK THE LINK
1650  CONTINUE
      MDCG=MCG
      IF(ISTORE(MCG))1850,1700,1700
C--MORE THAN ONE ATOM HAS BEEN DEFINED  -  CHECK IF THIS IS ALLOWED
1700  CONTINUE
      IF(IN)1750,1750,1800
C--AN 'UNTIL' SEQUENCE THAT IS ALLOWED  -  ADJUST THE LINK ADDRESS
1750  CONTINUE
      MDCG=ISTORE(MCG)
      ISTORE(MCG)=ISTORE(MCG)-LCG
      GOTO 1850
C--ATOM DEFINITION ERROR
1800  CONTINUE
      MF=MF-LK2
      CALL XADE(ISTORE(MF+1))
      GOTO 2300
C--CHECK THAT THERE ARE NO PARAMETERS SPECIFIED
1850  CONTINUE
      IF(ISTORE(MCG+5))1800,1900,1800
C--CHECK IF THIS IS THE FIRST ATOM
1900  CONTINUE
      ISTORE(MCG+1)=ISTORE(MCG+1)+KB
      IF(KPARCH(MCA,MS,LFL,NKA))1550,1950,1950
C--SET UP THE PARAMETER BLOCKS
1950  CONTINUE
      ISTORE(MCA+6)=NOWT
C--UPDATE 'MCA' TO ITS TRUE VALUE
      MCA=MDCG
      ISTORE(MCA)=NOWT
      IF(KPARIN(MQ,IM,IL,LFL))1550,1100,1100
C
C--END OF A CONNECTED GROUP
2000  CONTINUE
      MO=MO+1
C--LOOK FOR THE OPTIONAL ','
      IF(KOP(8))2200,2050,2050
C--NOT END OF CARD  -  CHECK THE TYPE OF THE NEXT ARGUMENT
2050  CONTINUE
      IF(ISTORE(MF))2100,1300,1350
C--ALPHA-NUMERIC  -  CHECK IF IT 'WITH'
2100  CONTINUE
      IF (KCOMP(1,ISTORE(MF+2), IAS(2), 1, 1)) 1000, 1000, 2150
C--A 'WITH' HAS BEEN FOUND
2150  CONTINUE
      KA=KA+1
      KB=2048
      ME=ME-1
      MF=MF+LK2
C--CHECK IF THIS 'WITH' IS ALLOWED
      IF(KA)1000,1000,1200
2200  CONTINUE
      KGCAS=MO
2250  CONTINUE
      RETURN
C
2300  CONTINUE
      KGCAS=-1
      GOTO 2250
      END
C
CODE FOR XCFE
      SUBROUTINE XCFE
C--RESTRAINT FORMAT ERROR
C
C--
\ISTORE
C
\STORE
\XLISTI
\XUNITS
\XSSVAL
\XLEXIC
\XCHARS
\XIOBUF
C
\QSTORE
C
      CALL XPCL16
C--CHECK IF WE CAN PRINT THE CARD POSITION
      IF(ME)1000,1000,1100
C--NO CARD POSITION
1000  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1050)
      WRITE(NCAWU,1050)
      WRITE ( CMON ,1050)
      CALL XPRVDU(NCVDU, 1,0)
1050  FORMAT(' '' RESTRAINT'' format error',A1,
     2 'at or before column', I4)
      GOTO 1150
C--PRINT THE CARD POSITION
1100  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1050)IB,ISTORE(MF+1)
      WRITE(NCAWU,1050)IB,ISTORE(MF+1)
      WRITE ( CMON ,1050)IB,ISTORE(MF+1)
      CALL XPRVDU(NCVDU, 1,0)
C--UPDATE THE ERROR COUNTER
1150  CONTINUE
      LEF=LEF+1
      RETURN
      END
C
CODE FOR XPCL16
      SUBROUTINE XPCL16
C--PRINT LIST 16  -  THIS SUBROUTINE PRINTS UP TO AND INCLUDING THE
C  PRESENT CARD.
C
C--
\XLISTI
C
      CALL XPCLNN(LN)
      RETURN
      END
