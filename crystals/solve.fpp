C $Log: not supported by cvs2svn $
C Revision 1.12  2002/02/13 15:32:20  Administrator
C Reduce calls to SPECIAL in multicycle SFLS, enable shift reversal monitoring, and fix Lachlans shift bounding
C
C Revision 1.11  2002/02/13 12:12:13  ckp2
C Store extinction param su in List 30.
C
C Revision 1.10  2002/02/12 12:54:50  Administrator
C Allow filtering of reflections in SFLS/CALC
C
C Revision 1.9  2002/01/09 14:59:18  Administrator
C bound shifts, abandon ill-conditioned problem
C
C Revision 1.8  2001/07/11 10:19:21  ckpgroup
C Enable -ve Flack Parameter
C
C Revision 1.7  2001/02/26 10:29:07  richard
C Added changelog to top of file
C
C
CODE FOR XSFLSE
      SUBROUTINE XSFLSE
C--GENERAL MATRIX INVERSION AND CALCULATION OF SHIFT ROUTINES.
C
C  THESE ROUTINES INVERT THE NORMAL MATRIX AND OUTPUT
C  THE CORRECTED PARAMETERS IN A LIST 24
C
C--THE ADDRESS OF THE PARAMETER GROUP SHIFT STACK IS :
C
C  JC  ADDRESS OF THE FIRST ENTRY.
C  JD  ADDRESS OF THE LAST ENTRY
C
C--THE FORMAT OF THE PARAMETER GROUP SHIFT STACKS IS AS FOLLOWS :
C
C  0  SHIFT FACTOR FOR THIS PARAMETER GROUP, COMPUTED OR FROM LIST 23
C  1  NUMBER OF PARAMETERS REFINED IN THIS GROUP
C  2  SUM OF THE CALCULATED SHIFTS
C  3  SUM OF THE CALCULATED SHIFTS SQUARED
C  4  NUMBER OF CHANGES OF SIGN COMPARED WITH THE LAST CYCLE
C
C--THIS IS REPEATED FOR THE FOLLOWING GROUPS :
C
C  OVERALL PARAMETERS
C  TYPE
C  SERIAL
C  OCC
C  U[ISO]
C  X
C  Y
C  Z
C  U[11]
C  U[22]
C  .
C  U[33]
C
C--THE FORMAT OF THE SHIFT STACK AFTER INVERSION IS :
C
C  0  ADDRESS OF THE INFORMATION FOR THE GROUP OF THIS PARAMETER
C  1  CALCULATED SHIFT
C
C--THIS FORMAT IS REPEATED FOR ALL THE REFINED PARAMETERS
C
C--
      CHARACTER *21 CTEXT, CSAVE
      CHARACTER *14 CLST23(4)

\TYPE11
C
C
      DIMENSION A1(6),B1(3)
\ICOM11
\ICOM12
\ICOM24
\ICOM30
\ICOM33
\ISTORE
C
\STORE
\XSTR11
\XLISTI
\XCONST
\XUNITS
\XSSVAL
\XCHARS
\XWORK
\XWORKA
\XPDS
\XLST01
\XLST05
\XLST11
\XLST12
\XLST23
\XLST24
\XLST30
\XLST33
\XAPK
\XOPK
\XSCALE
\XLSVAL
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
\QSTR11
C
C
      EQUIVALENCE (A1(1),A)
\QLST11
\QLST12
\QLST30
\QLST24
\QLST33
C
C
C
      DATA MW/6/
C
C----- SET THE PRINT THRESHOLDS
      DATA RMAX/3./, SOESD/1./, CCOEF/.8/
C      DATA RMSSM/ 0.3/
      DATA RMSSM/ 0.0/
      DATA CLST23 /'R-factor', 'Rw', 'shift/esd', 
     1 'Min function'/

C
      DATA IVERSN /404/
C
C
C--INITIALISE THE TIMING FUNCTION
      CALL XTIME1(2)
C--READ ANY OTHER PARAMETERS
      IF ( KRDDPV ( ISTORE(NFL),1 )   .LT.   0 ) GO TO 9900
C----- METHOD = 0 FOR CHOLESKI, ELSE 1
      METHOD = ISTORE(NFL)
C--CLEAR THE CORE
      CALL XCSAE
      CALL XRSL
C--LOAD THE CONTROL LISTS
      CALL XFAL23
\IDIM33
      CALL XFAL33
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--PRINT OUT THE PAGE HEADING
      CALL XPRTCN
      I=NINT(STORE(M33V))
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1000)I
      WRITE(NCAWU,1000)I
1000  FORMAT(' Matrix inversion and calculation',
     2 ' of the shifts for S.F.L.S. cycle number ',I5)
C--FIND THE 'MAP' PARAMETER
      ISTAT2=ISTORE(M33CD+3)
C----- FIND THE 'PRINT' LEVEL
      ILEVEL=ISTORE(M33CD+7)
      IF (ILEVEL .GE. 0) THEN
      WRITE(NCAWU,3555)
      WRITE(NCAWU,1020) RMAX, SOESD
      IF (ISSPRT .EQ. 0) THEN
       WRITE(NCWU,3555)
       WRITE(NCWU,1020) RMAX, SOESD
      ENDIF
1020  FORMAT(' Parameters for which the shift ratio exceeds ',F5.2,
     1 ' (SRATIO)',
     2 /      '            and/or the shift-over-esd exceeds ',F5.2,
     3 ' (S/ESD)',
     4 /      '            and/or there is a relatively large shift.',
     5 /' Parameters marked COMPOSITE contain derivatives from ',
     6  'other physical parameters'/)
      ENDIF
C----- SET THE EIGENVALUE FILTERS
      AUGFAC = STORE(M33CD+9)
      FILTER = STORE(M33CD+10)
      DISCRM = STORE(M33CD+11)
C----- MAXIMUM  SHIFT/ESD
C>DJWOCT96
      SMAX = -1000000.0
C<DJWOCT96
C--FIND THE NEW MATRIX FLAG
      JK=ISTORE(M33CD+6)
C--SET UP THE SHIFT AREA
      LN=24
      IREC=1001
      NMW=MD33ST-1
      JC=KCHLFL(MW*NMW)
      JD=JC+(NMW-1)*MW
C--FIND THE POINTERS TO THE SHIFT INFORMATION
      JA=M33ST+1
      JB=M33SV+1
C--SET UP THE PARAMETER GROUP SHIFT LOCATIONS
      DO 1150 I=JC,JD,MW
      STORE(I)=1.
      STORE(I+1)=0.
      STORE(I+2)=0.
      STORE(I+3)=0.
      STORE(I+4)=0.
      STORE(I+5) = 0.
C--CHECK IF A SHIFT FACTOR HAS BEEN GIVEN IN LIST 33
      IF(ISTORE(JA))1050,1100,1100
C--MOVE THE SHIFT FACTOR FROM LIST 33
1050  CONTINUE
      STORE(I)=STORE(JB)
C--INCREMENT THE POINTERS
1100  CONTINUE
      JA=JA+1
      JB=JB+1
1150  CONTINUE
C
C--LOAD A FEW MORE LISTS
      CALL XFAL01
      CALL XFAL05
      IF (METHOD .EQ. 1) THEN
        IF (ISSPRT .EQ. 0) WRITE(NCWU,1151)  AUGFAC, FILTER, DISCRM
        WRITE(NCAWU,1151)  AUGFAC, FILTER, DISCRM
1151  FORMAT(1X, ' Eigen filters ', 3(G10.4,3X) )
      ENDIF
C--FORM THE ABSOLUTE LIST 12
      JQ=2
      JS=1
      CALL XFAL12(JS,JQ,JR,JN)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET UP THE POINTER TO THE RESULTS AREA
      JO=JN
\IDIM12
C--LINK LISTS 5 AND 12
      I=KSET52(0,-1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--LOAD THE MATRIX
C----- CLEAR THE MATRIX AREA
      IULN = 11
      CALL XIN11
\IDIM11
C----- LOAD THE LIST 11 HEADERS
      CALL XLDLST(IULN, ICOM11, IDIM11, 0)
      IF (IERFLG .LT. 0) GOTO 9900
C----- SAVE THE DISK BUFFER ADDRESSES
      M11S  = L11
      M11RS  = L11R
C--SET UP THE ANSWERS AREA
      LN=11
      KO=KADD11(1001,MD11,N12+1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--CHECK FOR AN OLD LIST 24, AND LOAD IT IF POSSIBLE
      L24=NOWT
      MD24=0
      KE=24
      IF(KEXIST(KE))1250,1250,1200
C--AN OLD LIST 24 IS ACCESSIBLE  -  BRING IT DOWN
1200  CONTINUE
      CALL XFAL24
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET THE NUMBER OF SINGULARITIES TO ZERO INITIALLY
1250  CONTINUE
      JA=0
      JB=JO
      IF(ISTAT2)1300,1350,1300
C--PRINT THE ALLOCATED STORE
1300  CONTINUE
      CALL XPCM(1)
C
1350  CONTINUE
      D=STORE(L11P+17)
C--CHECK THAT THE NUMBER OF DEGREES OF FREEDOM IS POSITIVE
      IF (  STORE(L11P+16) .LE. ZERO) THEN
            I=NINT(STORE(L11P+24)+STORE(L11P+27))
            CALL XERHDR(0)
            WRITE ( CMON, 1351)  
     1      I,NINT(STORE(L11P+16))
            CALL OUTCOL(3)
            CALL XPRVDU(NCVDU, 4,0)
            CALL OUTCOL(1)
            WRITE( NCAWU,1351) 
     1      I,NINT(STORE(L11P+16))
            IF (ISSPRT .EQ. 0) WRITE( NCWU,1351)
     1      I,NINT(STORE(L11P+16))
1351        FORMAT(
     1 'Ill-conditioned problem'/,
     1 ' Insufficient data to refine all variables',/
     2 '          No of observations = ',I10,/
     3 '    No of degrees of freedom = ',I10,/)
            E = 0.
            GOTO 9900
      ELSE
            E=D/STORE(L11P+16)
      ENDIF
C--CHECK THE TYPE OF LIST 11
1500  CONTINUE
      F=0.0
      JP=ISTORE(L11P+15)
C--CHECK IF THE MATRIX IS OF AN ACCEPTABLE TYPE
      IF ( IABS(JP) .NE. 1 ) GO TO 9910
C--CHECK IF THE DUMMY OVERALL TEMPERATURE FACTOR HAS BEEN REFINED
      IF (KPARAM(1,L12O,M12,M12O,0,L5O)) 1700, 1700, 1750
C--NO REFINEMENT
1700  CONTINUE
      STORE(L11P+22)=0.
      GOTO 1900
C--REFINEMENT  -  CHECK THE MATRIX TYPE
1750  CONTINUE
      IF(JP)1900,1900,1800
C--CALCULATE THE CORRECTION FOR THE DUMMY OVERALL TEMPERATURE FACTOR
C  IGNORING THE SCALE FACTOR INTERACTION
1800  CONTINUE
C----- RESERVE SPACE FOR AND GET DIAGONAL ELEMENT AND VECTOR TERM
      L11C = KADD11 (-101, MD11, 2)
      JY=KBLCK(ISTORE(M12O))
      CALL XDOWNF ( JY, XSTR11(MD11*L11C+1-MD11), MD11)
      JX=L11R+ISTORE(M12O)-1
      CALL XDOWNF ( JX, XSTR11(MD11*L11C+1), MD11)
      STORE(L11P+22) = XSTR11(L11C+1) / XSTR11(L11C)
C--CHECK IF A 'WEIGHT' IS TO BE APPLIED
      IF(ISTORE(M12+1)-1)1850,1900,1850
1850  CONTINUE
      STORE(L11P+22)=STORE(L11P+22)*STORE(M12O+1)
1900  CONTINUE
C----- SAVE THE FREE ADDRESSES IN THE MATRIX WORK AREA
      LFLDS = LFLD
      NFLDS = NFLD
      M12B=L12B
      JT=1
      M24=L24
C
C
C----- WE ARE GOING TO START UPDATING LIST 11
      CALL XLSALT ( IULN , 0 , 0 , ILSOWF , ILSUPD )
C--BEGIN THE INVERSION  -  A BLOCK AT A TIME
C----- SET THE RUNNING ADDRESS FOR STEPPING THROUGH THE MATRIX
      M11DB = M11S
      M11RDB = M11RS
C
      DO 3500 JZ=1,N12B
C---- RESET MATRIX AREA
      LFLD = LFLDS
      NFLD = NFLDS
C----- INDICATE WE MAY NEED A CAPTION LATER
      ICAPT = 0
C--INVERT THE  MATRIX BLOCK IF IT IS NECESSARY
      JY=ISTORE(M12B+1)
      NELEM = (JY*(JY+1))/2
C
      IF ( (JP .LE. 0) .OR.(METHOD .EQ. 0) ) THEN
C-----  RE-USE OF MSTRIX OR CHOLESKI - GET SOME CORE FOR THE UPPER TRIAN
            L11C = KADD11(-101,MD11,NELEM)
      ELSE
C-----  GET SOME CORE FOR THE FULL MATRIX
            L11C = KADD11( -101, MD11, JY*JY)
C----- ALLOCATE SPACE FOR EIGEN VALUES
            IVAL = KADD11( 1012, MD11, JY)
C----- ALLOCATE SPACE FOR SCALE VECTOR
            ISCL = KADD11( 1013, MD11, JY)
C----- ALLOCATE SPACE FOR EGENVECTORS
            IVEC = KADD11( 1014, MD11, JY*JY)
C----- ALLOCATE WORK SPACE
            IWRK = KADD11( 1015, MD11, 5*JY)
            IF ( IERFLG .LT. 0 ) GO TO 9900
      ENDIF
      M11 = L11C
      INM = L11C
C--BRING DOWN THE MATRIX - REMEMBER MD11 INDICATES SINGLE OR DOUBLE PREC
      CALL XDOWNF (M11DB, XSTR11 (MD11*L11C-MD11+1), MD11*NELEM)
      IF (JP .GT. 0 ) THEN
C----- CHOOSE INVERTOR
        IF (METHOD .LE. 0) THEN
            CALL XCHOLS(JY, L11C, KO)
        ELSE
C----- EXPAND  LOWER TRIANGLE OF FULL SQUARE
            CALL XMTCVT (INM, JY, 1, MD11)
            CALL XFILTR
     1      (STR11(INM), STR11(IVAL), STR11(IVEC), STR11(ISCL),
     2      STR11(IWRK), JY, AUGFAC, FILTER, DISCRM, ILEVEL  )
C----- COMPRESS INVERTED MATRIX
            CALL XMTCVT (INM, JY, 2, MD11)
        ENDIF
      ENDIF
2050  CONTINUE
      L11RC = KADD11(-102,MD11R, JY)
      M11R=L11RC
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--BRING DOWN THE VECTOR
      CALL XDOWNF (M11RDB, XSTR11 (MD11R*L11RC-MD11R+1), MD11R*JY)
      CALL XSOLVE(JY, L11C, M11R, KO)
C--SPREAD OUT THE NEW SHIFTS TO ALLOW THE STORAGE OF OTHER DATA
      JV=JO+JY+JY-2
      JW=KO+JY-1
      DO 2100 JU=1,JY
      STORE(JV)=STR11(JW)
      ISTORE(JV+1)=NOWT
      JV=JV-2
      JW=JW-1
2100  CONTINUE
      JQ=M11
C--SEARCH THROUGH THE ATOMIC PARAMETERS FOR EACH OF THE
C  LEAST SQUARES PARAMETERS IN TURN
C
C----- SET UP THE START ADDRESSES
      M5 = L5 - MD5
      M12 = L12O
      L12A = NOWT
      JS = 0
C
C
      DO 3450 JX=1,JY
      S=0.0
      C=0.
C----- LOOK FOR PATAMETER 'JT'
      IHIT = KFLSP (JT, JS, JR, JO, JX, JC, JQ, JZ, ICAPT,
     1 E, C, A, S, RMAX, SOESD, ILEVEL, MW, CTEXT)
      IF (IHIT .EQ. 0) GOTO  3450
C--PARAMETER HAS BEEN FOUND  -  CALCULATE THE RESULTS
C----- SUM OF SQUARES SHIFT / ESD
      F=F+S*S
C ----- FIND THE MAXIMUM SHIFT /ESD
C>DJWOCT96
      IF (ABS(S) .GT. SMAX) THEN
        SMAX = ABS(S)
        JSAVE = JT
        CSAVE = CTEXT
      ENDIF
C<DJWOCT96
C----- IF SINGULAR, INCREMENT COUNTER
      IF (A .LT. ZEROSQ) JA = JA + 1
C
C--STORE THE SHIFT INFORMATION FOR THIS COORDINATE
C      JD=ISTORE(JO+1)
C-C-C-CHECK SHIFT-TYPE
C-C-C-SHIFT OF OV, OCC, X, Y, Z, U[13], U[12] (NOT AMBIGUOUS)
      IF ((JS .LE. 7) .OR. (JS .GE. 12)) THEN
       JD=ISTORE(JO+1)
C-C-C
C-C-C-GENERAL REMARK CONCERNING THIS PART:
C-C-C-NORMALLY JD IS OBTAINED FROM ISTORE(JO+1). THIS ISN'T POSSIBLE
C-C-C-FOR THE SHIFTS OF SPECIAL PARAMETERS, BECAUSE ISTORE(JO+1)
C-C-C-CARRIES ALWAYS THE ADDRESS FOR THE CORRESPONDING STANDARD-
C-C-C-PARAMETER.
C-C-C-SO WE USE THE INFORMATION FROM STORE(M5+3) (TYPE OF ATOM)
C-C-C-AND JS (TYPE OF SHIFT). M5 AND JS ARE UPDATED IN KFLSP.
C-C-C-DANGER: IT MIGHT BE THAT
C-C-C-THE INFORMATION IN ISTORE(JO+1) IS NECESSARY IN A DIFFERENT PLACE
C-C-C-OF THE PROGRAM EVEN FOR THE SPECIAL SHIFTS. FOR THE FUTUR: WE
C-C-C-HAVE TO FIND THE PLACE WHERE ISTORE(JO+1) IS SET AND MAKE SURE
C-C-C-THAT IT IS ALSO DONE FOR THE SPECIAL PARAMETERS
C-C-C
C-C-C-SHIFT OF U[11]/U[ISO]/"U[ISO]" (AMBIGUOUS)
      ELSE IF (JS .EQ. 8) THEN
C-C-C-ANISOTROPIC ATOM (---> SHIFT OF U[11])
       IF (NINT(STORE(M5+3)) .EQ. 0) THEN
        JD=ISTORE(JO+1)
C-C-C-ISOTROPIC ATOM (---> SHIFT OF U[ISO])
       ELSE IF (NINT(STORE(M5+3)) .EQ. 1) THEN
        JD=JC+4*MW
C-C-C-SURFACE OF SPHERE (---> SHIFT OF "U[ISO]", I.E. THICKN. OF SURF.)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 2) THEN
        JD=JC+14*MW
C-C-C-LINE (---> SHIFT OF "U[ISO]", I.E. THICKNESS OF LINE)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 3) THEN
        JD=JC+16*MW
C-C-C-RING (---> SHIFT OF "U[ISO]", I.E. THICKN. OF RING)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 4) THEN
        JD=JC+20*MW
       ENDIF
C-C-C-SHIFT OF U[22]/SIZE (AMBIGUOUS)
      ELSE IF (JS .EQ. 9) THEN
C-C-C-ANISOTROPIC ATOM (---> SHIFT OF U[22])
       IF (NINT(STORE(M5+3)) .EQ. 0) THEN
        JD=ISTORE(JO+1)
C-C-C-SURFACE OF SPHERE (---> SHIFT OF SIZE, I.E. RADIUS OF SPHERE)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 2) THEN
        JD=JC+15*MW
C-C-C-LINE (---> SHIFT OF SIZE, I.E. LENGTH OF LINE)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 3) THEN
        JD=JC+17*MW
C-C-C-RING (---> SHIFT OF SIZE, I.E. RADIUS OF RING)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 4) THEN
        JD=JC+21*MW
       ENDIF
C-C-C-SHIFT OF U[33]/DECLINAT (AMBIGUOUS)
      ELSE IF (JS .EQ. 10) THEN
C-C-C-ANISOTROPIC ATOM (---> SHIFT OF U[33])
       IF (NINT(STORE(M5+3)) .EQ. 0) THEN
        JD=ISTORE(JO+1)
C-C-C-LINE (---> SHIFT OF DECLINAT OF LINE)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 3) THEN
        JD=JC+18*MW
C-C-C-RING (---> SHIFT OF DECLINAT OF RINGNORMAL)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 4) THEN
        JD=JC+22*MW
       ENDIF
C-C-C-SHIFT OF U[23]/AZIMUTH (AMBIGUOUS)
      ELSE IF (JS .EQ. 11) THEN
C-C-C-ANISOTROPIC ATOM (---> SHIFT OF U[23])
       IF (NINT(STORE(M5+3)) .EQ. 0) THEN
        JD=ISTORE(JO+1)
C-C-C-LINE (---> SHIFT OF AZIMUTH OF LINE)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 3) THEN
        JD=JC+19*MW
C-C-C-RING (---> SHIFT OF AZIMUTH OF RINGNORMAL)
       ELSE IF (NINT(STORE(M5+3)) .EQ. 4) THEN
        JD=JC+23*MW
       ENDIF
      ENDIF
      STORE(JD+1)=STORE(JD+1)+1.
      STORE(JD+2)=STORE(JD+2)+STORE(JO)
      STORE(JD+3)=STORE(JD+3)+STORE(JO)*STORE(JO)
      STORE(JD+5) = AMAX1(STORE(JD+5), ABS(STORE(JO)) )
C--CHECK IF THE SIGN HAS CHANGED COMPARED WITH THE LAST CYCLE
      IF(C)3350,3400,3400
C--THE SIGN HAS CHANGED
3350  CONTINUE
      STORE(JD+4)=STORE(JD+4)+1.
C--UPDATE THE ADDRESS AND CONTROL FLAGS
3400  CONTINUE
      JO=JO+2
      JQ=JQ+JY-JX+1
      JT=JT+1
      M24=M24+MD24
3450  CONTINUE
C----- PUT THE GOODIES BACK ON THE DISK
      CALL XUPF (M11DB, XSTR11 (MD11*L11C-MD11+1), MD11*NELEM)
      CALL XUPF (M11RDB, XSTR11 (MD11R*L11RC-MD11R+1), MD11R*JY)
C--CHANGE TO THE NEXT BLOCK - UPDATE DISK ADDRESSES
      M11DB = M11DB +((ISTORE(M12B+1)+1)*ISTORE(M12B+1))/2
      M11RDB = M11RDB+ISTORE(M12B+1)
      M12B=M12B+MD12B
3500  CONTINUE
C
C
C
C--PRINT THE OVERALL STATISTICS
      ICONVG = 0
      WRITE(NCAWU,3550) F
      IF (ISSPRT .EQ. 0) WRITE(NCWU,3550) F
      WRITE ( CMON, 3550) F
      CALL XPRVDU(NCVDU, 2,0)
3550  FORMAT( 
     1 ' Sum of the squares of the ratio',' (Shift/e.s.d.) =',F16.4)
C
C----- TIDY UP PARAMETER NAME
      CALL XCRAS ( CSAVE, LENNAM )
C----- COMPUTE AND STORE RMS SHIFT/ESD
      RMSS=SQRT(F/STORE(L11P+23))
CDJW0202      STORE(M33V+3)=RMSS
C----- STORE MAXIMUM SHIFT/ESD
      STORE(M33V+3) = SMAX
      WRITE( NCAWU,3556) RMSS
      IF (ISSPRT .EQ. 0) WRITE( NCWU,3556) RMSS
      WRITE ( CMON, 3556) RMSS
      CALL XPRVDU(NCVDU, 1, 0)
3556  FORMAT(27X,' The rms (shift/esd) =', F16.7)
      WRITE(CMON,3557) SMAX, JSAVE, CSAVE(1:LENNAM)
3557  FORMAT(' The largest (shift/esd) =',F10.6,
     1 ', for Parameter ', I4,', ', A)
      CALL XPRVDU(NCVDU, 1,0)
      WRITE (NCAWU,'(A)') CMON(1)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)')CMON(1)
C---JAN97 - THE FOLLOWING STATEMENT MAY BE NEEDED IF THE
C   SHIFT RATIO IS EVER RE-COMPUTED
3555  FORMAT(/ ' The SHIFT RATIO is the shift calculated for this',
     2 ' cycle',/,' divided by the corresponding',
     3 ' shift for the last cycle.')
C
      ISTORE(L11P+15)=-1
C----- NOW WRITE BACK THE HEADER INDICATING THAT WE ARE UPDATING IT
C----- RESTORE THE DISK ADDRESSES
      L11 = M11S
      L11R = M11RS
      ISTAT = KLSCHK ( IULN , 0 , 0 , ILSEXI , ILSNMS , I , IERNOP )
      IF ( ISTAT .GT. 0 ) CALL XLSALT ( IULN , 0 , 0 , ILSOWF , ILSUPD )
      CALL XWLSTD(IULN,ICOM11,IDIM11,-1,0)
      CALL XMKOWF(11,0)
      CALL XALTES(11,1)
C
C--UPDATE THE LIST 23 ON THE DISC AND CHECK TERMINATIONS
      JD=JC+(NMW-1)*MW
C----- CHECK FOR TOO MANY SINGULARITIES
      IF (JA .LE. ISTORE(L23MN)) THEN
C----- SINGULARITY SITUATION IS OKAY
        IF (JA .GT. 0 ) THEN
          WRITE(NCAWU, 3650) JA, ISTORE(L23MN)
          IF ( ISSPRT .EQ. 0 ) WRITE(NCWU, 3650) JA, ISTORE(L23MN)
          WRITE ( CMON, 3650) JA, ISTORE(L23MN)
          CALL XPRVDU(NCVDU, 1,0)
3650      FORMAT( ' The number of singularities, ', I4,
     1 ' is within the permited limit ', I4)
            JA=0
        ENDIF
      ELSE
            WRITE(NCAWU, 3651) JA, ISTORE(L23MN)
            IF ( ISSPRT .EQ. 0 ) WRITE(NCWU, 3651) JA, ISTORE(L23MN)
            WRITE ( CMON, 3650) JA, ISTORE(L23MN)
            CALL XPRVDU(NCVDU, 2,0)
3651        FORMAT( ' The number of singularities, ', I4,
     1 ' exceeds the permited limit ', I4/
     2 ' Terminating after this cycle')
      ENDIF
C--UPDATE THE VALUES OF THE VARIOUS DETERMINED FUNCTIONS
3700  CONTINUE
      JU=1
C--CHECK IF THIS IS THE FIRST CYCLE TO SEE IF DIFFERENCES CAN BE CALCULA
      IF(ISTORE(L33CB+1))3800,3800,3750
C--CHECK IF THE LAST CYCLE INVOLVED REFINEMENT
3750  CONTINUE
      IF(ISTORE(M33CD-1)-1)3800,3850,3800
C--NO REFINEMENT LAST TIME
3800  CONTINUE
      JU=-1
C--CHECK IF SINGULARITIES ALREADY INDICATE TERMINATION
3850  CONTINUE
C--CHECK THE CONDITIONS THAT MUST BE MET BY ALL CYCLES
3900  CONTINUE
      M23AC=L23AC
      JE=M33V
      JG=2
      JF=MD23AC/JG
      I = 0
      J = 0
      DO 4050 I=1,JF
C--CHECK THE MINIMUM VALUE
      IF(STORE(M23AC)-STORE(JE+1))3950,3950,4300
C--CHECK THE MAXIMUM VALUE
3950  CONTINUE
      IF(STORE(M23AC+1)-STORE(JE+1))4300,4000,4000
C--UPDATE FOR THE NEXT CONDITION
4000  CONTINUE
      JE=JE+1
      M23AC=M23AC+JG
4050  CONTINUE
      I = 0
C--CHECK IF WE SHOULD CHECK INTER-CYCLE CONDITIONS
      IF(JU)4400,4400,4100
C--LOOP OVER THE INTER-CYCLE CONDITIONS
4100  CONTINUE
      M23IC=L23IC
      JH=M33V-MD33V
      JE=M33V
C--LOOP OVER EACH
      DO 4250 J = 1, JF
      A=STORE(JH+1)-STORE(JE+1)
C--CHECK THE MIMIMUM
      IF(STORE(M23IC)-A)4150,4150,4300
C--CHECK THE MAXIMUM
4150  CONTINUE
      IF(STORE(M23IC+1)-A)4300,4200,4200
C--UPDATE
4200  CONTINUE
      JE=JE+1
      JH=JH+1
      M23IC=M23IC+JG
4250  CONTINUE
      J = 0
C--ALL OKAY  -  BRANCH OUT
      GOTO 4400
C--ONE OR MORE TERMINATION CONDITIONS HAVE BEEN SATISFIED
4300  CONTINUE
      ISTORE(L33CB)=N33IB
      IF (I .GT. 0) THEN
       WRITE(CMON,4350) CLST23(I)(:)
4350  FORMAT(' Forced termination after this cycle: ',
     3 ' All-cycle condition on ',   A)
       CALL XPRVDU(NCVDU, 1,0)
       IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)
       WRITE(NCAWU,'(A)') CMON(1)
      ENDIF
      IF (J .GT. 0) THEN
       WRITE(CMON,4350) CLST23(J)(:)
4351  FORMAT(' Forced termination after this cycle: ',
     3 ' Inter-cycle condition on ',   A)
       CALL XPRVDU(NCVDU, 1,0)
       IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)
       WRITE(NCAWU,'(A)') CMON(1)
      ENDIF
C
C--REWRITE LIST 33 TO THE DISC
4400  CONTINUE
      IF ((ICONVG .EQ. 1) .OR. ( JA .NE. 0)) ISTORE(L33CB) = N33IB
      CALL XWLSTD(33,ICOM33,IDIM33,-1,-1)
      CALL XDUMP
C
C--START OF SHIFT STATISTICS PART
      D=1./AMAX1(ZEROSQ,STORE(L11P+26))
      E=1./AMAX1(ZEROSQ,STORE(L11P+29))
C--CALCULATE THE HAMILTON WEIGHTED R-VALUES
      A=100.*SQRT(STORE(L11P+25)*D)
      B=100.*SQRT(STORE(L11P+28)*E)
      IF ((STORE(L11P+26) + STORE(L11P+29)) .LE. ZERO) THEN
            C = 0.
      ELSE
      C=100.*SQRT((STORE(L11P+25)+STORE(L11P+28))/(STORE(L11P+26)
     2 +STORE(L11P+29)))
      ENDIF
C--DETERMINE THE NUMBER OF OBSERVATIONS ETC.
      I=NINT(STORE(L11P+23))
      J=NINT(STORE(L11P+24))
      K=NINT(STORE(L11P+27))
      L=J+K
      M=NINT(STORE(L11P+16))
C--PRINT THE HEADING AND THE VARIOUS DETAILS AMASSED
      CALL XPRTCN
      IF (C .LE. ZERO) THEN
        IF (ISSPRT .EQ. 0) THEN
          WRITE(NCWU,4448)
          WRITE(NCWU,4447)
        ENDIF
        WRITE(NCAWU,4449)
        WRITE(NCAWU,4447)
        WRITE ( CMON, 4447)
        CALL XPRVDU(NCVDU, 1,0)
      ENDIF
4447  FORMAT(1X ,' You have used neither restraints nor reflections')
4448  FORMAT(/60(2H *)/)
4449  FORMAT(/40(2H *)/)
C
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,4448)
        WRITE(NCWU,4450)I,M,J,K,L,STORE(L11P+25),STORE(L11P+28),
     2 STORE(L11P+17),A,B,C
        WRITE(NCWU,4448)
      ENDIF
C
      WRITE(NCAWU,4449)
      WRITE(NCAWU,4450)I,M,J,K,L,STORE(L11P+25),STORE(L11P+28),
     2 STORE(L11P+17),A,B,C
      WRITE(NCAWU,4449)
4450  FORMAT( ' Statistics for',I6,' least squares parameters,',
     1 ' with',I6,' degrees of freedom',
     3 /' Number of observations',3I18,
     4 /' Minimisation function',E23.7,2E18.7
     5 /' Hamilton weighted R-value',F16.3,2F18.3)
C
      WRITE(CMON, 4451) I,M, J,K,L, A,B,C
      CALL XPRVDU(NCVDU, 4,0)
4451  FORMAT( ' Statistics for',I6,' least squares parameters,',
     1 ' with',I6,' degrees of freedom',
     2 / 38X,'X-rays',8X,'Restraints',9X,'All',
     3 /' Number of observations   ',3I16,
     5 /' Hamilton weighted R-value',3F16.3)
C
C>DJWSEP96
C----- UPDATE LIST 30
      IF (KHUNTR (30,0, IADDL,IADDR,IADDD, -1) .NE. 0) CALL XFAL30
C>DJWSEP96
C----- Rw
      STORE(L30RF +1 ) = A
C----- NO. PARAM
      STORE(L30RF +2 ) = STORE(L11P+23)
C----- S GOONDNESS OF FIT - ONLY IF SOME OBSERVATIONS
      IF (STORE(L11P+24)+STORE(L11P+27) .GT. STORE(L30RF+3)) THEN
            STORE(L30RF +4 ) = SQRT(STORE(L11P+17) /
     1      (STORE(L11P+24)+ STORE(L11P+27)- STORE(L30RF+3)))
      ENDIF
C----- MAXIMUM SHIFT/ESD
      STORE(L30RF +7 ) = SMAX
      STORE(L30RF +8 ) = STORE(L11P+24)
      IF (STORE(L11P+24) .GT. ZERO) STORE(L30RF +9 ) = STORE(L11P+25)
      IF (STORE(L11P+27) .GT. ZERO) STORE(L30RF +10 ) = STORE(L11P+28)
      IF (C .GT. ZERO)              STORE(L30RF +11 ) = STORE(L11P+17)
      CALL XWLSTD ( 30, ICOM30, IDIM30, -1, -1)
C--OUTPUT THE INFORMATION FOR THE CALCULATED SHIFTS
      IF (ISSPRT .EQ. 0) WRITE(NCWU,4500)
4500  FORMAT(////,' Calculated shifts')
C--COMPUTE THE TOTALS TO BE PRINTED
      Y=0.
      Z=0.
      DO 4550 I=JC,JD,MW
      Y=Y+STORE(I+1)
      STORE(I+1)=1./AMAX1(STORE(I+1),1.)
      STORE(I+2)=STORE(I+2)*STORE(I+1)
      STORE(I+3)=SQRT(STORE(I+3)*STORE(I+1))
      Z=Z+STORE(I+4)
      STORE(I+4)=STORE(I+4)*STORE(I+1)*100.
4550  CONTINUE
C--CONVERT THE MEAN, RMS AND MAX POSN. COORDS. TO ANGSTROM
      JF=JC+5*MW
      JG=L1P1
      DO 4600 I=1,3
      A1(I)=STORE(JF+2)*STORE(JG)
      A1(I+3)=STORE(JF+3)*STORE(JG)
      B1(I)=STORE(JF+5)*STORE(JG)
      JF=JF+MW
      JG=JG+1
4600  CONTINUE
      JE=JC+3*MW
C--PRINT THE RESULTS
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4650)STORE(JC+2),(STORE(I+2),I=JE,JC+13*MW,MW),
     2 (A1(I),I=1,3),
     3 STORE(JC+3),(STORE(I+3),I=JE,JC+13*MW,MW),(A1(I),I=4,6)
4650  FORMAT(
     1 /13X,'Overall',4X,'Occ',5X,'U[iso]',4X,'X',8X,'Y',8X,'Z',
     2 7X,'U[11]',4X,'U[22]',4X,'U[33]',4X,'U[23]',4X,'U[13]',4X,
     3 'U[12]'
     4 //' Mean      ',12F9.5
     5 /           38X,3F9.5
     6 //' R.M.S.    ',12F9.5
     7 /           38X,3F9.5)
      WRITE(NCWU,4660) STORE(JC+5),(STORE(I+5),I=JE,JC+13*MW,MW),
     1 (B1(I),I=1,3)
      ENDIF
4660  FORMAT(/' Maximum   ',12F9.5,
     1 /           38X,3F9.5)
C--CHECK IF WE MUST PRINT THE SIGN CHANGE INFORMATION
      IF(M24)4800,4800,4700
4700  CONTINUE
      Z=Z/Y*100.
      IF (ISSPRT .EQ. 0) THEN
C      WRITE(NCWU,4750)STORE(JC+4),(STORE(I+4),I=JE,JD,MW),Z
      WRITE(NCWU,4750)STORE(JC+4),(STORE(I+4),I=JE,JC+13*MW,MW)
      ENDIF
C4750  FORMAT(/10H Reversals,12F9.2///
C     2 44H Reversals is the percentage of shifts whose,
C     3 41H signs have changed since the last cycle,,8H and is ,F6.2,
C     4 20H for all parameters.)
4750  FORMAT(/' Reversals ',12F9.2/)
C-C-C-PRINT THE RESULTS (FOR SPECIAL SHIFTS)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4760)
      ENDIF
4760  FORMAT(/' Calculated shifts for special parameters')
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4770)(STORE(I+2),I=JC+14*MW,JC+23*MW,MW),
     2 (STORE(I+3),I=JC+14*MW,JC+23*MW,MW)
4770  FORMAT(/13X,'UisoSph',2X,'RadSph',3X,
     2 'UisoLin',2X,'LenLin',3X,'DecLin',3X,'AziLin',3X,
     3 'UisoRin',2X,'RadRin',3X,'DecRin',3X,'AziRin'
     4 //' Mean      ',10F9.5//' R.M.S.    ',10F9.5)
      WRITE(NCWU,4775) (STORE(I+5),I=JC+14*MW,JC+23*MW,MW)
      ENDIF
4775  FORMAT(/' Maximum   ',10F9.5)
C--CHECK IF WE MUST PRINT THE SIGN CHANGE INFORMATION
      IF(M24)4800,4800,4780
4780  CONTINUE
      Z=Z/Y*100.
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,4785)(STORE(I+4),I=JC+14*MW,JC+23*MW,MW),Z
      ENDIF
4785  FORMAT(/' Reversals',10F9.2///
     2 ' Reversals is the percentage of shifts whose',
     3 ' signs have changed since the last cycle,'/,' and is ',F6.2,
     4 ' for all parameters.')
C--COMPUTE THE SHIFT FACTORS TO APPLY IF ANY
4800  CONTINUE
      J=M33ST+1
      K=M33SV+1
C--STORE THE SHIFTS INFORMATION IN ANGSTROM FOR X, Y AND Z
      JF=JC+5*MW
      DO 4850 I=4,6
cdkw0202      STORE(JF+3)=A1(I)
C----- USE MAXIMUM NOT RMS
      STORE(JF+3)=B1(I-3)
      JF=JF+MW
4850  CONTINUE
C--SEE IF THE SHIFTS HAVE TO BE CALCULATED
      DO 5100 I=JC,JD,MW
      IF(ISTORE(J))5050,4900,4950
C--CHECK IF THE R.M.S. VALUE IS TOO LARGE
CDJS0102 CHANGED TO WORK ON MAXIMUM VALUE
4900  CONTINUE
      IF(STORE(K)-STORE(I+3))4950,5050,5050
C--CALCULATE THE NEW SHIFT FACTOR
4950  CONTINUE
CDJW0102--- CHANGE TO ZERO (FROM SQ) TO AVOID
C      MASSIVE SHIFTS IF MAXIMUM SHIFT IS SMALL
      IF(STORE(I+3)-ZERO)5050,5050,5000
5000  CONTINUE
      STORE(I)=STORE(K)/STORE(I+3)
C--COMPUTE THE NEW TOTALS AFTER THE NEW SHIFT FACTOR HAS BEEN APPLIED
5050  CONTINUE
      STORE(I+2)=STORE(I+2)*STORE(I)
      STORE(I+3)=STORE(I+3)*STORE(I)
      J=J+1
      K=K+1
5100  CONTINUE
      WRITE(NCWU,5105)
     2 STORE(JC),(STORE(I),I=JE,JC+23*MW,MW)
5105  FORMAT(
     2       //' Shift',
     3        /' factors   ',12F9.5,
     4        /'           ',12F9.5)
C--SHUFFLE THE RESULTS FOR X, Y AND Z
      JF=JC+5*MW
      JG=L1P1
      DO 5150 I=1,3
      A1(I)=STORE(JF+2)*STORE(JG)
      A1(I+3)=STORE(JF+3)
      STORE(JF+3)=STORE(JF+3)/STORE(JG)
      JF=JF+MW
      JG=JG+1
5150  CONTINUE
C
C--PREPARE THE LIST 24 FOR OUTPUT
      CALL XCSAE
      N24=N12
\IDIM24
      CALL XCELST(24,ICOM24,IDIM24)
C--SET UP THE SHIFTS IN THE OUTPUT AREA
      J=L24
      K=L24+(N24-1)*MD24
      DO 5250 I=J,K,MD24
C--SET THE CALCULATED SHIFT
      STORE(I)=STORE(JB)
C--COMPUTE THE APPLIED SHIFT
      L=ISTORE(JB+1)
      STORE(I+1)=STORE(JB)*STORE(L)
      JB=JB+2
5250  CONTINUE
      CALL XWLSTD(24,ICOM24,IDIM24,-1,0)
C----- PRINT LARGE CORRELATION COEFFICIENTS
cdjw0102      CALL XPR11L(CCOEF)
5275  CONTINUE
C
      CALL XOPMSG( IOPINV, IOPEND, IVERSN)
C
      CALL XTIME2(2)
      RETURN
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPINV , IOPABN , 0 )
      GO TO 5275
9910  CONTINUE
C -- LIST 11 WRONG TYPE
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , 9915 )
      WRITE ( NCAWU , 9915 )
      WRITE ( CMON, 9915)
      CALL XPRVDU(NCVDU, 1,0)
9915  FORMAT ( 1X , 'List 11 is the wrong type' )
      CALL XERHND ( IERERR )
      GO TO 9900
C
      END
C
C
C
CODE FOR XFILTR
      SUBROUTINE XFILTR (A, B, C, U, W, M, AUGFAC, FILTER, DISC, ILEVEL)
C----- INVERT NORMAL MATRIX BY EIGENVALUE FILTERING
C
C      N.x = y
C      N = V.D.V'
C      N-1 = V.D-1.V'
C      x = N-1. y
C
C      THIS IS NOT AS EFFICIENT AS SOLVING THE EQUATIONS DIRECTLY FROM
C      EIGEN FACTORS (SEE BELOW), BUT IS NECESSARY IF WE NEED TO SAVE
C      THE INVERSE FOR THE ESDS.
C      N.x = y
C      V.D.V'.x = y
C      D.V'.x = V'. y      (V' = V-1)
C      V'.x = D-1.V'. y
C      x = V.D-1.V'. y
C
C----- A(M,M) NORMAL MATRIX - UPPER TRIANGLE USED AS WORK SPACE, LOWER
C             RETURNED UNCHANGED.
C----- B(M)   EIGENVALUES
C----- C(M,M) EIGENVECTORS
C----- U(M)   SCALING VECTOR
C----- W(5*M) WORK AREA
C----- AUGFAC AUGMENTATION (MARQUARDT) FACTOR    E.G. 0.0000
C----- FILTER FILTER LEVEL                       E.G. 0.00005
C----- DISC   DISCONTINUITY VALUE                E.G. 100
C----- ILEVEL MONITOR LEVEL -1 OFF,  2 HIGH
C
      DIMENSION A(M,M), B(M), C(M,M), U(M), W(5*M)
\XUNITS
\XSSVAL
\XCONST
\XIOBUF
C
C
C
C PRE-SCALE NORMAL MATRIX.
C GET INVERSE DIAGONAL SCALING MATRIX U FROM NORMAL MATRIX.
C THE ELEMENTS ARE 1./SQRT(DIAGONAL ELEMENT OF NORMAL MATRIX)
C
      DO 10 I=1,M
        U(I)=1.0
        IF (ABS(A(I,I)) .GT. ZERO) U(I)=1.0 / SQRT(A(I,I))
10    CONTINUE
C
C SCALE MATRIX BY U
C
      DO 20 J=1, M
        UJ=U(J)
        DO 30 K=1,J
          A(J,K) = A(J,K) * U(K) * UJ
30      CONTINUE
20    CONTINUE
C
C-----  EA06C RETURNS EIGENVECTORS AND EIGENVALUES
C
      CALL EA06C(A, B, C, M, M, M, W)
C
C
      IF (ILEVEL .GE.2) THEN
        WRITE (NCAWU,1000)
        WRITE (NCAWU, 1010) (B(I),I=1,M)
        IF (ISSPRT .EQ. 0) THEN
          WRITE (NCWU,1000)
          WRITE (NCWU, 1010) (B(I),I=1,M)
        ENDIF
1000    FORMAT(/,' Eigen values of Normal matrix')
1010    FORMAT((1X,10F8.3/))
        IF (ISSPRT .EQ. 0) THEN
          WRITE (NCWU,1020)
1020      FORMAT(/ , ' Eigen vectors of Normal Matrix' )
          DO 1040 J = 1, M
          WRITE (NCWU,1030) J
          WRITE (NCWU, 1015) (C(I,J),I=1,M)
1030      FORMAT (/, ' Column ', I5)
1015      FORMAT((1X,20F6.2/))
1040      CONTINUE
        ENDIF
      ENDIF
C
C                  EIGENVALUE FILTERING
C
C----- SEE IF THERE IS A DISCONTINUITY IN THE MAGNITUDES OF THE
C      EIGENVALUES. IF THERE IS, SET ALL THE SMALL ONES TO ZERO.
C
C
C----- FIND LARGEST AND SMALLEST
      Y = B(1)
      Z = B(1)
      II = 1
      IK = 1
      DO 100 I = 2, M
       IF ( B(I) .GT. Y ) THEN
         II = I
         Y = B(I)
       ELSE IF (B(I) .LT. Z) THEN
         IK = I
         Z = B(I)
       ENDIF
100   CONTINUE
C
C----- FIND NEXT LARGEST
      DO 120 J = 1, M
         X = Z
         IJ = IK
         DO 110 I = 1, M
           IF( (B(I).GT.X) .AND. (B(I).LT.Y) )  THEN
             X = B(I)
             IJ = I
           ENDIF
110      CONTINUE
C-----   LOOK FOR A DISCONTINUITY
         IF ( Y .GT. (DISC * X)) THEN
C-----   RESET ALL SMALLER TO ZERO AND EXIT LOOP
         IF (ISSPRT .EQ. 0) WRITE(NCWU,111) II, Y, IJ, X
         WRITE(NCAWU,111) II, Y, IJ, X
         WRITE ( CMON,113 )
         CALL XPRVDU(NCVDU, 1,0)
113      FORMAT(' Discontinuity in eigenvector list ')
111      FORMAT(' Discontinuity in eigenvector list ',/,
     1    12X, 2(I5, G11.4,4X))
           DO 115 K = 1, M
             IF(B(K) .LE. X ) THEN
                  IF (ISSPRT .EQ. 0) WRITE(NCWU,112)  K, B(K)
                  WRITE(NCAWU,112)  K, B(K)
                  WRITE ( CMON,112 ) K
                  CALL XPRVDU(NCVDU, 1,0)
 112              FORMAT(1X,' Zeroing eigen value ',I5,4X, G11.4,
     1            ' Eigen vectors are: ')
                  B(K) = 0.0
                  IF (ISSPRT .EQ. 0) WRITE (NCWU, 1015) (C(I,K),I=1,M)
             END IF
115        CONTINUE
           GOTO 130
         ELSE
C-----     EXCHANGE SMALLER
           Y = X
           II = IJ
         ENDIF
120    CONTINUE
130    CONTINUE
C
C------ INVERT DIAGONAL MATRIX, REJECTING LOW EIGENVALUES AND
C------ AUGMENTING OTHERS.
C
      DO 40 I=1,M
        IF(B(I) .GT. FILTER) THEN
              B(I) = 1.0 / (B(I) + AUGFAC)
        ELSE
              B(I) = 0.0
        ENDIF
40    CONTINUE
C
C----- TRANSPOSE 'C' TO INCREASE EFFICIENCY OF INNER LOOP LATER
       DO 55 J = 1,M
              DO 50  I = J, M
                X = C(J,I)
                C(J,I) = C(I,J)
                C(I,J) = X
50            CONTINUE
55       CONTINUE
C
C----- FORM       N-1 = U.V.D-1.V'.U'
C
      DO 80 J = 1, M
        UJ = U(J)
        DO 70 I = 1, M
          SUM = 0.0
          DO 60 K = 1,M
            SUM =  SUM + ( B(K) * C(K,I) * C(K,J) )
60        CONTINUE
         A(I,J) = SUM * U(I) * UJ
70      CONTINUE
80    CONTINUE
C
      RETURN
      END
CODE FOR XMTCVT
      SUBROUTINE XMTCVT(IADD, N, ITYPE, ILEN)
C
C----- ILEN LENGTH OF REPRESENTATION OF VALUE (MD11)
C      IF ITYPE = 1
C----- EXPAND A LOWER TRIANGLE STARTING AT IADD AND STORED BY COLUMNS
C      INTO LOWER HALF OF SQUARE SYMETRIC MATRIX STARTING AT SAME ADDRES
C      ELSE
C----- CONTRACT A SQUARE MATRIX INTO A LOWER TRIANGLE
C
\TYPE11
\XSTR11
\QSTR11
C
C
C
      JADD = IADD - 1
      DO 10 L = 2, N
      IF (ITYPE .EQ. 1) THEN
            M = N - L + 2
      ELSE
            M = L
      ENDIF
C---- NUMBER OF ITEMS IN COLUMN M
            NIM = N - M + 1
C----- ADDRESS OG LAST ELEMENT OF COLUMN M OF LOWER TRIANGLE
            ITL = JADD + M* (2*N - M +1) /2
C----- ADDRESS OF DIAGONAL ELEMENT OF COLUMN M OF LOWER TRIANGLE
            ITD = ITL - NIM + 1
C----- ADDRESS OF LAST ELEMENT IN COLUMN M IN SQUARE MATRIX
            ISL = JADD + M * N
C----- ADDRESS OF FIRST ELEMENT IN COLUMN M IN SQUARE MATRIX
            ISF = ISL - N + 1
C----- ADDRESS OF DIAGONAL ELEMENT IN COLUMN M IN SQUARE MATRIX
            ISD = ISL - NIM + 1
C----- MOVE THE COLUMN ALONG
      IF (ITYPE .EQ. 1) THEN
            CALL XMOVE (XSTR11(ITD), XSTR11(ISD), NIM*ILEN)
      ELSE
            CALL XMOVE (XSTR11(ISD), XSTR11(ITD), NIM*ILEN)
      ENDIF
10    CONTINUE
C
      END
C
CODE FOR KFLSP
      FUNCTION KFLSP (JT, JS, JR, JO, JX, JC, JQ, JZ, ICAPT,
     1 E, C, A, S, RMAX, SOESD, ILEVEL, MW, CTEXT)
C
C----- FIND A LEAST SQUARES PARAMETER IN LIST 5 AND LIST 12
C      AND OUTPUT DETAILS
C      RETURN VALUE GT ZERO IF SUCCESSFULL
C
C      JT            ABSOLUTE L.S. PARAMETER NO.
C      JS            PHYSICAL PARAMETER NO FROM WHICH TO START SEARCH
C      JR            SINGULARITY SYMBOL
C      JO            SHIFT ADDRESS
C      JX            RELATIVE PARAMETER NO
C      JC            SHIFT DETAILS ADDRESS
C      JQ            ADDRESS IN LIST 11
C      JZ             BLOCK NUMBER
C      ICAPT          CAPTION FLAG
C      E             SIG W DELSQ / N-M
C      C             SHIFT RATIO
C      A             ESD
C      S             SHIFT/ESD
C      ILEVEL        MONITORING LEVEL
C      MW            NO OF ITEMS PER ENTRY IN SHIFT DETAILS
C
C------ ALL EXCEPT JT ARE UPDATED BY THIS ROUTINE
C
      CHARACTER *6 FLAG, JQUEST, IBLANK, SRATIO, IOESD,  TOOBIG
      CHARACTER *(*) CTEXT
\TYPE11
\ICOM12
\ISTORE
\STORE
      DIMENSION IP(4)
      DIMENSION PARVAL(13)
\XLST01
\XLST05
\XLST12
\XLST24
\XSTR11
\XCONST
\XUNITS
\XSSVAL
\XCHARS
\XAPK
\XOPK
\XSCALE
\QSTORE
\QSTR11
\QLST12
\XIOBUF
      DATA IQUEST /'????'/
      DATA JQUEST /'??????'/, IBLANK /'      '/
      DATA SRATIO /'SRATIO'/, IOESD  /'S/ESD '/
      DATA TOOBIG /'LARGE '/
C----- MAXIMUM SHIFT VALUES
      DATA PARVAL /0.,0.,1.,.05,.25,.25,.25,.05,.05,.05,.05,.05,.05/
C
      KFLSP = 0
      IHIT = 0
C----- SET A BLANK
      JR = IB
      FLAG = IBLANK
C----- SET MONITORING FLAGS
      IPRINT = 0
      IF (ILEVEL .GT. 0) THEN
            ITYPE = 1
      ELSE
            ITYPE = 0
      ENDIF
C----- SAVE THE INITIAL VALUES
      IP(1) = M5
      IP(2) = M12
      IP(3) = L12A
      IP(4) = JS
2150  CONTINUE
C--CHECK IF THIS GROUP CONTAINS ANY REFINED PARAMETERS
      IF(ISTORE(M12+1))3250,3250,2200
C--COMPUTE THE ADDRESS OF THE FIRST PART FOR THIS GROUP
2200  CONTINUE
      L12A=ISTORE(M12+1)
C--CHECK IF THIS PART CONTAINS ANY REFINABLE PARAMETERS
2250  CONTINUE
      IF(ISTORE(L12A+3))3200,2300,2300
C--SET UP THE CONSTANTS TO PASS THROUGH THIS PART
2300  CONTINUE
      MD12A=ISTORE(L12A+1)
      JU=ISTORE(L12A+2)
      JV=ISTORE(L12A+3)
      JS=ISTORE(L12A+4)+1
C--SEARCH THIS PART OF THIS ATOM
      DO 3150 JW=JU,JV,MD12A
C--CHECK IF THIS IS THE PARAMETER THAT WE ARE SEARCHING FOR
      IF(JT-ISTORE(JW))3100,2350,3100
C
2350  CONTINUE
C------ A HIT
      IHIT = IHIT + 1
      IF ( IHIT .EQ. 1 ) THEN
C---------  SAVE THE HIT VALUES
            IP(1) = M5
            IP(2) = M12
            IP(3) = L12
            IP(4) = JS
            KFLSP = JW
C---------  COMPUTE ESD
            A=STR11(JQ)
            A=SQRT(A*E)
C--CHECK IF WE ARE USING AN OLD LIST 24
cdjw0202
            IF(M24 .GT. 0) THEN
C---------- USING AN OLD LIST 24 - CHECK THAT SHIFT IS NOT SINGULAR
C---------- COMPUTE THE RATIO OF THE TWO SHIFTS
            IF (ABS(STORE(M24)) .GT. ZEROSQ) C = STORE(JO) / STORE(M24)
            ENDIF
C--IF THIS PARAMETER IS NOT SINGULAR,  COMPUTE THE SHIFT/E.S.D. RATIO
            IF ( A .GT. ZEROSQ) THEN
                  S = STORE(JO) / A
            ELSE
C----------  IT IS SINGULAR
                  JR = IQUEST
                  FLAG = JQUEST
                  ITYPE = 1
            ENDIF
C--------- THE SHIFT RATIO
            IF (ABS (C) .GT. RMAX) THEN
                  ITYPE = 1
                  FLAG = SRATIO
            ENDIF
C--------- THE SHIFT / ESD
            IF (ABS (S) .GT. SOESD) THEN
                  ITYPE = 1
                  FLAG = IOESD
            ENDIF
            IF (ITYPE .NE. 1) THEN
C------------- CHECK IF SHIFT TOO BIG
                  IF((M12 .NE. L12O) .AND. (M12 .NE. L12LS) .AND.
     1            (M12 .NE. L12ES) .AND. (M12 .NE. L12BS)) THEN
C------------- ATOMIC PARAMETER
                  IF (JS .GE. 5 .AND. JS .LE. 7) THEN
                        IF (ABS( STORE(JO) ) * STORE( L1P1 + JS -4 )
     1                      .GT. PARVAL(JS) ) THEN
                                    ITYPE=1
                                    FLAG = TOOBIG
                        ENDIF
                  ELSE
                        IF (ABS(STORE(JO)) .GT. PARVAL(JS)) THEN
                                    ITYPE = 1
                                    FLAG = TOOBIG
                        ENDIF
                  ENDIF
                  ELSE
                        IF (M12 .EQ. L12O) THEN
C------------- AN OVERALL PARAMETER
                              M5G = L5O
                        ELSE IF (M12 .EQ. L12LS) THEN
C------------- LAYER SCALE
                              M5G = L5LS
                        ELSE IF (M12 .EQ. L12ES) THEN
C------------  ELEMENT SCALES
                              M5G = L5ES
                        ELSE IF (M12 .EQ. L12BS) THEN
C------------  BATCH SCALE
                              M5G = L5BS
                        ELSE IF (M12 .EQ. L12CL) THEN
C------------  CELL PARAM
                              M5G = L5CL
                        ELSE IF (M12 .EQ. L12PR) THEN
C------------  PROFILE PARAM
                              M5G = L5PR
                        ELSE
C------------  EXTINCTION PARAM
                              M5G = L5EX
                        ENDIF
                        IF(ABS(STORE(JO)) .GT. .1*STORE(M5G-1+JS))
     1                  THEN
                            ITYPE = 1
                            FLAG = TOOBIG
                        ENDIF
                  ENDIF
            ENDIF
C--------- NOW ADJUST THE PRINT LEVEL IF NECESSARY
            IF ( ITYPE .EQ. 1 ) IPRINT = 1
      ENDIF
C
      IF (ICAPT .EQ. 0) THEN
        IF (IPRINT .EQ. 1) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE(NCWU,1950)JZ
      ENDIF
1950    FORMAT(/' Block',I4/8X,'Param.',4X,'Rel. param.',4X,
     2  'Calc. shift',4X,'Shift ratio',4X,'E.S.D.',5X,'Shift/E.S.D.',
     3  4X,'Type',3X,'Serial',4X,'Coordinate'/)
        ICAPT = 1
        ENDIF
        IF (ITYPE .EQ. 1) THEN
        WRITE(NCAWU,1952) JZ
1952    FORMAT(6H Block,4X,I4,
     1  /10X,5HParam,5H RELP,10H Calcshift,1X,10HShiftRatio,
     2  9H   ESD    ,10HShift/ESD ,5H Type,7H Serial)
        ICAPT = 1
        ENDIF
      ENDIF
C
C--CHECK IF THIS IS AN OVERALL PARAMETER
      IF(M12-L12O)2800,2700,2800
C--PRINT FOR OVERALL PARAMETERS
2700  CONTINUE
      IF (IHIT .EQ. 1) ISTORE(JO+1) = JC
      IF ((IPRINT .EQ. 1 ) .AND. (ISSPRT .EQ. 0) ) THEN
      WRITE(CTEXT,'(2A4,I1)') (KVP(JRR,JS),JRR=1,2)
       WRITE(NCWU,2750)FLAG,JT,JX,STORE(JO),C,A,S,(KVP(JRR,JS),JRR=1,2)
      ENDIF
      IF (ITYPE .EQ. 1 )
     1 WRITE(NCAWU,2790)FLAG,JT,JX,STORE(JO),C,A,S,(KVP(JRR,JS),JRR=1,2)
2750  FORMAT(1X,A6,I5,I12,F18.5,F13.2,F13.5,F14.2,26X,2A4,I3)
2790  FORMAT(1X,A6,1X,2I5,2(F9.4,F9.2),12X,2A4,I3)
      GOTO 3300
C
C--CHECK IF THIS A SCALE OR GENERAL PARAMETER
2800  CONTINUE
      NB=17
      DO 2950 NA=1,NSC
      IF(ICOM12(NB)-M12)2900,2850,2900
C
C--LAYER OR ELEMENT BATCH OR PARAMETER PRINT
2850  CONTINUE
      IF (IHIT .EQ. 1) ISTORE(JO+1) = JC
      WRITE(CTEXT,'(2A4,I1)')  (KSCAL(NC,NA+2),NC=1,2),JS
      IF ((IPRINT .EQ. 1 ) .AND. (ISSPRT .EQ. 0) ) THEN
       WRITE(NCWU,2750)FLAG,JT,JX,STORE(JO),C,A,S,
     2 (KSCAL(NC,NA+2),NC=1,2),JS
      ENDIF
      IF (ITYPE .EQ. 1)
     1 WRITE(NCAWU,2790)FLAG,JT,JX,STORE(JO),C,A,S,
     2 (KSCAL(NC,NA+2),NC=1,2),JS
      GOTO 3300
C--UPDATE FOR THE NEXT SCALE
2900  CONTINUE
      NB=NB+4
2950  CONTINUE
C
C--PRINT FOR ATOMS
      JD=JC+MW*JS
      IF (IHIT .EQ. 1) THEN
            WRITE(CTEXT,'(A4,I4,1X,3A4)') STORE(M5), NINT(STORE(M5+1)),
     1      (ICOORD(JRR,JS),JRR=1,NWKA)
            ISTORE(JO+1) = JD
            IF ( (IPRINT .EQ. 1) .AND. (ISSPRT .EQ. 0)) THEN
C-C-C-DISTINCTION BETWEEN ANISO'S AND ISO/SPECIAL'S FOR PRINT
               IF((STORE(M5+3) .GE. 1.0) .AND. (JS .GE. 8)) THEN
               WRITE(NCWU,3050)FLAG,JT,JX,STORE(JO),C,A,S,STORE(M5),
     2         NINT(STORE(M5+1)),(ICOORD(JRR,JS+NKAO),JRR=1,NWKA)
               ELSE
               WRITE(NCWU,3050)FLAG,JT,JX,STORE(JO),C,A,S,STORE(M5),
     2         NINT(STORE(M5+1)),(ICOORD(JRR,JS),JRR=1,NWKA)
               ENDIF
C             WRITE(NCWU,3050)FLAG,JT,JX,STORE(JO),C,A,S,STORE(M5),
C     2       STORE(M5+1),(ICOORD(JRR,JS),JRR=1,NWKA)
            ENDIF
C            IF (ITYPE .EQ. 1)
            IF (ITYPE .EQ. 1) THEN
               IF((STORE(M5+3) .GE. 1.0) .AND. (JS .GE. 8)) THEN
               WRITE(NCAWU,3090)FLAG,JT,JX,STORE(JO),C,A,S,STORE(M5),
     2         NINT(STORE(M5+1)),(ICOORD(JRR,JS+NKAO),JRR=1,NWKA)
               ELSE
               WRITE(NCAWU,3090)FLAG,JT,JX,STORE(JO),C,A,S,STORE(M5),
     2         NINT(STORE(M5+1)),(ICOORD(JRR,JS),JRR=1,NWKA)
               ENDIF
C     1       WRITE(NCAWU,3090)FLAG,JT,JX,STORE(JO),C,A,S,STORE(M5),
C     2       STORE(M5+1),(ICOORD(JRR,JS),JRR=1,NWKA)
            ENDIF
3050  FORMAT(1X,A6,I5,I12,F18.5,F13.2,F13.5,F14.2,8X,A4,I4,1X,3A4)
3090  FORMAT(1X,A6,1X,2I5,2(F9.4,F9.2),1X,A4,I4,1X,3A4)
      ELSE IF (IHIT .GE. 2) THEN
            IF ((ISSPRT .EQ. 0) .AND. (IPRINT .EQ. 1)) WRITE(NCWU,3051)
            IF (ITYPE .EQ. 1) WRITE(NCAWU,3091)
3051        FORMAT(1X,107X,'Composite',/)
3091        FORMAT(1X,69X,'Composite',/)
      ENDIF
      GOTO 3300
C
C
3300  CONTINUE
C
C
C
C--INCREMENT TO THE NEXT PARAMETER OF THIS PART
3100  CONTINUE
      JS=JS+1
3150  CONTINUE
C--CHANGE PARTS FOR THIS ATOM OR GROUP
3200  CONTINUE
      L12A=ISTORE(L12A)
C--CHECK IF THERE ARE ANY MORE PARTS FOR THIS ATOM OR GROUP
      IF(L12A)3250,3250,2250
C--MOVE TO THE NEXT GROUP OR ATOM
3250  CONTINUE
      M5=M5+MD5
      M12=ISTORE(M12)
      IF (M12 .LE. 0)   THEN
C----- RESTORE VALUES FROM INITIAL HIT
            M5  = IP(1)
            M12 = IP(2)
            L12 = IP(3)
            JS  = IP(4)
            RETURN
      ELSE
            GOTO 2150
      ENDIF
      END
CODE FOR XSFLSG
      SUBROUTINE XSFLSG
C--SOLUTION ROUTINES
C
C--THESE ROUTINES READ DOWN LIST 24 FROM THE DISC AND APPLY
C  THE RESULTS
C
C--
\ISTORE
\ICOM05
\ICOM12
\ICOM30
C
\STORE
\XLISTI
\XUNITS
\XSSVAL
\XCONST
\XPDS
C
C
      COMMON /XWORK/F,BC(11),IBC(14)
\XWORKA
\XCHARS
\XLST01
\XLST05
\XLST11
\XLST12
\XLST30
\XLST23
\XLST24
\XLST33
\XAPK
\XOPK
\XSCALE
\XERVAL
\XOPVAL
C
\QSTORE
\QLST05
\QLST12
\QLST30
C
C
      DATA IVERSN / 300 /
C
C
C--INITIALISE THE TIMING ROUTINES
      CALL XTIME1(2)
C--READ THE CONTROL DATA FOR THIS ROUTINE
      IF ( KRDDPV ( ISTORE(NFL),1 )   .LT.   0 ) GO TO 9910
      IPRINT=ISTORE(NFL)
C--LOAD LIST 33 TO FIND THE PRINT VARIABLE
      CALL XFAL33
      IF ( IERFLG .LT. 0 ) GO TO 9900
      ISTAT2=ISTORE(M33CD+3)
C----- FIND THE LISTING LEVEL
      ILEVEL=ISTORE(M33CD+7)
C----- LOAD LIST 23 TO GET UMIN
      CALL XFAL23
C--FIND THE MINIMUM ALLOWED TEMPERATURE FACTOR
      UMIN=STORE(L23AC+8)
C----- SAVE THE TOLERANCE AND UPDATE VALUES
      STOLER = STORE(L23SP+5)
      IUPDAT = ISTORE(L23SP+1)
C----- SAVE THE F**2 FLAG
      IFSQ = ISTORE(L23MN+1)
C--CLEAR THE CORE
      CALL XCSAE
      CALL XRSL
C----- SAVE SOME SPACE FOR THE U AXES
      IADDU = KCHLFL (4)
C--LOAD A FEW LISTS
      CALL XFAL01
      CALL XFAL05
      IF ( IERFLG .LT. 0 ) GO TO 9900
C----- SET THE OCCUPANCIES
      IF (IUPDAT .GE. 0) THEN
        I = KSPINI( -1, STOLER)
C----- SAVE SOME WORK SPACE
        J =NFL
        I = KCHNFL(40)
        M5 = L5
        DO 1160 I = 1, N5
          IF (IUPDAT .GE. 0)
     1      IGSTAT =KSPGET ( STORE(J), STORE(J+10), ISTORE(J+20),
     2      STORE(J+30), MGM, M5, IUPDAT, NUPDAT)
          M5 = M5 + MD5
1160  CONTINUE
        NFL= J
      ENDIF
C
C----- CHECK AND RESET SOME OVERALL PARAMETERS
C----- ENANTIOPOLE
CDJWJUN01      STORE(L5O+4) = MAX (STORE(L5O+4), 0.0)
C----- EXTINCTION
      STORE(L5O+5) = MAX (STORE(L5O+5), -ZERO)
C----- ELEMENT SCALES
      K=L5ES
      DO 1165 I=1,MD5ES
      STORE(K) = MAX (STORE(K), 0.0)
      K=K+1
1165  CONTINUE
C
C--LOOP OVER EACH ATOM CHECKING TEMPERATURE FACTORS
C-C-C-LOOP OVER EACH ATOM CHECKING T.F. AND SPECIAL PARAMETERS
C--CHECK THAT THERE IS AT LEAST ONE ATOM IN LIST 5
      IF (N5 .LE. 0) GOTO 6050
      M5=L5
      DO 6300 I=1,N5
      IF (ABS(STORE(M5+3)) .LE. UISO) THEN
C-C-C-CHECK ANISOTROPIC ATOMS
C--CHECK THE SMALLEST U AXIS
            CALL XEQUIV ( 1, M5, MD5, IADDU )
            IF (STORE(IADDU+1) .LT. UMIN) THEN
C--THIS ANISOTROPIC TEMPERATURE FACTOR IS NOT ALLOWED
C- RESET TO MINIMUM
          U = UMIN+ZERO
          STORE(M5+7) = AMAX1(U,STORE(M5+7))
          STORE(M5+8) = AMAX1(U,STORE(M5+8))
          STORE(M5+9) = AMAX1(U,STORE(M5+9))
          STORE(M5+10) = AMAX1(0.01*U,STORE(M5+10))*STORE(L1C)
          STORE(M5+11) = AMAX1(0.01*U,STORE(M5+11))*STORE(L1C+1)
          STORE(M5+12) = AMAX1(0.01*U,STORE(M5+12))*STORE(L1C+2)
            ENDIF
      ELSE
C--CHECK THE ISOTROPIC ATOM OR SPECIAL FIGURE
C--CHECK THE ISOTROPIC TEMPERATURE FACTOR
C            IF(STORE(M5+3) .LE. UMIN) THEN
            IF(STORE(M5+7) .LE. UMIN) THEN
C--THIS U[ISO] VALUE IS OUT OF RANGE
C                  STORE(M5+3) = UMIN + ZERO
                  STORE(M5+7) = UMIN + ZERO
            ENDIF
C-C-C-CHECK OF SPECIAL FIGURE SPECIFIC PARAMETERS
       IF (NINT(STORE(M5+3)) .GE. 2) THEN
C-C-C-CHECK OF SIZE FOR ALL SPECIAL FIGURES
        IF (STORE(M5+8) .LT. 0.0005) THEN
         STORE(M5+8)=0.001
        ENDIF
C-C-C-CHECK OF DECLINAT AND AZIMUTH FOR LINE AND RING
        IF (NINT(STORE(M5+3)) .GE. 3) THEN
C-C-C-CHECK WHETHER DECLINAT MIGHT BE GIVEN IN DEGREES
C-C-C-(SUPPOSED IF ANGLE BIGGER THAN 5.0)
C-C-C-(THIS BLOCK CAN BE REMOVED WHEN IT IS MADE SURE THAT THE VALUE
C-C-C-OF ANGLE IS ALWAYS IN UNITS OF 100 DEGREES.)
         IF ((STORE(M5+9) .GE. 5.0).OR.(STORE(M5+9) .LE. -5.0)) THEN
          STORE(M5+9)=STORE(M5+9)/100
         ENDIF
C-C-C-BRING DECLINAT INTO PRACTICAL RANGE IF TOO FAR AWAY FROM IT
         IF ((STORE(M5+9) .GT. 3.6).OR.(STORE(M5+9) .LT. -3.6)) THEN
          STORE(M5+9)=MOD(STORE(M5+9),3.6)
         ENDIF
         IF (STORE(M5+9) .GT. 1.8) THEN
          STORE(M5+9)=STORE(M5+9)-3.6
         ELSE IF (STORE(M5+9) .LT. -1.8) THEN
          STORE(M5+9)=STORE(M5+9)+3.6
         ENDIF
C-C-C-CHECK WHETHER DECLINAT IS CLOSE TO 0.0 OR +/-1.8
         IF ((ABS(STORE(M5+9)+1.8) .LT. 0.001) .OR.
     2       (ABS(STORE(M5+9)-1.8) .LT. 0.001) .OR.
     3       (ABS(STORE(M5+9)) .LT. 0.001)) THEN
C-C-C-GIVE AZIMUTH ARBITRARY VALUE (0.0)
C-C-C-PERHAPS IT'S REASONABLE TO REMOVE THE AUTOMATICAL CHANGE
          STORE(M5+10) = 0.0
         ELSE
C-C-C-CHECK WHETHER AZIMUTH MIGHT BE GIVEN IN DEGREES
C-C-C-(SUPPOSED IF ANGLE BIGGER THAN 5.0)
C-C-C-(THIS BLOCK CAN BE REMOVED WHEN IT IS MADE SURE THAT THE VALUE
C-C-C-OF ANGLE IS ALWAYS IN UNITS OF 100 DEGREES.)
          IF ((STORE(M5+10) .GE. 5.0).OR.(STORE(M5+10) .LE. -5.0)) THEN
           STORE(M5+10)=STORE(M5+10)/100
          ENDIF
C-C-C-BRING AZIMUTH INTO PRACTICAL RANGE IF TOO FAR AWAY FROM IT
          IF ((STORE(M5+10) .GT. 3.6).OR.(STORE(M5+10) .LT. -3.6)) THEN
           STORE(M5+10)=MOD(STORE(M5+10),3.6)
          ENDIF
          IF (STORE(M5+10) .GT. 1.8) THEN
           STORE(M5+10)=STORE(M5+10)-3.6
          ELSE IF (STORE(M5+10) .LT. -1.8) THEN
           STORE(M5+10)=STORE(M5+10)+3.6
          ENDIF
         ENDIF
        ENDIF
       ENDIF
      ENDIF
      M5 = M5 + MD5
6300  CONTINUE
6050  CONTINUE
C--FORM THE ABSOLUTE LIST 12
      JQ=0
      JS=1
      CALL XFAL12(JS,JQ,JR,JN)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--LINK LIST 5 AND 12
      I=KSET52(0,-1)
C--SET A PRINT CONTROL VARIABLE
      IF ( IERFLG .LT. 0 ) GO TO 9900
      JA=2
C--CHECK IF THE E.S.D.'S ETC. ARE TO BE PRINTED
      IF(IPRINT)1100,1150,1100
C--ONLY PRINT THE PARAMETERS
1100  CONTINUE
      JA=1
C--BRING DOWN THE MATRIX
1150  CONTINUE
      CALL XFAL11(1,1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--FETCH A FEW CONSTANTS FROM THE MATRIX
      F=STORE(L11P+17)/STORE(L11P+16)
      B=STORE(L11P+22)
      IF(ISTAT2)1200,1250,1200
C--PRINT THE ALLOCATED STORE
1200  CONTINUE
      CALL XPCM(1)
C--PRINT OUT A FEW CAPTIONS
1250  CONTINUE
      CALL XPRTCN
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1300)(IB,I=1,JA)
      ENDIF
1300  FORMAT(' Generation and output of the new parameter list',//,
     2 ' Format : ',5X,'New coordinate',2A1/15X,'Applied shift',/15X,
     3 'Calculated E.S.D.',/,15X,'E.S.D. in angstrom')
C>DJWSEP96
C--BRING DOWN THE SHIFT LIST
      IF (KHUNTR (24,0, IADDL,IADDR,IADDD, -1) .NE. 0) CALL XFAL24
cdjw0202      CALL XFAL24
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET THE POINTER FOR THE ACCUMULATION OF THE E.S.D. DATA
      JS=NFL
C
C
C---- THE OVERALL PARAMETERS
C--SET UP THE FORMAT AND BEGIN THE APPLICATION OF THE SHIFTS
      DO 1350 I=1,MD5O
      BC(I)=0.0
1350  CONTINUE
C--OUTPUT THE RESULTS FOR THE OVERALL PARMAETERS
      M12=L12O
C----- IF F**2 REFINEMENT, SQUARE THE SCALE FACTOR, AND SQRT IT LATER
C      NOTE! THE EDS WILL STILL BE ON THE BASIS OF F**2, BUT WE CAN
C      KIND OF FIX IT FOR THE PRINTOUT
      IF (IFSQ .GE. 0) THEN
C-----      FIRST SQUARE THE OVERALL SCALE
            OSCALE = STORE(L5O)
            STORE(L5O) =  STORE(L5O) * STORE(L5O)
      ENDIF
      CALL XAPPLY(L5O,MD5O,1)
      IF (IFSQ .GE. 0) THEN
C-----      NOW THE SHIFT HAS BEEN APPLIED, RESTORE THE SCALEFACTOR
            STORE(L5O) = SQRT( STORE(L5O) )
C------     AND FUDGE THE SHIFT AND ESD
            APD(1) = STORE(L5O) - OSCALE
            BPD(1) = 0.5 * BPD(1)
      ENDIF
      IF ( IERFLG .LT. 0 ) GO TO 9900
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1400)MD5O
      ENDIF
      IF (  KEXIST ( 30 ) .GE. 1 )   THEN
C----- SAVE THE 'FLACK' INFORMATION IN LIST 30
        IF (KHUNTR (30,0, IADDL,IADDR,IADDD, -1) .NE. 0) CALL XFAL30
        IF (BPD(5) .GE. ZERO) THEN
          IF( MD30GE .GE. 6) THEN
            STORE(L30GE+6) = STORE(L5O+4)
            STORE(L30GE+7) = BPD(5)
          ENDIF
        ENDIF
C----- SAVE THE 'EXTINCTION ESD' INFORMATION IN LIST 30
        IF( MD30CF .GE. 8) THEN
          STORE(L30CF+8) = BPD(6)
        ENDIF
        CALL XWLSTD ( 30, ICOM30, IDIM30, -1, -1)
      ENDIF
C<DJWSEP96
1400  FORMAT(///1X,I2,'  Overall parameter(s)'/)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1450)((KVP(I,J),I=1,2),J=1,NKO)
      ENDIF
1450  FORMAT(3X,5(1X,2A4),5X,2A4,5X,6(1X,2A4))
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1450)
      ENDIF
      J=L5O+MD5O-1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1500)(STORE(I),I=L5O,J)
      ENDIF
1500  FORMAT(2X,5F9.5,E15.5,3X,6F9.5)
C--CHECK IF ALL THE INFORMATION IS TO BE PRINTED
      IF(IPRINT)1700,1550,1700
C--PRINT THE E.S.D.'S AND SHIFTS
1550  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1500)(APD(I),I=1,MD5O)
      ENDIF
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1500)(BPD(I),I=1,MD5O)
      ENDIF
C--CHECK ON THE DUMMY OVERALL TEMPERATURE FACTOR
      IF(KPARAM(1,L12O,L12A,M12A,0,L5O)) 1700, 1700, 1600
C--CALCULATE THE NECESSARY CORRECTION TERM
1600  CONTINUE
      JX=(ISTORE(M12A)-1)*MD24+L24
      B=STORE(JX+1)-B
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1650)B
      ENDIF
1650  FORMAT(/,' Correction to isotropic temperature factor = ',F9.5)
      GOTO 1900
1700  CONTINUE
C--CHECK ON THE OVERALL TEMPERATURE FACTOR
      IF(KPARAM(2,L12O,L12A,M12A,0,L5O)) 1900, 1900, 1750
C--CHECK IF THERE ARE ANY ATOMS IN LIST 5
1750  CONTINUE
      IF(N5)1900,1900,1800
C--APPLY THE NEW VALUE TO ALL THE ATOMS
1800  CONTINUE
      M5=L5
      DO 1850 JX=1,N5
C      STORE(M5+3)=STORE(L5O+2)
      STORE(M5+7)=STORE(L5O+2)
C-C-C-SET FLAG OF ATOM TO ISOTROPIC
      STORE(M5+3)=1.0
      M5=M5+MD5
1850  CONTINUE
C--CHECK ON THE LAYER, ELEMENT AND BATCH SCALE FACTORS
1900  CONTINUE
      J=17
      K=17
C--LOOP OVER EACH TYPE OF SCALE FACTOR
      DO 2100 I=1,NSC
      IF(ICOM05(J+2))2050,2050,1950
C--PRINT A CAPTION
1950  CONTINUE
      IF (I .LE. 3) THEN
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,2000)ICOM05(J+2),(KSCAL(L,I+2),L=1,2)
      ENDIF
      ELSE
      IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,2001)ICOM05(J+2),(KSCAL(L,I+2),L=1,2)
      ENDIF
      ENDIF
2000  FORMAT(///1X,I2,2X,2A4, ' Scale Factors')
2001  FORMAT(///1X,I2,2X,2A4, ' Parameters')
C--SET THE POINTERS TO THE SCALES OF INTEREST
      M5A=ICOM05(J)
      MD5A=ICOM05(J+2)
      M12=ICOM12(K)
C--APPLY THE SHIFT DATA
      CALL XAPSCL(1,IPRINT)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--UPDATE FOR THE NEXT TYPE OF SCALE
2050  CONTINUE
      J=J+4
      K=K+4
2100  CONTINUE
C
C--WRITE THE CAPTION FOR THE ATOMS
      IF (ISSPRT .EQ. 0) WRITE(NCWU,2150)N5
2150  FORMAT(///1X,I5,'  atom(s)'/)
C--CHECK IF THERE ARE ANY ATOMS IN LIST 5
      IF(N5)2950,2950,2200
C--THERE ARE SOME ATOMS  -  PRINT THE PARAMETER TYPES
2200  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
C-C-C-PARAMETERS FOR ANISOTROPIC ATOM
C      WRITE(NCWU,2250)((ICOORD(I,J),I=1,2),J=1,NKA)
      WRITE(NCWU,2250)((ICOORD(I,J),I=1,2),J=1,13)
C-C-C-EXTRA LINE FOR ISOTROPIC ATOM, SPHERE, LINE, RING
      WRITE(NCWU,2260)((ICOORD(I,J),I=1,2),J=NKA-3,NKA-2),
     2 (ICOORD(1,J),J=NKA-1,NKA)
      ENDIF
2250  FORMAT(3X   , 14(1X,2A4))
2260  FORMAT(3X   , 63X,2(1X,2A4),2(1X,A4,'/100'))
C--SET UP THE CONSTANTS INVOLVING THE DUMMY TEMPERATURE CORRECTION
      JY=L1C
      DO 2300 JX=1,3
      BC(JX)=0.0
      BC(JX+2)=0.0
      BC(JX+5)=B
      BC(JX+8)=B*STORE(JY)
      JY=JY+1
2300  CONTINUE
      BC(2)=B
      M5=L5
      M12=L12
      M5A=L5+2
C--MAIN LOOP FOR PROCESSING THE ATOMS
      DO 2900 I=1,N5
      MD5A=M5+NKA-1
C      N5A=NKA-2
CDJW0102      N5A=NKA-8
      N5A = NKAV
      U=STORE(M5+3)
      CALL XAPPLY(M5A,N5A,-1)
C--CHECK WHETHER ISO- OR ANISO- PRINT IS REQUIRED
C----- ISO OR ANISO ATOM - TO FIND NUMBER OF KEYS
C-C-C-CHECK WHETHER ISO-, ANISO- SPECIAL PRINT IS REQUIRED
C-C-C-ISO, ANISO OR SPECIAL ATOM - TO FIND NUMBER OF KEYS
C---- SET NUMBER TO ISO
C      IKEY=5
      IKEY=6
C-C-C-CHECK WHETHER ATOM IS ANISOTROPIC
      IF(ABS(U)-UISO)2302,2303,2303
2302  CONTINUE
C----- ANISO
      IKEY=11
2303  CONTINUE
C-C-C-CHECK WHETHER ATOM IS REALLY ISOTROPIC OR SPHERE, LINE, RING
      IF (NINT(ABS(U)) .EQ. 2) THEN
      IKEY=7
      ELSE IF (NINT(ABS(U)) .GE. 3) THEN
      IKEY=9
      ENDIF
C----- CHECK LISTING LEVEL
      IF(ILEVEL) 2305,2305,2330
2305  CONTINUE
C----- CHECK IF ANY PARAMETER HAS AN ESD
      DO 2320 J=1,IKEY
      IF(BPD(J)-.000001)2320,2320,2330
2320  CONTINUE
C----- ALL ESD TOO SMALL- NO NEED TO PRINT
      GOTO 2850
2330  CONTINUE
C----- WE NEED A PRINT
C-C-C-CHECK WHETHER ATOM IS ANISO
      IF(ABS(U)-UISO)2550,2350,2350
C--ISO- PRINT
2350  CONTINUE
C-C-C-CHECK WHETHER ATOM IS REALLY ISOTROPIC OR SPHERE, LINE, RING
      IF (NINT(ABS(U)) .EQ. 2) THEN
      GOTO 2510
      ELSE IF (NINT(ABS(U)) .GE. 3) THEN
      GOTO 2530
      ENDIF
C-C-C-ISO- PRINT
C      MD5A=M5+6
      MD5A=M5+7
C      N5A=5
      N5A=6
      IF (ISSPRT .EQ. 0) WRITE(NCWU,2400)(STORE(J),J=M5,MD5A)
2400  FORMAT(/5X,A4,F9.0,1X,11F9.5)
C--CHECK IF THE E.S.D.'S ETC. ARE TO BE PRINTED
      IF(IPRINT)2850,2450,2850
C--PRINT THE SHIFTS AND E.S.D.'S
2450  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
C      WRITE(NCWU,2500)(APD(J),J=1,N5A)
      WRITE(NCWU,2500)(APD(1)),(APD(J),J=3,N5A)
      ENDIF
C2500  FORMAT(19X,11F9.5)
2500  FORMAT(19X,F9.5,9X,9F9.5)
      IF (ISSPRT .EQ. 0) THEN
C      WRITE(NCWU,2500)(BPD(J),J=1,N5A)
      WRITE(NCWU,2500)(BPD(1)),(BPD(J),J=3,N5A)
      ENDIF
      GOTO 2750
C-C-C-SPHERE- PRINT
2510  CONTINUE
      MD5A=M5+8
      N5A=7
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2515)(STORE(J),J=M5,MD5A)
      ENDIF
2515  FORMAT(/5X,A4,F9.0,1X,11F9.5)
C--CHECK IF THE E.S.D.'S ETC. ARE TO BE PRINTED
      IF(IPRINT)2850,2520,2850
C--PRINT THE SHIFTS AND E.S.D.'S
2520  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2525)(APD(1)),(APD(J),J=3,N5A)
      ENDIF
2525  FORMAT(19X,F9.5,9X,9F9.5)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2525)(BPD(1)),(BPD(J),J=3,N5A)
      ENDIF
      GOTO 2750
C-C-C-LINE/RING- PRINT
2530  CONTINUE
      MD5A=M5+10
      N5A=9
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2535)(STORE(J),J=M5,MD5A)
      ENDIF
2535  FORMAT(/5X,A4,F9.0,1X,11F9.5)
C--CHECK IF THE E.S.D.'S ETC. ARE TO BE PRINTED
      IF(IPRINT)2850,2540,2850
C--PRINT THE SHIFTS AND E.S.D.'S
2540  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2545)(APD(1)),(APD(J),J=3,N5A)
      ENDIF
2545  FORMAT(19X,F9.5,9X,9F9.5)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2545)(BPD(1)),(BPD(J),J=3,N5A)
      ENDIF
      GOTO 2750
C--ANISO- PRINT
2550  CONTINUE
C-C-C      MD5A=M5+2
C-C-C      N5A=M5+NKA-3
CDJW0102      MD5A=M5+13
      MD5A=M5+NKAV+1
      IF (ISSPRT .EQ. 0) THEN
C      WRITE(NCWU,2600)(STORE(J),J=M5,MD5A),(STORE(J+2),J=MD5A,N5A)
      WRITE(NCWU,2600)(STORE(J),J=M5,MD5A)
      ENDIF
C2600  FORMAT(/5X,A4,F9.0,1X,F9.5,9X,10F9.5)
2600  FORMAT(/5X,A4,F9.0,1X,11F9.5)
C--CHECK IF THE E.S.D.'S ARE TO BE PRINTED
      IF(IPRINT)2850,2650,2850
2650  CONTINUE
C-C-C-IS THE NEXT STATEMENT REASONABLE ? (N5A NOT USED AGAIN)
      N5A=NKA-2
      IF (ISSPRT .EQ. 0) THEN
C      WRITE(NCWU,2700)APD(1),(APD(J-2),J=5,NKA)
CCCCCCNKA IS 20 NOW INSTEAD OF 18
C      WRITE(NCWU,2700)APD(1),(APD(J-2),J=5,NKA-4)
C-C-C-NKA IS 22 NOW INSTEAD OF 20
CDJW0102      WRITE(NCWU,2700)APD(1),(APD(J-2),J=5,NKA-6)
      WRITE(NCWU,2700)APD(1),(APD(J),J=3,NKAV)
      ENDIF
2700  FORMAT(19X,F9.5,9X,10F9.5)
      IF (ISSPRT .EQ. 0) THEN
C      WRITE(NCWU,2700)BPD(1),(BPD(J-2),J=5,NKA)
C      WRITE(NCWU,2700)BPD(1),(BPD(J-2),J=5,NKA-4)
CDJW0102      WRITE(NCWU,2700)BPD(1),(BPD(J-2),J=5,NKA-6)
      WRITE(NCWU,2700)BPD(1),(BPD(J),J=3,NKAV)
      ENDIF
C--PRINT THE POSITIONAL E.S.D.'S IN ANGSTROM
2750  CONTINUE
      BPD(3)=BPD(3)*STORE(L1P1)
      BPD(4)=BPD(4)*STORE(L1P1+1)
      BPD(5)=BPD(5)*STORE(L1P1+2)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2800)(BPD(J),J=3,5)
      ENDIF
2800  FORMAT(37X,3F9.5)
C--UPDATE FOR THE NEXT ATOM
2850  CONTINUE
      M12=ISTORE(M12)
      M5=M5+MD5
      M5A=M5A+MD5
2900  CONTINUE
C--END OF THE UPDATING  -  PREPARE TO OUTPUT A NEW LIST 5
2950  CONTINUE
\IDIM05
C--OUTPUT THE NEW LIST 5
      CALL XWLSTD(5,ICOM05,IDIM05,0,-1)
C----- CHECK THE ANISO TFS
C----- SET THE AUXILLIARY LIST 5 ADDRESSES
      L5A=L5
      N5A=N5
      MD5A=MD5
      M5A=M5
      CALL XPRAXI( -1, 1, 0, L5A, MD5A, N5A, 0, 0)
2975  CONTINUE
      CALL XOPMSG ( IOPGNP , IOPEND , IVERSN )
      CALL XTIME2(2)
      RETURN
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPGNP , IOPABN , 0 )
      GO TO 2975
9910  CONTINUE
      CALL XOPMSG ( IOPGNP , IOPCMI , 0 )
      GO TO 9900
C
      END
C
CODE FOR XAPSCL
      SUBROUTINE XAPSCL(IFIRST,IPRINT)
C--CALCULATE AND APPLY THE SHIFTS FOR LAYER OF ELEMENT SCALES
C
C  IFIRST  THE NUMBER OF THE FIRST SCALE THAT CAN BE USED
C  IPRINT  IF NOT ZERO, THEN ONLY THE NEW PARAMETERS ARE PRINTED.
C
C--VARIOUS CONTROL VARIABLES MUST BE SET :
C
C  M5A     ADDRESS OF THE FIRST SCALE
C  MD5A    THE NUMBER OF SCALES
C  M12     ADDRESS OF THE GROUP HEADER FOR THE SCALES
C
C--
\ISTORE
C
C
      DIMENSION BBC(14)
C
\STORE
C
C
      COMMON /XWORK/F,BC(11),IBC(14)
\XWORKA
\XPDS
\XUNITS
\XSSVAL
\XLST05
\XLST11
\XLST12
\XLST24
C
\QSTORE
C
C
      EQUIVALENCE (BBC(1),IBC(1))
C
C--SET THE REFINEMENT POINTER TO INDICATE THAT REFINEMENT IS BEING DONE
      ND=0
C--CHECK IF THIS GROUP CONTAINS ANY PARTS
      IF(ISTORE(M12+1))1000,1000,1050
C--NO REFINEMENT FOR THIS PARAMETER GROUP
1000  CONTINUE
      ND=-1
1050  CONTINUE
      NA=IFIRST
      NB=0
C--CHECK IF THERE ARE ANY MORE SCALES TO LOOK AT
1100  CONTINUE
      IF(MD5A)1150,1150,1200
1150  CONTINUE
      RETURN
C--ALTER THE ADDRESSES FOR EACH OF THE PARTS
1200  CONTINUE
      L12A=ISTORE(M12+1)
C--CHECK IF THERE ARE ANY PARTS TO PROCESS
      IF(ND)1350,1250,1250
1250  CONTINUE
      ISTORE(L12A+2)=ISTORE(L12A+2)+NB*ISTORE(L12A+1)
      ISTORE(L12A+4)=ISTORE(L12A+4)+NB
C--CHECK IF THERE ANY MORE PARTS
      IF(ISTORE(L12A))1350,1350,1300
1300  CONTINUE
      L12A=ISTORE(L12A)
      GOTO 1250
C--CALCULATE THE NUMBER OF SCALES HERE AND OUTPUT A CAPTION
1350  CONTINUE
      NC=MIN0(MD5A,11)
      DO 1400 I=1,NC
      IBC(I)=NA+I-1
      APD(I)=0.
      BPD(I)=0.
1400  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1450)(IBC(I),I=1,NC)
      ENDIF
1450  FORMAT(//1X,I6,10I9)
C--CHECK IF ANY MORE SCALES HAVE BEEN REFINED
      IF(ND)1700,1500,1500
1500  CONTINUE
      L12A=ISTORE(M12+1)
      IF(ISTORE(L12A+2)-ISTORE(L12A+3))1550,1550,1700
1550  CONTINUE
      DO 1600 I=1,NC
      BBC(I)=BC(I)
      BC(I)=0.
1600  CONTINUE
      NE=1-NB
      CALL XAPPLY(M5A,NC,NE)
      IF ( IERFLG .LT. 0 ) GO TO 9900
      DO 1650 I=1,NC
      BC(I)=BBC(I)
1650  CONTINUE
C--PRINT THE RESULTS
1700  CONTINUE
      NE=M5A+NC-1
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1750)(STORE(I),I=M5A,NE)
      ENDIF
1750  FORMAT(/2X,11F9.5)
C--CHECK IF THE E.S.D.'S ETC. ARE TO BE PRINTED
      IF(IPRINT)1900,1800,1900
C--PRINT THE SHIFTS AND E.S.D.'S
1800  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1850)(APD(I),I=1,NC)
      ENDIF
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1850)(BPD(I),I=1,NC)
      ENDIF
1850  FORMAT(2X,11F9.5)
C--UPDATE FOR THE NEXT ROW
1900  CONTINUE
      MD5A=MD5A-NC
      M5A=M5A+NC
      NA=NA+NC
      L12A=ISTORE(M12+1)
C--CHECK IF THE LIST 12 NEEDS RESTORING
      IF(ND)2050,1950,1950
1950  CONTINUE
      ISTORE(L12A+2)=ISTORE(L12A+2)-NB*ISTORE(L12A+1)
      ISTORE(L12A+4)=ISTORE(L12A+4)-NB
C--CHECK IF THERE ARE ANY MORE PARTS
      IF(ISTORE(L12A))2050,2050,2000
2000  CONTINUE
      L12A=ISTORE(L12A)
      GOTO 1950
2050  CONTINUE
      NB=NB+NC
      GOTO 1100
9900  CONTINUE
C -- ERRORS
      RETURN
C
      END
C
CODE FOR XAPPLY
      SUBROUTINE XAPPLY(LP,NPAR,IBIAS)
C--APPLY THE CALCULATED SHIFTS
C
C  APD    LOCATION OF THE APPLIED SHIFTS
C  BPD    LOCATION OF THE E.S.D.'S
C  LP     LOCATION OF THE PARAMETERS TO BE CORRECTED
C  NPAR   NUMBER OF PARAMETERS TO BE CORRECTED
C  IBIAS  RELATIVE VALUE TO OBTAIN THE FIRST VALUE IN LOCATION 1 OF APD
C
C--'BC' IS USED TO STORE THE CORRECTIONS TO THE T.F.'S
C
C  THE FOLLOWING VARIABLES ARE USED :
C
C  L24 SET ON ENTRY
C  JP
C
C  JR
C  JS  SET ON ENTRY FOR WORK SPACE
C  JT
C  JU
C  .
C  .
C  JZ
C
C--REQUIRES M12 SET ON ENTRY
C
C--
\ISTORE
C
\STORE
C
C
      COMMON /XWORK/F,BC(11),IBC(14)
\XWORKA
\XPDS
\XCONST
\XLST01
\XLST05
\XLST11
\XLST12
\XLST24
\XERVAL
C
\QSTORE
C
C--CLEAR THE TEMPORARY STORAGE
C
      DO 1000 JX=1,NPAR
      APD(JX)=0.0
      BPD(JX)=0.0
1000  CONTINUE
C--CHECK IF ANY COORDINATES HAVE BEEN REFINED
      IF(ISTORE(M12+1))1100,1100,1050
1050  CONTINUE
      L12A=ISTORE(M12+1)
      IF(ISTORE(L12A+3))1100,1150,1150
1100  CONTINUE
      RETURN
1150  CONTINUE
      MD12A=ISTORE(L12A+1)
      JU=ISTORE(L12A+2)
      JV=ISTORE(L12A+3)
      JT=ISTORE(L12A+4)
      JP=JT+IBIAS
C--SEARCH FOR THE CONTRIBUTIONS TO EACH PARAMETER IN TURN
      DO 1850 JW=JU,JV,MD12A
      IF(ISTORE(JW))1800,1800,1200
1200  CONTINUE
      APD(JP)=BC(JP)
      JX=JW
      JY=L12A
      JR=JS
      JZ=0
C--CHECK IF THIS PART FOR THIS PARAMETER HAS BEEN REFINED
1250  CONTINUE
      IF(ISTORE(JX))1550,1550,1300
C--CHECK IF THERE IS ENOUGH CORE FOR THIS CONTRIBUTOR
1300  CONTINUE
      IF ( JR + 4 - LFL )  1400 , 1400 , 9910
C--ADD THE CONTRIBUTIONS INTO THE STACK
1400  CONTINUE
      ISTORE(JR)=ISTORE(JX)
      ISTORE(JR+2)=KBLCK(ISTORE(JR))
      ISTORE(JR+1)=M12B
      STORE(JR+3)=1.
      IF(ISTORE(JY+1)-1)1450,1500,1450
1450  CONTINUE
      STORE(JR+3)=STORE(JX+1)
1500  CONTINUE
      JR=JR+4
      JZ=JZ+1
C--CALCULATE THE CONTRIBUTION OF THIS PART TO THE SHIFT
      JX=(ISTORE(JX)-1)*MD24+L24
      APD(JP)=APD(JP)+STORE(JX+1)*STORE(JR-1)
C--CARRY ONTO THE NEXT PART
1550  CONTINUE
      JY=ISTORE(JY)
      IF(JY)1700,1700,1600
C--MOVE ONTO THE NEXT PART  -  CHECK FOR REFINEMENT OF THIS PARAMETER
1600  CONTINUE
      JX=ISTORE(JY+2)+ISTORE(JY+1)*(JT-ISTORE(JY+4))
      IF(JX-ISTORE(JY+2))1550,1250,1650
1650  CONTINUE
      IF(ISTORE(JY+3)-JX)1550,1250,1250
C--NO MORE PARTS  -  CHECK IF THIS PARAMETER HAS BEEN REFINED
1700  CONTINUE
      IF(JZ)1800,1800,1750
C--CALCULATE THE E.S.D.
1750  CONTINUE
      BPD(JP)=XVAR(JS,JZ,4,JR)
      BPD(JP)=SQRT(BPD(JP)*F)
1800  CONTINUE
      JT=JT+1
      JP=JP+1
1850  CONTINUE
C--APPLY THE SHIFTS
      JX=LP
      DO 1900 JY=1,NPAR
      STORE(JX)=STORE(JX)+APD(JY)
      JX=JX+1
1900  CONTINUE
      GOTO 1100
C
9900  CONTINUE
C -- ERRORS
      RETURN
9910  CONTINUE
C -- CORE OVEFLOW
      CALL XICA
      CALL XERHND ( IERERR )
      GO TO 9900
C
      END
