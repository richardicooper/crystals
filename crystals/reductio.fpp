CODE FOR XLP
      SUBROUTINE XLP
C--APPLICATION OF THE LP CORRECTION
C
C--VARIABLES IN USE :
C
C  A  1/(L CORRECTION)**2 AND THEN 1/LP CORRECTION
C  B  ZETA(N) SQUARED/4
C  C  POLARISATION CORRECTION
C  O  BRAGG ANGLE OF MONOCHROMATOR AND FIRST TERM IN P CORRECTION
C  P  INCIDENT ANGLE OF MONOCHROMATOR AND SECOND TERM IN P CORRECTION
C  T  SIN(THETA) SQUARED
C  U  SIN(THETA)**4
C  W  WAVELENGTH
C  Z  ZETA(1) SQUARED/4
C
C--
\ISTORE
C
      DIMENSION PROCS(3)
      DIMENSION AXIS(3)
      CHARACTER*24 ICAPT(3)
C
\STORE
\XLISTI
\XUNITS
\XSSVAL
\XCONST
\XLST01
\XLST06
\XLST13
\XWORK
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
C
      EQUIVALENCE (PROCS(1),IULN),(PROCS(2),MEDIUM),(PROCS(3),ISQ)
C
C
      DATA ICAPT / 'Sin(theta) > 1.0' , 'Impossible LP term' ,
     2 'Sin(theta) < (or =) 0.0' /
C
C--SET THE TIMING
      CALL XTIME1(2)
C--READ THE CONTROL DATA
      IF ( KRDDPV ( PROCS , 3 )  .LT. 0 ) GO TO 9910
C--FIND THE TYPE OF LIST 6
      IULN=KTYP06(IULN)
C--CLEAR THE STORE
      CALL XRSL
      CALL XCSAE
C--LOAD LIST 1
      CALL XFAL01
C--LOAD LIST 13
      CALL XFAL13
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET THE /FO/ SLOT
      IFO=3
      IF(ISTORE(L13CD+1))1150,1100,1100
C--THIS STRUCTURE IS TWINNED
1100  CONTINUE
      IFO=10
C--FIND THE DIFFRACTION TYPE
1150  CONTINUE
      IT=ISTORE(L13DT)
C--FIND THE WAVELENGTH AND MONOCHROMATOR DETAILS
      W=STORE(L13DC)
      O=STORE(L13DC+1)
      P=STORE(L13DC+2)
C--SET UP LIST 6 FOR PROCESSING
      CALL XFLT06(IULN,0)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--CHECK THE TYPE OF OUTPUT MEDIUM
      IF(MEDIUM)1300,1250,1300
C--SAME AS BEFORE  -  SET THE 'MEDIUM' FLAG
1250  CONTINUE
      MEDIUM=ISIGN(1,L6D)
C--SET UP THE OUTPUT PROCESSING
1300  CONTINUE
      CALL XSTR06(IULN,-1,0,1,0)
C--SET THE NUMBER OF REJECTED REFLECTIONS
      N=0
C--SET THE REFLECTION DETAILS INFORMATION
      DO 1350 I=1,MD6
      CALL XIRTAC(I)
1350  CONTINUE
C
C--COMPUTE THE SIN(THETA)/LAMBDA SQUARED TERMS
      X=W*W
      J=L1S+5
      DO 1400 I=L1S,J
      STORE(I)=STORE(I)*X
1400  CONTINUE
C--CHECK IF THIS IS WEISSENBERG GEOMETRY
      IF(IT-4)1450,1500,1500
C--SET THE AXIS DATA
1450  CONTINUE
      CALL XMOVE(STORE(L13AX),AXIS(1),3)
C--COMPUTE THE HEIGHT OF THE FIRST LAYER
      Z=(STORE(L1S)*STORE(L1S+1)*STORE(L1S+2)-(STORE(L1S)*STORE(L1S+3)
     2 *STORE(L1S+3)+STORE(L1S+1)*STORE(L1S+4)*STORE(L1S+4)
     3 +STORE(L1S+2)*STORE(L1S+5)*STORE(L1S+5)-STORE(L1S+3)
     4 *STORE(L1S+4)*STORE(L1S+5))*0.25)
      A=AXIS(1)*AXIS(1)*(STORE(L1S+1)*STORE(L1S+2)-STORE(L1S+3)
     2 *STORE(L1S+3)*0.25)+AXIS(2)*AXIS(2)*(STORE(L1S)*STORE(L1S+2)
     3 -STORE(L1S+4)*STORE(L1S+4)*0.25)
      B=AXIS(3)*AXIS(3)*(STORE(L1S)*STORE(L1S+1)-STORE(L1S+5)
     2 *STORE(L1S+5)*0.25)+AXIS(2)*AXIS(3)*(STORE(L1S+4)*STORE(L1S+5)
     3 *0.5-STORE(L1S)*STORE(L1S+3))
      C=AXIS(1)*AXIS(3)*(STORE(L1S+3)*STORE(L1S+5)*0.5-STORE(L1S+1)
     2 *STORE(L1S+4))+AXIS(1)*AXIS(2)*(STORE(L1S+3)*STORE(L1S+4)
     3 *0.5-STORE(L1S+2)*STORE(L1S+5))
      Z=Z/(A+B+C)
C--SET UP THE POLARISATION CONSTANTS
1500  CONTINUE
      O=O*PI/180.
      P=P*PI/180.
      A=COS(2.*O)
      A=A*A
      B=COS(P)
      B=B*B
      C=SIN(P)
      C=C*C
      D=1./(1.+A)
      O=D*(A*B+C)
      P=D*(A*C+B)
C
C--FETCH THE NEXT REFLECTION
1550  CONTINUE
      IF(KLDRNR(I))2500,1600,1600
C--CHECK IF THIS IS WEISSENBERG DATA
1600  CONTINUE
      IF(IT-4)1650,1700,1700
C--COMPUTE THE LAYER HEIGHT FOR THIS REFLECTION
1650  CONTINUE
      B=AXIS(1)*STORE(M6)+AXIS(2)*STORE(M6+1)+AXIS(3)*STORE(M6+2)
      B=B*B*Z
C--COMPUTE SIN(THETA)**2
1700  CONTINUE
      T=STORE(L1S)*STORE(M6)*STORE(M6)+STORE(L1S+1)*STORE(M6+1)
     2 *STORE(M6+1)+STORE(L1S+2)*STORE(M6+2)*STORE(M6+2)+STORE(L1S+3)
     3 *STORE(M6+1)*STORE(M6+2)+STORE(L1S+4)*STORE(M6)*STORE(M6+2)
     4 +STORE(L1S+5)*STORE(M6)*STORE(M6+1)
C--CHECK THE VALUE OF SIN(THETA)**2
      JFO=IFO+M6
      L=3
      IF(T)1800,1800,1750
1750  CONTINUE
      L=1
      IF(T-1.)1850,1850,1800
C--PRINT OUT THE ERROR MESSAGE
1800  CONTINUE
      CALL XL6RRP ( N , 100 , IFO , ICAPT(L) )
      GOTO  1550
C
C--BRANCH ON THE TYPE OF CORRECTION
1850  CONTINUE
      U=T*T
      GO TO (2300, 2350, 2400, 9915, 2450,
     1 2450 , 2450 , 2450 , 2450 , 9920 ) , IT
      CALL XERHND ( IERPRG )
C
C--COMPUTE THE POLARISATION CORRECTION AND STORE THE REFLECTION
2050  CONTINUE
      C=1.-2.*T
      C=O*C*C+P
      A=A/(C*C)
      L=2
C--CHECK THE LP TERM
      IF(A)1800,1800,2100
C--CHECK IF WE HAVE F'S STORED
2100  CONTINUE
      IF(ISQ)2200,2150,2150
C--F'S ARE STORED  -  TAKE AN INITIAL SQUARE ROOT
2150  CONTINUE
      A=SQRT(A)
C--COMPUTE THE TERMS AND STORE THEM
2200  CONTINUE
      A=SQRT(A)
      STORE(JFO)=STORE(JFO)*A
      STORE(M6+12)=STORE(M6+12)*A
C--STORE THE REFLECTION
      CALL XSLR(1)
C--SET THE REFLECTION DETAILS DATA
      DO 2250 I=1,MD6
      CALL XACRT(I)
2250  CONTINUE
      GOTO 1550
C
C--NORMAL BEAM WEISSENBERG GEOMETRY
2300  CONTINUE
      A=T-U-B
      GOTO 2050
C
C--EQUI-INCLINATION WEISSENBERG GEOMETRY
2350  CONTINUE
      A=T-U-B*(1.-T)
      GOTO 2050
C
C--ANTI-EQUI-INCLINATION GEOMETRY
2400  CONTINUE
      A=T-U-B*T
      GOTO 2050
C
C--4-CIRCLE GEOMETRY
2450  CONTINUE
      A=4.*T*(1.-T)
      GOTO 2050
C
C--END OF THE TAPE  -  TERMINATE THE WRITE
2500  CONTINUE
      DO 2550 I=1,MD6
      CALL XCRD(I)
2550  CONTINUE
      N6D=N6W
      CALL XERT(IULN)
C--SWAP THE OUTPUT
      CALL XSWP06(IULN,MEDIUM)
C -- TERMINATION MESSAGES
      WRITE ( CMON , 2600) N6W, N
      CALL XPRVDU(NCVDU, 1,0)
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , '(A)' ) CMON(1)(:)
      WRITE ( NCAWU , '(A)' ) CMON(1)(:)
2600  FORMAT ( 1X , I6 , ' reflections accepted' , 10X , I6 ,
     2 ' reflections rejected' )
C
2610  CONTINUE
      CALL XOPMSG ( IOPLPC , IOPEND , 200 )
      CALL XTIME2(2)
      RETURN
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPLPC , IOPABN , 0 )
      GO TO 2610
9910  CONTINUE
C -- INPUT ERROR
      CALL XOPMSG ( IOPLPC , IOPCMI , 0 )
      GO TO 9900
9915  CONTINUE
      WRITE ( CMON ,9916)
      CALL XPRVDU(NCVDU, 1,0)
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , '(A)' ) CMON(1)(:)
      WRITE ( NCAWU , '(A)' ) CMON(1)(:)
9916  FORMAT(1X, ' Precession geometry not supported')
9920  CONTINUE
C -- ILLEGAL DIFFRACTION GEOMETRY
      WRITE ( CMON, 9925) IT
      CALL XPRVDU(NCVDU, 1,0)
      IF (ISSPRT .EQ. 0) WRITE ( NCWU , '(A)' ) CMON(1)(:)
      WRITE ( NCAWU , '(A)' ) CMON(1)(:)
9925  FORMAT ( 1X , 'Illegal diffraction geometry flag ' , I5 )
      CALL XERHND ( IERERR )
      GO TO 9900
      END
CODE FOR XSQRT
      SUBROUTINE XSQRT(FSQ, FSIGN, FABS, SIGSQ, SIG)
C----- RETURN THE SIGNED AND UNSIGNED SQUARE ROOT OF A STRUCTURE 
C      AMPLITUDE AND THE CORRESPONDING SIGMA
C      FSQ  INPUT AMPLITUDE
C      FSIGN SIGNED MAGNITUDE
C      FABS  OUTPUT ABSOLUTE MAGNITUDE
C      INPUT SIGMA SQ
C      OUTPUT SIGMA
\XCONST
      FABS = SQRT(ABS(FSQ))
      FSIGN =  SIGN (1., FSQ) * FABS
CDJWMAR99[ COMPUTE SIGMA(F) FROM SIGMA(f**2)
      IF (SIGSQ .GT. ZERO) THEN
C----- WE HAVE SOME KIND OF SIGMA - TRY TO SCALE IT
        IF(fabs .GT. 1.0) THEN
            SIG = SIGSQ/(2. * FABS)
        ELSE
            SIG = SIGSQ
        ENDIF
      ELSE
        SIG = SIGSQ
      ENDIF
CDKWMAR99]
      RETURN
      END
C
CDJWMAR99[ 
CODE FOR XSQRF
      SUBROUTINE XSQRF(FSQ, FSIGN, FABS, SIGSQ, SIG)
C----- RETURN THE SIGNED STRUCTURE AMPLITUDE AND THE CORRESPONDING SIGMA
C      FROM A SIGNED STRUCTURE FACTOR
C      FSQ  OUTPUT AMPLITUDE
C      FSIGN INPUT SIGNED MAGNITUDE
C      FABS  DUMMY
C      SIGSQ OUTPUT SIGMA SQ
C      INPUT SIGMA
\XCONST
      FSQ = FSIGN * ABS(FSIGN)
      IF (SIG .GT. ZERO) THEN
C----- WE HAVE SOME KIND OF SIGMA - TRY TO SCALE IT
        IF(abs(fsign) .GT. 1.) THEN
            SIGSQ = SIG * (2. * ABS(FSIGN))
        ELSE
            SIGSQ = SIG
        ENDIF
      ELSE
        SIGSQ = SIG
      ENDIF
      RETURN
      END
CDKWMAR99]
C
CODE FOR XSYST
      SUBROUTINE XSYST
C--CHECK LIST 6 FOR SYSTEMATIC ABSENCES AND COMPUTE A UNIQUE SET OF
C
C--VARIABLES USED BY THIS ROUTINE ARE :
C
C  INDICES FOR EACH REFLECTION, IF REQUIRED.
C
C  IULN    THE LIST TYPE BEING PROCESSED.
C  MEDIUM  THE OUTPUT MEDIUM FLAG :
C
C          -1  M/T
C           0  AS INPUT.
C          +1  DISC.
C
C  INDEX   FLAG TO CONTROL THE GENERATION OF UNIQUE INDICES :
C
C          -1  DO NOT GENERATE ANY NEW INDICES.
C           0  GENERATE NEW INDICES.
C
C--
\ISTORE
C
C
      PARAMETER (NTOT1=7)
      DIMENSION ATOT1(NTOT1), ATOT2(NTOT1), RANGE(NTOT1)
      DIMENSION ITOT1(NTOT1), ITOT2(NTOT1)
C
      DIMENSION PROCS(3)
      CHARACTER*24 ICAPT
C
\STORE
\XUNITS
\XCONST
\XSSVAL
\XLISTI
\XLST02
\XLST06
\XLST13
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
C
      EQUIVALENCE (PROCS(1),IULN),(PROCS(2),MEDIUM),(PROCS(3),INDEX)
C
C
C     FIX MAXIMA FROM /FO/MAX
      DATA RANGE /0.,1.,2.,4.,8.,16.,32./
      DATA ICAPT / 'Systematic absence' /
C
C--SET THE TIMING
      CALL XTIME1(2)
C--READ THE CONTROL DATA
      IF ( KRDDPV ( PROCS , 3 )  .LT. 0 ) GO TO 9910
C--FIND THE TYPE OF LIST 6
      IULN=KTYP06(IULN)
C--CLEAR THE STORE
      CALL XRSL
      CALL XCSAE
C--SET UP LIST 2 FOR SYSTEMATIC ABSENCE CHECKING
      CALL XFAL02
      IF ( IERFLG .LT. 0 ) GO TO 9900
      M2I=L2I+(N2I-1)*MD2I
C--LOAD LIST 13 FOR THE FRIEDEL FLAGS
      CALL XFAL13
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET THE /FO/ SLOT
      IFO=3
      IF(ISTORE(L13CD+1))1150,1100,1100
C--THIS STRUCTURE IS TWINNED
1100  CONTINUE
      IFO=10
C--SET THE INITIAL INDEX FLAG
1150  CONTINUE
      IN=-1
C--CHECK IF WE SHOULD GENERATE A NEW SET OF INDICES HERE
      IF(INDEX)1250,1200,1200
C--WE SHOULD GENERATE A NEW SET OF INDICES
1200  CONTINUE
      IN=ISTORE(L13CD)+2
C--SET UP LIST 6 FOR PROCESSING
1250  CONTINUE
      CALL XFLT06(IULN,0)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--CHECK THE TYPE OF OUTPUT MEDIUM
      IF(MEDIUM)1350,1300,1350
C--SAME AS BEFORE  -  SET THE 'MEDIUM' FLAG
1300  CONTINUE
      MEDIUM=ISIGN(1,L6D)
C--SET UP THE OUTPUT PROCESSING
1350  CONTINUE
      CALL XSTR06(IULN,-1,0,1,0)
      N=0
C--INITIALISE THE INDEX COLLECTION
      DO 1400 I=1,MD6
      CALL XIRTAC(I)
1400  CONTINUE
C----- ACCUMULATORS
      NABSNT = 0
      SUMI = 0.
      SUMSTN = 0.
      DO 1410 I = 1, NTOT1
      ATOT1(I) = 0.0
      ATOT2(I) = 0.0
      ITOT1(I) = 0
      ITOT2(I) = 0
1410  CONTINUE
C
C
C--MAIN REFLECTION READING LOOP
1450  CONTINUE
      IF(KLDRNR(I))1700,1500,1500
C--CHECK IF THIS REFLECTION IS SYSTEMATICALLY ABSENT
1500  CONTINUE
      IF(KSYSAB(IN))1550,1600,1600
C--REFLECTION IS NOT ALLOWED  -  CHECK IF IT IS THE FIRST
1550  CONTINUE
      NABSNT = NABSNT + 1
      FO = STORE(L6+3)
      SUMI = SUMI + FO
      DO 1560 I = 1,NTOT1-1
      IF (FO .LT. RANGE(I)) THEN
            ATOT1(I) = ATOT1(I) + FO
            ITOT1(I) = ITOT1(I) + 1
            GOTO 1561
      ENDIF
1560  CONTINUE
      ATOT1(NTOT1) = ATOT1(NTOT1) + FO
      ITOT1(NTOT1) = ITOT1(NTOT1) + 1
1561  CONTINUE
      IF (STORE(L6+12) .LE. 2.*ZERO) GOTO 1563
      RATIO = FO / STORE(L6+12)
      SUMSTN = SUMSTN + RATIO*RATIO
      DO 1562 I = 1,NTOT1-1
      IF (RATIO .LT. RANGE(I)) THEN
            ATOT2(I) = ATOT2(I) + RATIO*RATIO
            ITOT2(I) = ITOT2(I) + 1
            GOTO 1563
      ENDIF
1562  CONTINUE
      ATOT2(NTOT1) = ATOT2(NTOT1) + RATIO*RATIO
      ITOT2(NTOT1) = ITOT2(NTOT1) + 1
1563  CONTINUE
      CALL XL6RRP(N,1000,IFO,ICAPT)
      GOTO 1450
C--STORE THE REFLECTION
1600  CONTINUE
      CALL XSLR(1)
C--ACCUMULATE THE DETAILS
      DO 1650 I=1,MD6
      CALL XACRT(I)
1650  CONTINUE
      GOTO 1450
C
C--LAST REFLECTION READ
1700  CONTINUE
      DO 1750 I=1,MD6
      CALL XCRD(I)
1750  CONTINUE
      N6D=N6W
      CALL XERT(IULN)
      CALL XSWP06(IULN,MEDIUM)
C
      CALL XLINES
      IF (NABSNT .GT. 0) THEN
       WRITE(NCAWU,1790) NABSNT , SUMI/NABSNT, SQRT(SUMSTN/NABSNT)
        IF (ISSPRT .EQ.0 )
     1  WRITE(NCWU,1790) NABSNT , SUMI/NABSNT, SQRT(SUMSTN/NABSNT)
1790  FORMAT(/I7,' absences, ',
     1 '  mean Fo =', F8.3,',   rms Fo/sigma(Fo)=', F8.3)
      DO 1770 I = 1,NTOT1
      IF (ITOT1(I) .GT. 0) THEN
            ATOT1(I) = ATOT1(I) /ITOT1(I)
      ELSE
            ATOT1(I) = 0.0
      ENDIF
      IF (ITOT2(I) .GT. 0) THEN
            ATOT2(I) = SQRT(ATOT2(I) /ITOT2(I))
      ELSE
            ATOT2(I) = 0.0
      ENDIF
1770  CONTINUE
C
      WRITE(CMON,1760) (RANGE(I),I=2,NTOT1-1),
     1 ATOT1, ITOT1,   (RANGE(I),I=2,NTOT1-1), ATOT2, ITOT2
      CALL XPRVDU(NCVDU, 9,0)
      WRITE(NCAWU,'(A)') (CMON(I)(:),I=1,9)
      IF (ISSPRT .EQ. 0)  WRITE(NCWU,'(A)') (CMON(I)(:),I=1,9)
1760  FORMAT(/
     1'Fo range       ', '     -ve', 5F8.3,  '  Remainder',/
     2'Mean Fo        ', 7F8.3,/
     3'Number         ', 7I8,//
     *'Fo/sigma range ', '     -ve', 5F8.3,  '  Remainder',/
     4'rms (Fo/sigma) ', 7F8.3,/
     5'Number         ', 7I8,//
     6 )
      ENDIF
      WRITE ( CMON , 1800 ) N6W , N
      CALL XPRVDU(NCVDU, 1,0)
      IF (ISSPRT .EQ. 0) WRITE ( NCWU ,'(A)') CMON(1)(:)
      WRITE ( NCAWU ,'(A)') CMON(1)(:)
1800  FORMAT ( 1X , I6 , ' reflections accepted' , 10X , I6 ,
     2 ' reflections rejected' )
C
1810  CONTINUE
      CALL XOPMSG ( IOPSSM , IOPEND , 200 )
      CALL XTIME2(2)
      CALL XRSL
      CALL XCSAE
      RETURN
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPSSM , IOPABN , 0 )
      GO TO 1810
9910  CONTINUE
C -- INPUT ERROR
      CALL XOPMSG ( IOPSSM , IOPCMI , 0 )
      GO TO 9900
C
      END
C
CODE FOR KSYSAB
      FUNCTION KSYSAB(IN)
C--DETECT SYSTEMATIC ABSENCES AND COLLECT CORRECT EQUIVALENTS
C
C  IN  IF 'IN' IS LESS THAN 1, A NEW SET OF INDICES IS NOT COMPUTED.
C      IF 'IN' IS 1, A NEW SET OF INDICES IS COMPUTED, BUT FRIEDEL'S
C      LAW IS NOT USED.
C      IF 'IN' IS 2, A NEW SET OF INDICES IS COMPUTED USING FRIEDEL'S LA
C
C
C--THE NEW SET OF INDICES HAS THE MAXIMUM VALUE OF 'L' FROM AMONGST THE
C  SYMMETRY EQUIVALENT SET. FROM THE REFLECTIONS WITH THIS VALUE OF 'L',
C  THOSE WITH THE MAXIMUM VALUE OF 'K' ARE CHOSEN. FROM AMONGST THESE
C  REFLECTIONS, THE ONE WITH THE LARGEST VALUE FOR 'H' IS CHOSEN.
C
C--THE NEW UNIQUE INDICES ARE PUT BACK AT 'M6', WHERE THE OLD INDICES
C  ARE FOUND ON INPUT.
C
C--
\ISTORE
C
      DIMENSION H(3),HG(3),HMAX(3)
C
\STORE
\XLST02
\XLST06
C
\QSTORE
C
C--CHECK IF THERE ARE ANY NON-PRIMITIVE TRANSLATIONS TO LOOK FOR
      IF(N2P-1)1150,1150,1000
C--CHECK NON-PRIMITIVE CONDITIONS
1000  CONTINUE
      M2P=L2P
      DO 1100 I=1,N2P
      A=ABS(STORE(M2P)*STORE(M6)+STORE(M2P+1)*STORE(M6+1)+STORE(M2P+2)
     2 *STORE(M6+2))
      K=INT(A+0.01)
      IF(A-FLOAT(K)-0.01)1050,2100,2100
1050  CONTINUE
      M2P=M2P+3
1100  CONTINUE
1150  CONTINUE
C--SET DEFAULT VALUES FOR THE INDICES AND TRANSFORMED INDICES
      K=M6
      DO 1200 I=1,3
      H(I)=STORE(K)
      HMAX(I)=H(I)
      K=K+1
1200  CONTINUE
C--PASS THROUGH THE DIFFERENT SYMMETRY POSITIONS
      DO 1950 I=L2I,M2I,MD2I
C--CALCULATE THE TRANFORMED INDICES
      HG(1)=H(1)*STORE(I)+H(2)*STORE(I+3)+H(3)*STORE(I+6)
      HG(2)=H(1)*STORE(I+1)+H(2)*STORE(I+4)+H(3)*STORE(I+7)
      HG(3)=H(1)*STORE(I+2)+H(2)*STORE(I+5)+H(3)*STORE(I+8)
C--CHECK IF THE INDICES ARE THE SAME
      J=IC
      DO 1250 K=1,3
      IF(NINT(H(K)-HG(K)))1350,1250,1350
1250  CONTINUE
C--THE INDICES ARE THE SAME  -  CHECK THE PHASE SHIFT
1300  CONTINUE
      A=ABS(H(1)*STORE(I+9)+H(2)*STORE(I+10)+H(3)*STORE(I+11))
      K=INT(A+0.01)
      IF(A-FLOAT(K)-0.01)1350,2100,2100
C--THIS REFLECTION IS ALLOWED  -  CHECK FOR ANOTHER TEST
1350  CONTINUE
      IF(J)1500,1500,1400
C--CENTRE OF SYMMETRY  -  CHECK THE INVERTED INDICES
1400  CONTINUE
      J=J-1
      DO 1450 K=1,3
      IF(NINT(H(K)+HG(K)))1500,1450,1500
1450  CONTINUE
      GOTO 1300
C--CHECK IF WE SHOULD GENERATE A NEW SET OF INDICES
1500  CONTINUE
      IF(IN)1950,1950,1550
C--CHECK IF THESE ARE GOOD TRANSFORMS FOR OUTPUT
1550  CONTINUE
      DO 1900 J=1,IN
      IF(NINT(HG(3)-HMAX(3)))1800,1600,1700
1600  CONTINUE
      IF(NINT(HG(2)-HMAX(2)))1800,1650,1700
1650  CONTINUE
      IF(NINT(HG(1)-HMAX(1)))1800,1800,1700
1700  CONTINUE
C--THIS SET IS A BETTER SET  -  STORE THEM
      DO 1750 K=1,3
      HMAX(K)=HG(K)
1750  CONTINUE
C--INVERT THE INDICES FOR THE NEXT POSSIBLE PASS
1800  CONTINUE
      DO 1850 K=1,3
      HG(K)=-HG(K)
1850  CONTINUE
1900  CONTINUE
1950  CONTINUE
C--WRITE THE NEW INDICES BACK IN LIST 6
      K=M6
      DO 2000 I=1,3
      STORE(K)=HMAX(I)
      K=K+1
2000  CONTINUE
      KSYSAB=0
2050  CONTINUE
      RETURN
C
C--THIS IS A REJECTED REFLECTION
2100  CONTINUE
      KSYSAB=-1
      GOTO 2050
      END
C
CODE FOR WMERGE
      SUBROUTINE WMERGE
C--MAIN MERGING ROUTINES  -  READS FROM 6 AND OUTPUTS TO M/T
C  INITIALLY.
C
C  NBUF   NUMBER OF WORDS PER REFLECTION IN THE INPUT BUFFER (=MD6)
C  NTERM  NUMBER OF WORDS PER REFLECTION IN THE CORE AREA (=MD6+4)
C
C--THE FORMAT OF THE CORE AREA ENTRIES IS :
C
C  0 TO (MD6-1) CONTAIN THE INPUT VALUES FROM M/T OR TAPE. THE WORDS
C               FROM 'MD6' ONWARDS ARE ARRANGED AS FOLLOWS :
C
C  NTERM-4 JCODE AS AN INTEGER
C  NTERM-3 SERIAL NUMBER AS AN INTEGER
C  NTERM-2 'E' PARAMETER
C  NTERM-1 WEIGHT FOR THIS REFLECTION
C
C
C  DATE            VERSION     BY    CHANGE
C  ----            -------     --    ------
C  DECEMEBER 1984  4.01        PWB   CHANGE STATISTICS PRINTING, TO
C                                    INCLUDE MONITOR OUTPUT
C  MAY       1987  4.03        DJW   OUT PUT SHELDRICK MERGING R
C  MAY       1988  4.54        DJW   CHECK FINAL SUMS
C  SEPT      1995     5.00         DJW   TREATMENT UF -VE REFLECTIONS
C
C--
\ISTORE
\ICOM30
C
      DIMENSION PROCS(17)
C
\STORE
C
\XLISTI
\XUNITS
\XSSVAL
\XCONST
      COMMON /XMRG/WORK(30),ISTAT(100), RINT(6)
      COMMON /XMRGA/IULN,MEDIUM,NSCH,NCYC,ICT,JCT,NCT,ITEMP1,ICODE,
     2 JCODE,MDCODE,NCODE,CHOP,NCHOP,IPRINT,APRINT,ISQ,IBUF,JBUF,NBUF,
     3 ITEMP2,IREF,JREF,NTERM,NREF,NEND,IFO,JFO,ITWIN,N6DEAD,N6CTMP,
     4 N6RTMP,JPRINT,NPRINT
\XLST06
\XLST13
\XLST30
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
\QLST30
C
      EQUIVALENCE (PROCS(1),IULN)
C
C
      SAVE
C
      DATA IVERSN / 500 /
C
C
C
C
C--SET THE TIMING
      CALL XTIME1(2)
C--READ THE CONTROL DATA
      IF ( KRDDPV ( PROCS,17 )   .LT.   0 ) GO TO 9910
C--FIND THE TYPE OF LIST 6
      IULN=KTYP06(IULN)
C--SET THE END OF THE JCODE ARRAY
      JCODE=ICODE+(NCODE-1)*MDCODE
C--SET UP LIST 6 FOR THE I/O OPERATIONS
      CALL XFLT06(IULN,0)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--CHECK THE TYPE OF OUTPUT MEDIUM
      IF(MEDIUM)1150,1100,1150
C--SAME AS BEFORE  -  SET THE 'MEDIUM' FLAG
1100  CONTINUE
      MEDIUM=ISIGN(1,L6D)
C--SET UP THE OUTPUT PROCESSING
1150  CONTINUE
      CALL XSTR06(IULN,-1,0,1,0)
C--PRESERVE THE NUMBER OF INPUT CONTRIBUTORS
      N6RTMP=N6R
C--ZERO THE NUMBER OF REJECTED CONTRIBUTORS
      N6CTMP=0
C--SET THE NUMBER OF REJECTED REFLECTIONS
      N6DEAD=0
C--SET THE REFLECTION DETAILS INFORMATION
      DO 1200 I=1,MD6
      CALL XIRTAC(I)
1200  CONTINUE
C--SET THE NUMBER OF PRINTED REFLECTIONS TO ZERO
      NPRINT=0
C--SET UP THE DEFAULT CONSTANTS
      NBUF=MD6
      IBUF=NFL
C--ALLOCATE SPACE FOR THE INPUT BUFFER
      LN=6
      IREC=4001
      JBUF=KCHNFL(NBUF)
C--SET UP THE LENGTH OF EACH EQUIVALENT WHILE IT IS IN CORE
      NTERM=MD6+4
C--LOAD LIST 13
      CALL XFAL13
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET THE /FO/ SLOT
      IFO=3
      ITWIN=-1
      IF(ISTORE(L13CD+1))1300,1250,1250
C--THIS STRUCTURE IS TWINNED
1250  CONTINUE
      IFO=10
      ITWIN=11
      IREC=4002
      ITWINL=KCHLFL(NTERM)
1300  CONTINUE
C--CLEAR THE INTENSITY STATISTICS AREA
      CALL XZEROF(RINT,6)
      DO 1350 I=1,100
      ISTAT(I)=0
1350  CONTINUE
      DO 1400 I=1,30
      WORK(I)=0.
1400  CONTINUE
C--SET UP THE CORRECT WEIGHTING PARAMETERS INTERNALLY
      CALL WWT
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET UP THE INPUT BUFFER KEYS
      KA=IBUF+NBUF-1
      KB=IBUF+2
C--SET UP THE CORE BUFFER FLAGS
      IREF=NFL
      JREF=IREF
      NREF=0
      NEND=0
      IF(IPRINT)1550,1450,1450
C--PRINT THE CAPTIONS
1450  CONTINUE
      CALL XPRTCN
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1500)
      ENDIF
1500  FORMAT(4X,'H',3X,'K',3X,'L',2X,'F-squared',4X,'Sigma2',4X,
     2 'Sigma1',8X,'F-squared',5X,'Sigma',5X,'Delta',3X,'E-param',4X,
     3 'Weight',3X,'JCODE',4X,'Serial'/)
C
C--CHECK IF THERE ARE ANY REFLECTIONS
1550  CONTINUE
      IF(KLDRNR(I))3800,1700,1700
C--FETCH THE NEXT REFLECTION
1600  CONTINUE
      IF(KLDRNR(I))1650,1700,1700
C--END LIST 6 INPUT
1650  CONTINUE
      NEND=1
      GOTO 2250
C--CHECK THAT TOO MANY REFLECTIONS HAVE NOT BEEN READ
1700  CONTINUE
      IF(JREF+NTERM-LFL)1850,1850,1750
1750  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1800)
      ENDIF
1800  FORMAT(//,' Too many equivalents for the given core')
      GOTO 4300
C--TRANSFER THE REFLECTION TO THE FIRST INPUT BUFFER
1850  CONTINUE
      CALL XMOVE(STORE(M6),STORE(IBUF),NBUF)
C--FIX THE INDICES
      DO 1900 I=IBUF,KB
      ISTORE(I)=NINT(STORE(I))
1900  CONTINUE
C--FIRST REFLECTION THIS INDEX ?
      IF(NREF)1950,1950,2100
C--MOVE THE REFLECTION FROM THE INPUT TO THE CORE BUFFER
1950  CONTINUE
      KREF=JREF
      CALL XMOVE(STORE(IBUF),STORE(JREF),NBUF)
      JREF=JREF+NTERM
      NREF=NREF+1
C--CHECK IF WE HAVE /FO/ OR /FO/ **2 STORED
      IF(ISQ)2050,2000,2000
C--/FO/ STORED  -  CONVERT TO /FO/ **2
2000  CONTINUE
      JFO=KREF+IFO
      TEMP = ABS(STORE(JFO))
      STORE(KREF+12)=2.*TEMP*STORE(KREF+12)
      STORE(JFO)=STORE(JFO)*TEMP
C--FIX THE SERIAL AND JCODE
2050  CONTINUE
      ISTORE(JREF-4)=NINT(STORE(IBUF+18))
      ISTORE(JREF-3)=NINT(STORE(IBUF+19))
C--SET THE 'E' PARAMETER
      STORE(JREF-2)=0.
C--DEFAULT THE WEIGHT TO UNITY
      STORE(JREF-1)=1.
      GOTO 1600
C--NOT THE FIRST REFLECTION  -  CHECK IF IT HAS THE SAME INDICES
2100  CONTINUE
      IF(ISTORE(IBUF)-ISTORE(IREF))2250,2150,2250
2150  CONTINUE
      IF(ISTORE(IBUF+1)-ISTORE(IREF+1))2250,2200,2250
2200  CONTINUE
      IF(ISTORE(IBUF+2)-ISTORE(IREF+2))2250,1950,2250
C
C--ALL THE REFLECTIONS WITH COMMON INDICES ARE IN CORE  -  CHECK THE JCO
2250  CONTINUE
      IF(NCODE)2700,2700,2300
C--ELIMINATE ANY REFLECTIONS WITH ZERO WEIGHT ASSIGNED TO THEIR JCODES
2300  CONTINUE
      I=IREF
      J=IREF
      K=NREF
      N6CTMP=N6CTMP+NREF
      NREF=0
C--CHECK THE NEXT CONTRIBUTING REFLECTION
2350  CONTINUE
      DO 2450 N=ICODE,JCODE,MDCODE
      L=I+NTERM
      IF(ISTORE(L-4)-ISTORE(N))2450,2400,2450
C--CHECK IF THIS JCODE HAS ZERO WEIGHT
2400  CONTINUE
      IF(STORE(N+1)-0.0001)2600,2450,2450
2450  CONTINUE
C--THIS REFLECTION IS ALLOWED  -  MOVE IT UP
      IF(I-J)2500,2550,2500
C--MOVEMENT IS NECESSARY
2500  CONTINUE
      CALL XMOVE(STORE(I),STORE(J),NTERM)
C--UPDATE THE POINTERS
2550  CONTINUE
      I=I+NTERM
      J=J+NTERM
      NREF=NREF+1
      N6CTMP=N6CTMP-1
      GOTO 2650
C--INCREMENT THE ADDRESS FOR A REJECTED REFLECTION
2600  CONTINUE
      I=I+NTERM
C--CHECK IF THERE ARE MORE REFLECTIONS TO PROCESS
2650  CONTINUE
      K=K-1
      IF(K)2700,2700,2350
C--CHECK IF THERE ARE ANY REFLECTIONS LEFT TO CONTRIBUTE
2700  CONTINUE
      IF(NREF)3700,3700,2750
C
C--ONE OR MORE THAN ONE CONTRIBUTOR
2750  CONTINUE
      KD=0
      EE=-1.
C--CHECK IF THIS IS TWINNED DATA
      IF(ITWIN)3350,2800,2800
C--REARRANGE THE DATA IN THE STACK
2800  CONTINUE
      KD=NREF
      K=IREF+ITWIN
      EE=STORE(K)
      GOTO 2950
C--MARK THE LAST LOT OF REFLECTIONS AS USED
2850  CONTINUE
      J=IREF+ITWIN
      DO 2900 I=1,NREF
      STORE(J)=-1.
      J=J+NTERM
2900  CONTINUE
      K=IREF+ITWIN
C--SEARCH FOR ANY OTHER UNUSED REFLECTIONS
2950  CONTINUE
      L=K
      NREF=0
      FE=EE
      EE=-1.
      DO 3300 I=1,KD
      IF(ABS(FE-STORE(K))-.5)3000,3150,3150
C--WE HAVE ANOTHER TO MATCH THE ORIGINAL
3000  CONTINUE
      NREF=NREF+1
C--CHECK IF THE REFLECTION NEEDS MOVING TO THE TOP
      IF(L-K)3100,3050,3100
3050  CONTINUE
      L=L+NTERM
      GOTO 3250
C--MOVE THE REFLECTION
3100  CONTINUE
      K=K-ITWIN
      L=L-ITWIN
      CALL XMOVE(STORE(L),STORE(ITWINL),NTERM)
      CALL XMOVE(STORE(K),STORE(L),NTERM)
      CALL XMOVE(STORE(ITWINL),STORE(K),NTERM)
      K=K+ITWIN+NTERM
      L=L+ITWIN+NTERM
      GOTO 3300
C--CHECK IF THIS REFLECTION HAS ALREADY BEEN MERGED
3150  CONTINUE
      IF(STORE(K))3250,3250,3200
C--RECORD ITS VALUE
3200  CONTINUE
      EE=STORE(K)
3250  CONTINUE
      K=K+NTERM
3300  CONTINUE
C
C--CALL THE MERGE ROUTINES
3350  CONTINUE
      IF(KMERGE(I))3700,3400,3400
C--OUTPUT THE REFLECTION
3400  CONTINUE
      CALL XMOVE(STORE(IREF),STORE(M6),NBUF)
      ITEMP1=M6+2
      DO 3410 I=M6,ITEMP1
      STORE(I)=FLOAT(ISTORE(I))
3410  CONTINUE
C--ASSIGN THE NEW VALUES OF /FO/ **2 AND SIGMA
      JFO=M6+IFO
      STORE(JFO)=WORK(5)
      STORE(M6+12)=WORK(NCHOP+8)
C--CHECK IF THIS IS ONLY ONE CONTRIBUTOR
      IF(NREF-1)3500,3500,3450
C--MORE THAN ONE CONTRIBUTOR  -  ZERO THE WEIGHT AND BATCH
3450  CONTINUE
      STORE(M6+4)=0.
      STORE(M6+13)=0.
C----- STORE THE MINIMUM JCODE
      STORE(M6+18) = WORK(29)
C--ZERO THE REMAINING CONSTANTS
      CALL XZEROF(STORE(M6+17),N6DTL-17)
C----- ENSURE CORRECTIONS ARE UNITY
      STORE(M6+27) = 1.0
C--CHECK IF WE MUST TAKE THE SQUARE ROOT
3500  CONTINUE
      IF(ISQ)3600,3550,3550
3550  CONTINUE
CDJWMAP99[
      CALL XSQRT(STORE(JFO), FSIGN, FABS, STORE(M6+12), SIG)
      STORE(JFO) = FSIGN
      STORE(M6+12) = SIG
CDJWMAP99]
C--STORE THE REFLECTION
3600  CONTINUE
C----- COMPUTE NEW 'RATIO'
      STORE(M6+20) = MIN (111.0, STORE(JFO) / (2.* STORE(M6+12) ))
      CALL XSLR(1)
C--ACCUMULATE THE REFLECTION DETAILS INFORMATION
      DO 3650 I=1,MD6
      CALL XACRT(I)
3650  CONTINUE
C--CHECK FOR ANOTHER TWIN ELEMENT
3700  CONTINUE
      IF(EE)3750,3750,2850
C--RESET THE POINTERS AND CHECK FOR THE END OF THE DATA
3750  CONTINUE
      NREF=0
      JREF=IREF
      IF(NEND)1950,1950,3800
C
C--END OF THE TAPE  -  TERMINATE THE WRITE
3800  CONTINUE
      DO 3850 I=1,MD6
      CALL XCRD(I)
3850  CONTINUE
      N6D=N6W
      CALL XERT(IULN)
C--AND NOW GENERATE THE OUTPUT FILE IF NECESSARY
C--PRINT THE REFLECTION STATISTICS PROFILE
      CALL WSTAT(N3SIG, PC3SIG)
C
C
C--PRINT THE REFLECTION TOTALS
      IF (ISSPRT .EQ. 0)
     1 WRITE(NCWU,3900)N6RTMP,N6CTMP,N6W,N6DEAD,NPRINT,APRINT
3900   FORMAT(
     * I6,' Contributors input       ',
     2 I6,' Contributors rejected'/
     3 I6,' Merged reflections output',
     4 I6,' Merged reflections rejected'/
     5 I6,' Contributors deviating from',
     6 ' the average by more than ',
     7 F5.1, 'e.s.ds' )
      WRITE ( CMON , 3905 ) N6W , N6DEAD
      CALL XPRVDU(NCVDU, 1,0)
      WRITE(NCAWU,'(A)') CMON(1)(:)
3905  FORMAT ( 1X , I6 , ' merged reflections output' , 5X , I6 ,
     2 ' merged reflections rejected' )
      WRITE ( CMON , 4048) N3SIG, PC3SIG
      CALL XPRVDU(NCVDU, 1,0)
      WRITE(NCAWU,'(A)') CMON(1)(:)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)(:)
4048  FORMAT(I6,' Reflections greater than 3 sigma(i),',
     1 F8.3, ' percent of data')
C
C----- COMPUTE AVERAGES
C
      IF ((WORK(26)) .LE. ZERO) THEN
            WORK(25)= 0.
      ELSE
            WORK(25)= WORK(25)/WORK(26)
      ENDIF
      IF ((WORK(27)) .LE. ZERO) THEN
            WORK(28)=0.
      ELSE
            WORK(28)= SQRT(WORK(28)/WORK(27) )
      END IF
C
      WRITE(CMON,4049) WORK(25),WORK(28)
      CALL XPRVDU(NCVDU, 2,0)
      WRITE(NCAWU,'(A)') (CMON(I)(:),I=1,2)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') (CMON(I)(:),I=1,2)
4049  FORMAT(
     1 ' Rmerge = [Sum(/Fsq-<Fsq>/)/sum(Fsq)]                  = '
     1  ,F6.3/
     1 ' Rint   = SQRT[ sum[w(Fsq-<Fsq>)**2] / sum[w<Fsq>**2]] = '
     1  ,F6.3)
C
      DO 4100 I = 1,3
      IF (ABS(RINT(I)) .GT. ZERO) RINT(I) = (RINT(I+3)/RINT(I))
4100  CONTINUE
      WRITE(CMON, 4104) (RINT(I),I=1,3)
      CALL XPRVDU(NCVDU, 2,0)
      WRITE(NCAWU,'(A)') (CMON(I)(:),I=1,2)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') (CMON(I)(:),I=1,2)
4104  FORMAT(
     1 ' Rmerge for I>10sigma,  10sigma>I>2sigma,    I<2sigma'/
     2 2X,F18.3, F16.3, F15.3)
C
C----- LOAD DATA IF LIST 30 NOT ALREADY IN CORE
      IF (KHUNTR (30,0, IADDL,IADDR,IADDD, -1) .LT. 0) CALL XFAL30
      IF (KHUNTR (13,0, IADDL,IADDR,IADDD, -1) .LT. 0) CALL XFAL13
      IF (IERFLG .LT. 0) GOTO 6520
      IF (ABS(STORE(L30IX))+ABS(STORE(L30IX+1))+
     1 ABS(STORE(L30IX+2))+ABS(STORE(L30IX+3))+
     2 ABS(STORE(L30IX+4))+ABS(STORE(L30IX+5)) .LE. ZERO ) THEN
C----- MIN AND MAX INDICES, FROM L6 DETAILS
        LIX = L6DTL
        STORE(L30IX) = STORE(LIX)
        STORE(L30IX+1) = STORE(LIX+1)
        LIX = LIX + MD6DTL
        STORE(L30IX+2) = STORE(LIX)
        STORE(L30IX+3) = STORE(LIX+1)
        LIX = LIX + MD6DTL
        STORE(L30IX+4) = STORE(LIX)
        STORE(L30IX+5) = STORE(LIX+1)
      ENDIF
      IF (ISTORE(L13CD) .EQ. -1) THEN
C------- FRIEDEL USED
            STORE(L30DR+4) = FLOAT(N6W)
            STORE(L30DR+5) = WORK(28)
      ELSE
            STORE(L30DR+2) = FLOAT(N6W)
            STORE(L30DR+3) = WORK(28)
      ENDIF
      CALL XWLSTD ( 30, ICOM30, IDIM30, -1, -1)
 6520  CONTINUE
      IF(N6D)4200,4200,4150
4150  CONTINUE
C--AND NOW THE TERMINATION MESSAGES
4200  CONTINUE
      CALL XOPMSG ( IOPMER , IOPEND , IVERSN )
      CALL XTIME2(2)
      RETURN
C
C--TERMINATE BECAUSE OF ERRORS
4300  CONTINUE
      CALL XERHND ( IERERR )
      GO TO 9900
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPMER , IOPABN , 0 )
      GO TO 4200
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPMER , IOPCMI , 0 )
      GO TO 9900
C
      END
C
CODE FOR WWT
      SUBROUTINE WWT
C--SET UP THE WEIGHTING SCHEME
C
C--
\ISTORE
C
\STORE
C
\XLISTI
\XUNITS
\XSSVAL
\XCONST
      COMMON /XMRG/WORK(30),ISTAT(100), RINT(6)
      COMMON /XMRGA/IULN,MEDIUM,NSCH,NCYC,ICT,JCT,NCT,ITEMP1,ICODE,
     2 JCODE,MDCODE,NCODE,CHOP,NCHOP,IPRINT,APRINT,ISQ,IBUF,JBUF,NBUF,
     3 ITEMP2,IREF,JREF,NTERM,NREF,NEND,IFO,JFO,ITWIN,N6DEAD,N6CTMP,
     4 N6RTMP,JPRINT,NPRINT
\XLST06
\XLST13
\XERVAL
\XIOBUF
C
\QSTORE
C
C--BRANCH ON THE WEIGHTING SCHEME TYPE
      GOTO(1050,1100,1050,1000),NSCH
C1000  STOP 225
1000  CALL GUEXIT(225)
1050  CONTINUE
      NCYC=1
      GOTO 1300
C--GAUSSIAN WEIGHTING SCHEME
1100  CONTINUE
      IF ( NCT .NE. 6 ) GO TO 9910
      STORE(ICT)=(ALOG(STORE(ICT)))/(STORE(ICT+1)*STORE(ICT+1))
1300  CONTINUE
      RETURN
9910  CONTINUE
C -- WRONG NO. OF PARAMS.
      WRITE ( CMON , 9915 ) NCT , NSCH
      CALL XPRVDU(NCVDU, 1,0)
      WRITE(NCAWU,'(A)') CMON(1)(:)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)(:)
9915  FORMAT ( 1X , I5 , ' is the wrong number of parameters for ' ,
     1 'weighting scheme ' , I4 )
      CALL XERHND ( IERERR )
      RETURN
      END
C
CODE FOR KMERGE
      FUNCTION KMERGE(IN)
C--ROUTINE TO COMBINE THE CONTRIBUTORS FOR ONE REFLECTION
C  TOGETHER.
C
C  IN  A DUMMY ARGUMENT.
C
C--RETURN VALUES OF 'KMERGE' ARE :
C
C  -1  REFLECTION HAS BEEN REJECTED/
C   0  REFLECTION IS READY TO OUTPUT.
C
C--
\ISTORE
C
\STORE
C
\XLISTI
\XUNITS
\XSSVAL
\XCONST
\XCHARS
      COMMON /XMRG/WORK(30),ISTAT(100), RINT(6)
      COMMON /XMRGA/IULN,MEDIUM,NSCH,NCYC,ICT,JCT,NCT,ITEMP1,ICODE,
     2 JCODE,MDCODE,NCODE,CHOP,NCHOP,IPRINT,APRINT,ISQ,IBUF,JBUF,NBUF,
     3 ITEMP2,IREF,JREF,NTERM,NREF,NEND,IFO,JFO,ITWIN,N6DEAD,N6CTMP,
     4 N6RTMP,JPRINT,NPRINT
\XLST06
\XLST13
C
\QSTORE
C
      IDWZAP = IN
C--CHECK FOR ONLY ONE REFLECTION
      IF(NREF-1)1000,1000,1050
C--ONLY ONE CONTRIBUTOR
1000  CONTINUE
      JFO=IFO+IREF
      WORK(5)=STORE(JFO)
      WORK(9)=AMAX1(0.01,STORE(IREF+12))
      WORK(10)=WORK(9)
C----- SET THE PRINT LEVEL FOR SINGLE REFLECTIONS
      JPRINT = IPRINT
      GOTO 2500
C--MORE THAN ONE REFLCTION  -  INITIAL PREPARATION
1050  CONTINUE
      GOTO(1150,1200,1250,1100),NSCH
C1100  STOP 225
1100  CALL GUEXIT(225)
C--UNIT WEIGHTS
1150  CONTINUE
      ASSIGN 1700 TO LABEL
      GOTO 1350
C--GAUSSIAN WEIGHTS
1200  CONTINUE
      ASSIGN 1800 TO LABEL
      GOTO 1350
C--STATISTICAL WEIGHTS
1250  CONTINUE
      ASSIGN 1750 TO LABEL
      JREF=IREF
      DO 1300 J=1,NREF
      KREF=JREF+NTERM
      STORE(KREF-1)=1./(STORE(JREF+12)*STORE(JREF+12)+1.)
      STORE(KREF-2)=0.
      JREF=JREF+NTERM
1300  CONTINUE
      GOTO 1350
C
C--ASSIGN WEIGHTS  -  ALL CALCULATIONS ARE DONE ON THE SCALE OF /FO/ **2
1350  CONTINUE
      DO 1950 L=1,NCYC
C--WORK3 = SIGMA W* /FO/ **2
      WORK(3)=0.
C--WORK4 = SIGMA W
      WORK(4)=0.
C--WORK8 = WEIGHTED VARIANCE
      WORK(8)=0.
      JREF=IREF
      DO 1600 J=1,NREF
      KREF=JREF+NTERM
      JFO=JREF+IFO
C--CHECK IF ANY JCODES ARE TO BE SPECIALLY WEIGHTED
      IF(NCODE)1550,1550,1400
C--CHECK IF THIS REFLECTION IS ONE OF THE SPECIAL JCODES
1400  CONTINUE
      DO 1500 K=ICODE,JCODE,MDCODE
      IF(ISTORE(KREF-4)-ISTORE(K))1500,1450,1500
C--APPLY THE SPECIAL WEIGHT FOR THIS JCODE
1450  CONTINUE
      STORE(KREF-1)=STORE(K+1)
1500  CONTINUE
C--SIGMA[X(I)*W(I)]
1550  CONTINUE
      WORK(3)=WORK(3)+STORE(JFO)*STORE(KREF-1)
C--SIGMA [W(I)]
      WORK(4)=WORK(4)+STORE(KREF-1)
      WORK(8)=WORK(8)+STORE(JREF+12)*STORE(JREF+12)*STORE(KREF-1)
      JREF=KREF
1600  CONTINUE
C--WEIGHTED AVERAGE
      IF (WORK(4) .GT. ZERO) THEN
      WORK(5)=WORK(3)/WORK(4)
      WORK(10)=SQRT(WORK(8)/WORK(4))
      ELSE
            WORK(5) = WORK(3) / FLOAT(NREF)
            WORK(10) = WORK(8) / FLOAT(NREF)
      ENDIF
C--CHECK IF THIS IS THE LAST CYCLE  -  EXIT IF IT IS
      IF(L-NCYC)1650,1900,1900
1650  CONTINUE
      GOTOLABEL,(1700,1800,1750)
C--UNIT WEIGHTS
1700  GOTO 1900
C--STATISTICAL WTS
1750  GOTO 1900
C--EXPONENTIAL WEIGHTS
1800  JREF=IREF
      DO 1850 J=1,NREF
      KREF=JREF+NTERM
      JFO=JREF+IFO
C--COMPUTE THE DELTA'S
      WORK(3)=WORK(5)-STORE(JFO)
C--COMPUTE THE GAUSSIAN WEIGHT - AN ESTIMATE OF THE REAL VARIABILITY
CDJWMAP99[
      CALL XSQRT(STORE(JFO), FSIGN, FABS, STORE(jref+12), SIG)
      STORE(JFO) = FSIGN
CDJWMAP99]
      BTEMP=STORE(ICT+2)+(STORE(ICT+3)*STORE(JREF+12)+STORE(ICT+4)
     2 *STORE(JREF+12)*FABS+STORE(ICT+5)
     3 *STORE(JFO)*STORE(JREF+12))
C--KREF-2='E'
      STORE(KREF-2)=BTEMP
C
C
C--    -1=WT
      STORE(KREF-1)= ZERO
      ATEMP=WORK(3)*WORK(3)*STORE(ICT)/(STORE(KREF-2)*STORE(KREF-2))
C--CHECK IF THIS VALUE IS TOO SMALL TO 'EXP'
      IF(ATEMP+170.)1840,1810,1810
C--TAKE THE EXPONENTIAL
1810  CONTINUE
      STORE(KREF-1)=EXP(ATEMP)
C--UPDATE FOR THE NEXT REFLECTION
1840  CONTINUE
      JREF=KREF
1850  CONTINUE
1900  CONTINUE
1950  CONTINUE
C
C--CHECK THE NUMBER OF BAD AGREEMENTS AFTER THE FINAL CYCLE
      JPRINT=IPRINT
      JREF=IREF
      DO 2100 J=1,NREF
      JFO=JREF+IFO
      KREF=JREF+NTERM
C--CHECK THE DISCREPANCY FOR THIS CONTRIBUTOR
      IF(ABS(STORE(JFO)-WORK(5))-APRINT*WORK(10))2100,2100,2000
C--DISCREPANCY EXCEEDS 'APRINT'*E.S.D.
2000  CONTINUE
      NPRINT=NPRINT+1
C--CHECK IF THIS IS A PARTIAL PRINT
      IF(IPRINT)2100,2050,2100
C--COMPLETE PRINT REQUIRED
2050  CONTINUE
      JPRINT=1
2100  CONTINUE
      JREF=KREF
C--ACCUMULATE THE TOTALS AND DO THE PRINTING IF NECESSARY
      WORK(6)=0.
      WORK(8)=0.
C----- SET A MAXIMUM JCODE
      WORK(29) = 9.
      JREF=IREF
      DO 2450 J=1,NREF
      KREF=JREF+NTERM
      JFO=JREF+IFO
C--WORK7 = DELTA
      WORK(7) = STORE(JFO) - WORK(5)
C--WORK6 = SIGMA W*DEL.SQ
      WORK(6)=WORK(6)+WORK(7)*WORK(7)*STORE(KREF-1)
C--WORK 8 = SIGMA W*VAR
      WORK(8)=STORE(JREF+12)*STORE(JREF+12)*STORE(KREF-1)+WORK(8)
C--WORK25=21= SIGMA /DELTA/
      WORK(25)=WORK(25)+ABS(WORK(7))
C--WORK26 = 22 = SIGMA AVERAGE
      WORK(26)=WORK(26)+WORK(5)
C--WORK27 = 23 = SIGMA W AV SQ
      WORK(27)=WORK(27)+WORK(5)*WORK(5)*STORE(KREF-1)
C----- COMPUTE TOTALS FOR PARTIAL RINT
      IF (STORE(JFO) .GE. 10. * STORE(JREF+12)) THEN
            IRINT = 1
      ELSE IF (STORE(JFO) .GE. 2. * STORE(JREF+12)) THEN
            IRINT = 2
      ELSE
            IRINT = 3
      ENDIF
      RINT(IRINT) = RINT(IRINT) + STORE(JFO)
      RINT(IRINT+3) = RINT(IRINT+3) + ABS(WORK(7))
C--CHECK IF A PRINT IS REQUIRED OF THE CONTRIBUTORS
      IF(JPRINT)2400,2400,2200
C--PRINT THE RESULTS  - PARTIAL CONTRIBUTIONS
2200  CONTINUE
      KKK=IB
      IF(ABS(STORE(JFO)-WORK(5))-APRINT*WORK(10))2300,2300,2250
C--OUTSIDE THE LIMTS
2250  CONTINUE
      KKK=IA
C--PRINT THIS CONTRIBUTOR
2300  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2350)STORE(JFO),KKK,STORE(JREF+12),WORK(7),
     2 STORE(KREF-2),STORE(KREF-1),ISTORE(KREF-4),ISTORE(KREF-3)
      ENDIF
2350  FORMAT(51X,F10.1,A1,F9.1,2F10.1,E11.2,I6,I10)
2400  CONTINUE
C----- WORK(29) IS MINIMUM JCODE
      WORK(29) = AMIN1( WORK(20), STORE(JREF+18) )
      JREF=KREF
2450  CONTINUE
C--WORK 28 = 24 = SIGMA W DELTA SQ
      WORK(28)=WORK(28)+WORK(6)
C--WEIGHTED AVERAGE
      IF (WORK(4) .GT. ZERO) THEN
        WORK(9)=WORK(6)/WORK(4)
        WORK(10)=WORK(8)/WORK(4)
      ELSE
        WORK(9)=WORK(6)/FLOAT(NREF)
        WORK(10)=WORK(8)/FLOAT(NREF)
      ENDIF
      WORK(9)=SQRT(WORK(9))
      WORK(10)=SQRT(WORK(10))
      WORK(9)=AMAX1(0.01,WORK(9))
      WORK(10)=AMAX1(0.01,WORK(10))
C
C--ALL THE DETAILS HAVE BEEN SET UP
2500  CONTINUE
      J=1
      KMERGE=0
C--CHECK FOR AN ACCEPTED REFLECTION
      IF(CHOP*WORK(NCHOP+8)-WORK(5))2550,2550,2700
C--THIS REFLECTION IS OKAY  -  ADD IN THE DEVIATION DETAILS
2550  CONTINUE
      IF(NREF-1)2750,2750,2600
C--MORE THAN ONE REFLECTION  -  ADD IN THE DEVIATION DETAILS
2600  CONTINUE
      IF (WORK(4) .LE. ZERO) GOTO 2700
      JREF=IREF
      DO 2650 I=1,NREF
      JFO=JREF+IFO
      KREF=JREF+NTERM
      WORK(20)=WORK(5)-STORE(JFO)
      WORK(21)=WORK(21)+ABS(WORK(20))
      WORK(22)=WORK(22)+WORK(5)
      WORK(23)=WORK(23)+WORK(5)*WORK(5)*STORE(KREF-1)
      WORK(24)=WORK(24)+WORK(20)*WORK(20)*STORE(KREF-1)
      JREF=KREF
2650  CONTINUE
      GOTO 2750
C--REJECTED REFLECTION
2700  CONTINUE
      J=2
      N6DEAD=N6DEAD+1
      KMERGE=-1
C--PRINT THE TOTALS FOR THE NEW REFLECTION
2750  CONTINUE
      IF(JPRINT)2900,2900,2800
C--PRINT THE REFLECTION
2800  CONTINUE
      K=IREF+2
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2850)(ISTORE(I),I=IREF,K),WORK(5),(WORK(I),I=9,10),
     2 (IB,I=1,J)
      ENDIF
2850  FORMAT(1X,3I4,1X,3F10.1,2A1,1X,'Unobserved  -  rejected')
C--FIND THE STATISTICS IF NECESSARY
2900  CONTINUE
      IF(J-2)2950,3000,3000
C--COMPUTE THE POINT
2950  CONTINUE
      J=INT(AMIN1(2.*WORK(5)/WORK(NCHOP+8)+1.,100.)+.001)
      J = MAX0(1,J)
      J = MIN0(100,J)
      ISTAT(J)=ISTAT(J)+1
C--AND NOW RETURN
3000  CONTINUE
      RETURN
      END
C
CODE FOR WSTAT
      SUBROUTINE WSTAT(N3SIG, PC3SIG)
C
C--
C
      DIMENSION JSTAT(100)
C
C
      COMMON /XMRG/WORK(30),ISTAT(100), RINT(6)
      COMMON /XMRGA/IULN,MEDIUM,NSCH,NCYC,ICT,JCT,NCT,ITEMP1,ICODE,
     2 JCODE,MDCODE,NCODE,CHOP,NCHOP,IPRINT,APRINT,ISQ,IBUF,JBUF,NBUF,
     3 ITEMP2,IREF,JREF,NTERM,NREF,NEND,IFO,JFO,ITWIN,N6DEAD,N6CTMP,
     4 N6RTMP,JPRINT,NPRINT
\XUNITS
\XSSVAL
\XCHARS
\XIOBUF
C
C -- 'NMONIT' IS NUMBER OF CHANNELS TO DISPLAY ON MONITOR OUTPUT.
C    'MONWID' IS WIDTH OF MONITOR BAR DISPLAY
C    'IMONIT' CONTROLS WHETHER A DISPLAY IS PRODUCED ( 1 = YES, 0 = NO)
C
      DATA NCHANL / 100 / , LISWID / 80 /
      DATA NMONIT / 20 / , MONWID / 40 / , IMONIT / 1 /
C
C
C
C--PRINT THE HEADING
      CALL XPRTCN
      WRITE ( CMON ,1000)
      CALL XPRVDU(NCVDU, 1,0)
      WRITE(NCAWU,'(A)') CMON(1)(:)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)(:)
1000  FORMAT('Fsq/sigma(Fsq)  No.  %  Total',
     2 ' Remainder         Distribution of sigma levels.',A2)
C
C -- ACCUMULATE TOTAL NUMBER OF REFLECTIONS, AND REMAINDER INFORMATION
C
      ND=0
      IAMAX = 0
      NTOT = 0
C
      DO 1050 J=1, NCHANL
      ND=ND+ISTAT(J)
      IAMAX=MAX0(IAMAX,ISTAT(J))
      IF ( J .GT. NMONIT ) NTOT = NTOT + ISTAT(J)
      JSTAT(J)=ND
1050  CONTINUE
      ND=MAX0(ND,1)
      MONMAX = MAX0 ( IAMAX , NTOT )
C----- ACCUMULATE 3 SIGMA DATA
        N3SIG = ND - JSTAT(6)
        PC3SIG= 100. * FLOAT(N3SIG)/ FLOAT(ND)
C
C
      DO 1100 J=1,100
      X=0.5*FLOAT(J)
      Y=X-0.5
      K = ( (ISTAT(J)*LISWID) / IAMAX )  + 1
      NZ=ND-JSTAT(J)
      IPER=NINT(FLOAT(ISTAT(J))*100./FLOAT(ND))
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1150)Y,X,ISTAT(J),IPER,JSTAT(J),NZ,(MINUS,L=1,K)
      ENDIF
      IF ( IMONIT .LE. 0 ) THEN
      ELSE IF ( J .LE. NMONIT ) THEN
        K = ( ( ISTAT(J) * MONWID ) / MONMAX ) + 1
        WRITE ( CMON , 1150 ) Y , X , ISTAT(J) , IPER , JSTAT(J) ,
     2 NZ , ( MINUS , L = 1 , K )
      CALL XPRVDU(NCVDU, 1,0)
      WRITE(NCAWU,'(A)') CMON(1)(:)
      ELSE IF ( J .EQ. NCHANL ) THEN
        Y = FLOAT ( NMONIT + 1 ) * 0.5
        K = ( ( MONWID * NTOT ) / MONMAX ) + 1
C
        IREM = ND - JSTAT(J)
        IPER = NINT(FLOAT(NTOT)*100./FLOAT(ND))
        WRITE ( CMON , 1150 ) Y , X , NTOT ,     IPER , JSTAT(J),
     2 IREM , ( MINUS , L = 1 , K )
      CALL XPRVDU(NCVDU, 1,0)
      WRITE(NCAWU,'(A)') CMON(1)(:)
      ENDIF
1100  CONTINUE
1150  FORMAT(1H ,F5.1,2H -,F5.1,I6,I3,2I6,1X,96A1)
      CONTINUE
      CALL XLINES
      RETURN
      END
C
CODE FOR XL6RRP
      SUBROUTINE XL6RRP(N6DEAD,N6MAX,IFO,ICAPT)
C--REJECTED REFLECTION PRINT ROUTINE FOR LIST 6.
C
C  N6DEAD  THE NUMBER OF REFLECTIONS REJECTED SO FAR.
C  N6MAX   THE MAXIMUM NUMBER OF REJECTED REFLECTIONS TO BE PRINTED.
C  IFO     THE POSITION OF /FO/ IN THE LIST 6 BUFFER  -  RANGE 0 TO
C          'MD6'-1.
C  ICAPT   A 24 CHARACTER CAPTION TO PRECEDE THE REFLECTION.
C
C--
C
      CHARACTER*(*) ICAPT
C
\STORE
\XUNITS
\XSSVAL
\XLST06
C
C--CHECK IF THIS IS THE FIRST REJECTED REFLECTION
      IF(N6DEAD)1000,1000,1100
C--FIRST REFLECTION  -  OUTPUT THE REJECTED REFLECTIONS CAPTION
1000  CONTINUE
      N6DEAD=0
      CALL XPRTCN
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1050)
      ENDIF
1050  FORMAT(//21X,10X,'H',5X,'K',5X,'L',5X,
     2 'I or /FO/',5X,'Sigma',6X,'JCODE',4X,'Serial'/)
      GOTO 1250
C--CHECK IF TOO MANY REFLECTIONS HAVE BEEN REJECTED
1100  CONTINUE
      IF(N6DEAD-N6MAX)1250,1150,1350
1150  CONTINUE
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1200)
      ENDIF
1200  FORMAT(/,' and so on . . . .')
      GOTO 1350
C--PRINT THE REJECTED REFLECTION
1250  CONTINUE
      JFO=IFO+M6
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1300)ICAPT,STORE(M6),STORE(M6+1),STORE(M6+2),
     2 STORE(JFO),STORE(M6+12),STORE(M6+18),STORE(M6+19)
      ENDIF
1300  FORMAT ( 1X, A, 2X, 3F6.0, F12.1, F11.1, F11.0, F10.0 )
C--UPDATE THE NUMBER OF REJECTED REFLECTIONS
1350  CONTINUE
      N6DEAD=N6DEAD+1
      RETURN
      END
