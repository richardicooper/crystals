CODE FOR SYDROG
      SUBROUTINE SYDROG
C--SUBROUTINE TO CALCULATE THE POSITIONS OF HYDROGEN ATOMS
C
C--CONTROL VARIABLES
C
C  JA  = LFL LAST FREE LOCATION  -  USED FOR THE ATOM STACK
C  JB  CURRENT VALUE OF JA
C  JC  NUMBER OF ATOMS
C  JD  = NFL NEXT FREE LOCATION  -  USED FOR THE ORTHOGONAL COORDS.
C  JE  CURRENT VALUE OF JD
C  JF  NEXT FREE LOCATION AFTER THE COORDINATES
C  JG  CURRENT VALUE OF JF
C  JS  NUMBER OF HYDROGEN ATOMS
C  JTA ADDRESS OF THE FIRST HYDROGEN ATOMS
C  JT  CURRENT VALUE OF JTA
C  JU  5 WORD WORK AREA
C
C--OTHER IMPORTANT VARIABLES
C
C  SY  VALUE OF U(ISO) FOR THE HYDROGENS
C  JZ  CONTROL LINKED TO U(ISO)
C      0  USE THE VALUE INPUT FOR U[ISO]
C      1  USE THE VALUE FROM THE ADJACENT ATOM
C  SX  DISTANCE C-H TO USE
C  SW  SERIAL NUMBER START FOR THE HYDROGENS
C  SV  VALUE OF OCC FOR THE HYDROGENS
C
C--
\ISTORE
\ICOM12
C
      DIMENSION INEXT(1)
C
\STORE
\XUNITS
\XSSVAL
\XLISTI
\XCONST
\XLEXIC
\XWORKA
\XLST01
\XLST02
\XLST05
\XLST12
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
\QLST12
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
C
      DATA INEXT(1) / 'NEXT' /
C
C--SET THE INITIAL TIMING
      CALL XTIME1(2)
C--READ THE INPUT DATA
      IF ( KLEXAN(IULN,IFIRST,LENGTH) .LT. 0 ) GO TO 9910
C--DATA INPUT  -  CLEAR THE STORE
      CALL XRSL
      CALL XCSAE
C----- CLEAR A BUFFER
      JU = NFL
      NFL = NFL + 5
C----- SET THE DEFAULT TEMPERATURE FACTOR MULTIPLIER
      UMULT = 1.0
C
C--LOAD LISTS 1 AND 2
      CALL XFAL01
      CALL XFAL02
C--SORT OUT THE INPUT LIST
      LA=KTYP05(MX)
      CALL XLDRO5(LA)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--WORK THE TYPE OF THE OUTPUT LIST
      LB=KTYP05(MY)
\IDIM12
C--INDICATE THAT LIST 12 IS NOT TO BE USED
      DO 1050 I=1,IDIM12
      ICOM12(I)=NOWT
1050  CONTINUE
C--PREPARE FOR PROCESSING OF THE LEXICAL SCANNER OUTPUT
      CALL XILEXP(IULN,IFIRST)
C--SET UP THE CORE AREA TO HOLD THE GENERATED HYDROGEN ATOMS
      LFL=LFL-100
      JTA=LFL+1
C--SET THE SYSTEM DEFAULT CONSTANTS
      SY=0.05
      JZ = 1
      UMULT = 1.2
      SX=1.0
      SW=1.0
      SV=1.0
      JS=0
C
C--MAIN INSTRUCTION CYCLING LOOP  -  SET THE BUFFER ADDRESS AFTER THE LA
1100  CONTINUE
      MD=MD+JS*MD5
C--SET THE POINTER TO THE ADDRESS OF THE GENERATED HYDROGEN ATOMS
      JT=JTA
      IDWZAP = 0
      IF(KLDNLR(IDWZAP))3450,1150,4200
C--SET THE POINTER TO THE ATOM STACK
1150  CONTINUE
      JA=LFL-MD5A
      JB=JA
      JC=0
C--SET THE POINTER TO THE TOP OF THE ORTHOGONAL COORDS. STACK
      JD=NFL
      JE=JD
      ASSIGN 4250 TO NRET
      GOTO(1250,1600,1750,2050,2050,2050,2050,2050,2050,2050,3700,1200)
     2 ,MG
C1200  STOP346
1200  CALL GUEXIT(346)
C
C--'DISTANCE' INSTRUCTION
1250  CONTINUE
      IF(ME)1300,1300,1400
1300  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1350)
      ENDIF
      WRITE(NCAWU,1350)
      WRITE ( CMON, 1350)
      CALL XPRVDU(NCVDU, 1,0)
1350  FORMAT(' No arguments found')
      GOTO 4200
C--READ THE DISTANCE
1400  CONTINUE
      IF(KSYNUM(Z))1450,1550,1450
1450  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1500)ISTORE(MF+1)
      ENDIF
      WRITE(NCAWU,1500) ISTORE(MF+1)
      WRITE ( CMON, 1500) ISTORE(MF+1)
      CALL XPRVDU(NCVDU, 1,0)
1500  FORMAT(' New value of wrong type or missing',
     2 ' at about column',I5)
      GOTO 4200
1550  CONTINUE
      SX=Z
      GOTO 4250
C
C--'SERIAL' INSTRUCTION
1600  CONTINUE
      IF(ME)1300,1300,1650
1650  CONTINUE
      IF(KSYNUM(Z))1450,1700,1450
1700  CONTINUE
      SW=Z
      GOTO 4250
C
C--'UISO' INSTRUCTION
1750  CONTINUE
      IF(ME)1300,1300,1800
C--CHECK THE TYPE OF ARGUMENT
1800  CONTINUE
      IF(ISTORE(MF))1850,1950,1450
C--CHECK IF THIS IS A 'CARB' DIRECTIVE
1850  CONTINUE
      J = KCOMP(1, ISTORE(MF+2), INEXT, 1, 1)
      IF(J)1450,1450,1900
1900  JZ=1
C----- GET THE U MULTIPLIER
      ME = ME - 1
C----- RE-SET THE DEFAULT TEMPERATURE FACTOR MULTIPLIER
      UMULT = 1.0
      IF (ME .LE. 0) GOTO 4250
      MF = MF + LK2
      IF (ISTORE(MF) .NE. 0) GOTO 1450
      IF (KSYNUM(Z) .NE. 0) GOTO 1450
      UMULT = Z
      GOTO 4250
C--READ THE NUMBER OFF THE CARD
1950  CONTINUE
      IF(KSYNUM(Z))1450,2000,1450
C--STORE THE NUMBER AND RESET THE FLAG
2000  CONTINUE
      JZ=0
      SY=Z
      GOTO 4250
C
C--GEOMETRICAL INSTRUCTIONS
2050  CONTINUE
      M5A=L5+MD5*(N5-1)
      ASSIGN 2100 TO NRET
C--CHECK IF THERE ARE ANY HYDROGENS TO OUTPUT
      IF(JS)2100,2100,4000
2100  CONTINUE
      JS=0
      IF(ME)1300,1300,2200
C--CHECK IF THERE MORE ARGUMENTS TO PROCESS
2150  CONTINUE
      IF(KOP(8))2600,2200,2200
C--READ THE NEXT ATOM(S)
2200  CONTINUE
      IF(KATOMU(LN))4200,4200,2250
C--CHECK THAT NO COORDINATES HAVE BEEN GIVEN
2250  CONTINUE
      IF(ISTORE(MQ+5))2300,2400,2300
2300  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2350)
      ENDIF
      WRITE(NCAWU,2350)
      WRITE ( CMON, 2350)
      CALL XPRVDU(NCVDU, 1,0)
2350  FORMAT(' Parameters are illegal for this instruction')
      GOTO 4200
C--TRANSFER THE ATOMS TO THE ATOM STACK
2400  CONTINUE
      DO 2550 I=1,N5A
C--CHECK THAT THERE IS ENOUGH ROOM
      IF ( JB - NFL - 100 ) 9930 , 9930 , 2450
C--GENERATE THE TRANSFORMED COORDINATES
2450  CONTINUE
      JC=JC+1
      IF(KATOMS(MQ,M5A,JB))4200,4200,2500
2500  CONTINUE
      JB=JB-MD5A
      M5A=M5A+MD5A
2550  CONTINUE
      GOTO 2150
2600  CONTINUE
      JI=MG-3
C--CHECK THE NUMBER OF ATOMS
      JJ=3
      JK=JI-2
      IF(JK)2650,2700,2750
2650  JJ=6
      GOTO 2850
2700  JJ=4
      GOTO 2850
2750  JK=JK-5
      IF(JK)2850,2800,2900
2800  JJ=2
2850  CONTINUE
      IF(JC-JJ)2900,3000,2900
2900  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,2950)
      ENDIF
      WRITE(NCAWU,2950)
      WRITE ( CMON, 2950)
      CALL XPRVDU(NCVDU, 1,0)
2950  FORMAT(' The number of atoms is wrong')
      GOTO 4200
C
C--INSTRUCTION LOOP
3000  CONTINUE
      JK=JI
      CALL SAORT
      CALL SAPRT
      STORE(JU+4) = UMULT
      GOTO(3100,3150,3200,3250,3300,3350,3400,3050),JI
C3050  STOP347
3050  CALL GUEXIT(347)
C--'PHEN' INSTRUCTION
3100  CONTINUE
      CALL SPHEN
      GOTO 4250
C--'H13' INSTRUCTION
3150  CONTINUE
      CALL SH13
      GOTO 4250
C--'H33' INSTRUCTION
3200  CONTINUE
      CALL SH33
      GOTO 4250
C--'H23' INSTRUCTION
3250  CONTINUE
      CALL SH23
      GOTO 4250
C--'H22' INSTRUCTION
3300  CONTINUE
      CALL SH22
      GOTO 4250
C--'H12' INSTRUCTION
3350  CONTINUE
      CALL SH12
      GOTO 4250
C--'H11' INSTRUCTION
3400  CONTINUE
      CALL SH11
      GOTO 4250
C
C--MAIN TERMINATION ROUTINES
3450  CONTINUE
      M5A=L5+MD5*(N5-1)
      ASSIGN 3500 TO NRET
C--CHECK IF THERE ARE ANY HYDROGENS TO INSERT
      IF(JS)3500,3500,4000
C--CHECK FOR ANY ERRORS
3500  CONTINUE
      IF ( LEF .NE. 0 ) GO TO 9920
C--FORM AND OUTPUT THE RESULTANT LIST
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3600)N5
      ENDIF
       WRITE(NCAWU,3600) N5
      WRITE ( CMON, 3600) N5
      CALL XPRVDU(NCVDU, 1,0)
3600  FORMAT (1X , 'List now contains' , I6 , ' atoms' )
      N=N5
      NEW=1
      CALL XCPYL5(LA,LB,N,NEW)
      CALL XSTR05(LB,0,NEW)
C -- END ROUTINE
      GO TO 9000
C
C--'AFTER' INSTRUCTION
3700  CONTINUE
      IF(JS)3750,3750,3850
3750  CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,3800)
      ENDIF
      WRITE(NCAWU,3800)
      WRITE ( CMON, 3800)
      CALL XPRVDU(NCVDU, 1,0)
3800  FORMAT(' No hydrogen atom(s) have been placed')
      GOTO 4200
3850  CONTINUE
      IF(ME)1300,1300,3900
3900  CONTINUE
      IF(KATOMU(LN))4200,4200,3950
C--CHECK THAT NO COORDINATES HAVE BEEN GIVEN
3950  CONTINUE
      IF(ISTORE(MQ+5))2300,4000,2300
C--COMPUTE THE ADDRESS FOR INSERTING THE HYDROGEN ATOM(S)
4000  CONTINUE
      JR=M5A+MD5A
C--COMPUTE THE ADDRESS FROM WHICH ATOMS MUST BE MOVED
      JR1=L5+(N5-1)*MD5
C--COMPUTE THE ADDRESS TO WHICH ATOMS MUST BE MOVED
      JR2=JR1+JS*MD5A
C--CHECK IF THERE ARE ANY ATOMS TO MOVE
      IF(JR-JR1)4050,4050,4150
C--MOVE THE ATOMS BEFORE THE INSERTING
4050  CONTINUE
      JR3=JR1
      DO 4100 J=JR,JR1,MD5
      CALL XMOVE(STORE(JR3),STORE(JR2),MD5)
      JR3=JR3-MD5
      JR2=JR2-MD5
4100  CONTINUE
C--INSERT THE HYDROGEN ATOMS
4150  CONTINUE
      CALL XMOVE(STORE(JT),STORE(JR),JS*MD5)
C--ADJUST THE NUMBER OF ATOMS IN THE LIST 5
      N5=N5+JS
      JS=0
      JT=JTA
      GOTONRET,(4250,2100,3500)
C
C--ERROR EXIT FOR THESE ROUTINES
4200  CONTINUE
      CALL XPCA(ISTORE(MD+4))
      LEF=LEF+1
4250  CONTINUE
      GOTO 1100
C
C
9000  CONTINUE
C -- FINAL TIDY UP
      CALL XOPMSG ( IOPHYD , IOPEND , 300 )
      CALL XTIME2 ( 2 )
      CALL XRSL
      CALL XCSAE
      RETURN
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPHYD , IOPABN , 0 )
      GO TO 9000
9910  CONTINUE
C -- COMMAND INPUT ERRORS
      CALL XOPMSG ( IOPHYD , IOPCMI , 0 )
      GO TO 9900
9920  CONTINUE
C -- GENERAL ERRORS
      CALL XERHND ( IERERR )
      GO TO 9900
9930  CONTINUE
C -- INSUFF. CORE
      CALL XOPMSG ( IOPHYD , IOPSPC , 0 )
      GO TO 9900
      END
C
CODE FOR XPERHY
      SUBROUTINE XPERHY
C------ CODE DEVISED AND PRODUCED BY DAVID KINNA AS A PART II PROJECT
C----- PERHYDROGENATE THE CARBON ATOMS
C
C----- THIS ROUTINE SEARCHES FOR BONDED CARBON ATOMS, ASSESSES THEIR
C      HYBRIDISATION FROM A LOOK UP TABLE OF COMMON BOND LENGTHS,
C      AND THEN GENERATES INTERNAL COMMANDS IN THE SYSTEM REQUEST QUEUE
C      OF THE FORM USED BY #HYDROGEN .
C
C  LN1    INPUT LIST TYPE
C  LN2    OUTPUT LIST TYPE
C  ILIST   THE LIST CONTROL FLAG :
C          -1  DO NOT LIST THE HYDROGENATED ATOMS.
C           0  LIST THE HYDROGENATED ATOMS.
C  TOLER   CURRENTLY A DUMMY
C  ITYPE   CURRENTLY C
C--THE COMMON BLOCK /XWORKA/ IS USED :
C
C  JB  ADDRESS OF THE TEMP. STORAGE FOR ATOMS
C  JC  ADDRESS OF THE ATOM HEADER FOR MOVING ATOMS FROM 'JB'
C  JD  WORK SPACE FOR 'KATOMS'
C  JE  START OF DISTANCE STACK.
C  JF  NUMBER OF ATOMS LEFT TO SCAN
C  JG  CURRENT LAST ENTRY IN LIST 5 OR 10
C  JH  MD5-1
C  JI  MD5+MD5
C  JK  ADDRESS OF LAST ATOM ON PRINCIPAL DISTANCE STACK
C  JL  NEXT FREE ADDRESS AFTER PRINCIPAL DISTANCE STACK
C  JT  WORDS PER ENTRY IN THE STACK
C--
C  JU  5 WORD WORK AREA
C  JZ  CONTROL LINKED TO U(ISO)
C      0  USE THE VALUE INPUT FOR U[ISO]
C      1  USE THE VALUE FROM THE ADJACENT ATOM
C  SX  DISTANCE C-H TO USE
C  JACT ACTION FLAG (1=SRQ, 2=BOTH, 3=PUNCH)
C
C--THE FOLLOWING VARIABLES MUST BE SET ON ENTRY TO KDIST1:-
C
C  AT     MINIMUM ALLOWED DISTANCE FOR DISTANCES
C  AC     MAXIMUM ALLOWED DISTANCE FOR DISTANCES
C  BT     MINIMUM ALLOWED DISTANCE FOR ANGLES
C  BC     MAXIMUM ALLOWED DISTANCE FOR ANGLES
C  AO     MAXIMUM ALLOWED DISTANCE OVERALL
C  AP     MAXIMUM ALLOWED DISTANCES SQUARED OVERALL
C  BP     MINIMUM ALLOWED DISTANCE SQUARED OVERALL
C  M5A    ADDRESS OF THE CURRENT TARGET ATOM IN LIST 5
C  M5     ADDRESS OF THE FIRST ATOM TO MOVE AROUND IN LIST 5
C
C
C--ATOMS WHICH FORM ACCEPTABLE CONTACTS ARE STORED IN A STACK
C  WHICH HAS THE FOLLOWING FORMAT :
C
C   0  ADDRESS OF THE ATOM IN LIST 5
C   1  ACCEPTANCE FLAG
C
C      1  ACCEPTABLE TO NONE
C      2  DISTANCES ONLY
C      3  ANGLES ONLY
C      4  ACCEPTABLE TO BOTH
C
C   2  S, THE SYMMETRY MATRIX TO BE USED (NEGATIVE FOR CENTRE OF SYM.)
C   3  NON-PRIMITIVE LATTICE INDICATOR
C   4  T(X)
C   5  T(Y)
C   6  T(Z)
C   7  TRANSFORMED X
C   8  TRANSFORMED Y
C   9  TRANSFORMED Z
C  10  DISTANCE
C  11  DISTANCE SQUARED
C  12  ADDRESS IN LIST 12  (IF USED).
C  13  TARGET CONTACT DISTANCE FOR RESTRAINTS (OPTIONAL)
C
C
      CHARACTER *80 CSRQ
      CHARACTER *12 CTEMP
C----- PATH AND FILENAME FOR RIDING CONSTRAINTS
      CHARACTER *32 CPATH, CPATH2
      DIMENSION JFRN(4), KFRN(4)
C--
\ISTORE
\ICOM12
C
      DIMENSION INEXT(1), IACT(3), IADD(4)
C
\STORE
\XDSTNC
\XUNITS
\XSSVAL
\XLISTI
\XCONST
\XCHARS
\XLEXIC
\XWORKA
\XLST01
\XLST02
\XLST05
\XLST12
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
\QLST12
C
C
      DATA JFRN /'F', 'R', 'N', '1'/
      DATA KFRN /'F', 'R', 'N', '2'/
CC
C----- SET THE SYMBOL FOR CARBON
      DATA ICARB /'C   '/
      DATA INEXT(1) / 'NEXT' /
      DATA IACT / 'NORM', 'BOTH', 'PUNC' /
C----- MAXIMUM DISTANCE FOR A 1-3 CONTACT, AND ITS SQUARE
      DATA D13 / 3.5 /, D13S / 12.25 /
      DATA TOLER /0.6/, ITRANS / 0 /
C
C--SET THE INITIAL TIMING
      CALL XTIME1(2)
C--READ THE INPUT DATA
      IF ( KLEXAN(IULN,IFIRST,LENGTH) .LT. 0 ) GO TO 9910
C--DATA INPUT  -  CLEAR THE STORE
      CALL XRSL
      CALL XCSAE
C----- CLEAR A BUFFER
      JU = NFL
      NFL = NFL + 5
C
      WRITE ( CMON, 100)
      CALL XPRVDU(NCVDU, 2, 1)
100   FORMAT(10X, ' Per-hydrogenation of Carbon atoms')
C--LOAD THE INPUT LIST
      LN1=KTYP05(MX)
      CALL XLDR05(LN1)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--FIND THE OUTPUT LIST TYPE
      LN2=KTYP05(MY)
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,100)
      ENDIF
C
C----- SET THE DEFAULT TEMPERATURE FACTOR OR MULTIPLIER
      UFACT = 1.2
      JACT = 1
      JNEXT = INEXT(1)
      JT=12
      BMAX = D13
      AT = 0.5
      AC = D13
C----- NO ANGLES TO BE LOOKED FOR
      BT = 0.
      BC = 0.
C--SET THE INPUT PARAMETER DEFAULTS
      SX=1.0
      JS=0
      JZ=0
C----- LOAD LISTS 1 AND 2, AND SET UP SOME CONSTANTS
      CALL XDIST2
      IF ( IERFLG .LT. 0 ) GO TO 9900
C
\IDIM12
C--INDICATE THAT LIST 12 IS NOT TO BE USED
      DO 1050 I=1,IDIM12
      ICOM12(I)=NOWT
1050  CONTINUE
      L12=-1
      M12=-1
C----- SET UP A BUFFER FOR A POSSIBLE MOLAX CALCULATION
      IMOLAX = NFL
      NFL = KCHNFL(44)
C--SET UP A FEW STACK CONSTANTS
      JB=NFL
      JC=JB+MD5
      JD=JC+20
      JE=JD+30
C--CHECK THE STORE AREA
      IF ( JE - LFL ) 1000 , 9920 , 9920
1000  CONTINUE
C
C--PREPARE FOR PROCESSING OF THE LEXICAL SCANNER OUTPUT
      CALL XILEXP(IULN,IFIRST)
C
C--MAIN INSTRUCTION CYCLING LOOP  -  SET THE BUFFER ADDRESS AFTER THE LA
1100  CONTINUE
      IDWZAP =0
      IF(KLDNLR(IDWZAP))2100, 1150, 4200
C--SET THE POINTER TO THE ATOM STACK
1150  CONTINUE
      GOTO (1250, 1600, 1750, 1200), MG
C1200  STOP346
1200  CALL GUEXIT(346)
C
C--'DISTANCE' INSTRUCTION
1250  CONTINUE
      IF(ME)1300,1300,1400
1300  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1350)
      ENDIF
      WRITE(NCAWU,1350)
      WRITE ( CMON, 1350)
      CALL XPRVDU(NCVDU, 1,0)
1350  FORMAT(' No arguments found')
      GOTO 4200
C--READ THE DISTANCE
1400  CONTINUE
      IF(KSYNUM(Z))1450,1550,1450
1450  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1500)ISTORE(MF+1)
      ENDIF
      WRITE(NCAWU,1500) ISTORE(MF+1)
      WRITE ( CMON, 1500) ISTORE(MF+1)
      CALL XPRVDU(NCVDU, 1,0)
1500  FORMAT(' New value of wrong type or missing',
     2 ' at about column',I5)
      GOTO 4200
1550  CONTINUE
      SX=Z
      GOTO 4250
C
C--'ACTION' INSTRUCTION
1600  CONTINUE
      IF(ME)1300,1300,1650
1650  CONTINUE
C--CHECK THE TYPE OF ARGUMENT
      IF(ISTORE(MF))1700,1450,1450
C--CHECK IF THIS IS A 'ACTION' DIRECTIVE
1700  CONTINUE
      J = KCOMP(1, ISTORE(MF+2), IACT, 3, 1)
      IF(J)1450,1450, 1720
1720  CONTINUE
      JACT = J
      GOTO 4250
C
C--'UISO' INSTRUCTION
1750  CONTINUE
      IF(ME)1300,1300,1800
C--CHECK THE TYPE OF ARGUMENT
1800  CONTINUE
      IF(ISTORE(MF))1850,1950,1450
C--CHECK IF THIS IS A 'NEXT' DIRECTIVE
1850  CONTINUE
      J = KCOMP(1, ISTORE(MF+2), INEXT, 1, 1)
      IF(J)1450,1450,1900
1900  CONTINUE
      JNEXT = INEXT(1)
      JZ=1
C----- GET THE U MULTIPLIER
      ME = ME - 1
C----- RE-SET THE DEFAULT TEMPERATURE FACTOR MULTIPLIER
      UFACT = 1.0
      IF (ME .LE. 0) GOTO 4250
      MF = MF + LK2
      IF (ISTORE(MF) .NE. 0) GOTO 1450
      IF (KSYNUM(Z) .NE. 0) GOTO 1450
      UFACT = Z
      GOTO 4250
C--NOT 'NEXT' - READ U[ISO] OFF THE CARD
1950  CONTINUE
      IF(KSYNUM(Z))1450,2000,1450
C--STORE THE NUMBER AND RESET THE FLAG
2000  CONTINUE
C----- BLANK OUT THE 'NEXT'
      JNEXT = IB
      JZ=0
      UFACT = Z
      GOTO 4250
C
C
C--MAIN TERMINATION ROUTINES
2100  CONTINUE
C
C
C----- OPEN A FILE FOR THE RIDING RESTRAINTS
      IF (JACT .GE. 2) THEN
       WRITE(CMON,'(11X,A)') 'Putting Perhydro commands in PERH.DAT'
       CALL XPRVDU(NCVDU, 1, 1)
       CPATH2 = 'PERH.DAT'
       LPATH2  = KPATH( CPATH2)
       CALL XRDOPN ( 5 , KFRN(1) ,
     1 CPATH2(1:LPATH2)// 'PERH.DAT', LPATH2+8)
      ENDIF
      WRITE(CMON,'(11X,A)') 'Putting riding Constraints in RIDEH.DAT'
      CALL XPRVDU(NCVDU, 1, 1)
      CPATH = 'RIDEH.DAT'
      LPATH  = KPATH( CPATH)
      CALL XRDOPN ( 5 , JFRN(1) ,
     1 CPATH(1:LPATH)// 'RIDEH.DAT', LPATH+9)
      IF (JACT .LE. 2 ) THEN
        CSRQ = ' '
        WRITE(CSRQ,'(A10)') '#HYDROGENS'
        CALL XISRC (CSRQ)
        CSRQ = ' '
        WRITE(CSRQ, '(A5,F6.3)') 'DIST ', SX
        CALL XISRC (CSRQ)
        CSRQ = ' '
        WRITE(CSRQ, '(A7, A4, F6.3)' ) 'U[ISO] ', JNEXT, UFACT
        CALL XISRC (CSRQ)
      ENDIF
      IF (JACT .GE. 2) THEN
        WRITE (NCFPU2,'(A10)') '#HYDROGENS'
        WRITE (NCFPU2, '(A5,F6.3)') 'DIST ', SX
        WRITE (NCFPU2, '(A7, A4, F6.3)' ) 'U[ISO] ', JNEXT, UFACT
      ENDIF
C
C SET UP THE CONTROL VARIABLES FOR THIS PASS
C
C SAVE THE VALUE FOR 1-2 CONTACT, AND ITS SQUARE
       AOTEMP = AO
       APTEMP = AP
C
C----- SET THE TARGET ATOM ADDRESSES
      MATOM = 0
      M5A = L5
C
C     LOOPS BACK TO 2500 UNTIL MATOM=N5
2500  CONTINUE
C
C----- FIX THE RADII FOR 1-3 CONTACTS
      AC = D13
      AO = D13
      AP = D13S
C
C----- RESET THE CONTACT ATOM AND FUNCTION VECTOR ADDRESSES
      M5=L5
C
C
C----RESET BEGINNING OF DISTANCE STACK TO JE EVERY TIME
       NFL=JE
C
C----END OF LOOP ?
      IF (MATOM  .GE. N5) GOTO 3400
C
C----IS THE CURRENT ATOM CARBON ? IGNORE IF NOT.
      IF (ISTORE(M5A) .NE. ICARB) GOTO 3350
C
      NHYB = 0
      NBONDS = 0
C --  COMPUTE DISTANCE STACK TO A TWO BOND MAXIMUM
      NDIST = KDIST1( N5, JL, JT, 0, TOLER, ITRANS)
C---- JK IS CURRENT NEXT FREE ADDRESS - SAVE AND SET LAST ENTRY
      NFL = JL
      JK = JL - JT
C
C-------- CHECK FOR ERRORS AND ISOLATED ATOMS
      IF (NDIST .LE. 0 ) THEN
        IF (ISSPRT .EQ. 0)
     1  WRITE(NCWU, 3250)  STORE(M5A), NINT(STORE(M5A+1))
        WRITE ( CMON, 3250)  STORE(M5A), NINT(STORE(M5A+1))
        CALL XPRVDU(NCVDU, 1,0)
        GOTO 3350
      ENDIF
C
C
C
C----CALCULATE THE NUMBER OF BONDED ATOMS AND THEIR ADDRESSES IN
C----THE FIRST STACK.
      NBONDS = KBNDED(JE, JK, JT, IADD, DIST)
C
C-------- CHECK FOR ERRORS AND ISOLATED ATOMS
C----- GET THE ATOM ID
              WRITE (CTEMP,'(A4,''('',I4,'')'')') STORE(M5A),
     1                                    NINT(STORE(M5A+1))
              CALL XCRAS(CTEMP, LTEMP)
      IF (NBONDS  .GT. 4) THEN
        IF (ISSPRT .EQ. 0) WRITE(NCWU, 3200) NBONDS, CTEMP(1:LTEMP)
        WRITE(NCAWU, 3200) NBONDS, CTEMP(1:LTEMP)
        WRITE ( CMON, 3200) NBONDS, CTEMP(1:LTEMP)
        CALL XPRVDU(NCVDU, 1,0)
3200    FORMAT( 10X, I3, ' valent Carbon - ', A)
      ELSE IF (NBONDS .LE. 0) THEN
        IF (ISSPRT .EQ. 0) WRITE(NCWU, 3250)  CTEMP(1:LTEMP)
        WRITE(NCAWU, 3250)  CTEMP(1:LTEMP)
        WRITE ( CMON, 3250)  CTEMP(1:LTEMP)
        CALL XPRVDU(NCVDU, 1,0)
3250    FORMAT( 10X,  ' Non-bonded Carbon - ', A)
      ELSE
C----   WE HAVE CONTACTS.
C       CALCULATE THE HYBRIDISATION BASED ON SHORTEST BOND
        NHYB=KHYB(IADD(1),  DIST, DELTA)
        MHYB = 0
        DELTA2 = 0.
        IF (NBONDS .GE. 2) THEN
C         GET THE NEXT SHORTEST BOND
          MHYB=KHYB(IADD(2),  STORE(IADD(2)+10), DELTA2)
        ENDIF
C-----  LOOK FOR SECONDARY CONTACTS
        ISEC= KSEC (AOTEMP, APTEMP, NDTEMP, IADD, NBONDS, IZ)
        LHYB = 0
        DELTAA = 100.
        DEV = 100.
        IF ( NBONDS .EQ. 3 ) THEN
C         1 ON SP3 OR 0 ON SP2
C         COMPUTE A PLANE
          CALL XMOVE(STORE(M5A+4), STORE(IMOLAX), 3)
          CALL XMOVE(STORE(IADD(1)+7), STORE(IMOLAX+4), 3)
          CALL XMOVE(STORE(IADD(2)+7), STORE(IMOLAX+8), 3)
          CALL XMOVE(STORE(IADD(3)+7), STORE(IMOLAX+12), 3)
          STORE(IMOLAX+3) = 1.
          STORE(IMOLAX+7) = 1.
          STORE(IMOLAX+11) = 1.
          STORE(IMOLAX+15) = 1.
          I = KMOLAX(STORE(IMOLAX), 4, 4, STORE(IMOLAX+16),
     1    STORE(IMOLAX+19), STORE(IMOLAX+2), STORE(IMOLAX+31),
     2    STORE(IMOLAX+40))
          DEV = STORE(IMOLAX+21)
          IF (DEV .GE. 0.1) THEN
                LHYB = 3
          ELSE
                LHYB = 2
          ENDIF
        ELSE IF ( NBONDS .EQ. 2 ) THEN
C         2 ON SP3 , 1 ON SP2 OR 0 ON SP1
          SOP = XDSTN2 (STORE(IADD(1)+7), STORE(IADD(2)+7))
          SOP = SQRT (SOP)
          ANG = XANG (STORE(IADD(1)+10), STORE(IADD(2)+10), SOP)
          IF (ANG .GT. 160.) THEN
                LHYB = 1
                DELTAA = 180. - ANG
          ELSE
                IF (DELTA .GE. .05) THEN
                  LHYB = NHYB
                ELSE
                  LHYB = MIN(NHYB,MHYB)
                ENDIF
          ENDIF
        ELSE IF (NBONDS .EQ. 1 ) THEN
C         3 ON SP3 , 2 ON SP2 OR 1 ON SP1
          IF (DELTA .GE. .05) THEN
            LHYB = NHYB
          ELSE
            SOP = XDSTN2 (STORE(IADD(1)+7), STORE(ISEC+7))
            SOP = SQRT (SOP)
            ANG = XANG (STORE(IADD(1)+10), SOP, STORE(ISEC+10) )
            IF (ANG .GT. 160.) THEN
                LHYB = 1
                DELTAA = 180. - ANG
            ELSE IF (ANG .GT. 113) THEN
                LHYB = 2
                DELTAA = 113. - ANG
            ELSE
                DELTAA = 109. - ANG
                LHYB = 3
            ENDIF
          ENDIF
        ENDIF
        IF (LHYB .NE. NHYB) THEN
            IF (NHYB .NE. 0) THEN
              WRITE ( CMON, 3259) CTEMP(1:LTEMP)
     1        ,NHYB, LHYB, NBONDS, LHYB
              CALL XPRVDU(NCVDU, 1,0)
              WRITE(NCAWU, '(A)') CMON(1)(:)
              WRITE(NCAWU,3258) CTEMP(1:LTEMP), NHYB,DELTA,
     1        MHYB,DELTA2, DEV, DELTAA
              IF (ISSPRT .EQ. 0) THEN
                  WRITE(NCWU, '(A)') CMON(1)(:)
                  WRITE(NCWU,3258) CTEMP(1:LTEMP), NHYB,DELTA,
     1            MHYB,DELTA2, DEV, DELTAA
              ENDIF
            ENDIF
3258    FORMAT (A,1X, 'sp',I1, ' delta ',F6.2,
     1  'sp',I1, ' delta', F6.2, ' planarity ',F7.2,
     2  ' angle delta ',F7.2)
3259    FORMAT
     1  (A,' hybridisation uncertain (', I1,'/',I1,')',
     2   I3, ' Bonds,',
     3  ' sp',I1,' used')
          NHYB = LHYB
        ENDIF
      ENDIF
C
      IF (NHYB .GT. 0) THEN
C----   WRITE COMMAND TO FILE.
        CALL
     1  HPLACE(NBONDS,NHYB,M5A,IADD,AOTEMP,APTEMP,NDTEMP,JACT,ISEC)
      ELSE
        IF (ISSPRT .EQ. 0) WRITE(NCWU, 3260)  CTEMP(1:LTEMP)
        WRITE(NCAWU, 3260)  CTEMP(1:LTEMP)
        WRITE ( CMON, 3260) CTEMP(1:LTEMP)
        CALL XPRVDU(NCVDU, 1,0)
3260    FORMAT( ' Unassignable carbon - ', A )
      ENDIF
C
C--UPDATE FOR THE NEXT TARGET ATOM.
3350  CONTINUE
      M5A = M5A + MD5
      MATOM = MATOM + 1
      GOTO 2500
C
C
3400  CONTINUE
3720  CONTINUE
C
      IF (JACT .LE. 2) THEN
        CSRQ = ' '
        WRITE (CSRQ,'(A3)')'END'
        CALL XISRC (CSRQ)
      ENDIF
      IF (JACT .GE. 2) THEN
        WRITE (NCFPU2,'(A3)')'END'
      ENDIF
C
C -- END ROUTINE
      GO TO 9000
C
C
C--ERROR EXIT FOR THESE ROUTINES
4200  CONTINUE
      CALL XPCA(ISTORE(MD+4))
      LEF=LEF+1
4250  CONTINUE
      GOTO 1100
C
C -- FINAL MESSAGES
9000  CONTINUE
C
C----- CLOSE THE RIDING RESTRAINT FILE
      CALL XRDOPN ( 6 , JFRN(1) ,
     1 CPATH(1:LPATH)// 'RIDEH.DAT', LPATH+9)
      IF (JACT .GE. 2) CALL XRDOPN ( 6 , KFRN(1) ,
     1 CPATH2(1:LPATH2)// 'PERH.DAT', LPATH+8)
C
      CALL XOPMSG ( IOPHYD , IOPEND , 410 )
C
      CALL XTIME2(2)
      CALL XCSAE
      CALL XRSL
      RETURN
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPHYD , IOPABN , 0 )
      GO TO 3720
9910  CONTINUE
C
C -- INPUT ERRORS
      CALL XOPMSG ( IOPHYD, IOPCMI, 0 )
      GO TO 9900
9920  CONTINUE
C -- INSUFFICIENT SPACE
      CALL XOPMSG ( IOPHYD , IOPSPC , 0 )
      GO TO 9900
C
      END
CODE FOR XANG
      FUNCTION XANG (A,B,C)
C----- FIND THE ANGLE GAMMA, OPPOSITE SIDE C
\XCONST
\XUNITS
      COSG = (A*A + B*B - C*C) / (2.*A*B)
      IF (COSG .GE. 1.0 ) THEN
            XANG = 0.0
      ELSE IF (COSG .LE. -1.0) THEN
            XANG = 180.0
      ELSE
            XANG = RTD* ACOS (COSG)
      ENDIF
      RETURN
      END
C
C
C
CODE FOR KBNDED
      FUNCTION KBNDED (JE, JK, JT, IADD, DIST)
C
      DIMENSION IADD(4)
C
\ISTORE
\STORE
\XUNITS
\XSSVAL
\QSTORE
      DATA RADIUS/2.0/
C
C KBNDED - THE NUMBER OF ATOMS WITHIN 'RADIUS' ANGSTROM OF THE TARGET
C
C IADD   - AN ARRAY STORING THE STACK ADDRESSES OF THE BOUND ATOMS.
C          SORTED BY INCREASING LENGTH
C
C DIST   - THE SHORTEST DISTANCE
C
C RADIUS - UPPER LIMIT ON ATOMIC SEPARATION - CURRENTLY SET TO 2.0 A
C
      CALL XFILL(-10000, IADD, 4)
      NBONDS=0
      DO 1000 I=JE,JK,JT
       DIST = STORE(I+10)
       IF (DIST .LT. RADIUS) THEN
         IF (NBONDS .EQ. 0) THEN
            NBONDS = 1
            IADD(1) = I
         ELSE
            DO 300 J = 1, NBONDS
              IF (DIST .LT. STORE(IADD(J)+10)) THEN
                IF (J .LE. 3) THEN
                  DO 200 K = MIN(3,NBONDS), J, -1
                    IADD(K+1) = IADD(K)
200               CONTINUE
                ENDIF
                IADD(J) = I
                NBONDS = MIN(NBONDS+1, 4)
                GOTO 320
              ENDIF
300         CONTINUE
              NBONDS = MIN(NBONDS+1,4)
              IADD(NBONDS) = I
320         CONTINUE
         ENDIF
       ENDIF
1000  CONTINUE
      IF (NBONDS .GT. 0) DIST = STORE(IADD(1)+10)
      KBNDED = NBONDS
      RETURN
      END
C
C
CODE FOR KHYB
      FUNCTION KHYB (IADD, DIST, DELTA)
C
C IADD - ADDRESS IN DISTANCE STACK OF ATOM TO BE TESTED
C DIST - BONDLENGTH TO TESTED ATOM
C DELTA - SMALLEST DIFFERENCE FROM THRESHOLD
C
C RETURNS A VALUE OF THE HYBRIDISATION STATE OF THE TARGET
C ATOM BY COMPARING DIST  WITH THRESHOLD VALUES FOR THE
C CONTACT ATOM TYPE, MMIN,(= ISTORE(ISTORE(IADD))).
C NHYB = 0 IF IT CANNOT BE ASSIGNED BY THE RULES HERE, I.E. IF
C THE SHORTEST BOUND ATOM TYPE IS NOT RECOGNISED.
C
      PARAMETER (NTYPE=7)
      CHARACTER *(NTYPE*4) CATOMS, CTARG*4
      DIMENSION THRESH (2,NTYPE)
\ISTORE
\STORE
\XUNITS
\XSSVAL
\QSTORE
C
C----- KNOWN ATOM SYMBOL LIST
      DATA CATOMS
     1   / 'C   N   O   F   SI  P   CL  '/
C
C THRESHOLD VALUES FOR BOND LENGTHS FOR COMPARISON WITH SHORTEST BOND.
C       3/2, 2/1 THRESHOLD PAIRS
      DATA THRESH
     2   / 1.45, 1.23, 1.41, 1.22, 1.35, 1.17, 1.34, 1.15,
     3     1.82, 1.60, 1.60, 1.40, 1.50, 1.40 /
C
      KHYB = 0
      DELTA= 1000.
      MMIN=ISTORE(ISTORE(IADD))
      WRITE(CTARG,'(A4)') MMIN
      I = INDEX (CATOMS, CTARG)
      IF (I .LE. 0) RETURN
C
      I = (I+3)/4
      D1 = DIST - THRESH(1,I)
      D2 = DIST - THRESH(2,I)
      IF (ABS(D1) .LT. ABS(D2)) THEN
C----- SP2/SP3 INTERFACE
            IF (D1 .GT. 0.) THEN
                  KHYB = 3
            ELSE
                  KHYB = 2
            ENDIF
            DELTA = D1
      ELSE
C----- SP1/SP2 INTERFACE
            IF (D2 .GT. 0.) THEN
                  KHYB = 2
            ELSE
                  KHYB = 1
            ENDIF
            DELTA = D2
      ENDIF
      RETURN
      END
C
C
CODE FOR HPLACE
      SUBROUTINE HPLACE
     1 (NBONDS,NHYB,M5A,IADD,AOTEMP,APTEMP,NDTEMP,JACT,ISEC)
C
C USING NHYB AND NBONDS, WRITE THE APPROPRIATE HYDROGEN PLACING
C COMMAND USING ONE OF THE WRITNM ROUTINES.
C
      DIMENSION IADD(4)
\ISTORE
\STORE
\QSTORE
C
C      NO OF HYDROGENS REQUIRED = N
       N=NHYB+1-NBONDS
C
      IF (NHYB .EQ. 3) THEN
C SP3
             IF (NBONDS .EQ. 1) THEN
C
C
                IF (ISEC .GT. 0) THEN
C
                   CALL XWRT03(M5A,IADD(1),ISEC,1,'33', JACT)
                ELSE
                   CALL XERWH (M5A,'33')
                ENDIF
C
             ELSE IF (NBONDS .EQ. 2) THEN
                CALL XWRT03(M5A,IADD(1),IADD(2),1,'23', JACT)
             ELSE IF (NBONDS .EQ. 3) THEN
                CALL XWRT13(IADD,M5A, JACT)
C
             ENDIF
C
      ELSE IF (NHYB .EQ. 2) THEN
C SP2
               IF (NBONDS .EQ. 1) THEN
C
C
                  IF (ISEC .GT. 0) THEN
C
                     CALL XWRT03 (M5A,IADD(1),ISEC,1,'22', JACT)
                  ELSE
                     CALL XERWH (M5A,'22')
                  ENDIF
C
               ELSE IF (NBONDS .EQ. 2) THEN
C
                  CALL XWRT03 (M5A, IADD(1), IADD(2), 1, '12', JACT)
C
               ENDIF
C
      ELSE
C SP1
       IF (NBONDS .EQ. 1) THEN
C
                     CALL XWRT11 (IADD, M5A, JACT)
C
       ENDIF
C
C
      ENDIF
      RETURN
      END
C
C
CODE FOR KSEC
       FUNCTION KSEC(AOTEMP,APTEMP,NDTEMP, IADD, NBONDS, JADD)
C
C RETURNS THE ADDRESS IN ISTORE OF A USABLE SECOND CONTACT FOR THE
C TARGET ATOM AT M5.
C
      DIMENSION IADD(4)
C
\ISTORE
\STORE
\XDSTNC
      COMMON /XPROCC/DISTS(4),LN1,LN2,ITYPE,NATOM,ILIST,ISEQ,D3,AMULT,
     2 IACT, ISYMOD, ITRANS
      COMMON /XDISTW/A,BB,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
\XWORKA
\XLST05
\XLST29
\XUNITS
\XSSVAL
C
\QSTORE
C
C      EQUIVALENCE (TOLER,DISTS(4))
      DATA TOLER /0.6/, ITRANS / 0 /
C
      DATA IHYD / 'H   ' /
C----- USE THE SHORTEST CONTACT FROM THE FIRST DISTANCE STACK
C      AS A PIVOT FOR A NEW STACK. SEARCH THIS NEW STACK FOR
C      AN ATOM IN COMMON WITH THE FIRST. CHOOSE A NON-H ATOM
C      IF POSSIBLE. THIS COMMON ATOM IS 'R2' IN THE H22 OR H33
C      COMMAND.
C
      ISEC = -1000
C----- SAVE OLD TARGET
      M5B=M5A
C----- ONLY LOOK FOR SHORT CONTACTS
      AO = AOTEMP
      AC = AOTEMP
      AP = APTEMP
C
C----- SET UP A LOOP TO TRY ALL THE SHORT CONTACTS IN IADD
      DO 1650 I = 1, NBONDS
      JADD = I
C----- THE ADDRESS OF THE NEW PIVOT IS IN ISTORE(IADD(I))
      M5S = IADD(I)
      M5A = ISTORE(M5S)
C
C CONSIDER ONLY THOSE ATOMS ON THIS STACK WITHIN 1.9 ANGSTROM
C WHEN DECIDING A PIVOT FOR THE SECOND STACK.
C
      IF (STORE(M5S+10) .LT. 1.9) THEN
C
C----- ENSURE THAT NFL POINTS TO THE END OF THE OLD DISTANCE STACK
         NFL=JL
C        THE START OF THE NEW STACK
         JJE=JL
         M5=L5
C
         NDTEMP = KDIST1( N5, JJJE, JT, 0, TOLER, ITRANS)
         IF (NDTEMP .LT. 2)    GOTO 1630
C
C
C SCAN BOTH STACKS LOOKING FOR A 1-3 CONTACT FOR THE TARGET ATOM,
C      AND A 1-2 CONTACT FOR THE AUXILLIARY ATOM
C
         DO 1600 IJE=JE, JK, JT
           DO 1590 IJJE=JJE,JJJE-JT,JT
C----- CHECK THE ATOM ADDRESSES IN LIST 5 AGREE (IE SAME ATOM),
C      AND THAT THE NEW ATOM IS A 1 - 3 CONTACT WITH THE TARGET
C      AND A 1 - 2 CONTACT WITH THE INTERMEDIATE.
             IF (  (ISTORE(IJJE) .EQ. ISTORE(IJE)) .AND.
     1             (STORE(IJE +10) .GT. 1.9)     .AND.
     1             (STORE(IJJE+10) .LE. 1.9)   ) THEN
                ISEC = IJE
                IF (ISTORE(ISTORE(ISEC)) .NE. IHYD) GOTO 1700
             ENDIF
C
1590        CONTINUE
1600       CONTINUE
1630      CONTINUE
      ENDIF
C
1650  CONTINUE
C
1700  CONTINUE
C     RESTORE OLD TARGET
      M5A = M5B
      KSEC = ISEC
      RETURN
      END
C
C
CODE FOR XERWH
      SUBROUTINE XERWH (M5A,CTYPE)
C
C----- WRITE WARNINGS IF CRYSTALS CANNOT PLACE HYDROGENS
C
      CHARACTER *16 CWRITE
      CHARACTER *2 CTYPE
\ISTORE
\STORE
\XUNITS
\XSSVAL
\QSTORE
\XIOBUF
C
       WRITE(CWRITE(1:4), '(A4)') STORE(M5A)
       NCCTRM=KCCTRM(1,CWRITE(1:4),ISTART,IEND)
       CWRITE(IEND+1:IEND+1)='('
       IEND=IEND+1
C
       CALL CIAPP(CWRITE,INT(STORE(M5A+1)),IEND)
C
       CWRITE(IEND:IEND+1)=') '
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,100) CWRITE(1:IEND)
      ENDIF
      WRITE(NCAWU,100) CWRITE(1:IEND)
      WRITE ( CMON, 100) CWRITE(1:IEND)
      CALL XPRVDU(NCVDU, 1,0)
100   FORMAT(10X, ' CRYSTALS cannot place Hydrogen atoms on ',A)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,200) CTYPE
      ENDIF
      WRITE(NCAWU,200) CTYPE
      WRITE ( CMON, 200) CTYPE
      CALL XPRVDU(NCVDU, 1,0)
200   FORMAT(10X,' - no suitable third atom for H',A2,' card.')
      RETURN
      END
C
C
CODE FOR XWRT11
       SUBROUTINE XWRT11 (IADD,M5A, JACT)
C
C WRITES A H11 COMMAND
C
      CHARACTER CSRQ *80
      CHARACTER*27 CATOM
      CHARACTER*80 CWRITE
      CHARACTER*6 CFORM
C
      DIMENSION IADD(4)
C
\ISTORE
\STORE
\XUNITS
\XSSVAL
\QSTORE
C
       CWRITE=' '
       CSRQ = ' '
C
C WRITE SERIAL NUMBER (= PIVOT ATOM LABEL * 10)
C
      ISER = NINT (STORE (M5A+1) * 10.) +1
      IF (JACT .LE. 2) THEN
       WRITE (CSRQ,'(''SERIAL '', I7)') ISER
       CALL XISRC (CSRQ)
      ENDIF
      IF (JACT .GE. 2) THEN
       WRITE (NCFPU2,'(''SERIAL '', I7)') ISER
      ENDIF
C
C START WRITING COMMAND TO CWRITE
C
       CWRITE(1:4)='H11 '
       WRITE(CWRITE(5:8), '(A4)') STORE(M5A)
       NCCTRM=KCCTRM(1,CWRITE(5:8),ISTART,ITEMP)
C
       IF (NCCTRM .LT. 0) THEN
            CALL XIVHT('H11')
            RETURN
       ENDIF
C
       IEND=ITEMP+4
       CWRITE(IEND+1:IEND+1)='('
       IEND=IEND+1
C
       CALL CIAPP(CWRITE,NINT(STORE(M5A+1)),IEND)
C
       CWRITE(IEND:IEND+1)=') '
       IEND=IEND+1
C
C WRITE ATTACHED ATOM SPECIFICATIONS TO CATOM(1:LCATOM)
C
       CALL CATSTR(STORE(ISTORE(IADD(1))),
     +             STORE(ISTORE(IADD(1))+1),
     +             ISTORE(IADD(1)+2), ISTORE(IADD(1)+3),
     +             ISTORE(IADD(1)+4), ISTORE(IADD(1)+5),
     +             ISTORE(IADD(1)+6), CATOM, LCATOM)
C
       LCWRIT=IEND+LCATOM+1
C
C ADD THESE ATOM SPECS TO THE COMMAND IN CWRITE
C
       CWRITE(IEND+1:LCWRIT)=' '//CATOM(1:LCATOM)
C
C WRITE A FORMAT SPECIFIER FOR CWRITE
C
       CFORM='(A    '
       NEND=2
       CALL CIAPP(CFORM,LCWRIT,NEND)
       CFORM(NEND:NEND)=')'
C
C WRITE CWRITE TO SRQ
C
      IF (JACT .LE. 2) THEN
       CSRQ = ' '
       WRITE(CSRQ,FMT=CFORM) CWRITE(1:LCWRIT)
       CALL XISRC (CSRQ)
      ENDIF
      IF (JACT .GE. 2) THEN
       WRITE(NCFPU2,FMT=CFORM) CWRITE(1:LCWRIT)
      ENDIF
C
C----- WRITE A RIDE INSTRUCTION
      WRITE(CWRITE,1000) STORE(M5A), NINT(STORE(M5A+1)), ISER
1000  FORMAT('RIDE ', A4, '(',I4, ',X''S) H(',I4,',X''S)')
      CALL XCREMS (CWRITE, CWRITE, LCWRIT)
      WRITE(NCFPU1,'(A)') CWRITE(1:LCWRIT)
       RETURN
       END
C
C
CODE FOR XWRT13
       SUBROUTINE XWRT13 (IADD,M5A, JACT)
C
C WRITE AN H13 COMMAND
C     M5A    - PIVOT ATOM
C     IADD   - INTEGER ARRAY OF CONTACTS
C     CATOM  - CHARACTER ARRAY HOLDING THREE SINGLE ATOM SPECS.
C     LCATOM - INTEGER ARRAY HOLDING CORRESPONDING LENGTHS
C     CFORM  - FORMAT SPECIFIER
C     CWRITE - COMMAND
C     LCWRIT - LENGTH
C
      CHARACTER CSRQ *80
      CHARACTER*27 CATOM(3)
      CHARACTER*80 CWRITE
      CHARACTER*6 CFORM
C
      DIMENSION IADD(4), LCATOM(3)
C
\ISTORE
\STORE
\XUNITS
\XSSVAL
\QSTORE
C
       CWRITE =' '
       CSRQ = ' '
C
C WRITE SERIAL NUMBER (= PIVOT ATOM LABEL * 10)
C
      ISER = NINT (STORE (M5A+1) * 10.) +1
      IF (JACT .LE. 2) THEN
       WRITE (CSRQ,'(''SERIAL '', I7)') ISER
       CALL XISRC (CSRQ)
      ENDIF
      IF (JACT .GE. 2) THEN
       WRITE (NCFPU2,'(''SERIAL '', I7)') ISER
      ENDIF
C
C WRITE ATOM SPECIFICATIONS TO CATOM(N)(1:LCATOM(N)) (N = 1 TO 3)
C
       CALL CATSTR(STORE(ISTORE(IADD(1))),
     +             STORE(ISTORE(IADD(1))+1),
     +             ISTORE(IADD(1)+2), ISTORE(IADD(1)+3),
     +             ISTORE(IADD(1)+4), ISTORE(IADD(1)+5),
     +             ISTORE(IADD(1)+6), CATOM(1),
     +             LCATOM(1))
C
       CALL CATSTR(STORE(ISTORE(IADD(2))),
     +             STORE(ISTORE(IADD(2))+1),
     +             ISTORE(IADD(2)+2), ISTORE(IADD(2)+3),
     +             ISTORE(IADD(2)+4), ISTORE(IADD(2)+5),
     +             ISTORE(IADD(2)+6), CATOM(2),
     +             LCATOM(2))
C
       CALL CATSTR(STORE(ISTORE(IADD(3))),
     +             STORE(ISTORE(IADD(3))+1),
     +             ISTORE(IADD(3)+2), ISTORE(IADD(3)+3),
     +             ISTORE(IADD(3)+4), ISTORE(IADD(3)+5),
     +             ISTORE(IADD(3)+6), CATOM(3),
     +             LCATOM(3))
C
C WRITE PIVOT ATOM SPECS TO CWRITE
C
       CWRITE(1:4)='H13 '
       WRITE(CWRITE(5:8), '(A4)') STORE(M5A)
       NCCTRM = KCCTRM(1,CWRITE(5:8), ISTART, ITEMP)
C
       IF (NCCTRM .LT. 0) THEN
            CALL XIVHT('H13')
            RETURN
       ENDIF
C
       IEND=4+ITEMP
       CWRITE(IEND+1:IEND+1)='('
       IEND=IEND+1
       CALL CIAPP(CWRITE,INT(STORE(M5A+1)),IEND)
       LCWRIT=IEND+LCATOM(1)+LCATOM(2)+LCATOM(3)+4
C
C WRITE ATTACHED ATOM SPECS TO CWRITE
C
       CWRITE(IEND:LCWRIT)=') '//CATOM(1)(1:LCATOM(1))//' '
     +//CATOM(2)(1:LCATOM(2))//' '//CATOM(3)(1:LCATOM(3))
C
C WRITE A FORMAT SPECIFIER FOR CWRITE
C
       CFORM='(A    '
       NEND=2
       CALL CIAPP(CFORM,LCWRIT,NEND)
       CFORM(NEND:NEND)=')'
C
C WRITE CWRITE TO SRQ
C
      IF (JACT .LE. 2) THEN
       CSRQ = ' '
       WRITE(CSRQ,FMT=CFORM) CWRITE(1:LCWRIT)
       CALL XISRC (CSRQ)
      ENDIF
      IF (JACT .GE. 2) THEN
       WRITE (NCFPU2,FMT=CFORM) CWRITE(1:LCWRIT)
      ENDIF
C
C----- WRITE A RIDE INSTRUCTION
      WRITE(CWRITE,1000) STORE(M5A), NINT(STORE(M5A+1)), ISER
1000  FORMAT('RIDE ', A4, '(',I4, ',X''S) H(',I4,',X''S)')
      CALL XCREMS (CWRITE, CWRITE, LCWRIT)
      WRITE(NCFPU1,'(A)') CWRITE(1:LCWRIT)
       RETURN
       END
C
C
C
CODE FOR XWRT03
       SUBROUTINE XWRT03 (IATOM1, IATOM2, IATOM3, ITARG, CTYPE, JACT)
C
C------ WRITE AN INSTRUCTION INVOLVING 3 ATOMS, AT ADDRESSES
C       IATOM1, IATOM2, IATOM3
C
C     ITARG  - THE POSITION IN THE COMMAND (1 OR 2) OF THE TARGET ATOM
C     CTYPE  - TYPE OF H PLACING COMMAND REQUIRED (E.G. 22, 23,)
C     IATOM1 - ADDRESS IN LIST 5 OF THE PIVOT ATOM - THIS ATOM MUST
C               COME FIRST.
C     IATOM2 - ADDRESS IN STACK OF SECOND ATOM
C     IATOM3 - ADDRESS IN STACK OF THIRD ATOM - BOTH OF THESE ARE
C               ADDRESSES IN THE STACK GENERATED BY KDIST.
C
C     ISI    - 1    DEFAULT SYMMETRY FLAGS USED AS
C     NPLII  - 1      ARGUMENTS TO CATSTR FOR THE
C     ITXI   - 0          PIVOT ATOM (ATOM 1)
C     ITYI   - 0
C     ITZI   - 0
C     CATOM  - CHARACTER ARRAY HOLDING THREE SINGLE ATOM SPECS.
C     LCATOM - INTEGER ARRAY HOLDING CORRESPONDING LENGTHS
C     CFORM  - FORMAT SPECIFIER
C     CWRITE - COMMAND
C     LCWRIT - LENGTH
C
      CHARACTER CSRQ *80
      CHARACTER*27 CATOM(3)
      CHARACTER*80 CWRITE
      CHARACTER*6 CFORM
      CHARACTER*2 CTYPE
C
      DIMENSION LCATOM(3)
C
\ISTORE
\STORE
\XUNITS
\XSSVAL
\QSTORE
      ISI = 1
      NPLII = 1
      ITXI = 0
      ITYI = 0
      ITZI = 0
C
       CWRITE=' '
       CSRQ = ' '
C
C WRITE SERIAL NUMBER (= PIVOT ATOM LABEL * 10)
C
      ISER = NINT( STORE(IATOM1+1) * 10.) +1
      IF (JACT .LE. 2) THEN
       WRITE (CSRQ,'(''SERIAL '', I7)') ISER
       CALL XISRC (CSRQ)
      ENDIF
      IF (JACT .GE. 2) THEN
       WRITE (NCFPU2,'(''SERIAL '', I7)') ISER
      ENDIF
C
C WRITE ATOM SPECIFICATIONS TO CATOM(N)(1:LCATOM(N)), N = 1 TO 3
C
       CALL CATSTR (STORE(IATOM1),
     +              STORE(IATOM1+1), ISI, NPLII,
     +              ITXI, ITYI, ITZI, CATOM(1), LCATOM(1))
C
       CALL CATSTR(STORE(ISTORE(IATOM2)),
     +             STORE(ISTORE(IATOM2)+1), ISTORE(IATOM2+2),
     +             ISTORE(IATOM2+3), ISTORE(IATOM2+4),
     +             ISTORE(IATOM2+5), ISTORE(IATOM2+6), CATOM(2),
     +             LCATOM(2))
C
       CALL CATSTR(STORE(ISTORE(IATOM3)),
     +             STORE(ISTORE(IATOM3)+1), ISTORE(IATOM3+2),
     +             ISTORE(IATOM3+3), ISTORE(IATOM3+4),
     +             ISTORE(IATOM3+5), ISTORE(IATOM3+6), CATOM(3),
     +             LCATOM(3))
C
C WRITE COMMAND TO CWRITE IN ORDER ACCORDING TO ITARG
C
       IF (ITARG .EQ. 1) THEN
       CWRITE = 'H'//CTYPE//' '//CATOM(1)(1:LCATOM(1))
     +//' '//CATOM(2)(1:LCATOM(2))//' '//CATOM(3)(1:LCATOM(3))
       ELSE
       CWRITE = 'H'//CTYPE//' '//CATOM(2)(1:LCATOM(2))
     +//' '//CATOM(1)(1:LCATOM(1))//' '//CATOM(3)(1:LCATOM(3))
       END IF
C
       LCWRIT = LCATOM(1) + LCATOM(2) + LCATOM(3) + 7
C
C WRITE A FORMAT SPECIFIER FOR CWRITE
C
       CFORM='(A    '
       NEND=2
       CALL CIAPP(CFORM,LCWRIT,NEND)
       CFORM(NEND:NEND)=')'
C
C WRITE COMMAND TO SRQ
C
      IF (JACT .LE. 2) THEN
       CSRQ = ' '
       WRITE(CSRQ,FMT=CFORM) CWRITE(1:LCWRIT)
       CALL XISRC (CSRQ)
      ENDIF
      IF (JACT .GE. 2) THEN
       WRITE (NCFPU2,FMT=CFORM) CWRITE(1:LCWRIT)
      ENDIF
C
C----- WRITE A RIDE INSTRUCTION
      IF (CTYPE(1:1) .EQ. '1') THEN
      WRITE(CWRITE,1000) STORE(IATOM1), NINT(STORE(IATOM1+1)),
     1  ISER
      ELSE IF (CTYPE(1:1) .EQ. '2') THEN
      WRITE(CWRITE,1000) STORE(IATOM1), NINT(STORE(IATOM1+1)),
     1  ISER,' ',ISER+1
      ELSE
      WRITE(CWRITE,1000) STORE(IATOM1), NINT(STORE(IATOM1+1)),
     1  ISER,' ',ISER+1,' ',ISER+2
      ENDIF
1000  FORMAT('RIDE ', A4,'(', I4, ',X''S)',
     1 ' H(',I4,',X''S)', A,'H(',I4,',X''S)',
     2  A,'H(',I4,',X''S)')
      CALL XCREMS (CWRITE, CWRITE, LCWRIT)
      WRITE(NCFPU1,'(A)') CWRITE(1:LCWRIT)
       RETURN
       END
C
C
C
CODE FOR SPHEN
      SUBROUTINE SPHEN
C--FORM THE HYDROGENS OF A PHENYL GROUP
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      JB=JA
      JE=JD
      CALL SVET(STORE(JE),STORE(JF))
      JF=JF+3
      LADDU = JB-MD5A
      DO 1000 I=1,5
      CALL SH12S(1, LADDU)
      LADDU = LADDU - MD5A
      JE=JE+3
1000  CONTINUE
      RETURN
      END
C
CODE FOR SH12
      SUBROUTINE SH12
C
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      JB=JA
      JE=JD
      CALL SH12S(2, JB)
      RETURN
      END
C
CODE FOR SH33
      SUBROUTINE SH33
C
\XWORKA
C
      JR=0
      CALL SH3322
      RETURN
      END
C
CODE FOR SH23
      SUBROUTINE SH23
C
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
\XCONST
\XIOBUF
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      JB=JA
      JE=JD
      JG=JF+9
      JH=JG+9
      JI=JH+9
      JO=JI+9
      JP=JO+3
      JQ=JP+3
      JN=JQ+3
C----- WORKSPACE FOR SWOPPING ATOMS
      ITMP = JN + 9
C----- REORDER ATOMS 1 AND 2 FOR H12 AND H23 DIRECTIVES
       CALL XMOVE (STORE(JE), STORE(ITMP), 3)
       CALL XMOVE (STORE(JE+3), STORE(JE), 3)
       CALL XMOVE (STORE(ITMP), STORE(JE+3), 3)
C--CHECK IF WE SHOULD USE THE T.F. OF THE BONDED ATOM
      IF(JZ)1050,1050,1000
C--USE THE T.F. OF THE BONDED ATOM
1000  CONTINUE
      I = JB
      CALL XEQUIV(0, I, MD5A, JU)
      SV = STORE(I+2)
      SY = STORE(JU) * STORE(JU+4)
1050  CONTINUE
      CALL SETV(STORE(JO),1.0)
      CALL XTRANS(STORE(JE),STORE(JN),3,3)
      I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JP),3)
      IF (I .NE. 0) THEN
C----- EVADE SINGULARITY
       STORE(JN+0) = STORE(JN+0) + ZERO
       STORE(JN+4) = STORE(JN+4) + ZERO
       STORE(JN+8) = STORE(JN+8) + ZERO
       I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JP),3)
      ENDIF
      IF(I)1100,1200,1100
1100  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1150)
      ENDIF
      WRITE(NCAWU,1150)
      WRITE ( CMON, 1150)
      CALL XPRVDU(NCVDU, 1,0)
1150  FORMAT(' Given atoms do not define a unique plane')
      LEF=LEF+1
      JS=0
      RETURN
1200  CONTINUE
      E0=SNOR(STORE(JP))
      CALL SVETC(STORE(JP),STORE(JH),E0)
      CALL SDIFV(STORE(JE+3),STORE(JE),STORE(JP))
      E3=SNOR(STORE(JP))
      CALL SDIFV(STORE(JE+3),STORE(JE+6),STORE(JQ))
      E4=SNOR(STORE(JQ))
      JP1=JP
      JE1=JE+3
      JQ1=JQ
      DO 1250 N=1,3
      E1=STORE(JE1)+STORE(JP1)*SX*E3
      E2=STORE(JE1)+STORE(JQ1)*SX*E4
      STORE(JP1)=(E1+E2)*0.5
      STORE(JQ1)=STORE(JE1)*2.0-STORE(JP1)
      JP1=JP1+1
      JE1=JE1+1
      JQ1=JQ1+1
1250  CONTINUE
      CALL SDIFV(STORE(JE+3),STORE(JQ),STORE(JN))
      EE=SNOR(STORE(JN))
      JQ1=JQ
      JE1=JE+3
      JN1=JN
      DO 1300 N=1,3
      STORE(JQ1)=STORE(JE1)+STORE(JN1)*SX*EE*0.57738
      JQ1=JQ1+1
      JE1=JE1+1
      JN1=JN1+1
1300  CONTINUE
      STORE(JO)=0.0
      CALL SVET(STORE(JE+3),STORE(JH+3))
      CALL SVET(STORE(JP),STORE(JH+6))
      CALL XTRANS(STORE(JH),STORE(JN),3,3)
      I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JP),3)
      IF(I)1100,1350,1100
1350  CONTINUE
      E1=SNOR(STORE(JP))
      CALL SVETC(STORE(JP),STORE(JH+3),E1)
      STORE(JO+1)=0.0
      CALL SVET(STORE(JQ),STORE(JH+6))
      CALL XTRANS(STORE(JH),STORE(JN),3,3)
      I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JP),3)
      IF(I)1100,1400,1100
1400  CONTINUE
      E2=SNOR(STORE(JP))
      CALL SVETC(STORE(JP),STORE(JH+6),E2)
      DH1=SX*0.81647
      STORE(JO)=E0+DH1
      STORE(JO+1)=E1
      STORE(JO+2)=E2
      CALL XTRANS(STORE(JH),STORE(JN),3,3)
      I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JI),3)
      IF(I)1100,1450,1100
1450  CONTINUE
      STORE(JO)=E0-DH1
      CALL XMLTMM(STORE(JF),STORE(JO),STORE(JI+3),3,3,1)
      DO 1500 N=1,2
      CALL XMLTMM(STORE(L1O2),STORE(JI),STORE(JG),3,3,1)
      CALL SAPR
      JI=JI+3
      JG=JG+3
1500  CONTINUE
      RETURN
      END
C
CODE FOR SH13
      SUBROUTINE SH13
C
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XIOBUF
\XSSVAL
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      JB=JA
      JE=JD
      JG=JF+9
      JH=JG+9
      JI=JH+9
      JO=JI+9
      JP=JO+3
      JQ=JP+3
      JN=JQ+3
C--CHECK IF WE SHOULD USE THE T.F. OF THE BONDED ATOM
      IF(JZ)1050,1050,1000
C--WE USE THE T.F. OF THE BONDED ATOM
1000  CONTINUE
      CALL XEQUIV(0, JB, MD5A, JU)
      SV = STORE(JB+2)
      SY = STORE(JU) * STORE(JU+4)
1050  CONTINUE
C----- NORMALISE THE ATOMIC DISTANCES
      DO 100 I = 0,2
                  STORE(JE+3+I) = STORE(JE+3+I) - STORE(JE+I)
                  STORE(JE+6+I) = STORE(JE+6+I) - STORE(JE+I)
                  STORE(JE+9+I) = STORE(JE+9+I) - STORE(JE+I)
100   CONTINUE
      I = NORM3(STORE(JE+3))
      I = NORM3(STORE(JE+6))
      I = NORM3(STORE(JE+9))
      CALL SETV(STORE(JP),0.0)
C----- FIND THE CENTROID
      DO 210 N = 3,9,3
        DO 200 I = 0,2
          STORE(JP+I) = STORE(JP+I) + STORE(JE+N+I)
200     CONTINUE
210   CONTINUE
      I = NORM3(STORE(JP))
      IF (I .LT. 0) THEN
        IF (ISSPRT .EQ. 0) WRITE(NCWU,1150)
        WRITE(NCAWU,1150)
        WRITE ( CMON, 1150)
        CALL XPRVDU(NCVDU, 1,0)
1150    FORMAT(' The 4 atoms are co-planar')
C----- TRY TO FORM A CROSS PRODUCT
        I = NCROP3(STORE(JE+3), STORE(JE+6), STORE(JP))
        IF (I .LT. 0) THEN
C         TRY ANOTHER PAIR
          I = NCROP3(STORE(JE+3), STORE(JE+9), STORE(JP))
            IF (I .LT. 0) THEN
                  LEF=LEF+1
                  JS=0
                  RETURN
            ENDIF
        ENDIF
      ENDIF
      DO 1200 N=0,2
        STORE(JQ+N)=STORE(JE+n)-STORE(JP+N)*SX
1200  CONTINUE
      CALL XMLTMM(STORE(L1O2),STORE(JQ),STORE(JG),3,3,1)
      CALL SAPR
      RETURN
      END
C
CODE FOR SH22
      SUBROUTINE SH22
C
\XWORKA
C
      JR=1
      CALL SH3322
      RETURN
      END
C
CODE FOR SH11
      SUBROUTINE SH11
C
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      JB=JA
      JE=JD
      JG=JF+9
      JH=JG+9
      JI=JH+9
      JO=JI+9
      JP=JO+3
      JQ=JP+3
      JN=JQ+3
C--CHECK IF WE SHOULD THE T.F. OF THE BONDED ATOM
      IF(JZ)1050,1050,1000
C--WE USE THE T.F. OF THE BONDED ATOM
1000  CONTINUE
      CALL XEQUIV(0, JB, MD5A, JU)
      SY = STORE(JU) * STORE(JU+4)
      SV = STORE(JB+2)
1050  CONTINUE
      CALL SDIFV(STORE(JE+3),STORE(JE),STORE(JN))
      EE=SNOR(STORE(JN))
      JQ1=JQ
      JE1=JE
      JN1=JN
      DO 1100 N=1,3
      STORE(JQ1)=STORE(JE1)+STORE(JN1)*SX*EE
      JQ1=JQ1+1
      JE1=JE1+1
      JN1=JN1+1
1100  CONTINUE
      CALL XMLTMM(STORE(L1O2),STORE(JQ),STORE(JG),3,3,1)
      CALL SAPR
      RETURN
      END
C
CODE FOR SH12S
      SUBROUTINE SH12S(ITYPE, LADDU)
C----- ITYPE = 1 FOR PIVOT IN SECOND PLACE
C              2 FOR PIVOT FIRST
C----- LADDU   ADDRESS IN LIST 5A OF ATOM
C
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      JG=JF+6
C----- WORKSPACE FOR SWOPPING ATOMS
      ITMP = JG + 9
      IF (ITYPE .EQ. 2) THEN
C----- REORDER ATOMS 1 AND 2 FOR H12 AND H23 DIRECTIVES
       CALL XMOVE (STORE(JE), STORE(ITMP), 3)
       CALL XMOVE (STORE(JE+3), STORE(JE), 3)
       CALL XMOVE (STORE(ITMP), STORE(JE+3), 3)
      ENDIF
C--CHECK IF WE SHOULD THE T.F. OF THE BONDED ATOM
      IF(JZ)1050,1050,1000
C--WE USE THE T.F. OF THE BONDED ATOM
1000  CONTINUE
      CALL XEQUIV(0, LADDU, MD5A, JU)
      SY = STORE(JU) * STORE(JU+4)
      SV = STORE(JB+2)
1050  CONTINUE
      CALL SDIFV(STORE(JE+3),STORE(JE),STORE(JF))
      CALL SDIFV(STORE(JE+3),STORE(JE+6),STORE(JF+3))
      D1=SNOR(STORE(JF))
      D2=SNOR(STORE(JF+3))
      JG1=JG
      JF1=JF
      DO 1100 N=1,3
      T1=STORE(JF1)*D1*SX
      T2=STORE(JF1+3)*D2*SX
      STORE(JG1)=(T1+T2)*0.5
      JG1=JG1+1
      JF1=JF1+1
1100  CONTINUE
      D3=SNOR(STORE(JG))
      JG1=JG
      JF1=JF
      JE1=JE+3
      DO 1150 N=1,3
      STORE(JF1)=-STORE(JG1)*D3*SX+STORE(JE1)
      JF1=JF1+1
      JG1=JG1+1
      JE1=JE1+1
1150  CONTINUE
      CALL XMLTMM(STORE(L1O2),STORE(JF),STORE(JG),3,3,1)
      CALL SAPR
C----- RESTORE ATOMS
      IF (ITYPE .EQ. 2) THEN
       CALL XMOVE (STORE(JE), STORE(ITMP), 3)
       CALL XMOVE (STORE(JE+3), STORE(JE), 3)
       CALL XMOVE (STORE(ITMP), STORE(JE+3), 3)
      ENDIF
      RETURN
      END
C
CODE FOR SH3322
      SUBROUTINE SH3322
C
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
\XCONST
\XIOBUF
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      JB=JA
      JE=JD
      NFL=JF
C -- ALLOCATE WORK SPACE
      JG=KSTALL(9)
      JH=KSTALL(9)
      JI=KSTALL(9)
      JO=KSTALL(9)
      JP=KSTALL(3)
      JQ=KSTALL(3)
      JN=KSTALL(3)
C --
C
      IF(JR)1000,1000,1050
1000  CONTINUE
      JR1=3
      DHC=0.33326
      DHS=0.94284
      GOTO 1100
1050  CONTINUE
      JR1=2
      DHC=0.5
      DHS=0.86603
C--CHECK IF WE SHOULD THE T.F. OF THE BONDED ATOM
1100  CONTINUE
      IF(JZ)1200,1200,1150
C--WE SHOULD THE USE THE T.F. OF THE BONDED ATOM
1150  CONTINUE
      CALL XEQUIV(0, JB, MD5A, JU)
      SY = STORE(JU) * STORE(JU+4)
      SV = STORE(JB+2)
1200  CONTINUE
      CALL SETV(STORE(JO),1.0)
      CALL XTRANS(STORE(JE),STORE(JN),3,3)
      I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JP),3)
      IF (I .NE. 0) THEN
C----- EVADE SINGULARITY
       STORE(JN+0) = STORE(JN+0) + ZERO
       STORE(JN+4) = STORE(JN+4) + ZERO
       STORE(JN+8) = STORE(JN+8) + ZERO
       I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JP),3)
      ENDIF
      IF(I)1250,1350,1250
1250  CONTINUE
      CALL XPCLNN(LN)
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1300)
      ENDIF
      WRITE(NCAWU,1300)
      WRITE ( CMON, 1300)
      CALL XPRVDU(NCVDU, 1,0)
1300  FORMAT(' Given atoms do not define a unique plane')
      LEF=LEF+1
      JS=0
      RETURN
1350  CONTINUE
      E0=SNOR(STORE(JP))
      CALL SVETC(STORE(JP),STORE(JH),E0)
      CALL SDIFV(STORE(JE),STORE(JE+3),STORE(JP))
      E3=SNOR(STORE(JP))
      JP1=JP
      JE1=JE
      JQ1=JQ
      DO 1400 N=1,3
      STORE(JQ1)=STORE(JE1)-STORE(JP1)*SX*DHC*E3
      JP1=JP1+1
      JE1=JE1+1
      JQ1=JQ1+1
1400  CONTINUE
      STORE(JO)=0.0
      CALL SVET(STORE(JE),STORE(JH+3))
      CALL SVET(STORE(JE+3),STORE(JH+6))
      CALL XTRANS(STORE(JH),STORE(JN),3,3)
      I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JP),3)
      IF(I)1250,1450,1250
1450  CONTINUE
      E1=SNOR(STORE(JP))
      CALL SVETC(STORE(JP),STORE(JH+3),E1)
      STORE(JO+1)=0.0
      CALL SVET(STORE(JQ),STORE(JH+6))
      CALL XTRANS(STORE(JH),STORE(JN),3,3)
      I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JP),3)
      IF(I)1250,1500,1250
1500  CONTINUE
      E2=SNOR(STORE(JP))
      CALL SVETC(STORE(JP),STORE(JH+6),E2)
      STORE(JO)=E0
      STORE(JO+1)=E1+SX*DHS
      STORE(JO+2)=E2
      CALL XTRANS(STORE(JH),STORE(JN),3,3)
      I=KINV2(3,STORE(JN),STORE(JF),9,1,STORE(JO),STORE(JI),3)
      IF(I)1250,1550,1250
1550  CONTINUE
      STORE(JO+1)=E1-SX*DHS
      CALL XMLTMM(STORE(JF),STORE(JO),STORE(JI+3),3,3,1)
      IF(JR)1600,1600,1850
1600  CONTINUE
      CALL SDIFV(STORE(JE+6),STORE(JI),STORE(JP))
      E3=SNOR(STORE(JP))
      CALL SDIFV(STORE(JE+6),STORE(JI+3),STORE(JP))
      E4=SNOR(STORE(JP))
      IB=0
      IF(E3-E4)1700,1700,1650
1650  CONTINUE
      IB=1
      CALL SVET(STORE(JI+3),STORE(JI))
1700  CONTINUE
      DH1=SX*DHS*0.86603
      STORE(JO)=E0+DH1
      F=1.0
      IF(IB)1800,1800,1750
1750  CONTINUE
      F=-1.0
1800  CONTINUE
      STORE(JO+1)=E1-F*SX*DHS*0.5
      CALL XMLTMM(STORE(JF),STORE(JO),STORE(JI+3),3,3,1)
      STORE(JO)=E0-DH1
      CALL XMLTMM(STORE(JF),STORE(JO),STORE(JI+6),3,3,1)
C
1850  CONTINUE
      DO 1900 N=1,JR1
      CALL XMLTMM(STORE(L1O2),STORE(JI),STORE(JG),3,3,1)
      CALL SAPR
      JI=JI+3
      JG=JG+3
1900  CONTINUE
C -- RELEASE WORK SPACE
      CALL XSTRLL(JG)
      RETURN
      END
C
CODE FOR SAPR
      SUBROUTINE SAPR
C
C
      DIMENSION IH(1)
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
C
      DATA IH(1)/'H   '/
C
      CALL XMOVE(IH(1),STORE(JT),1)
      STORE(JT+1)=SW
      STORE(JT+2)=SV
C      STORE(JT+3)=SY
C-C-C-SET FLAG TO ISOTROPIC
      STORE(JT+3)=1.0
      STORE(JT+4)=STORE(JG)
      STORE(JT+5)=STORE(JG+1)
      STORE(JT+6)=STORE(JG+2)
C-C-C-PUT U[ISO] RESP. UEQUIV ON NEW PLACE
      STORE(JT+7)=SY
C--ZERO THE ANISO T.F.'S
C      CALL XZEROF(STORE(JT+7),6)
      CALL XZEROF(STORE(JT+8),5)
C--PRINT THE RESULT
      JTEMP=JT+6
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1000)(STORE(I),I=JT,JTEMP)
      ENDIF
1000  FORMAT(11X,A4,F10.1,F11.5,4F10.5)
      JT=JT+MD5
C--UPDATE THE REMAINING POINTERS
      JS=JS+1
      SW=SW+1
      RETURN
      END
C
CODE FOR SAPRT
      SUBROUTINE SAPRT
C
C
      CHARACTER*8 CTYPES(8)
C
\XUNITS
\XSSVAL
\XWORKA
C
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW)
C
C
      DATA CTYPES / 'phenyl  ' , 'C(sp3)H1' , 'C(sp3)H1' , 'C(sp3)H3' ,
     2              'C(sp3)H2' , 'C(sp2)H2' , 'C(sp2)H1' , 'C(sp1)H1' /
C
C
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE ( NCWU , 1100 ) CTYPES(JK)
      ENDIF
1100  FORMAT ( // 1X , 'Hydrogen atom(s) calculated for the ' , A ,
     2 ' group :' , // ,
     3 10X , 'Type      Serial    Occ       U[Iso]      ' ,
     4 'X         Y         Z     ' , / )
C
C
      RETURN
      END
C
CODE FOR SAORT
      SUBROUTINE SAORT
C--ORTHOGONALISE THE INPUT ATOMIC COORDINATES
C
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      JB=JA
      DO 1000 I=1,JC
      CALL XMLTTM(STORE(L1O1),STORE(JB+4),STORE(JE),3,3,1)
      JB=JB-MD5A
      JE=JE+3
1000  CONTINUE
      JF=JE
      RETURN
      END
C
CODE FOR SPRV
      SUBROUTINE SPRV(N)
C
\ISTORE
C
\STORE
\XWORKA
\XLISTI
\XLST01
\XLST05
\XUNITS
\XSSVAL
C
\QSTORE
C
      EQUIVALENCE (SY,JY),(SX,JX),(SW,JW),(SV,JV)
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE(NCWU,1000)STORE(N),STORE(N+1),STORE(N+2)
      ENDIF
1000  FORMAT(10X,3F10.5)
      RETURN
      END
C
CODE FOR SVET
      SUBROUTINE SVET(TN,TP)
C--TRANSFER A VECTOR OF ORDER 3
C
C  TP  OUTPUT VECTOR
C  TN  INPUT  VECTOR
C
C--
C
      DIMENSION TN(3),TP(3)
C
      DO 1000 I=1,3
1000  TP(I)=TN(I)
      RETURN
      END
C
CODE FOR SDIFV
      SUBROUTINE SDIFV(TM,TN,TP)
C--COMPUTE THE DIFFERENCE BETWEEN TWO VECTORS
C
C  TP  OUTPUT VECTOR
C  TN  FIRST INPUT VECTOR
C  TM  SECOND INPUT VECTOR  -  SUBTRACT FROM THE FIRST
C
C--
C
      DIMENSION TM(3),TN(3),TP(3)
C
      DO 1000 I=1,3
1000  TP(I)=TN(I)-TM(I)
      RETURN
      END
C
CODE FOR SNOR
      FUNCTION SNOR(TM)
C--COMPUTE THE VECTOR NORMALISATION CONSTANT
C
C--THE RESULT IS GIVEN AS THE RETURN VALUE
C
C  TM  THE VECTOR OF ORDER 3
C
C--
\XCONST
C
      DIMENSION TM(3)
C
      SNOR=SQRT(TM(1)*TM(1)+TM(2)*TM(2)+TM(3)*TM(3))
      IF (SNOR .GE. VALUE) THEN
            SNOR = 1. / SNOR
      ELSE
            SNOR = 1
      END IF
      RETURN
      END
C
CODE FOR SETV
      SUBROUTINE SETV(TN,C)
C--SET A VECTOR
C
C--
C
      DIMENSION TN(3)
C
      DO 1000 I=1,3
1000  TN(I)=C
      RETURN
      END
C
CODE FOR SVETC
      SUBROUTINE SVETC(TN,TP,C)
C
C
      DIMENSION TN(3),TP(3)
C
      DO 1000 I=1,3
1000  TP(I)=TN(I)*C
      RETURN
      END
