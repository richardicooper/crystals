CODE FOR XPRC12
      SUBROUTINE XPRC12
C--FORM THE RELOCATABLE VERSION OF LIST 12
C
C--DURING THE ANALYSIS OF THE OUTPUT OF THE LEXICAL SCANNER,
C  THE FOLLOWING DEFINITIONS ARE OBSER :
C
C  LK      THE LENGTH OF THE STORED ARGUMENT DETAILS IN WORDS.
C  LK1     THE LENGTH OF THE COMPLETE ARGUMENT IN WORDS MINUS ONE.
C  LK2     THE LENGTH OF THE COMPLETE ARGUMENT PRODUCED BY THE LEXICAL
C          SCANNER. THE FORMAT OF THIS IS AS FOLLOWS :
C
C          0  THE ARGUMENT TYPE :
C
C             -1  A VARIABLE, STORED AS 'LK' WORDS OF A4 CHARACTER DATA.
C              0  A NUMBER, WHOSE VALUE IS GIVEN IN WORD 2.
C             >0  AN OPERATOR, WHOSE TYPE IS GIVEN BY THE NUMBER IN THIS
C                 LOCATION. ALLOWED VALUES ARE :
C
C                 1  +
C                 2  -
C                 3  *
C                 4  /
C                 5  **
C                 6  (
C                 7  )
C                 8  ,
C                 9  =
C
C          1  THE CHARACTER NUMBER ON THE CARD WHERE THIS ARGUMENT ENDED
C          2  THE FIRST WORD OF THE ARGUMENT. FOR A NUMBER THIS IS THE
C             VALUE, WHILE FOR THE OTHERS IT IS THE START OF OF 'LK' WOR
C             CONTAINING THE ARGUMENT IN CHARACTER FORM.
C          3  THE SECOND WORD OF THE ARGUMENT.
C
C  NWCARD  THE NUMBER OF WORDS PER CARD WHEN IT IS STORED IN A4 FORMAT.
C  LARG    THE DISC ADDRESS OF THE NEXT DATA RECORD HEADER BLOCK TO
C          BE PROCESSED.
C  MARG    THE DISC ADDRESS OF THE LAST DATA RECORD HEADER BLOCK
C          LOOKED AT BY 'KLDNLR'.
C  MDARG   THE NUMBER OF WORDS PER ARGUMENT, EQUAL TO 'LK2'.
C  NARG    THE NUMBER OF ARGUMENTS CURRENTLY IN CORE, EQUAL TO 'ME'.
C  MA      THE DISC ADDRESS OF THE NEXT DATA RECORD HEADER BLOCK TO
C          BE PROCESSED BY THE PRINT ROUTINE 'XPCLNN'.
C  MB      THE DISC ADDRESS OF THE LAST DATA RECORD HEADER BLOCK
C          PROCESSED BY THE PRINT ROUTINE 'XPCLNN'.
C  MC      THE NUMBER OF CARDS PRINTED MINUS ONE.
C  MD      THE ADDRESS IN CORE OF THE CURRENT SET OF ARGUMENTS.
C  ME      THE NUMBER OF ARGUMENTS ON THE CURRENT CARD.
C  MF      THE ADDRESS IN CORE OF THE CURREN ARGUMENT.
C  MG      THE FUNCTION OF THIS CARD, IN THE RANGE 1 TO N.
C
C  MH      IMPLICIT/EXPLICIT STATUS OF THE CURRENT OPERAND
C  ML      'LINK' FLAG
C      = 0 NOT LINK/RIDE
C      = 1 RIDE
C      = 2 LINK
C      = 3 COMBINE
C
C      EQUIVALENCE EQUIVALENCES ALL THE SPECIFIED PARAMETERS TO A
C      SINGLE L.S. PARAMETER.
C      RIDE ASSIGNS L.S. PARAMETERS TO THE PARAMETERS OF THE FIRST
C      ATOM, AND THEN CORESPONDING PARAMETERS OF SUBSEQUENT ATOMS TO
C      THE SAME LS PARAMETERS.
C      LINK ASSIGNS L.S. PARAMETERS TO ALL THE PARAMTERS OF THE ATOM
C      SPECIFICATION BEFORE THE 'AND', AND THEN CORESPONDING
C      PARAMETERS OF SUBSEQUENT ATOMS TO THE SAME LS PARAMETERS.
C  MO      CURRENT EQUIVALENCE VALUE
C  MP      VALUE OF THE EQUIVALENCE VARIABLE TO BE USED
C  MQ      ADDRESS OF THE PRESENT ATOM INFORMATION
C  MR      NO. OF PARAMETERS FOR THIS ATOM
C  MS      PRESENT PARAMETER POSITION
C  MT      CALCULATED PARAMETER POSITION IN LIST 12
C  MU      USED AS WORK VARIABLES BY XSYN12
C  MV
C  MW      BLOCK/FULL/DIAGONAL STATUS  -  FROM THE FIRST CARD
C  MZ      USED AS 'Z' FOR NUMERIC VALUES
C
C--THIS SUBROUTINE FORMS A RELOCATABLE LIST 12 AND LEAVES IT ON THE
C  DISC AS A LIST 22.
C  ANY PREVIOUS LIST 22 WILL BE OVERWRITTEN IF POSSIBLE.
C
C--EACH ATOM AND OVERALL PARAMETER SET IS ASSOCIATED WITH A 'GROUP' IN
C  LIST 22. A 'GROUP' IS SPLIT INTO ONE OR MORE PARTS, WHICH CONTAIN DET
C  THE PARAMETERS TO WHICH THE GROUP CONTRIBUTES. IF A GROUP
C  CONTAINS NO REFINABLE PARAMETERS, IT CONTAINS NO PARTS. THE
C  FORMATS OF THE VARIOUS ENTITIES IS GIVEN BELOW.
C
C--'GROUP' HEADER BLOCK :
C
C  0  ADDRESS OF THE NEXT GROUP HEADER OR 'NOWT'.
C  1  ADDRESS OF THE FIRST PART FOR THIS GROUP OR 'NOWT'.
C  2  NUMBER OF PARAMETERS TO BE INSERTED FOR EACH 'PART'
C
C     THE LENGTH OF A GROUP HEADER IS PRESET IN 'LH121' AND THEY
C     ARE SET UP BY 'KINE'.
C
C--'PART' HEADER BLOCK :
C
C  0  ADDRESS OF THE NEXT PART FOR THIS GROUP OF 'NOWT'.
C  1  NUMBER OF WORDS PER PARAMETER ENTRY.
C     THIS IS STORED IN NPRT12, AND IS 3 DURING THE INITIAL
C     PROCESSING TO GENERATE LIST 22, BUT IS ALTERED BEFORE LIST 22 IS
C     WRITTEN TO DISC TO REFLECT THE PRESENCE OR ABSENCE OF WEIGHTS FOR
C     THE PART IN QUESTION.
C     INITIALLY, THE THREE WORDS USED ARE:
C      1) BLOCKNUMBER * 32768 + EQUIVALENCENUMBER
C      2) WEIGHT
C      3) PACKED IMPLICIT/EXPLCITIT ETC STATUS
C  2  ADDRESS OF THE FIRST PARAMETER ENTRY FOR THIS PART.
C  3  DURING THE INITIAL PROCESSING, THIS IS THE MAXIMUM PARAMETER (IN T
C     RANGE 1 TO N) INSERTED FOR THIS PART. ON THE DISC AND SUBSEQUENTLY
C     THIS LOCATION POINTS TO THE LAST PARAMETER ENTRY FOR THIS PART.
C  4  THE NUMBER OF THE PARAMETER IN THE FIRST PARAMETER ENTRY POSITION
C     FOR THIS PART.
C
C     THE LENGTH OF A PART HEADER IS PRESET IN 'LH122' AND THEY
C     ARE SET UP BY 'KINEP'.
C
C--THE FORMAT OF A PARAMETER ENTRY IS :
C
C  0  PARAMETER NUMBER.
C  1  WEIGHT, IF PRESENT.
C
C--THE ADDRESSING OF LIST 22 IS IN THE COMMON BLOCK 'XLST22' :
C
C  L22     THE ADDRESS OF THE GROUP DETAILS.
C  L22B    THE ADDRESS OF THE BLOCKING DETAILS.
C  L22CB   THE ADDRESS OF THE POINTERS, USED TO SET UP 'XLST12'.
C  L22PD   THE ADDRESS OF THE PARTIAL DERIVATIVES IN CORE.
C
C--THE POINTERS TO THE GROUP DETAILS ARE STORED IN THE POINTERS BLOCK, A
C  FOUND IN CORE IN THE COMMON BLOCK 'XLST12' :
C
C  L12     ADDRESS OF THE GROUP FOR THE FIRST ATOM.
C  MD12    LENGTH OF THE ENTRY FOR EACH ATOM      (=MD5)
C  N12     NUMBER OF LEAST SQUARES PARAMETERS
C
C  L12A    ADDRESS OF THE CURRENT ENTRY FOR EACH ATOM
C  MD12A   LENGTH OF THE ENTRY FOR EACH PARAMETER
C  N12A    NOT USED
C
C  L12O    ADDRESS OF THE ENTRY FOR THE FIRST OVERALL PARAMETER
C  MD12O   NUMBE R OF OVERALL PARAMETERS
C
C  L12B    ADDRESS OF THE INFORMATION FOR THE FIRST BLOCK
C  MD12B   LENGTH OF THE ENTRY FOR EACH BLOCK
C  N12B    NUMBER OF BLOCKS
C
C  L12LS   ADDRESS OF THE ENTRY FOR THE LAYER SCALES
C  N12LS   THE NUMBER OF LAYER SCALES
C
C  L12ES   ADDRESS OF THE ELEMENT SCALES
C  N12ES   NUMBER OF ELEMENT SCALES
C
C  L12BS   THE ADDRESS OF THE BATCH SCALE FACTORS.
C  MD12BS  THE NUMBER OF BATCH SCALE FACTORS.
C
C  L12CL   THE ADDRESS OF THE CELL PARAMETERS
C  MD12CL  THE NUMBER OF CELL PARAMETERS
C
C  L12PR   THE ADDRESS OF THE PROFILE PARAMETERS
C  MD12PR  THE NUMBER OF PROFILE PARAMETERS
C
C  L12EX   THE ADDRESS OF THE EXTINCTION PARAMETERS
C  MD12EX  THE NUMBER OF EXTINCTION PARAMETERS
C
C--THE ENTRY FOR EACH BLOCK IS :
C
C  0  FIRST PARAMETER
C  1  NUMBER OF PARAMETERS
C  NSPCL   THE NUMBEROF SPECIAL GROUPS (SCALES, PARAMETERS)
C
C--
C
C
C----- X ORIGINAL ATOM COORDINATES
C----- XO UPDATED ATOM COORDINATES
C----- KEY INDEX FOR PARAMETER OR RELATED PARAMETER
C----- COEF COEFFICIENT FOR SPECAIL POSITION
C
      CHARACTER *5 COORD(10), COORDIS(10), COORDSS(10), COORDLR(10)
      CHARACTER *3 PRE(3)
      CHARACTER *1 PLM(3)
      CHARACTER CEND*3
C
      DIMENSION X(9), XO(9), KEY(9), COEF(9)
C
      DIMENSION IL23I(6), IL23F(5)
      DIMENSION IGHD(3), IPHD(5)
\HEADES
\ISTORE
\ICOMLX
\ICOM12
\ICOM22
\ICOM23
C
\STORE
\XLISTI
\XUNITS
\XSSVAL
\XLEXIC
\XCARDS
\XCHARS
\XLST01
\XLST02
\XLST05
\XLST12
\XLST22
\XFRM22
\XLST23
\XSPECC
\XCONST
\XERVAL
\XOPVAL
\XIOBUF
C
\QSTORE
\QCOMLX
\QLST12
\QLST22
\QLST23
C
C
C----- CHARATER DATA FOR SRQ
C
        DATA COORD /'*    ', 'x    ', 'y    ', 'z    ',
     1  'U[11]', 'U[22]', 'U[33]', 'U[23]', 'U[13]', 'U[12]'/
        DATA COORDIS /'*    ', 'x    ', 'y    ', 'z    ',
     1  'UISO ', '*    ', '*    ', '*    ', '*    ', '*    '/
        DATA COORDSS /'*    ', 'x    ', 'y    ', 'z    ',
     1  '"UIS"', 'SIZE ', '*    ', '*    ', '*    ', '*    '/
        DATA COORDLR /'*    ', 'x    ', 'y    ', 'z    ',
     1  '"UIS"', 'SIZE ', 'DECLI', 'AZIMU', '*    ', '*    '/
        DATA PRE / '   ', '1/2', ' 2 ' /
        DATA PLM / '-', ' ', ' '/
C
C-----INDEX AND  OFF SETS IN LIST23 FOR RESETTABLE FLAGS
C----- LAYER, (ELEMENTS), BATCH, (CELL, PROFILE, ANISEXT)
      DATA IL23I / 16, 0, 32, 0, 0, 0 /
C----- BATCH, LAYER, EXTPAR, ENANT, ANOM
      DATA IL23F / 3, 2, 1, 6, 0 /
      DATA CEND /'END'/
C
C----- VERSION 500 INCLUDES SLOTS FOR 'SPECIAL' GROUPS
C----- VERSION 501 LINKS WITH LIST 23, SETTING FLAGS AS NECESSARY
C----- VERSION 502 UPDATES LIST 23
C----- VERSION 510 CALL XSPECA TO CHECK FOR SPECIAL POSITIONS
C----- VERSION 520 SET 3 PARTS PER ENTRY TO ALLOW FOR 32360 EQUV'S
      DATA IVERSN / 521 /
C
C
C
C--SET THE TIMING
      CALL XTIME1(2)
\IDIM12
C--ZERO THE LIST 12 CONTROL BLOCK
      CALL XZEROF(ICOM12(1),IDIM12)
\IDIM22
C--ZERO THE LIST 22 CONTROL BLOCK
      CALL XZEROF(ICOM22(1),IDIM22)
\IDIM23
C--ZERO THE LIST 23 CONTROL BLOCK
      CALL XZEROF(ICOM23(1),IDIM23)
C--READ ANY OTHER CARDS FOR THIS '\INSTRUCTION'
      IF (   KRDDPV ( ICOM22 , IDIM22 )  .LT.  0  ) GO TO 9910
C--RESET THE CORE LIMITS
      KA=NFL
      CALL XRSL
      NFL=KA
C----- THE NUMBER OF WORDS PER ENTRY IS SET HERE, AND PASSED
C----- TO KINEP VIA THE COMMON BLOCK XFRM22
      NPRT12 = 3
C--ZERO THE AREAS IN LIST 22
      CALL XZEROF(ISTORE(L22B),MD22B*N22B)
C--SET THE HEADER BLOCK LENGTHS
      LH121 = 3
      LH122=5
C--SET THE MAXIMUM NUMBER OF BLOCKS PLUS ONE
      MAXBLK=N22B
C--SET THE MAXIMUM NUMBER OF 'EQUIVALENCES' PLUS ONE IN EACH BLOCK
      MAXEQ=N22B
C--SET THE BIT POINTERS FOR 'IMPLICIT' AND 'EXPLICIT'
      IE(1)=16384
      IE(2)=8192
      IE(3)=0
C--SET THE CHECK VALUES FOR THE 'IMPLICIT'/'EXPLICIT' STATUS
      IEC(1)=16384
      IEC(2)=8192
      IEC(3)=0
C--SET THE OPERAND BIT PATTERNS  -  'EQUIV', 'FIX', 'PLUS', 'WEIGHT' AND
      IO(1)=4096
      IO(2)=2048
      IO(3)=1024
      IO(4)=512
      IO(5)=256
C--SET THE OPERAND BIT CHECK PATTERNS
      IOC(1)=5120
      IOC(2)=2560
      IOC(3)=5376
      IOC(4)=2560
      IOC(5)=1280
C----- INITIALISE LIST 23 MODIFICATION FLAG - INCREMENTS BY POWERS
C      OF 2 FOR ANOMALOUS, ENANTIOPOLE, EXTINCTION
      MOD23 = 0
      CALL XFAL23
C----- GET THE ACTION AND UPDADTE CONDITIONS
      IACTN = ISTORE(L23SP)
      ABTOL = STORE(L23SP+5)
C------ DONT UPDATE ANY PARAMETERS
      IUPDAT = -1
C
C----- LOAD LIST 1 AND SET UP DERIVATIVES OF GROUP ROTATION MATRIX
      CALL XFAL01
      IF (IERFLG .LT. 0) GOTO 9900
C------ FORM DERIVATIVE MATRICES FOR ALL AXES  L(-1) .R. L
      CALL XFRBDM (0., 0., 0.)
C----- LOAD LIST 5
      CALL XFAL05
C
C-----  LOAD LIST 2 AND INITIALISE SPECIAL POSITION CODE
        CALL XFAL02
        NUPDAT = 0
        IF ( KSPINI ( -1, ABTOL) .LE. 0) GOTO 9800
C       INITIALISE BARI CODE
C
C----- INDICATE NOTHING SAVED FROM THE SRQ
       NSRQ = 0
       IF (IACTN .EQ. 3) THEN
C-----  WRITE A LIST 17 HEADER
      CALL XL17H (IADSRQ, NSRQ)
          NRESTR = 0
C
C----- CHECK FOR FLOATING ORIGIN
          CALL XFLORG ( N2, IACTN, NRESTR)
        ENDIF
C
C----- CHECK FOR SPECIAL POSITIONS, ISSUE WARNINGS AND UPDATE IF REQUIRE
      NUPDAT = 0
      M5 = L5
      DO 100 I = 1, N5
C
C----- GET SPECIAL POSITION INFORMATION
      IF ( KSPGET(X, XO, KEY, COEF, MGM, M5, IUPDAT, NUPDAT) .GT. 0 )
     1 GOTO 110
      MPOS = NGMULT / MGM
C
C----- SOMETHING SPECIAL TO DO
         IF (IACTN .GE. 0) THEN
C
C-C-C-DISTINCTION BETWEEN DIFFERENT ATOM-TYPES
C-C-C-ANISOTR., ISOTROPIC ATOMS (AND UNREASONABLY SET FLAGS)
          IF ((NINT(STORE(M5+3)) .LE. 1.0) .OR.
     2        (NINT(STORE(M5+3)) .GT. 4.0)) THEN
           WRITE(NCAWU,522) STORE(M5), NINT(STORE(M5+1)), MPOS, NGMULT,
     2     1./FLOAT(MGM)
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,522) STORE(M5), NINT(STORE(M5+1)), MPOS, NGMULT,
     2      1./FLOAT(MGM)
           ENDIF
522        FORMAT(1X,' Atom ', A4, I4, ',  Multiplicity =', I3,
     2     ',  Number of positions =', I3, ' Occ = ', F6.4)
C-C-C-SURFACE OF A SPHERE
          ELSE IF (NINT(STORE(M5+3)) .EQ. 2.0) THEN
           WRITE(NCAWU,523) STORE(M5), NINT(STORE(M5+1)), MPOS, NGMULT,
     2     1./FLOAT(MGM)
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,523) STORE(M5), NINT(STORE(M5+1)), MPOS, NGMULT,
     2      1./FLOAT(MGM)
           ENDIF
523        FORMAT(1X,' Sphe ', A4, I4, ',  Multiplicity =', I3,
     2     ',  Number of positions =', I3, ' Occ = ', F6.4)
C-C-C-LINE
          ELSE IF (NINT(STORE(M5+3)) .EQ. 3.0) THEN
           WRITE(NCAWU,524) STORE(M5), NINT(STORE(M5+1)), MPOS, NGMULT,
     2     1./FLOAT(MGM)
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,524) STORE(M5), NINT(STORE(M5+1)), MPOS, NGMULT,
     2      1./FLOAT(MGM)
           ENDIF
524        FORMAT(1X,' Line ', A4, I4, ',  Multiplicity =', I3,
     2     ',  Number of positions =', I3, ' Occ = ', F6.4)
C-C-C-RING
          ELSE IF (NINT(STORE(M5+3)) .EQ. 4.0) THEN
           WRITE(NCAWU,525) STORE(M5), NINT(STORE(M5+1)), MPOS, NGMULT,
     2     1./FLOAT(MGM)
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,525) STORE(M5), NINT(STORE(M5+1)), MPOS, NGMULT,
     2      1./FLOAT(MGM)
           ENDIF
525        FORMAT(1X,' Ring ', A4, I4, ',  Multiplicity =', I3,
     2     ',  Number of positions =', I3, ' Occ = ', F6.4)
          ENDIF
C-C-C-DISTINCTION BETWEEN DIFFERENT ATOM-TYPES
C-C-C-ANISOTROPIC ATOMS (AND UNREASONABLY SET FLAGS)
          IF ((NINT(STORE(M5+3)) .LE. 0.0) .OR.
     2        (NINT(STORE(M5+3)) .GT. 4.0)) THEN
           WRITE(NCAWU,532)
     2     (PLM(K1(IK)+2), PRE(K2(IK)+1), COORD(KEY(IK)+1) ,IK =1,9)
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,532)
     2      (PLM(K1(IK)+2), PRE(K2(IK)+1), COORD(KEY(IK)+1) ,IK =1,9)
           ENDIF
532        FORMAT (1X,(3(A1,A3,A2,1X),6(A1,A3,A5,1X)))
C-C-C-ISOTROPIC ATOMS
          ELSE IF (NINT(STORE(M5+3)) .EQ. 1.0) THEN
           WRITE(NCAWU,533)
     2     (PLM(K1(IK)+2), PRE(K2(IK)+1), COORDIS(KEY(IK)+1) ,IK =1,9)
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,533)
     2      (PLM(K1(IK)+2), PRE(K2(IK)+1), COORDIS(KEY(IK)+1) ,IK =1,9)
           ENDIF
533        FORMAT (1X,(3(A1,A3,A2,1X),6(A1,A3,A5,1X)))
C-C-C-SURFACE OF A SPHERE
          ELSE IF (NINT(STORE(M5+3)) .EQ. 2.0) THEN
           WRITE(NCAWU,534)
     2     (PLM(K1(IK)+2), PRE(K2(IK)+1), COORDSS(KEY(IK)+1) ,IK =1,9)
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,534)
     2      (PLM(K1(IK)+2), PRE(K2(IK)+1), COORDSS(KEY(IK)+1) ,IK =1,9)
           ENDIF
534        FORMAT (1X,(3(A1,A3,A2,1X),6(A1,A3,A5,1X)))
C-C-C-LINE OR RING
          ELSE IF ((NINT(STORE(M5+3)) .GE. 3.0) .AND.
     2        (NINT(STORE(M5+3)) .LE. 4.0)) THEN
           WRITE(NCAWU,535)
     2     (PLM(K1(IK)+2), PRE(K2(IK)+1), COORDLR(KEY(IK)+1) ,IK =1,9)
           IF (ISSPRT .EQ. 0) THEN
            WRITE(NCWU,535)
     2      (PLM(K1(IK)+2), PRE(K2(IK)+1), COORDLR(KEY(IK)+1) ,IK =1,9)
           ENDIF
535        FORMAT (1X,(3(A1,A3,A2,1X),6(A1,A3,A5,1X)))
          ENDIF
      ENDIF
110   CONTINUE
      M5 = M5 + MD5
100   CONTINUE
C
C--SET THE INPUT AND OUTPUT LIST TYPES
      KD=12
      KE=22
C----- SET NO. OF 'GROUP' REFINEMENT DIRECTIVES TO ZERO
      NGPDIR = 0
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--SET UP EACH 'GROUP' WITH ONE 'PART' INITIALLY
      LN=KE
C--SET UP THE OVERALL PARAMETERS FIRST
      MD12O=MD5O
      N12O=N5O
      L12O=KINE(MD12O)
C--SET UP A 'GROUP' FOR EACH ATOM
      MD12A=MD5
      N12A=N5
      L12=NOWT
      L12A=NOWT
C--CHECK THE NUMBER OF ATOMS IN LIST 5
      IF(N5)1150,1150,1050
C--LOOP OVER EACH ATOM
1050  CONTINUE
      L12A=L12O
      DO 1100 I=1,N5
      ISTORE(L12A)=KINE(MD12A)
      L12A=ISTORE(L12A)
1100  CONTINUE
      L12=ISTORE(L12O)
C--SET UP THE LAYER SCALE FACTORS
1150  CONTINUE
      MD12LS=MD5LS
      N12LS=N5LS
      L12LS=KINE(MD12LS)
      ISTORE(L12A)=L12LS
C--SET UP THE ELEMENT SCALE FACTORS
      MD12ES=MD5ES
      N12ES=N5ES
      L12ES=KINE(MD12ES)
      ISTORE(L12LS)=L12ES
C--SET UP THE BATCH SCALE FACTORS
      MD12BS=MD5BS
      N12BS=N5BS
      L12BS=KINE(MD12BS)
      ISTORE(L12ES)=L12BS
C--SET UP THE CELL PARAMETERS
      MD12CL = MD5CL
      N12CL = N5CL
      L12CL = KINE(MD12CL)
      ISTORE(L12BS)=L12CL
C--SET UP THE PROFILE PARAMETERS
      MD12PR=MD5PR
      N12PR=N5PR
      L12PR=KINE(MD12PR)
      ISTORE(L12CL)=L12PR
C--SET UP THE EXTINCTION PARAMETERS
      MD12EX=MD5EX
      N12EX=N5EX
      L12EX=KINE(MD12EX)
      ISTORE(L12PR)=L12EX
C--SET THE CURRENT EQUIVALENCE POINTER TO ZERO
      MO=0
C--SET THE INITIAL CARD FOUND TO 'BLOCK' BY DEFAULT
      MW=-1
C--ZERO THE ERROR COUNTER
      LEF=0
C--SET THE NUMBER OF MATRIX BLOCKS TO ZERO INITIALLY
      N12B=0
\IDIMLX
C--SET UP THE INPUT LIST 12 FOR PROCESSING
      CALL XLDLST(-KD,ISTORE(NFL),1,0)
      IF ( IERFLG .LT. 0 ) GO TO 9900
C--INITIATE LEXICAL SCANNER PROCESSING
      CALL XILEXP(KD,ISTORE(NFL))
C
C--FETCH THE NEXT RECORD PROCESSED BY THE LEXICAL SCANNER
1200  CONTINUE
      IDWZAP = 0
      IF(KLDNLR(IDWZAP))2200,1250,1200
1250  CONTINUE
C----- TEST FOR SPECIAL POSITIONS BEFORE WE GO ON TO NEXT BLOCK
      IF ((MG .EQ. 5) .AND. (IACTN .EQ. 3)) CALL XSPCON(NRESTR)
C--SET THE 'EQUIVALENCE' VALUE TO INCLUDE AS ZERO CURRENTLY
      MP=0
      LSTLEF=LEF
C--SET THE CURRENT 'IMPLCIT'/'EXPLICIT' STATUS AS 'EXPLICIT'
      MH=2
C--POINT THE INSERTION ROUTINES AT THE OVERALL PARAMETERS INITIALLY
      L12A=L12O
C--SET THE DEFAULT WEIGHT TO ZERO
      Z=0.
C--JUMP ON THE FUNCTION OF THE CARD
C----- UN-SET THE LINK FLAG
      ML=0
      GOTO (1350, 2150, 2150, 1500, 1650, 1800, 1850, 1340,
     1      1330, 1320, 1310, 9910) ,MG
C
1310  CONTINUE
C----- 'GROUP' CARD
      ML = 4
      NGPDIR = NGPDIR  + 1
      GOTO 1345
1320  CONTINUE
C----- 'COMBINE' CARD. SET FLAG
      ML = 3
      GOTO 1345
1330  CONTINUE
C----- 'LINK' CARD. SET THE FLAG
      ML = 2
      GOTO 1345
1340  CONTINUE
C----- 'RIDE' CARD. SET THE FLAG
      ML = 1
1345  CONTINUE
C----- RESET 'MG' TO LOOK LIKE A 'EQUIV' CARD
      MG = 1
C----- 'EQUIVALENCE' CARD
1350  CONTINUE
      MO=MO+1
C--SET THE EQUIVALENCE VALUE TO BE USED
      MP=MO
      GOTO 2150
C
C
C--'WEIGHT' CARD  -  RESET MH TO AVOID UNNECESSARY CHECKING
1500  CONTINUE
      MH=3
C--READ THE NEW 'WEIGHT'
      IF(KNUMBR(Z))1550,2150,1550
C--THERE IS  NO NUMBER TO BE USED AS THE WEIGHT
1550  CONTINUE
      CALL XPCL12
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1600)
      WRITE(NCAWU,1600)
      WRITE ( CMON ,1600)
      CALL XPRVDU(NCVDU, 1,0)
1600  FORMAT(' Missing number on ''WEIGHT'' card')
      LEF=LEF+1
      Z=1.
      GOTO 2150
C
1650  CONTINUE
C--'BLOCK' CARD  -  INCREMENT THE NUMBER OF BLOCKS FOUND
      N12B=N12B+1
C--RESET THE NUMBER OF 'EQUIVALENCE' CARDS FOUND
      MO=0
C--CHECK THAT WE HAVE NOT READ TOO MANY BLOCKS
      IF(N12B-MAXBLK)2100,1700,1700
C--TOO MANY BLOCKS FOUND
1700  CONTINUE
      CALL XPCL12
      IF (ISSPRT .EQ. 0) WRITE(NCWU ,1750) MAXBLK
      WRITE(NCAWU,1750) MAXBLK
      WRITE ( CMON ,1750) MAXBLK
      CALL XPRVDU(NCVDU, 1,0)
1750  FORMAT(' Too many blocks. (Max = ',I4,' )')
      GOTO 5850
C
C--'FULL' CARD  -  INSERT ALL THE PARAMETERS INTO BLOCK (MAXBLK-1)
1800  CONTINUE
      N12B=MAXBLK-1
C--RESET THE INITIAL CARD FOUND FLAG
      MW=0
C--SET THE DUMMY OVERALL TEMPERATURE FACTOR  AS FIXED
      MG=2
      MH=2
      IMP = 0
      IF(KOVPIN(1, 2, 1, IMP, 0))1950,2050,1950
C
C--'DIAG' CARD  -  ALL INSERTIONS ARE DONE FOR BLOCK (MAXBLK-1)
1850  CONTINUE
      N12B=MAXBLK-1
C--RESET THE INITIAL CARD FOUND FLAG
      MW=1
C--SET THE OVERALL TEMPERATURE FACTOR AS FIXED
      MG=2
      MH=2
      IMP = 0
      IF(KOVPIN(1, 3, 1, IMP, 0))1950,1900,1950
C--INSERT THE DUMMY OVERALL TEMPERATURE FACTOR
1900  CONTINUE
      MG=5
      IMP = 0
      IF(KOVPIN(1, 2, 1, IMP, 0))1950,2050,1950
C--ERROR WHILE ADJUSTING THE OVERALL PARAMETERS FOR THE FIRST CARD
1950  CONTINUE
      CALL XPCL12
      IF (ISSPRT .EQ. 0) WRITE(NCWU,2000)
      WRITE(NCAWU,2000)
      WRITE ( CMON ,2000)
      CALL XPRVDU(NCVDU, 1,0)
2000  FORMAT(' Error while setting overall parameters')
      GOTO 5850
C--INSERT THE SCALE FACTOR
2050  CONTINUE
      MG=5
      IMP = 0
      IF(KOVPIN(1, 1, 1, IMP, 0))1950,2100,1950
C--FIRST CARD OR A NEW 'BLOCK' CARD  -  'IMPLICIT' ADDITIONS
2100  CONTINUE
      MG=5
      MH=1
C--PROCESS THE CARD
2150  CONTINUE
      CALL XSYN12(ntemp)
      nupdat = nupdat + ntemp
      GOTO 1200
C
C--END OF THE LEXICAL SCANNER INPUT  -  CHECK FOR ANY ERRORS
2200  CONTINUE
      IF(LEF)5850,2250,5850
C--NO ERRORS  -  SELECT THE CONSTANTS BELOW DEPENDING ON THE FIRST CARD
C
C--THE VARIABLES ARE USED AS FOLLOWS :
C
C  MA  THE CURRENT MAXIMUM PARAMETER NUMBER.
C  MB  VALUE OF 'MA' AT THE END OF THE LAST BLOCK
C  MD  CURRENT BLOCK FOR WHICH WE ARE SEARCHING.
C  ME  CURRENT EQUIVALENCE VALUE FOR WHICH WE ARE SEARCHING.
C
C  MO  INCREMENT TO THE BLOCK NUMBER BETWEEN GROUPS.
C      THIS VARAIBLE IS ALSO USED IN THE EQUIVALENCE CHECKING FOR 'DIAG'
C      AS IT IS USED TO UPDATE 'MS' BETWEEN GROUPS. IT SHOULD BE SET TO
C      FOR 'FULL' AND 'BLOCK', AND 1 FOR 'DIAG'.
C  MP  CHANGE TO THE REQUIRED BLOCK NUMBER BETWEEN BLOCKS.
C      'MO' AND 'MP' ALSO TOGETHER SELECT SUCCESSIVE 'GROUPS' FOR PROCES
C      DURING A 'DIAG' INSTRUCTION.
C  MQ  THE VALUE OF THE CURRENT BLOCK AT THE START OF THE PASS THROUGH T
C  MR  THE NUMBER OF BLOCKS TO PROCESS.
C
2250  CONTINUE
C----- PROCESS THE FINAL (OR ONLY) BLOCK
      IF ((N12B .GT. 0) .AND. (IACTN .EQ.3)) CALL XSPCON(NRESTR)
C--BRANCH ON THE TYPE OF THE INITIAL CARD
      IF(MW)2300,2350,2400
C--'BLOCK' CARD(S)S
2300  CONTINUE
      MO=0
      MP=1
      MQ=1
      MR=N12B
      GOTO 2450
C--'FULL' CARD
2350  CONTINUE
      MO=0
      MP=1
      MQ=MAXBLK-1
      MR=1
      GOTO 2450
C--'DIAG' CARD
2400  CONTINUE
      MO=1
      MP=-1
      MQ=MAXBLK-1
      MR=N5+1
2450  CONTINUE
C-- SET THE INITIAL NUMBER OF PARAMETERS TO ZERO
      MA=0
C--SET THE NUMBER OF BLOCKS TO BE USED TO ZERO INITIALLY
      N22B=0
C--SET THE POINTER TO THE START OF THE BLOCK INFORMATION
      M22B=L22B
C--LOOP OVER ALL THE GROUPS FOR THE NEXT EXPECTED BLOCK
2500  CONTINUE
      MB=MA
      MD=MQ
      M12=L12O
C
C      EACH GROUP (EG ATOM, OVERALL PARAMETERS, ETC) MAY CONTAIN
C      SEVERAL PARTS. EACH PART MAY REFER TO SEVERAL PARAMETERS.
C      A SLOT IS SET UP FOR ALL PARAMETERS IN A PART IN A GROUP,
C      THOUGH NOT ALL MAY BE USED. PIONTERS ARE SAVED SHEWING THE
C      FIRST AND LAST PARAMETER USED.
C
C                            GROUP
C                              I
C            ------------------------------------
C            PART            PART            PART
C                              I
C                        ------------
C                   PARAMETER   PARAMETER
C
C----- M12 IS GROUP ADDRESS - INITIALLY OVERALL PARAMETERS
C      ISTORE(M12) IS NEXT GROUP ADDRES
C--PROCESS THE NEXT 'GROUP' ON THIS PASS
2550  CONTINUE
C      L12A = ISTORE(M12+1) IS PART ADDRESS
C      ISTORE(L12A) IS NEXT PART ADDRESS
C      ISTORE(L12A+1) IS NO OR WORDS PER PARAMETER ENTRY
C      ISTORE(L12A+2) IS ADDRESS OF FIRST PARAMETER ENTRY
      L12A=ISTORE(M12+1)
C--PROCESS THE NEXT 'PART'  -  CHECK FOR SOME PARAMETERS
2600  CONTINUE
      IF(ISTORE(L12A+3))3700,2650,2650
2650  CONTINUE
      CALL XPARTP(L12A,M12A,MU,MV,MD12A)
C--CYCLE THROUGH THE PARAMETERS FOR THIS 'PART'.
      DO 3650 M12A=MU,MV,MD12A
C      M12A IS ADDRESS OF PARAMETER DETAIL
C      ISTORE(M12A) IS PACKED (PARAM NO, BLOCK NO, FIX FLAG ETC)
C      ISTORE(M12A+1) IS WEIGHT IF SET, OTHERWISE ZERO
C
C--CHECK IF THIS PARAMETER IS IN THE BLOCK WE ARE INTERESTED IN
      IF(KBLOCK(ISTORE(M12A))-MD)3650,2700,3650
C--CHECK IF THE FUNCTION USED WAS A 'FIX'
2700  CONTINUE
      IF(KBITS(ISTORE(M12A+2),IO(2)))3550,2750,3550
C--NOT A 'FIX'  -  INCREMENT PARAMETER NUMBER AND CHECK FOR 'EQUIV'
2750  CONTINUE
      MA=MA+1
C--COMPUTE THE 'EQUIVALENCE' VALUE
      ME=ISTORE(M12A)-ISTORE(M12A)/MAXEQ*MAXEQ
      IF(ME)3600,3600,2800
C--'EQUIV'  -  CHECK FOR 'DIAG' THAT WE ARE NOT EQUIVALENCING ACROSS BLO
2800  CONTINUE
      MF=M12
      MG=L12A
C--USED TO INDICATE IF THE CHECK SHOULD BE MADE HERE
      MS=-1
C--SET THE REST OF THE POINTERS FOR THE CURRENT PART
      K=M12A
      L=MV
      M=MD
      N=MD12A
C--SEARCH FOR THE CURRENT 'EQUIV' VALUE IN THE NEW CURRENT PART
2850  CONTINUE
      DO 3200 MH=K,L,N
C--CHECK IF THIS IS AN EQUIVALENCE FUNCTION
      IF(KBITS(ISTORE(MH+2),IO(1)))2900,3200,2900
C--CHECK THAT THE PARAMETER HAS THE SAME VALUE
2900  CONTINUE
      IF(ME-ISTORE(MH)+ISTORE(MH)/MAXEQ*MAXEQ)3200,2950,3200
C--CHECK IF AT THIS STAGE THIS TYPE OF EQUIVALENCE IS ALLOWED.
C  THIS IS USED EXCLUSIVELY FOR THE 'DIAG' CARDS TO CHECK THAT
C  NO EQUIVALENCING TAKES PLACE BETWEEN DIFFERENT BLOCKS.
2950  CONTINUE
      IF(MS)3100,3000,3000
C--EQUIVALENCING IN DIFFERENT BLOCKS
3000  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU,3050)
      WRITE(NCAWU,3050)
      WRITE ( CMON ,3050)
      CALL XPRVDU(NCVDU, 1,0)
3050  FORMAT(' Equivalence of parameters in different blocks')
      GOTO 5850
C--CHECK IF THIS PARAMETER IS IN THE CORRECT BLOCK
3100  CONTINUE
      IF(KBLOCK(ISTORE(MH))-M)3200,3150,3200
C--INSERT THE VALUE
3150  CONTINUE
      ISTORE(MH)=MA
3200  CONTINUE
C--FIND THE NEXT PART FOR THIS GROUP
3250  CONTINUE
      MG=ISTORE(MG)
C--CHECK FOR THE END OF THE PART CHAIN FOR THIS GROUP
      IF(MG)3450,3450,3350
C--CHECK IF THERE ARE ANY PARAMETERS IN THIS PART
3350  CONTINUE
      IF(ISTORE(MG+3))3250,3400,3400
C--SET UP THE POINTERS FOR THE NEXT PART
3400  CONTINUE
      CALL XPARTP(MG,MI,K,L,N)
      GOTO 2850
C--FIND THE NEXT GROUP
3450  CONTINUE
      MF=ISTORE(MF)
C--CHECK FOR THE END OF THE GROUP CHAIN
      IF(MF)3650,3650,3500
C--FIND THE POINTER TO THE FIRST PART FOR THIS GROUP
3500  CONTINUE
      MG=ISTORE(MF+1)
C--MODIFY MS  -  THE VALUE OF MO MUST BE SET EARLIER
C  ZERO FOR FULL AND BLOCK
C  ONE FOR DIAG
      MS=MS+MO
      GOTO 3350
C--'FIX' CARD  -  SET THE PARAMETER NOT TO BE REFINED
3550  CONTINUE
      ISTORE(M12A)=0
      STORE(M12A+1)=0.
      GOTO 3650
C--A 'PLUS' OR 'WEIGHT' TYPE OF INSTRUCTION  -  SET THE PARAMETER NUMBER
3600  CONTINUE
      ISTORE(M12A)=MA
3650  CONTINUE
C--FIND THE NEXT PART FOR THIS GROUP
3700  CONTINUE
      L12A=ISTORE(L12A)
      IF(L12A)3750,3750,2600
C--END OF THE PART CHAIN  -  FIND THE NEXT GROUP
3750  CONTINUE
      MD=MD+MO
      M12=ISTORE(M12)
C--CHECK FOR THE OF THE GROUP CHAIN
      IF(M12)3800,3800,2550
C--END OF THE PASSAGE THROUGH THE ATOMS FOR THIS BLOCK.
C  PROCESS THE NUMBER OF PARAMETERS ETC.
3800  CONTINUE
      IF(MA-MB)3900,3900,3850
3850  CONTINUE
      N22B=N22B+1
      ISTORE(M22B)=MB+1
      ISTORE(M22B+1)=MA-MB
      M22B=M22B+MD22B
C--PREPARE TO PROCESS THE NEXT EXPECTED BLOCK
3900  CONTINUE
      MQ=MQ+MP
      MR=MR-1
C--CHECK IF THERE ARE ANY MORE BLOCKS EXPECTED
      IF(MR)3950,3950,2500
C--SET THE NUMBER OF PARAMETERS AND CHECK THAT THERE NOT TOO MANY BLOCKS
3950  CONTINUE
      N12=MA
      IF(N12B-MAXBLK)4000,1700,1700
C--UPDATE THE BLOCKING INFORMATION
4000  CONTINUE
      CALL XUDRH(KE,102,0,N22B)
C
C--PASS THROUGH ALL THE PARTS, FINDING THE LENGTH AND INCREMENT AND SETT
      M12=L12O
C--INCREMENT THE LENGTH FOUND TO ALLOW FOR THE NEXT GROUP HEADER
4050  CONTINUE
      N22=N22+LH121
C--SET THE ADDRESS OF THE LAST PART HEADER
      LAST=M12+1
C--FIND THE ADDRESS OF THE FIRST PART FOR THIS GROUP
      L12A=ISTORE(M12+1)
C--CHECK FOR THE END OF THE PART CHAIN
4100  CONTINUE
      IF(L12A)4800,4800,4150
C--CHECK IF THERE ARE ANY PARAMETERS TO CHECK FOR IN THIS PART
4150  CONTINUE
      IF(ISTORE(L12A+3))4600,4200,4200
C--SET THE POINTERS TO THE CURRENT PART
4200  CONTINUE
      CALL XPARTP(L12A,M12A,MU,MV,MD12A)
C--RESET THE MARKED POINTERS FOR THIS PART
      K=1
      J=ISTORE(L12A+4)
      ISTORE(L12A+3)=-1000000
      ISTORE(L12A+4)=1000000
C--PASS OVER THE MARKED PARAMETERS FOR THIS PART
      DO 4550 I=MU,MV,MD12A
C--CHECK FOR A ZERO WEIGHT
      IF(ABS(STORE(I+1))-ZEROSQ)4250,4350,4350
C--ZERO WEIGHT  -  CHECK FOR A 'FIXED' PARAMETER
4250  CONTINUE
      IF(ISTORE(I))4500,4500,4300
C--NOT 'FIXED'  -  ASSUME UNIT WEIGHT
4300  CONTINUE
      STORE(I+1)=1.
      GOTO 4450
C--NON-ZERO WEIGHT  -  RESET THE INCREMENT
4350  CONTINUE
      K=2
C--CHECK IF THE PARAMETER IS BEING REFINED
      IF(ISTORE(I))4500,4500,4450
C--COMPUTE THE TRUE STARTING AND FINISHING PARAMETERS FOR THIS PART
4450  CONTINUE
      ISTORE(L12A+3)=MAX0(ISTORE(L12A+3),J)
      ISTORE(L12A+4)=MIN0(ISTORE(L12A+4),J)
C--UPDATE THE PARAMETER NUMBER
4500  CONTINUE
      J=J+1
4550  CONTINUE
C--CHECK IF THIS PART CONTAINS ANY REFINABLE PARAMETERS NOW
      IF(ISTORE(L12A+3))4600,4650,4650
C--NO PARAMETERS  -  TAKE THE PART OFF THE CHAIN
4600  CONTINUE
      ISTORE(LAST)=ISTORE(L12A)
      GOTO 4750
C--REFINABLE PARAMETERS  -  SET UP THE PART DETAILS PROPERLY
4650  CONTINUE
      CALL XPARTP(L12A,M12A,MU,MV,MD12A)
C--LOOP OVER THE NEW PARAMETER SET
      DO 4700 I=MU,MV,MD12A
      ISTORE(M12A)=ISTORE(I)
      STORE(M12A+1)=STORE(I+1)
C--UPDATE THE POINTER TO THE NEW POSITION
      M12A=M12A+K
4700  CONTINUE
C--RESET THE PART HEADER POINTERS
      ISTORE(L12A+1)=K
      ISTORE(L12A+3)=M12A-K
C--COMPUTE THE LENGTH
      N22=N22+ISTORE(L12A+3)-ISTORE(L12A+2)+ISTORE(L12A+1)+LH122
C--MOVE TO THE NEXT PART ON THE CHAIN
4750  CONTINUE
      LAST=L12A
      L12A=ISTORE(L12A)
      GOTO 4100
C--MOVE TO THE NEXT GROUP
4800  CONTINUE
      M12=ISTORE(M12)
      IF(M12)4850,4850,4050
C--END OF THE GROUP CHAIN  -  UPDATE THE RECORD POINTERS IN LIST 22
4850  CONTINUE
      CALL XUDRH(KE,101,0,N22)
C--WRITE THE PART LIST TO THE DISC
      CALL XWLSTD(KE,ICOM22,IDIM22,-1,0)
C
C--FIND THE POINTERS FOR THE MAIN LIST 22 RECORD
      I=KFNDRI(KE,101,IADDR,IBUFF)
C--FIND THE ADDRESS OF THE FIRST WORD OF THE RECORD
      L22=IBUFF(4)
C--SET THE RELATIVE ADDRESS FOR CORE LOADING LATER
      IADD=0
C--FIND THE FIRST GROUP
      M12=L12O
C--RECORD THE ADDRESS FOR THIS START OF THIS GROUP
4900  CONTINUE
      LAST=IADD
C--RECORD THE GROUP HEADER DISC ADDRESS
      IADDGH=L22
C--INCREMENT THE DISC AND CORE ADDRESSES
      L22=L22+KINCRF(LH121)
      IADD=IADD+LH121
C--SET UP THE GROUP HEADER RECORD
      IGHD(1)=NOWT
      IGHD(2)=NOWT
      IGHD(3) = NOWT
C--CHECK IF THERE ARE ANY PARTS FOR THIS GROUP
      IF(ISTORE(M12+1))5150,5150,4950
C--ALTER THE ADDRESS OF THE FIRST PART
4950  CONTINUE
      IGHD(2)=IADD
      L12A=ISTORE(M12+1)
C--PROCESS THE NEXT PART  -  RECORD THE HEADER DISC ADDRESS
5000  CONTINUE
      IADDPH=L22
C--INCREMENT THE DISC AND CORE ADDRESS FOR THE HEADER BLOCK
      L22=L22+KINCRF(LH122)
      IADD=IADD+LH122
C--SET THE PART HEADER
      IPHD(1)=NOWT
      IPHD(2)=ISTORE(L12A+1)
      IPHD(3)=IADD
      IPHD(4)=IADD+ISTORE(L12A+3)-ISTORE(L12A+2)
      IPHD(5)=ISTORE(L12A+4)
C--FIND THE LENGTH OF THE PARAMETER INFORMATION
      N=ISTORE(L12A+3)-ISTORE(L12A+2)+ISTORE(L12A+1)
C--WRITE THE PARAMETER DETAILS TO DISC
      M12A=ISTORE(L12A+2)
      CALL XUPF(L22,ISTORE(M12A),N)
C--UPDATE THE DISC AND CORE POINTERS FOR THE PARAMETER DETAILS
      L22=L22+KINCRF(N)
      IADD=IADD+N
C--CHECK IF THERE IS ANOTHER PART FOR THIS GROUP
      IF(ISTORE(L12A))5100,5100,5050
C-ANOTHER PART  -  SET THE ADDRESS
5050  CONTINUE
      IPHD(1)=IADD
C--WRITE THE PART HEADER TO THE DISC
5100  CONTINUE
      CALL XUPF(IADDPH,IPHD(1),LH122)
C--MOVE TO THE NEXT PART
      L12A=ISTORE(L12A)
      IF(L12A)5150,5150,5000
C--END OF THIS GROUP  -  CHECK IF THERE ARE MORE FOLLOWING
5150  CONTINUE
      IF(ISTORE(M12))5250,5250,5200
C--LINK IN THE NEXT PART
5200  CONTINUE
      IGHD(1)=IADD
C--WRITE THE GROUP HEADER TO DISC
5250  CONTINUE
      CALL XUPF(IADDGH,IGHD(1),LH121)
C--CHECK IF WE ARE PROCESSING THE OVERALL PARAMETERS
      IF(M12-L12O)5350,5300,5350
C--PROCESSING THE OVERALL PARAMETERS  - ALTER THEIR POINTER
5300  CONTINUE
C----- NEED OVERALL PARAMETERS?
      L12A = ISTORE(L12O+1)
      IF(L12A .GT. 0) THEN
        MD12A = ISTORE(L12A+1)
        M12A  = ISTORE(L12A+2)
        L     = ISTORE(L12A+3)
C----- POLARITY?
        LL = M12A + 3*MD12A
        IF (( LL .LE. L) .AND. (ISTORE(LL) .GT. 0) ) THEN
          MOD23 = MOD23 + 2
          LL = M12A + 4*MD12A
          IF ( (( LL .LE. L) .AND. (ISTORE(LL) .GT. 0)) .OR.
     1      (ISTORE(IL23F(4)+L23M) .GE. 0) )  THEN
            IF (ISSPRT .EQ. 0) WRITE(NCWU,5665)
            WRITE(NCAWU,5665)
            WRITE ( CMON ,5665)
            CALL XPRVDU(NCVDU, 1,0)
5665        FORMAT(' Polarity and enantiopole should not be',
     1      ' refined together')
            GOTO 5850
          ENDIF
C>DJWSEP96
        IF (NINT(STORE(L2C)) .GT. 0) THEN
            IF (ISSPRT .EQ. 0) WRITE(NCWU,5665)
            WRITE(NCAWU,5666)
            WRITE ( CMON ,5666)
            CALL XPRVDU(NCVDU, 1,0)
5666        FORMAT(' WARNING - it is dangerous to refine Polarity'
     C      ,' in a centrosymmetric structure')
        ENDIF
C<DJWSEP96
        ENDIF
C----- ENANTIOPOLE?
        LL = M12A + 4*MD12A
        IF (( LL .LE. L) .AND. (ISTORE(LL) .GT. 0) ) THEN
          MOD23 = MOD23 + 4
          MOD23 = MOD23 + 2
C>DJWSEP96
        IF (NINT(STORE(L2C)) .GT. 0) THEN
            IF (ISSPRT .EQ. 0) WRITE(NCWU,5667)
            WRITE(NCAWU,5667)
            WRITE ( CMON ,5667)
            CALL XPRVDU(NCVDU, 1,0)
5667        FORMAT(' You must not refine the chirality',
     C      ' of a centrosymmetric structure')
            GOTO 5850
        ENDIF
C<DJWSEP96
        ENDIF
C----- EXTINCTION?
        LL = M12A + 5*MD12A
        IF (( LL .LE. L) .AND. (ISTORE(LL) .GT. 0) ) THEN
          MOD23 = MOD23 + 8
        ENDIF
      ENDIF
      L12O=LAST
      GOTO 5600
C--CHECK IF WE ARE PROCESSING THE FIRST ATOM
5350  CONTINUE
      IF(M12-L12)5450,5400,5450
C--SET THE FLAG FOR THE FIRST ATOM
5400  CONTINUE
      L12=LAST
      GOTO 5600
C--CHECK IF WE ARE PROCESSING A GROUP OF SCALE FACTORS
5450  CONTINUE
      J=IDIM12-3
      DO 5550 I=17,J,4
      IF(M12-ICOM12(I))5550,5500,5550
C--ALTER THE CURRENT ENTRY
5500  CONTINUE
      IF (ISTORE(M12 + 1) .GT. 0) THEN
C----- SET LIST 23 POINTER
        K = (I-13)/4
        MOD23 = MOD23 + IL23I(K)
      ENDIF
      ICOM12(I)=LAST
      GOTO 5600
5550  CONTINUE
C--MOVE TO THE NEXT GROUP
5600  CONTINUE
      M12=ISTORE(M12)
      IF(M12)5650,5650,4900
C--ALL THE GROUPS HAVE BEEN DONE  -  WRITE THE CONTROL BLOCK TO DISC
5650  CONTINUE
      CALL XUPF(L22CB,ICOM12(1),IDIM12)
C--ALTER THE ERROR AND OVER WRITE STATUS
      CALL XALTES(KE,1)
      CALL XMKOWF(KE,0)
C--COMPUTE THE NUMBER OF LOCATIONS FOR MATRIX
      N=0
      M12B=L22B
      DO 5660 I=1,N22B
      N=N+((ISTORE(M12B+1)+1)*ISTORE(M12B+1))/2+4
      M12B=M12B+MD22B
5660  CONTINUE
      N=N+2*(N12+4)+4
C -- CALCULATE SPACE REQUIRED ON DISC FOR LIST 11
      CALL XDACVF ( NWDRCF , NWDBLF , NBYWDF )
C -- SPACE REQUIRED IS OVER-ESTIMATED BY UP TO 1 RECORD/BLOCK/KB
      NRECS = ( ( N*ISSL11) / NWDRCF ) + 1
      NBLKS = ( ( N*ISSL11) / NWDBLF ) + 1
      NBYTS =  ( N*ISSL11*NBYWDF ) + 1000
      NKBYTS = NBYTS / 1000
C
      IF (ISSPRT .EQ. 0) THEN
       WRITE ( NCWU , 5670 ) N12 , N22B , N
       WRITE ( NCWU , 5671 ) NRECS , NBLKS , NKBYTS
      ENDIF
      WRITE ( NCAWU , 5670 ) N12 , N22B , N
      WRITE ( NCAWU , 5671 ) NRECS , NBLKS , NKBYTS
      WRITE(CMON,5670) N12, N22B, N
      CALL XPRVDU(NCVDU, 2,0)
5670  FORMAT ('Refinement of ', I5 , ' parameters in ', I4 ,
     2 ' block :'/, I9 ,
     3 ' elements in the least squares matrix ')
5671  FORMAT(
     4 ' Space required on DISK is ' , I4 , ' records, ' ,1X,I4,
     5 '  Blocks, ' , I5 , ' Kbytes. ')
C
      IF (IACTN .EQ. 3) THEN
C----- WRITE AN END TO THE SRQ
          CALL XISRC ( CEND)
C----- INDICATE NO CHANGES TO LIST 23 YET
        IMOD23 = 0
C----- CHECK IF WE NEED UPDATE LIST 23
        IF (NRESTR .GT. 0) THEN
          IF (ISSPRT .EQ. 0) WRITE(NCWU,560) NRESTR
          WRITE(NCAWU,560) NRESTR
560     FORMAT (I6, ' Symmetry restraints written to LIST 17')
C----- UPDATE LIST 23 TO INDICATE THAT RESTRAINTS HAVE BEEN GENERATED
          IF (ISTORE(L23MN + 2) .NE. 0) THEN
            WRITE(NCAWU,561)
            IF (ISSPRT .EQ. 0)WRITE(NCWU,561)
561   FORMAT('LIST 23 updated to activate restraints')
            ISTORE(L23MN + 2) = 0
            IMOD23 = 1
          ENDIF
        ELSE
C----- NO RESTRAINTS, SO WE CAN REWIND THE SRQ AND JUNK THE L17 HEADER
          REWIND NUSRQ
        ENDIF
        IF (NSRQ .NE. 0) CALL XRSRQ (IADSRQ, NSRQ)
      ENDIF
C
C
C----- ANY SPECIAL MODIFIERS REQUESTED (EXTINCTION,POLARITY,ENANTIOPOLE)
      IF (MOD23 .GT. 0) THEN
        M = 32
        DO 6100 N = 1,5
        IF (MOD23 .GE. M) THEN
          J = IL23F(N) + L23M
          IF (ISTORE(J) .NE. 0) THEN
            ISTORE(J) = 0
            IMOD23 = 2
          ENDIF
          MOD23 = MOD23 - M
        ENDIF
        M = M / 2
6100    CONTINUE
C
C        IF (MOD23 .NE. 0) STOP 'MOD23 ERROR IN PRC12'
        IF (MOD23 .NE. 0) CALL GUEXIT(2012)
C----- ANY GROUPS?
C
        IF(NGPDIR .GT. 0) THEN
C
          IF (ISTORE(L23SP + 3) .NE. 0) THEN
            ISTORE(L23SP + 3) = 0
            IMOD23 = 2
          ENDIF
C
        ELSE
C
          IF (ISTORE(L23SP + 3) .NE. -1) THEN
            ISTORE(L23SP + 3) = -1
            IMOD23 = 2
          ENDIF
C
        ENDIF
C
      ENDIF
C
        IF (IMOD23 .NE. 0) THEN
C
          IF(IMOD23 .EQ. 2) THEN
            WRITE(NCAWU,6150)
            IF (ISSPRT .EQ. 0) WRITE(NCWU,6150)
6150      FORMAT(' LIST 23 has been modified to match LIST 12')
          ENDIF
C
          J = 23
          WRITE ( NCAWU,'('' New LIST 23 written to disk'')')
          CALL XWLSTD ( J, ICOM23, IDIM23, 1, -1)
        ENDIF
C
C----- WAS LIST 5 MODIFIED?
C
      IF (NUPDAT .GT. 0) THEN
          IF (ISSPRT .EQ. 0) WRITE(NCWU,580) NUPDAT
          WRITE(NCAWU,580) NUPDAT
580       FORMAT(1X,I6,' Atoms modified;',
     1 '   New  LIST 5 written to DISK')
C-----    WRITE UPDATED LIST 5 TO DISK
          CALL XSTR05 (5, 0, -1)
      ENDIF
C
C--PRINT THE SUCCESS MESSAGE
5750  CONTINUE
      CALL XOPMSG ( IOPL12 , IOPEND , IVERSN )
C--AND NOW RETURN
      CALL XTIME2(2)
      LEF=0
      LSTLEF=0
      RETURN
C
C
C--ERRORS FOUND
5850  CONTINUE
      CALL XERHND ( IERERR )
      GO TO 9900
C
9800  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU, 9801)
      WRITE(NCAWU, 9801)
      WRITE ( CMON , 9801)
      CALL XPRVDU(NCVDU, 1,0)
9801  FORMAT (' Error initialising special positions')
      GOTO 9900
9900  CONTINUE
C -- ERRORS
      CALL XALTES ( KE , -1 )
      CALL XOPMSG ( IOPLSC , IOPLSP , KE )
      GO TO 5750
9910  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG ( IOPL12 , IOPCMI , 0 )
      GO TO 9900
C
      END
C
C
CODE FOR XSPCON
      SUBROUTINE XSPCON(NRESTR)
C
C      NRESTR  NO OF RESTRAINTS WRITTEN TO NEW SRQ
C
C----- CHECK FOR ATOMS ON SPECIAL POSITIONS, AND EITHER ESTABLISH
C      CONSTRAINTS, OR ISSUE RESTRAINTS
C
C
C----  THE SPECIAL POSITION CHECKING MUST BE DONE FOR EACH ATOM
C      AND FOR ALL BLOCKS, SINCE AN ATOM MAY HAVE PARAMETERS IN
C      DIFFERENT BLOCKS. IF ALL THE RELATED PARAMETERS FOR AN ATOM
C      ARE IN THE SAME BLOCK, AND HAVE NOT BEEN EXPLICITLY
C      INVOLVED IN AN 'EQUIVALENCE' OR 'WEIGHT' TYPE OF INSTRUCTION,
C      THEN CONSTRAINTS ARE SET UP, OTHERWISE A WARNING IS ISSUED AND
C      RESTRAINTS ARE SET UP.
C
C
      CHARACTER *5 COORD(10)
      CHARACTER *11 CCST, CRST
C
C--
      DIMENSION X(10), XO(10), KEY(9), COEF(9)
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XLEXIC
\XCARDS
\XCONST
\XCHARS
\XLST05
\XLST12
\XFRM22
\XERVAL
\XSPECC
\XOPVAL
\XIOBUF
C
\QSTORE
C
C
      DATA COORD /'*    ', 'x    ', 'y    ', 'z    ',
     1  'U[11]', 'U[22]', 'U[33]', 'U[23]', 'U[13]', 'U[12]'/
      DATA CCST/' constraint'/, CRST /' restraint '/
C
C
      IF (N12B .LE. 0) RETURN
C--LOOP OVER ALL THE GROUPS
C---- SET THE FIRST GROUP ADDRESS, OVERALL PARAM
      NGA = L12O
      IGROUP = 0
      M5S = L5
      IATOM = 1
      NATOM = IATOM + N5
      MO = MO + 1
      MP = MO
C
C
C
1000  CONTINUE
C-    SET THE INITIAL PART ADDRESS
      IPA = ISTORE(NGA+1)
C-    NOW UPDATE  THE GROUP ADDRESS FOR THE NEXT GROUP
      NGA = ISTORE(NGA)
      IGROUP = IGROUP + 1
      IPART = 0
C
C
      IPART = IPART + 1
C-    NO. WORDS PER PARAMETER ENTRY
      NWE = ISTORE(IPA+1)
C-    FIRST PARAMETER ADDRESS
      IFP = ISTORE(IPA+2)
C-    INDEX (0-9) OF LAST PARAMETER
      JLP = ISTORE(IPA+3)
C-    INDEX OF FIRST PARAMETER. X = 4
      JFP = ISTORE(IPA+4)
C-    SET THE NEXT PART ADDRESS
      IPA = ISTORE(IPA)
C
      IF ((IGROUP .GT. 1) .AND. (IGROUP .LE. NATOM)) THEN
C       WE HAVE A REAL ATOM
C----- GET SPECIAL POSITION INFORMATION
      IF ( KSPGET(X, XO, KEY, COEF, MGM, M5S, -1, JUNK)
     1    .GT. 0 ) GOTO 3100
      MPOS = NGMULT / MGM
C
C-        LOOP OVER ALL THE SET PARAMETERS
C-        NOTE THAT THERE ARE SLOTS EVEN FOR UNSET PARAMETERS.
C
        DO 3000 K = JFP, JLP
C         CHECK WE START AT X OR HIGHER
          IF (K .GE. 4) THEN
            KS = K - 3
            KK = KEY(KS)
C           HAVE WE SEEN THIS KEY BEFORE?
            IF (KK .EQ. NOWT) GOTO 3000
C           INITIALISE NO. OF RELATED PARAMETERS
            NRELP = 0
C           THIS IS A FIRST TIME- GET THE LIST 12 DETAILS
            KPA = IFP + NWE*K
            KBLK = KBLOCK( ISTORE(KPA))
            KFIX = KBITS( ISTORE(KPA+2), IO(2) )
            KEQV = KBITS( ISTORE(KPA+2), IO(1) )
            WTK  = STORE(KPA +1)
C------ IS PARAMETER TO BE FIXED?
C            AND DEFINED  IN CURRENT BLOCK?
            IF ((KK .EQ. 0) .AND. (KBLK .EQ. N12B)) THEN
C           SHOULD NOT BE REFINED
C             IS IT ALREADY REFERENCED?
C             (EG EQUIVALENCED, IS MULTIPART OR WEIGHTED)
C
              IF((KEQV .EQ. 1).OR.(IPA .GT. 0).OR.(WTK .GT. ZEROSQ))
     1          THEN
                WRITE(CMON,527)STORE(M5S), NINT(STORE(M5S+1)),
     1          COORD(KS+1), CRST
                WRITE(NCAWU,'(A)') CMON(1)(:)
                IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)(:)
527   FORMAT(' Parameter  ',A4, I4,4X,  A,6X,' to be fixed by ', A)
                NRESTR = NRESTR + 1
                CALL XRESTF (KS, XO(KS), M5S )
              ELSE
C
                WRITE(CMON,527)STORE(M5S), NINT(STORE(M5S+1)), 
     1          COORD(KS+1), CCST
                WRITE(NCAWU,'(A)') CMON(1)(:)
                IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)(:)
C               SET 'FIX' AND 'EXPLICIT'
                ISTORE(KPA+2) = KOR(ISTORE(KPA+2),IO(2))
                ISTORE(KPA+2) = KOR(ISTORE(KPA+2),IE(2))
                STORE(KPA+1) = 0.
C
              ENDIF
C
C
            ELSE
C
C----- COORDINATE NOT FIXED, BUT MAY BE RELATED
C
C             WE DONT NEED TO CHECK U'S IF K POINT TO X'S
              IF (K .LE. 5) THEN
                JMX = MIN0(6,JLP)
              ELSE
                JMX = JLP
              ENDIF
C
              IF (K .LT. JMX) THEN
C               LOOP OVER REMAINING PARAMETERS
C
                DO 4000 J = K+1, JMX
                    JS = J - 3
C                   CAN WE PROCESS THIS PARAMETER?
                    IF (KEY(JS) .LE. 0) GOTO 4000
C
                    IF (KK .EQ. KEY(JS)) THEN
C-----              RELATED PARAMETER - IN CURRENT BLOCK?
C
                      JPA = IFP + NWE*J
                      JBLK = KBLOCK( ISTORE(JPA))
                      IF ( JBLK .EQ. N12B) THEN
                        JFIX = KBITS( ISTORE(JPA+2), IO(2) )
                        JEQV = KBITS( ISTORE(JPA+2), IO(1) )
                        WTJ  = STORE(JPA +1)
C
                        IF ( (KBLK .EQ. JBLK) .AND.
C                       IN SAME BLOCK, SO OK SO FAR
     1                  ((KEQV.EQ.0) .AND. (JEQV.EQ.0)) .AND.
C                       NO EQUIVALENCES SET, SO STILL OK
     1                  ((KFIX.EQ.0) .AND. (JFIX.EQ.0)) .AND.
C                       NO FIXES SET SO STILL OK
     1                  ((WTK.LE.ZEROSQ) .AND. (WTJ.LE.ZEROSQ)) ) THEN
C                       NO WEIGHT SET SO STILL OK
C                         PARAMETERS KS AND JS WERE NOT SUBJECT TO ANY
C                         USER DEFINED RESTRICTIONS, SO WE CAN SET UP
C                         CONSTRAINTS
C
C                         SET THE EQUIVALENCE NO
C                         SET THE 'EQUIV' AND 'EXPLICIT'
                          ISTORE(JPA) = ISTORE(JPA) + MP
                          ISTORE(JPA+2) = KOR(ISTORE(JPA+2), IO(1))
                          ISTORE(JPA+2) = KOR(ISTORE(JPA+2), IE(2))
                          STORE(JPA+1) = COEF(JS)/COEF(KS)
                          KEY(JS) = NOWT
C                         INCREMENT THE RELATED PARAMETER COUNT
                          NRELP = NRELP + 1
                          WRITE(CMON,528)STORE(M5S),NINT(STORE(M5S+1))
     1                    ,COORD(KS+1), CCST
                          WRITE(NCAWU,'(A)') CMON(1)(:)
                        IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)(:)
528                     FORMAT(' Parameters ',A4, I4,4X, A, ' and ', A,
     1                  ' related by ', A)
C
                        ELSE
C
C                       RELATED COORDS, BUT WE CANNOT SET UP CONSTRAINTS
                          WRITE(CMON,528)STORE(M5S),NINT(STORE(M5S+1))
     1                    ,COORD(KS+1), CRST
                          WRITE(NCAWU,'(A)') CMON(1)(:)
                        IF (ISSPRT .EQ. 0) WRITE(NCWU,'(A)') CMON(1)(:)
                        CALL XRESTL (KS, COEF(KS), XO(KS),
     1                   JS, COEF(JS), XO(JS), M5S)
                          NRESTR = NRESTR + 1
                          KEY(JS) = NOWT
C
                        ENDIF
C
                      ENDIF
C
                    ENDIF
C
4000            CONTINUE
C
                IF (NRELP.GT.0) THEN
C                 SET THE EQUIVALENCE NO, WEIGHT FOR CONSTRAINED PARAM
                  ISTORE(KPA) = ISTORE(KPA) + MP
                  ISTORE(KPA+2) = KOR(ISTORE(KPA+2), IO(1))
                  ISTORE(KPA+2) = KOR(ISTORE(KPA+2), IE(2))
                  STORE(KPA+1) = 1.
C                 INCREMENT THE EQUIVALENCE BASE AND NO
                  MO = MO + 1
                  MP = MO
                ENDIF
C
              ENDIF
C
            ENDIF
C           MARK IT AS PROCESSED
            KEY(KS) = NOWT
C
          ENDIF
C
3000    CONTINUE
C
3100    CONTINUE
C
C-      ANY MORE PARTS TO FIND?
C        IF (IPA .GT. 0) GOTO 2000
        M5S = M5S + MD5
C
      ENDIF
C
C
C-      ANY MORE GROUPS TO FIND?
      IF (NGA .GT. 0) GOTO 1000
C
C
C -- END OF ROUTINE
C
      RETURN
      END
C
CODE FOR XPARTP
      SUBROUTINE XPARTP(IADDP,IADDF,IADDFS,IADDLS,ISTEP)
C--SET UP THE CONSTANTS FOR A PART.
C
C  IADDP   THE ADDRESS OF THE PART HEADER.
C  IADDF   SET TO THE ADDRESS OF THE FIRST WORD OF THE FIRST PARAMETER.
C  IADDFS  SET TO THE ADDRESS OF THE FIRST WORD OF THE FIRST MARKED PARA
C  IADDLS  SET TO THE ADDRESS OF THE FIRST WORD OF THE LAST  MARKED PARA
C  ISTEP   THE NUMBER OF WORDS PER PARAMETER.
C
C--
\ISTORE
C
\STORE
C
\QSTORE
C
C--FIND THE ADDRESS OF THE FIRST AND THE STEP
      ISTEP=ISTORE(IADDP+1)
      IADDF=ISTORE(IADDP+2)
C--COMPUTE THE PARAMETER ADDRESSES
      IADDFS=IADDF+ISTORE(IADDP+4)*ISTEP
      IADDLS=IADDF+ISTORE(IADDP+3)*ISTEP
      RETURN
      END
C
CODE FOR XSYN12
      SUBROUTINE XSYN12(nupdat)
C--THIS SUBROUTINE PROCESSES THE OUTPUT FROM THE LEXICAL SCANNER.
C
C--
C      ML =  0 NORMAL
C            1 RIDE
C            2 LINK (NEEDS AND)
C            3 COMBINE (NEEDS AND)
C            4 GROUP
C
      DIMENSION ORIGIN(3),WORK(3)
      DIMENSION IDELIM(1)
\ISTORE
C
\XRGBOD
\STORE
\XLISTI
\XUNITS
\XSSVAL
\XLEXIC
\XCARDS
\XLST01
\XLST05
\XLST12
\XFRM22
\XCONST
\XAPK
C
\XIOBUF
\QSTORE
C
      DATA IDELIM(1)/'AND '/
      data dfuiso /.05/
C
      DATA NERROR/5/
C----- INDICATE FIRST PART OF CARD
c----- indicate no list 5 changes yet
      nupdat=0
C----- A CARD MAY CONTAIN PARAMETER SETS, SEPARATED BY 'AND'
      ISET = 0
C----- SET THE INITIAL NO OF PARAMETERS TO ZERO
      MRI=0
C----- INITIAILISE LINK AND RIDE EQUIVALENCE BASE
      IMP = 0
C----- SET INCREMENT FOR SIMPLE EQUIVALENCE
      IMR = 1
C----- SET NO OF ATOMS PROCESSED FROM THIS CARD
      IATOM = 0
      IBASE = NOWT
      LBASE = 0
C
C--ASSIGN THE MAXIMUM ADDRESS AS ZERO INITIALLY
      KA=0
C--CHECK THERE ARE ANY ARGUMENTS LEFT
      IF(ME)2100,2100,1000
C--CHECK IF THE FIRST ARGUMENT IS A NUMBER
1000  CONTINUE
      IF(KSYNUM(Z))1200,1050,1150
C--NUMBER FOUND  -  CHECK IF THIS A WEIGHT FUNCTION
1050  CONTINUE
      IF(MG-4)1100,1900,1100
1100  CONTINUE
      CALL XILNUM(ISTORE(MF+1))
      GOTO 2050
1150  CONTINUE
      CALL XILOP(ISTORE(MF+1))
      GOTO 2050
C
1200  CONTINUE
C
C----- CHECK FOR 'AND'
C
      I = KCOMP (1, ISTORE(MF+2), IDELIM(1), 1,1)
      IF (I) 1240, 1240, 1210
1210  CONTINUE
C----- UPDATE DATA SET
      ISET = ISET + 1
C----- NOW CHECK THAT 'AND' IS PERMITTED
      IF (ML .EQ. 2 .OR. ML .EQ. 3) GOTO 1213
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1212)
      WRITE(NCAWU,1212)
      WRITE ( CMON ,1212)
      CALL XPRVDU(NCVDU, 1,0)
1212  FORMAT(' AND not permitted with this directive')
      GOTO 2050
1213  CONTINUE
C----- CHECK FOR TOO MANY 'AND'S ON COMBINE CARD
      IF (ML .EQ.  3) THEN
            IF (ISET .GT.  1) THEN
                  IF (ISSPRT .EQ. 0) WRITE(NCWU,1216)
                  WRITE(NCAWU,1216)
                  WRITE ( CMON ,1216)
                  CALL XPRVDU(NCVDU, 1,0)
1216  FORMAT(' Only one AND permitted on a COMBINE card')
                  GOTO 2050
            ENDIF
      ENDIF
C----- UPDATE POINTERS
      ME = ME - 1
C----- CHECK FOR END OF CARD
      IF (ME) 1450,1450,1220
1220   CONTINUE
C-----CHECK WE HAVE ALREADY PROCESSED SOME PARAMETERS
      IF (IMP) 1450,1450,1230
1230   CONTINUE
      MF = MF + LK2
C----- SAVE THE CURRENT LINK BASE
      LIMP = IMP
C----- REINITIALIZE LINK BASE
      IMP = 0
      IMR = 1
      GOTO 1000
1240   CONTINUE
C
C----- CHECK FOR OVERALL PARAMETER
C
      KB=KOVPCH(I)
      IF(KB)2050,1300,1250
C--INSERT THE OVERALL PARAMETER JUST FOUND
1250  CONTINUE
      KA=MQ+4
C----- ARE THERE LINKED PARAMETERS?
      IF (ML .EQ. 1) THEN
         IF (ISSPRT .EQ. 0) WRITE(NCWU,1252)
         WRITE(NCAWU,1252)
         WRITE ( CMON ,1252)
         CALL XPRVDU(NCVDU, 1,0)
1252     FORMAT(' RIDE not permitted with overall parameters')
         GOTO 2050
      ELSE IF (ML .EQ. 4) THEN
         IF (ISSPRT .EQ. 0) WRITE (NCWU,1253)
         WRITE (NCAWU,1253)
         WRITE ( CMON ,1253)
         CALL XPRVDU(NCVDU, 1,0)
1253     FORMAT( ' A GROUP may not contain OVERALL parameters')
         GOTO 2050
      ELSE IF (ML .GE. 2) THEN
C----- LINKED PARAMETERS
         IMR = IMR + N5A
      ENDIF
      IF (KOVPIN (KB, M5O, N5A, IMP, ISET)) 2050, 1950, 2050
C
C----- CHECK FOR IMPLICIT PARAMETERS
C
1300  CONTINUE
      IDWZAP = 0
      KA=KCORCH(IDWZAP)
      IF (KA) 2050, 1350, 1310
C
1310  CONTINUE
C----- IMPLICIT PARAMETER NAMES
      IF (ML .EQ. 4) THEN
         IF (ISSPRT .EQ. 0) WRITE(NCWU,1311)
         WRITE(NCAWU,1311)
         WRITE( CMON ,1311)
         CALL XPRVDU(NCVDU, 1,0)
1311     FORMAT (' GROUP may not be used with IMPLICIT paramters')
         GOTO 2050
      ELSE
         GOTO 1600
      ENDIF
C
C----- THE VARIABLE IN NOT AN OVERALL OR IMPLICIT PARAMETER
C      SO MUST BE AN ATOM WITH PARAMETERS
1350  CONTINUE
      KA=KATOMU(LN)
      IF(KA)2050,2050,1400
C--CHECK THAT AT LEAST ONE PARAMETER HAS BEEN SPECIFIED FOR THIS ATOM
1400  CONTINUE
      IF(ISTORE(MQ+5) .GT. 0) GOTO 1600
      IF (ML .EQ. 4) GOTO 1552
1450  CONTINUE
C----- PARAMETERS SHOULD BE SPECIFIED
      MF=MF-LK2
      CALL XPCL12
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1500)ISTORE(MF+1)
      WRITE(NCAWU,1500) ISTORE(MF+1)
      WRITE( CMON ,1500) ISTORE(MF+1)
      CALL XPRVDU(NCVDU, 1,0)
1500  FORMAT(' No atomic parameters specified at about column',I5)
1550  CONTINUE
      LEF=LEF+1
      GOTO 2050
C
1552  CONTINUE
C----- GROUP CARD WITHOUT PARAMETERS - WE WILL INSERT THEM
C----- CHECK IF ANY ATOMS FOUND
      IF (N5A .LE. 0) GOTO 1950
C----- INSERT 3 PARAMETERS (XYZ)
      NPARAM = 3
C----- CHECK FOR ROOM
      K = 3 * NPARAM
      K = KSTALL (K)
C----- ADDRESS OF PARAMETER DETAILS
      M = MQ + 6
1555  CONTINUE
      IF (ISTORE(M) .NE. NOWT) THEN
            M = ISTORE(M)
            GOTO 1555
      ENDIF
C----- INDICATE FIRST PARAMETER IS 'X'
      L = 5
      DO 1560 I = 1, NPARAM
      ISTORE(M) = K - MQ
      M = K
      ISTORE(K) = NOWT
      ISTORE(K+1) = L
      K = K + 3
      L = L + 1
1560  CONTINUE
C----- UPDATE NUMBER OF PARAMTERS
      ISTORE(MQ+5) = ISTORE(MQ+5) + NPARAM
C
C----- SAVE NEXT FREE LOCATION
      NNFL = NFL
C----- GENERATE GROUP DERIVATIVES FROM COORDINATES
C----- MAKE FIRST ATOM PIVOT
      IF (IATOM .EQ. 0) THEN
      CALL XMOVE(STORE(M5A+4), ORIGIN(1), 3)
      ENDIF
C----- TEMPORARY STACK FOR DERIVATIVES
      LBASE = 12
      K = LBASE * N5A
      IBASE = KSTALL( K)
      JBASE = IBASE
      M5B = M5A
      DO 1565 I = 1,N5A
      IATOM = IATOM + 1
      CALL XSUBTR (STORE(M5B+4), ORIGIN(1), WORK(1), 3)
C----- DERIV WRT PHI
      CALL XMLTMM( PHIDRV, WORK(1), STORE(JBASE), 3, 3, 1)
C----- DERIV WRTO CHI
      CALL XMLTMM( CHIDRV, WORK(1), STORE(JBASE+3), 3, 3, 1)
C----- DERIV WRTO OMEGA
      CALL XMLTMM( OMGDRV, WORK(1), STORE(JBASE+6), 3, 3, 1)
C----- DERIV WRTO CENTROID
      STORE(JBASE+9) = 1.
      STORE(JBASE+10) = 1.
      STORE(JBASE+11) = 1.
      JBASE = JBASE + LBASE
      M5B = M5B + MD5A
1565  CONTINUE
C
C--SET UP THE INITIAL CONSTANTS
1600  CONTINUE
C----- INITIAL CALL ?
      IF (MRI) 1610,1610,1620
1610  CONTINUE
C----- SET THE NUMBER OF PARAMETERS TO BE FOUND
      MRI = ISTORE (MQ+5)
1620  CONTINUE
      M12=ISTORE(L12A+1)
      MR=ISTORE(MQ+5)
      MS=MQ+6
C--CHECK THAT ONLY CORRECT VALUES ARE REFINED
      DO 1650 MT=1,MR
      MS=ISTORE(MS)+MQ
      IF(ISTORE(MS+1)-3)2350,1650,1650
1650  CONTINUE
C----- SET BASE ADDRESS FOR WEIGHTS
      JBASE = IBASE
C
C
C
C----- LOOP OVER ATOMS
C
1700  CONTINUE
      IF (ML - 1) 1710, 1710, 1720
1710  CONTINUE
C----- RESET EQUIVALENCE BASE FOR SIMPLE EQUIVALENCE AND RIDING
C      MODEL, WHERE CORRESPONDING PARAMETERS PER ATOM ARE LINKED.
      IMP = 0
1720  CONTINUE
C----- CHECK IF ANY ATOMS TO PROCESS
      IF(N5A)1950,1950,1750
C--SET UP THE PARAMETER AND ATOM HEADER BLOCK POINTERS
1750  CONTINUE
      MR=ISTORE(MQ+5)
      MS=ISTORE(MQ+6)+MQ
c----- checking for extended parameter index
coct98
      if (mr .gt. 0) then
c----- some parameters to process
       iflag = nint(store(m5a+3))
c
c       if (istore(mq+6) .eq. nowt) goto 12
       idjw1 = istore(mq+6) + mq
       liso = 0
       laniso = 0
       lspec = 0
       do 10 idjw2 = 1, mr
        lnew = istore(idjw1+1)
        lorig = istore(idjw1+2)
        idjw1 = istore(idjw1) + mq
        if (lorig .eq. NKAS) then
            liso = 1
        else if ((lorig .ge. NKAS+1) .and. (lorig .le. NKAS+3) ) then
            lspec =1
        else if ((lorig .ge. 8) .and. (lorig .le. 13) ) then
            laniso = 1
        endif
10     continue
       if ((liso .eq. 1) .and. (laniso .eq. 1)) then
c-----  mixed temperature factors -  fail
        write(cmon, '(A,A4,I4)') 'Mixed adps for ',store(m5a),
     1  nint(store(m5a+1))
        call xprvdu(ncvdu,1,0)
        goto 1550
       else if ((liso .eq. 1) .and. (iflag .eq. 0)) then
c-----  convert aniso to iso
        if (store(m5a+7) .le. uiso) store(m5a+7) = dfuiso
            call xzerof(store(m5a+8), 5)
            store(m5a+3) = 1.
            nupdat=nupdat + 1
       else if ((laniso .eq. 1) .and. (iflag .eq. 1)) then
c-----  convert iso to aniso
c--insert the default aniso-temperature factors
c-c-c-check whether u[iso] has a reasonable value
        if(abs(store(m5a+7)) .lt. uiso) store(m5a+7)=dfuiso
        store(m5a+7)=store(m5a+7)
        store(m5a+8)=store(m5a+7)
        store(m5a+9)=store(m5a+7)
        store(m5a+10)=store(m5a+7)*store(l1c)
        store(m5a+11)=store(m5a+7)*store(l1c+1)
        store(m5a+12)=store(m5a+7)*store(l1c+2)
        store(m5a+3) = 0.
        nupdat=nupdat + 1
       else if ((lspec .eq. 1) .and. (iflag .eq. 0)) then
c-----  mixed aniso / special figure
        write(cmon, '(A,A4,I4)') 'Mixed adps and special figure for ',
     1  store(m5a), nint(store(m5a+1))
        call xprvdu(ncvdu,1,0)
        goto 1550
       endif
      endif
      IF( ML .LE. 0 ) THEN
            GOTO 1770
      ELSE IF ( ML .EQ. 1) THEN
C----- RIDING MODEL - CHECK WE HAVE CORRECT NO OF PARAMETERS
            IF (MRI .NE. MR) THEN
            IF (ISSPRT .EQ. 0) WRITE(NCWU,1762)
            WRITE(NCAWU,1762)
            WRITE( CMON ,1762)
            CALL XPRVDU(NCVDU, 1,0)
1762  FORMAT(' Parameter incompatibility on RIDE card')
               GOTO 1550
            ENDIF
C----- SET INCREMENT FOR RIDE CARD
            IMR = MR
      ELSE IF ( ML .EQ. 2) THEN
C----- SET INCREMENT FOR LINK CARD
            IMR = IMR + MR
      ELSE IF (ML .EQ.3) THEN
C----- SET INCREMENT FOR COMBINE CARD
            IMR = IMR + MR +MR
      ELSE IF (ML .EQ. 4) THEN
C----- GROUP CARD
C----- PHI,CHI,OMEGA,X0,Y0,Z0
            IMR = 6
      ENDIF
1770  CONTINUE
      IF (MO + IMR -1 - MAXEQ) 1790, 1790, 1780
1780  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU ,1785)MAXEQ
      WRITE(NCAWU,1785)MAXEQ
      WRITE( CMON ,1785)MAXEQ
      CALL XPRVDU(NCVDU, 1,0)
1785  FORMAT('Too many COMPOSITE parameters, (max =',I5,')')
      GOTO 1550
1790  CONTINUE
C
C
      I = KINSRT (IMP, ISET, JBASE)
C
C
      IF(I)2050,1850,1800
1800  CONTINUE
      CALL XPRTCO(3,M5A,ISTORE(MS+1))
      IF(LEF-LSTLEF-NERROR)1850,2050,2050
C--UPDATE FOR THE NEXT ATOM
1850  CONTINUE
      L12A=ISTORE(L12A)
      M12=ISTORE(L12A+1)
      M5A=M5A+MD5A
      N5A=N5A-1
      JBASE = JBASE + LBASE
      GOTO 1700
C
C
C
C
C--UPDATE THE CURRENT POSITION ROUTINES
1900  CONTINUE
      MF=MF+LK2
      ME=ME-1
C--CHECK IF WE HAVE GENERATED TOO MANY ERRORS ALREADY
1950  CONTINUE
      IF(LEF-LSTLEF-NERROR)2000,2050,2050
2000  CONTINUE
      IF (ISET) 2040, 2040, 2020
2020  CONTINUE
C----- CARD HAS AN 'AND' OPERATOR. CHECK NO OF ARGUMENTS
      IF (IMP - LIMP) 2030, 2040, 2030
2030  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU ,2035)
      WRITE(NCAWU,2035)
      WRITE( CMON ,2035)
      CALL XPRVDU(NCVDU, 1,0)
2035  FORMAT(' Number of parameters before and after AND do not match')
      GOTO 2050
2040  CONTINUE
C
C----- CHECK FOR END OF CARD
      IF(ME)2100,2100,2150
C----- END OF CARD - TIDY UP
2100  CONTINUE
      IF (ML - 1) 2120, 2117, 2110
2110  CONTINUE
      IF (ML .EQ. 4) GOTO 2117
C----- 'AND' REQUIRED
      IF(ISET) 2115, 2115, 2117
2115  CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU ,2116)
      WRITE(NCAWU,2116)
      WRITE( CMON ,2116)
      CALL XPRVDU(NCVDU, 1,0)
2116  FORMAT (' AND sequence missing')
C
C----- TOO MANY ERRORS - PROCESSING ABANDONED
2050  CONTINUE
      CALL XPCA( ISTORE(MD+4) )
2117  CONTINUE
C----- AUTO-LINKED PARAMETERS
C----- INCREMENT EQUIVALENCE BASE
      MO = MO + IMR -1
2120  CONTINUE
      RETURN
C--CHECK THE TYPE OF THE NEXT ARGUMENT
2150  CONTINUE
C----- RESTORE NFL IF NECESSARY
      IF (ML .EQ. 4) NFL = NNFL
C----- SET IBASE TO JUNK
      IBASE = NOWT
      LBASE = 0
      IF(ISTORE(MF))1200,1000,2200
C--OPERATOR  -  CHECK FOR A ','
2200  CONTINUE
      IF ( ISTORE(MF) .NE. 8 ) GO TO 1000
      ME=ME-1
      IF(ME)1150,1150,2300
2300  CONTINUE
      MF=MF+LK2
      GOTO 1000
C
C--UNREFINABLE PARAMETER  -  PRINT THE ERROR MESSAGE
2350  CONTINUE
      CALL XPCL12
      IF (ISSPRT .EQ. 0) WRITE(NCWU,2400)
      WRITE(NCAWU, 2400)
      WRITE( CMON , 2400)
      CALL XPRVDU(NCVDU, 1,0)
2400  FORMAT(' Unrefinable atomic parameter')
      CALL XPRTCO(4,I,ISTORE(MS+1))
      GOTO 1550
      END
C
CODE FOR KOVPIN
      FUNCTION KOVPIN( ITYPE, IN, IM, IMP, ISET)
C--INSERT THE OVERALL PARAMETERS IN LIST 12
C
C  ITYPE   THE TYPE OF OVERALL PARAMETER TO INCLUDE :
C
C          1  NORMAL OVERALL PARAMETER.
C          2  LAYER SCALE.
C          3  ELEMENT SCALE.
C          4  BATCH SCALE.
C          5  CELL PARAMETERS
C          6  PROFILE PARAMETERS
C          7  EXTINCTION PARAMETERS
C
C  IN      THE NUMBER OF THE OVERALL PARAMETER TO INCLUDE (1 TO N).
C  IM      THE NUMBER OF OVERALL PARAMETERS TO INCLUDE (STARTING FROM 'I
C
C
C----- IMP AND ISET PASSED ON TO KINSRT
C
C--RETURNS AS FOLLOWS
C
C  -1  NOT USED
C   0  OKAY
C   1  ERROR
C
C--UPON ENTRY THE FOLLOWING VARIABLE MUST BE SET :
C
C  L12A  THE ADDRESS OF THE GROUP HEADER IN QUESTION
C
C--
\ISTORE
C
\STORE
\XLISTI
\XUNITS
\XSSVAL
\XLEXIC
\XCARDS
\XLST05
\XLST12
\XFRM22
\XCONST
\XSCALE
\XIOBUF
C
\QSTORE
C
C--SET THE INITIAL RETURN VALUE
      KOVPIN=0
C--INDICATE THAT THERE IS ONLY PARAMETER HEADET BLOCK
      MS=MQ
      ISTORE(MS)=NOWT
C--ASSIGN THE INPUT VALUES
      KA=IN
      KB=IM
C--CHECK THAT THERE ARE SOME MORE PARAMETERS TO INSERT
1000  CONTINUE
      IF(KB)1600,1600,1050
C--POINT TO THE START OF THE HEADER BLOCK
1050  CONTINUE
      MS=MQ
C--CHECK FOR AN OVERALL PARAMETER
      IF(L12A-L12O)1200,1100,1200
C--CHECK THAT THESE ARE REFINABLE PARAMETERS
1100  CONTINUE
      IF (KA-MD12O) 1200, 1200, 1300
C--OVERALL PARAMETER IS OKAY  -  INDICATE ITS TYPE
1200  CONTINUE
      ISTORE(MS+1)=KA
C--INDICATE ONE PARAMETER TO BE INCLUDED
      MR=1
      M12=ISTORE(L12A+1)
      IF (KINSRT (IMP, ISET, NOWT)) 1400, 1250, 1400
C--UPDATE FOR THE NEXT PARAMETER
1250  CONTINUE
      KA=KA+1
      KB=KB-1
      GOTO 1000
C--ERROR BECAUSE AN UNREFINABLE PARAMETER
1300  CONTINUE
      CALL XPCL12
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1350)
      WRITE(NCAWU,1350)
1350  FORMAT(' Unrefinable overall parameter')
      LEF=LEF+1
1400  CONTINUE
      KOVPIN=1
C--CHECK IF THIS IS AN OVERALL PARAMETER OR ONE OF THE SCALES
      IF(ITYPE-2)1450,1500,1500
C--OVERALL PARAMETER THAT CANNOT BE REFINED
1450  CONTINUE
      CALL XPRTOP(KA)
      GOTO 1600
1500  CONTINUE
      IF (ITYPE-4) 1510, 1510, 1560
1510  CONTINUE
C----- SOME TYPE OF SCALE FACTOR
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1550)(KSCAL(I,ITYPE),I=1,2),KA
      WRITE(NCAWU,1550)(KSCAL(I,ITYPE),I=1,2),KA
      WRITE( CMON ,1550)(KSCAL(I,ITYPE),I=1,2),KA
      CALL XPRVDU(NCVDU, 1,0)
1550  FORMAT(1H ,2A4,' Scale factor number ',I3)
      GO TO 1600
1560  CONTINUE
C----- SOME TYPE OF SPECIAL PARAMETER
      IF (ISSPRT .EQ. 0)
     1 WRITE(NCWU,1570) (KSCAL(I,ITYPE),I = 1,2), KA
      WRITE(NCAWU,1570) (KSCAL(I,ITYPE),I = 1,2), KA
      WRITE( CMON,1570) (KSCAL(I,ITYPE),I = 1,2), KA
      CALL XPRVDU(NCVDU, 1,0)
1570  FORMAT(1X, 2A4, ' Parameter number ', I3)
C--AND NOW RETURN
1600  CONTINUE
      RETURN
      END
C
CODE FOR KINSRT
      FUNCTION KINSRT (IMP, ISET, IBASE)
C--BASIC ROUTINE THAT STORES THE RESULTS OF THE SYNTAX SCANNER
C  AND ALSO CHECKS THAT THE ARGUMENT TO BE INPUT IS ALLOWED HERE
C
C--RETURNS SET AS FOLLOWS :
C
C  0  OKAY
C  1  ERROR
C
C----- IMP    BASE FOR LINKED EQUIVALENCE COUNTER
C             AUTOMATICALLY INCREMENTED FOR LINKED EQUIVALENCING.
C----- ISET  0 FOR FIRST SET OF PARAMETERS FROM A CARD CONTAINING 'AND'
C----- IBASE ADDRESS IN 'STORE' FOR 'WEIGHTS' (MAY BE 'NOWT')
C--ON ENTRY THE FOLLOWING VARIABLES MUST BE SET :
C
C  M12   ADDRESS OF THE CURRENT PART HEADER
C  N12B  THE NUMBER OF THE CURRENT BLOCK
C
C--ALSO THE FOLLOWING VARIABLES ARE ASSUMED TO BE USED :
C     MR = No OF PARAMETERS
C     MS = ADDRESS OF FIRST PARAMETER
C      ML = 0 FOR EQUIV
C         = 1 FOR RIDE
C         = 2 FOR LINK
C         = 3 FOR COMBINE
C         = 4 FOR GROUP
C
C      NPASS = NO OF 'PARTS' TO BE SET FOR THE FUNCTION
C
C--
\ISTORE
      DIMENSION ICMB(2,2), WEIGHT(2,2), IGRP(4,3)
C----- WT = SQRT(2.)/2., IE MATRIX WEIGHT IS ITS OWN INVERSE
      PARAMETER ( WT = 0.707106781, WTN = -0.707106781)
C
\STORE
\XLISTI
\XUNITS
\XSSVAL
\XCARDS
\XLEXIC
\XLST05
\XLST12
\XFRM22
\XCONST
C
\XIOBUF
\QSTORE
C----- OFFSETS FOR PARAMETERS ON COMBINE CARD
      DATA ICMB/0,1, 1,0/
C----- OFFSETS FOR PARAMETERS ON GROUP CARDS
      DATA IGRP/0,1,2,3, 0,1,2,4, 0,1,2,5/
C----- WEIGHTS FOR PARAMETERS ON COMBINE
      DATA WEIGHT/WT,WT,WT,WTN/
C
      KINSRT=0
C----- ASSIGN A VERY SMALL NUMBER
      ABIT = 1.1 * ZEROSQ
C----- SET THE GROUP DERIVATIVES BASE
      JBASE = IBASE
      JSET = ISET + 1
C----- SAVE M12
      M12J = M12
C----- SET THE EQUIVALENCE INCREMENT
      IF (ML .LE. 0) THEN
C---------- EQUIVALENCE
            INC = 0
            NPASS = 1
      ELSE IF (ML .LE.2) THEN
C---------- LINK OR RIDING
            INC = 1
            NPASS = 1
      ELSE IF (ML .EQ. 3) THEN
C---------- COMBINE
C---------- CHECK THAT THERE ARE TWO 'PARTS'
            INC = 2
            NPASS = 2
            CALL XCHKPT (NPASS)
      ELSE IF (ML .EQ. 4) THEN
C---------- GROUP
            INC = 0
C---------- CHECK THAT THERE ARE 4 PARTS
            NPASS = 4
            CALL XCHKPT (NPASS)
      ELSE
C----- ILLEGAL ML VALUE
         CALL XPCL12
         IF (ISSPRT .EQ. 0) WRITE(NCWU,900)
         WRITE(NCAWU,900)
         WRITE( CMON ,900)
         CALL XPRVDU(NCVDU, 1,0)
900      FORMAT(' Illegal request to KINSRT')
         GOTO 1300
      ENDIF
C
C----- PASS THROUGH THE PARAMETERS FOR THE CURRENT ATOM
C--CHECK IF THERE ARE MORE PARAMETERS
1000  CONTINUE
      IF(MR)1050,1050,1100
1050  CONTINUE
      RETURN
C----- CALCULATE THE PARAMETER POSITION, 'TYPE' = 0, 'X' = 4
1100  CONTINUE
      MT=ISTORE(MS+1)-1
C----- THE COUNTER FOR THE PASSES THROUGH THE PARAMETER PARTS
      IPASS = 1
C----- RE-SET M12
      M12 = M12J
C----- SET THE EQUIVALENCE VALUE INCREMENT
      JMP = IMP
C
1105  CONTINUE
C----- FIND THE LENGTH OF A 'PART' ENTRY
      NWDPT = ISTORE(M12+1)
C----- PASS THROUGH THE PARTS FOR THIS PARAMETER
C----- ADDRESS OF PARAMETER ENTRY
      I = MT * NWDPT + ISTORE(M12+2)
C--CHECK IF THIS PARAMETER HAS BEEN SET BEFORE
      IF(ISTORE(I))1150,1650,1150
C--CHECK IF THE PARAMETER WAS ASSIGNED IN DIFFERENT BLOCK
1150  CONTINUE
      IF(N12B-KBLOCK(ISTORE(I)))1200,1350,1200
1200  CONTINUE
      CALL XPCL12
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1250)
      WRITE(NCAWU,1250)
      WRITE( CMON,1250)
      CALL XPRVDU(NCVDU, 1,0)
1250  FORMAT(' Parameter already specified',
     2 ' in a different matrix block')
1300  CONTINUE
      LEF=LEF+1
      KINSRT=1
      GOTO 1050
C--CHECK IF THE IMPLICIT/EXPLICIT STATUS IS COMPATIBLE
1350  CONTINUE
      IF(IEC(MH))1400,1550,1400
1400  CONTINUE
      IF(KAND(ISTORE(I+2),IEC(MH)))1450,1550,1450
C--ERROR BECAUSE OF TWO INCOMPATIBLE DEFINITIONS OF A PARAMETER
1450  CONTINUE
      CALL XPCL12
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1500)
      WRITE(NCAWU,1500)
      WRITE( CMON ,1500)
      CALL XPRVDU(NCVDU, 1,0)
1500  FORMAT(' Parameter specified',
     2 ' in a different way by a previous directive')
      GOTO 1300
C--CHECK IF THIS OPERATION IS COMPATIBLE WITH ANY PREVIOUS ONES
1550  CONTINUE
      IF(KAND(ISTORE(I+2),IOC(MG)))1450,1600,1450
C--IF THIS FUNCTION IS IMPLICIT WE ARE NOT INTERESTED
1600  CONTINUE
      IF(IE(MH)-IE(1))1700,1850,1700
C--INSERT THE BLOCK FOR A COMPLETELY NEW PARAMETER
1650  CONTINUE
      CALL XBLOCK(N12B,ISTORE(I))
C----- ADD IN THE RELATIVE LS PARAMETER NUMBER
1700  CONTINUE
      IF (ML .EQ. 3) JMP = IMP + ICMB( IPASS, JSET)
      IF (ML .EQ. 4) JMP = IMP + IGRP( IPASS, MT-3)
      ISTORE(I) = ISTORE(I) + MP + JMP
      ISTORE(I+2) = KOR(ISTORE(I+2),IE(MH))
      ISTORE(I+2) = KOR(ISTORE(I+2),IO(MG))
C----- NOTE THAT AT THIS STAGE NO ACTUAL PARAMETER NO IS ASSIGNED
C-----
      IF (ML .NE. 3 .AND. ML .NE. 4) GOTO 1730
C----- THERE SHOULD BE NO WEIGHT SET YET
       IF (ABS (STORE(I+1)) - ZERO) 1730, 1730, 1710
1710   CONTINUE
      IF (ISSPRT .EQ. 0) WRITE(NCWU,1720)
      WRITE(NCAWU,1720)
      WRITE( CMON ,1720)
      CALL XPRVDU(NCVDU, 1,0)
1720   FORMAT(' A weight has previously been stored for a' ,
     1 ' COMPOSITE parameter')
       GOTO 1300
C
1730   CONTINUE
      IF (ML .EQ. 3 ) THEN
C----- SET UP WEIGHTS FOR A 'COMBINE' CARD
            STORE(I+1) = WEIGHT(IPASS, JSET)
      ELSE IF (ML .EQ. 4) THEN
C----- SET UP WEIGHTS (DERIVATIVES) FOR A GROUP CARD
            IF( STORE(I+1) .GT. 0) GOTO 1710
            IF ( ABS( STORE(JBASE+3*(IPASS-1))) .GE.  ABIT) THEN
                  STORE(I+1) = STORE(JBASE+3*(IPASS-1))
            ELSE
                  STORE(I+1) = ABIT
            ENDIF
      ELSE
C----- NON-COMPOUND PARAMTERS
C--CHECK IF THERE IS ALREADY A 'WEIGHT' STORED
      IF(ABS(STORE(I+1)) .LE. ZEROSQ) STORE(I+1)=Z
      ENDIF
C--SET UP THE MAX. AND MIN. DETAILS
      ISTORE(M12+4)=MIN0(MT,ISTORE(M12+4))
      ISTORE(M12+3)=MAX0(MT,ISTORE(M12+3))
C----- SHOULD THERE BE ANY MORE PARTS?
      IF (IPASS .GE. NPASS) GOTO 1840
      IPASS = IPASS + 1
      M12 = ISTORE(M12)
      GOTO 1105
C
C
C
1840  CONTINUE
C--UPDATE FOR THE NEXT PARAMETER
1850  CONTINUE
      MR=MR-1
      MS=ISTORE(MS)+MQ
C----- INCREMENT THE LINK EQUIVALENCE COUNTER
      IMP = IMP + INC
C----- INCREMENT THE GROUP DERIVATIVE BASE
      JBASE = JBASE + 1
      GOTO 1000
      END
C
C
CODE FOR XCHKPT
      SUBROUTINE XCHKPT (INC)
C
C----- CHECK IF THE CURRENT ATOM HAS SUFFICIENT PARTS, AND ADD MORE IF N
\ISTORE
\STORE
\XLST12
\QSTORE
C
      M12J =  M12
      NPART = INC-1
      DO 1000 I = 1, NPART
      M12J = ISTORE(M12J)
      IF (M12J .LT. 0) THEN
C---- INSERT A NEW PART
            M12J = KINEP(L12A)
      ENDIF
1000  CONTINUE
      RETURN
      END
C
C
C
CODE FOR XFRBDM
      SUBROUTINE  XFRBDM (PHI, CHI, OMG)
\XRGBOD
\XUNITS
\XSSVAL
      CALL XDRVMT (PHI, CHI, OMG, 1, PHIDRV)
      CALL XDRVMT (PHI, CHI, OMG, 2, CHIDRV)
      CALL XDRVMT (PHI, CHI, OMG, 3, OMGDRV)
      RETURN
      END
C
C
CODE FOR XDRVMT
      SUBROUTINE XDRVMT (PHI, CHI, OMG, IAXIS, RES)
C
C----- SET UP D/DX FOR COORDINATES, GIVEN THE ROTATIONS
C      IN RADIANS
C
C      PHI,CHI,OMG = ANGLES IN RADIANS
C      IAXIS = ROTATION AXIS FOR REQUIRED DERIVATIVES
C
\ISTORE
      DIMENSION RES(3,3), WORK(3,3), D(3)
\STORE
\XUNITS
\XSSVAL
\XLST01
\QSTORE
C
      D(1) = 1.
      D(2) = 1.
      D(3) = 1.
      CPHI = COS(PHI)
      SPHI = SIN(PHI)
      CCHI = COS(CHI)
      SCHI = SIN(CHI)
      COMG = COS(OMG)
      SOMG = SIN(OMG)
C----- INTERCHANGE COS AND -SIN FOR DERIVATIVE MATRIX
      IF (IAXIS .EQ. 1) THEN
            D(1) = 0.
            TEMP = CPHI
            CPHI = -SPHI
            SPHI = TEMP
      ELSE IF (IAXIS .EQ. 2) THEN
            D(2) = 0.
            TEMP = CCHI
            CCHI = -SCHI
            SCHI = TEMP
      ELSE IF (IAXIS .EQ. 3) THEN
            D(3) = 0.
            TEMP = COMG
            COMG = -SOMG
            SOMG = TEMP
      ENDIF
C
      CALL XRTMAT (D(1),D(2),D(3),CPHI,SPHI,CCHI,SCHI,COMG,SOMG,RES)
C----- POST MULT BY ORTHOG MATRIX
      CALL XMLTMT (RES, STORE(L1O1), WORK, 3, 3, 3)
C----- PRE MULT BY INVERSE ORTHOG MATRIX
      CALL XMLTMM (STORE(L1O2), WORK, RES, 3, 3, 3)
      RETURN
      END
C
CODE FOR XRTMAT
      SUBROUTINE XRTMAT( PHI, CHI, OMG, CPHI, SPHI, CCHI, SCHI, COMG,
     1 SOMG, RES)
C
C----- SET UP PRODUCT ROTATION MATRIX FOR ROTATIONS ABOUT PRINCIPAL AXES
C
C      PHI, CHI, OMG = 1 FOR ROTATION MATRIX
C                    = 0 FOR DERIVATIVE MATRIX WRTO THAT ANGLE
C
C      CPHI, CCHI, COMG = COSINE OF ANGLE FOR ROTATION MATRIX
C                       = SINE OF ANGLE FOR DERIVATIVE MATRIX
C      SPHI, SCHI, SOMG = SINE OF ANGLE FOR ROTATION MATRIX
C                       = COSINE OF ANGLE FOR DERIVATIVE MATRIX
C
      DIMENSION RES(3,3)
C
      RES(1,1) =  OMG * CPHI * CCHI
      RES(2,1) = -OMG * SPHI * CCHI
      RES(3,1) = -PHI *  OMG * SCHI
C
      RES(1,2) = -CPHI * SCHI * SOMG + CHI * SPHI * COMG
      RES(2,2) =  SPHI * SCHI * SOMG + CHI * CPHI * COMG
      RES(3,2) = -PHI  * CCHI * SOMG
C
      RES(1,3) =  CPHI * SCHI * COMG + CHI * SPHI * SOMG
      RES(2,3) = -SPHI * SCHI * COMG + CHI * CPHI * SOMG
      RES(3,3) =  PHI  * CCHI * COMG
C
      RETURN
      END
C
CODE FOR KINE
      FUNCTION KINE(N12)
C--SET UP THE INITIAL ENTRY FOR A GROUP IN LIST 22.
C
C  N12     THE NUMBER OF PARAMETERS IN THE GROUP TO BE MADE.
C
C--ON RETURN 'KINE' IS SET TO THE ADDRESS OF THE GROUP CONTROL BLOCK.
C
C--ENTRIES ARE MADE FROM 'LFL' DOWNWARDS.
C
C--
\ISTORE
C
\STORE
\XFRM22
\XLISTI
\XCONST
C
\QSTORE
C
C--SET THE RECORD NUMBER WE ARE USING
      IREC=1001
      L12=KCHLFL(LH121)
      ISTORE(L12)=NOWT
      ISTORE(L12+1)=NOWT
      ISTORE(L12+2) = N12
      ISTORE(L12+1) = KINEP (L12)
      KINE=L12
      RETURN
      END
C
CODE FOR KINEP
      FUNCTION KINEP (L12)
C--INSERT A PART FOR AN ATOM OR OVERALL PARAMETER
C
C  L12  ADDRESS OF THE GROUP HEADER FOR THIS PART.
C
C--THE RETURN VALUE OF 'KINEP' IS THE ADDRESS OF THE PART CONTROL BLOCK.
C
C--THIS ROUTINE SETS THE DATA UP FROM THE TOP OF CORE DOWN.
C
C--
\ISTORE
C
\STORE
\XLISTI
\XFRM22
\XCONST
C
\QSTORE
C
C----- THE NUMBER OF WORDS PER ENTRY IS SET HERE, AND PASSED
C      TO MD12A VIA XPARTP
      I=L12+1
C----- HOW MANY PARAMETERS
      N12 = ISTORE(L12 +2)
C--CHECK IF THERE ARE ANY OTHER PARTS TO LINK IN AFTER
1000  CONTINUE
      IF(ISTORE(I))1100,1100,1050
C--PICK UP THE NEXT PART
1050  CONTINUE
      I=ISTORE(I)
      GOTO 1000
C--LINK IN THE NEW PART
1100  CONTINUE
      IREC=1002
      M12=KCHLFL(LH122)
      ISTORE(I)=M12
C--INSERT THE NEW PART
      ISTORE(M12)=NOWT
      ISTORE(M12+1) = NPRT12
      ISTORE(M12+2)=KCHLFL(MAX0(N12,0)*ISTORE(M12+1))
      ISTORE(M12+3)=-1000000
      ISTORE(M12+4)=1000000
      J=ISTORE(M12+2)
C--CHECK IF THERE ARE ANY PARAMETERS TO INSERT FOR THIS PART
      IF(N12)1300,1300,1200
1200  CONTINUE
      DO 1250 I=1,N12
C----- THE BLOCK/EQUIV RECORD
      ISTORE(J)=0
C----- THE WEIGHT
      STORE(J+1)=0.
C----- THE PACKED FLAGS
      ISTORE(J+2) = 0
      J=J+ISTORE(M12+1)
1250  CONTINUE
1300  CONTINUE
      KINEP=M12
      RETURN
      END
C
CODE FOR XBLOCK
      SUBROUTINE XBLOCK(I,J)
C--INSERT THE BLOCK NUMBER 'I' INTO THE WORD J
C
C
      J=I*32768
      RETURN
      END
C
CODE FOR KBLOCK
      FUNCTION KBLOCK(I)
C--EXTRACT THE BLOCK NUMBER STORED IN 'I'
C
C
      KBLOCK=I/32768
      RETURN
      END
C
CODE FOR XPCL12
      SUBROUTINE XPCL12
C--PRINT LIST 12  -  THIS SUBROUTINE PRINTS UP TO AND INCLUDING THE
C  PRESENT CARD
C
\XLISTI
C
      CALL XPCLNN(LN)
      RETURN
      END
C
CODE FOR XPRT22
      SUBROUTINE XPRT22
C -- PRINT THE RELOCATABLE LIST 12 - STORED AS A LIST 22
C
      PARAMETER ( NAMELN = 18 )
      PARAMETER ( LOVER = 10 , NOVER = 6 )
      PARAMETER ( LATOMP = 8 , NATOMP = 13 )
C
      CHARACTER*132 CLINE1 , CLINE2
C
      CHARACTER*(LOVER) COVER(NOVER)
      CHARACTER*(LATOMP) CATOMP(NATOMP), CATOMPS(NATOMP)
C--
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XLST05
\XLST12
\XERVAL
\XOPVAL
C
\QSTORE
C
C
      DATA COVER  / '   SCALE' , ' DU[ISO]' , ' OU[ISO]' ,
     2              'POLARITY' , ' ENANTIO' , 'EXTPARAM' /
C      DATA CATOMP / ' ' , ' ' , '   OCC  ' , ' U[ISO] ' ,
C     2 '    X   ' , '    Y   ' , '    Z   ' ,
C     3 '  U[11] ' , '  U[22] ' , '  U[33] ' ,
C     4 '  U[23] ' , '  U[13] ' , '  U[12] ' /
      DATA CATOMP / ' ' , ' ' , '   OCC  ' , ' (FLAG) ' ,
     2 '    X   ' , '    Y   ' , '    Z   ' ,
     3 '  U[11] ' , '  U[22] ' , '  U[33] ' ,
     4 '  U[23] ' , '  U[13] ' , '  U[12] ' /
      DATA CATOMPS / ' ' , ' ' , ' ' , ' ' ,
     2               ' ' , ' ' , ' ' ,
     3               '  U[ISO]' , '  SIZE  ' , '   DEC  ' ,
     4               '   AZI  ' , ' ' , ' ' /
C
C
      DATA ICOMSZ / 512 /
      DATA IVERSN / 210 /
 
C
C
CMAR98
      ICOMBF = KSTALL (ICOMSZ)
      CALL XZEROF (STORE(ICOMBF), ICOMSZ)
C
      ISTAT = KRDDPV ( ISTORE(ICOMBF) , ICOMSZ )
      IF ( ISTAT .LT. 0 ) GO TO 9910
C -- CHECK IF LIST 22 IS AVAILABLE FOR PRINTING
      ISTAT = KPRTLN ( 22 , I )
      IF ( ISTAT .LT. 0 ) GO TO 9900
C
C -- LOAD LISTS 5 AND 22
      CALL XFAL05
      CALL XFAL12 ( 0 , 0 , I , J )
      IF ( IERFLG .LT. 0 ) GO TO 9900
C
C -- PRINT OUT THE BLOCKING INFORMATION
      IF (ISSPRT .EQ. 0) THEN
      WRITE ( NCWU , 1100 ) N12 , N12B
      ENDIF
1100  FORMAT ( / 10X , I5 , ' parameter(s) in' , I5 , ' block(s)' ,
     2 ' - as follows:' , // , 20X , 'Block   Order     Parameter(s)' )
C
      M12B = L12B
      DO 1200 J = 1 , N12B
        K = ISTORE(M12B) + ISTORE(M12B+1) - 1
      IF (ISSPRT .EQ. 0) THEN
        WRITE ( NCWU , 1150 ) J , ISTORE(M12B+1) , ISTORE(M12B) , K
      ENDIF
1150    FORMAT ( / 20X , I3 , 2I9 , ' -' , I4)
        M12B = M12B + MD12B
1200  CONTINUE
C
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE ( NCWU , 1205 )
      ENDIF
1205  FORMAT ( // , 21X , 'Matrix relating least-squares parameters ' ,
     2 'to ''physical'' parameters' , // ,
     3 1X , 'Format of entry describing relation of each physical ' ,
     4 'parameter that contributes to a least-squares parameter : ',//,
     5 21X , 'Least-squares parameter number' , /
     6 21X , 'Weight of the contribution' , /// )
C
      M12=L12O
      M5 = L5
      J = 0
C
      NATOM = N5 + 1
      NLAYER = NATOM + 1
      NELEM = NLAYER + 1
      NBATCH = NELEM + 1
      NCELL = NBATCH + 1
      NPROF = NCELL + 1
      NEXTI = NPROF + 1
C
C
C -- PASS THROUGH THE GROUPS
C
1250  CONTINUE
C
      L12A = ISTORE(M12+1)
C
      CLINE1 = ' '
      CLINE2 = ' '
C
      J = J + 1
C
C -- WRITE COLUMN HEADINGS
C
      IF ( J .EQ. 1 ) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE ( NCWU , 1255 ) COVER
      ENDIF
1255    FORMAT ( //  , 19X , 13A )
        LENGTH = LOVER
      ELSE IF ( J .EQ. 2 ) THEN
C        WRITE ( NCWU , 1255 ) CATOMP
        WRITE ( NCWU , 1256 ) CATOMP
        WRITE ( NCWU , 1257 ) CATOMPS
1256    FORMAT ( //  , 3X , 13A )
1257    FORMAT (       3X , 13A , / )
        LENGTH = LATOMP
      ENDIF
C
C -- WRITE BLANK LINE SEPARATING ATOMS
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE ( NCWU , 1305 )
      ENDIF
1305  FORMAT ( 1X )
C
C -- ASSIGN A NAME TO THIS GROUP
C
      IF ( J .EQ. 1 ) THEN
        CLINE1(1:NAMELN) = 'Overall parameters'
      ELSE IF ( J .LE. NATOM ) THEN
        WRITE ( CLINE1(1:NAMELN) , '(A4,F8.0)' ) ISTORE(M5),STORE(M5+1)
C-C-C-WRITE FLAG VALUE INTO OUTPUTLINE
        WRITE ( CLINE1((NAMELN+LENGTH+1):(NAMELN+2*LENGTH)) ,
     2         '(3X,A1,I1,A1,2X)' ) '(' , NINT(STORE(M5+3)) , ')'
        M5 = M5 + MD5
      ELSE IF ( J .EQ. NLAYER ) THEN
        CLINE1(1:NAMELN)  = 'Layer scales'
      ELSE IF ( J .EQ. NBATCH ) THEN
        CLINE1(1:NAMELN) = 'Batch scales'
      ELSE IF ( J .EQ. NELEM ) THEN
        CLINE1(1:NAMELN) = 'Element scales'
      ELSE IF ( J .EQ. NCELL ) THEN
        CLINE1(1:NAMELN) = 'Cell parameters'
      ELSE IF ( J .EQ. NPROF ) THEN
        CLINE1(1:NAMELN) = 'Profile parameters'
      ELSE IF ( J .EQ. NEXTI ) THEN
        CLINE1(1:NAMELN) = 'Extinction param'
      ENDIF
C
      IPOS = NAMELN + 1
C
      IF ( L12A .LE. 0 ) THEN
      IF (ISSPRT .EQ. 0) THEN
        WRITE ( NCWU , 1405 ) CLINE1(1:IPOS)//
     2 ' ( No parameters refined )'
      ENDIF
        GO TO 2050
      ENDIF
C
C -- PASS THROUGH THE INDIVIDUAL PARTS FOR EACH GROUP
1350  CONTINUE
C
      MD12A=ISTORE(L12A+1)
      M12A=ISTORE(L12A+2)
      L=ISTORE(L12A+3)
      NUNREF = ISTORE(L12A+4)
C
C-C-C-FOLLOWING (OUTER) IF-BLOCK ONLY REASONABLE FOR NUNREF < 0,
C-C-C-BUT WHEN COULD THIS HAPPEN ?????
      IF ( NUNREF .LE. 0 ) THEN
      ELSE
C        IPOS = IPOS + NUNREF * LENGTH
       IF ( (J .GE. 2) .AND. (J .LE. NATOM) ) THEN
C-C-C-ATOMIC PARAMETERS
        IPOS = IPOS + (NUNREF-2) * LENGTH
       ELSE
C-C-C-OVERALL AND OTHER PARAMETERS
        IPOS = IPOS + NUNREF * LENGTH
       ENDIF
      ENDIF
C
      DO 1400 I = M12A , L , MD12A
        IEND = IPOS + LENGTH - 1
        IF ( MD12A .GT. 1 ) THEN
          WEIGHT = STORE(I+1)
        ELSE
          WEIGHT = 1.
        ENDIF
      IF ( ISTORE(I) .GT. 0 ) THEN
        WRITE ( CLINE1(IPOS:IEND) , '(I5,3X)' ) ISTORE(I)
        WRITE ( CLINE2(IPOS:IEND) , '(F8.4)' ) WEIGHT
      END IF
        IPOS = IEND + 1
1400  CONTINUE
C
      IF (ISSPRT .EQ. 0) THEN
      WRITE ( NCWU , 1405 ) CLINE1
      ENDIF
      IF (ISSPRT .EQ. 0) THEN
      WRITE ( NCWU , 1405 ) CLINE2
      ENDIF
1405  FORMAT ( 1X , A )
      IPOS = NAMELN + 1
      CLINE1 = ' '
      CLINE2 = ' '
C
C
C -- INCREMENT TO THE NEXT PART
      L12A = ISTORE(L12A)
C
C -- CHECK IF THERE IS ANOTHER PART
      IF ( L12A .GT. 0 ) GO TO 1350
C
C -- INCREMENT TO THE NEXT ATOM
2050  CONTINUE
      M12=ISTORE(M12)
      IF ( M12 .GT. 0 ) GO TO 1250
C
C
9000  CONTINUE
C
C -- END OF ROUTINE
C
      CALL XSTRLL ( ICOMBF )
C
      CALL XOPMSG ( IOPP22 , IOPEND , IVERSN )
      RETURN
C
C
9900  CONTINUE
C -- ERRORS
      CALL XOPMSG ( IOPP22 , IOPABN , 0 )
      GO TO 9000
9910  CONTINUE
      CALL XOPMSG ( IOPP22 , IOPCMI , 0 )
      GO TO 9900
      END
C
C
CODE FOR XFAL12
      SUBROUTINE XFAL12(IFLAG,NWPPD,IADD,IADDT)
C--FORM AN ABSOLUTE LIST 12 IN STORE FROM A LIST 22 OFF THE DISC.
C
C  IFLAG   THIS PARAMETER CONTROLS THE FORMAT OF THE ENTRY IN LIST 12
C          FOR EACH PARAMETER :
C
C          -1  ENTRIES IN LIST 12 ARE ABSOLUTE ADDRESSES THAT REFER
C              TO THE FIRST WORD FOR THIS PARAMETER IN THE STACK
C              THAT IS SET UP AT 'IADD', OR TO 'IADDT' IF THE
C              PARAMETER IS NOT TO BE REFINED.
C           0  ENTRIES IN LIST 12 ARE LEFT AS RELATIVE ADDRESSES
C              AND THUS GIVE THE LEAST SQUARES PARAMETER NUMBER
C              FOR EACH COORDINATE, OR '-1' IF THE COORDINATE IS
C              NOT TO BE REFINED.
C
C  NWPPD   THE NUMBER OF PARTIAL DERIVATIVES PER COORDINATE IN THE
C          STACK AT 'ADD'.
C  IADD    THE ADDRESS OF THE PARTIAL DERIVATIVE STACK  -  SET ON RETURN
C  IADDT   THE ADDRESS TO WHICH ALL NON-PARAMETERS ARE LINKED.
C          (THIS VARIABLE IS THE SAME AS 'L22PD').
C
C--USEAGE OF THE VARIABLES :
C
C  L12     LOCATION OF THE FIRST ATOM GROUP HEADER
C  N12     NUMBER OF LEAST SQUARES PARAMETERS
C
C  L12A    LOCATION OF THE CURRENT ATOM GROUP HEADER
C  MD12A   NUMBER OF WORDS PER PARAMETER ENTRY FOR THIS ATOM
C
C  L12O    LOCATION OF THE OVERALL PARAMETER GROUP HEADER
C          THIS VARIABLE ALSO POINTS TO THE FIRST GROUP HEADER
C          IN LIST 12.
C  MD12O   NUMBER OF WORDS PER PARAMETER FOR THE OVERALL PARAMETERS
C  N12O    NUMBER OF OVERALL PARAMETERS
C
C  L12B    LOCATION OF THE FIRST WORD OF THE BLOCK INFORMATION STACK
C  MD12B   NUMBER OF WORDS PER ENTRY IN THE STACK
C  N12B    NUMBER OF BLOCKS FOR THE MATRIX
C
C  L12LS   THE LOCATION OF THE GROUP HEADER FOR THE LAYER SCALES.
C
C  L12ES   THE LOCATION OF THE GROUP HEADER FOR THE ELEMENT SCALES.
C
C  L12BS   THE LOCATION OF THE GROUP HEADER FOR THE BATCH SCALES.
C
C  L12CL   THE LOCATION OF THE GROUP HEADER FOR CELL PARAMETERS
C  L12PR   THE LOCATION OF THE GROUP HEADER FOR PROFILE PARAMETERS
C  L12EX   THE LOCATION OF THE GROUP HEADER FOR PROFILE PARAMETERS
C
C--
\ISTORE
\ICOM12
\ICOM22
C
\STORE
\XLST12
\XLST22
\XUNITS
\XSSVAL
\XERVAL
C
\QSTORE
\QLST12
\QLST22
C
\IDIM22
C--SET THE LIST TYPE TYPE AND LOAD IT FROM THE DISC
      IULN=22
      CALL XLDLST(IULN,ICOM22,IDIM22,0)
      IF ( IERFLG .LT. 0 ) GO TO 9900
\IDIM12
C--MOVE THE COMMON BLOCK FOR LIST 12 INTO ITS PLACE
      CALL XDOWNF(L22CB,ICOM12(1),IDIM12)
C--ALTER THE POINTERS SO THAT THE ABSOLUTE AND NOT RELATIVE
      K=IDIM12-3
      DO 1000 I=1,K,4
      ICOM12(I)=ICOM12(I)+L22
1000  CONTINUE
C--CONSTRUCT THE PARTIAL DERIVATIVE AREA
      MD22PD=NWPPD
      N22PD=N12+1
      L22PD=KCEDR(IULN,1,1001,MD22PD,N22PD,13)
C--SET THE RETURN ADDRESSES
      IADDT=L22PD
      IADD=L22PD+MD22PD
C--PREPARE TO LOOP OVER EACH GROUP AND PART CHANGING THE VALUES AS NEC.
      I=L12O
C--CHECK FOR THE END OF THE GROUP HEADER CHAIN
1050  CONTINUE
      IF(I)1600,1600,1100
C--CONVERT THE VALUES IN THE GROUP HEADER TO ABSOLUTE VALUES
1100  CONTINUE
      IF (ISTORE(I) .GT. 0) ISTORE(I) = ISTORE(I) + L22
      ISTORE(I+1)=ISTORE(I+1)+L22
C--FIND THE ADDRESS OF THE FIRST PART
      J=ISTORE(I+1)
C--CHECK FOR ANOTHER PART FOR THIS GROUP
1150  CONTINUE
      IF(J)1550,1550,1200
C--ALTER THE ADDRESSES FOR THIS PART TO ABSOLUTE VALUES
1200  CONTINUE
      IF (ISTORE(J) .GT. 0) ISTORE(J) = ISTORE(J) + L22
      ISTORE(J+2)=ISTORE(J+2)+L22
      ISTORE(J+3)=ISTORE(J+3)+L22
C--FIND THE POINTERS TO PASS ALONG THIS GROUP
      K=ISTORE(J+2)
      L=ISTORE(J+3)
      M=ISTORE(J+1)
C--LOOP OVER EACH PARAMETER FOR THIS PART
      DO 1500 N=K,L,M
C--CHECK IF WE SHOULD SET UP ABSOLUTE ADDRESS VALUES
      IF(IFLAG)1250,1400,1400
C--ABSOLUTE ADDRESS REQUIRED  -  CHECK FOR REFINEMENT
1250  CONTINUE
      IF(ISTORE(N))1300,1300,1350
C--NO REFINEMENT  -  POINT TO THE DUMMY LOCATION
1300  CONTINUE
      ISTORE(N)=IADDT
      GOTO 1500
C--REFINEMENT  -  COMPUTE THE POSITION IN THE P.D. STACK
1350  CONTINUE
      ISTORE(N)=IADDT+ISTORE(N)*MD22PD
      GOTO 1500
C--RELATIVE VALUES  -  CHECK FOR REFINEMENT
1400  CONTINUE
      IF(ISTORE(N))1450,1450,1500
C--NO REFINEMENT
1450  CONTINUE
      ISTORE(N)=-1
1500  CONTINUE
C--MOVE ONTO THE NEXT PART FOR THIS GROUP
      J=ISTORE(J)
      GOTO 1150
C--MOVE ONTO THE NEXT GROUP
1550  CONTINUE
      I=ISTORE(I)
      GOTO 1050
C--SET THE BLOCKING ADDRESSES
1600  CONTINUE
      CALL XMOVE(ICOM22(5),ICOM12(9),4)
      RETURN
C
9900  CONTINUE
C -- ERROR EXIT
      RETURN
      END
C
CODE FOR KSET52
      FUNCTION KSET52(IN,IM)
C--LINK LIST 5 IN STORE AND LIST 12 IN STORE.
C
C--THIS SUBROUTINE TAKES THE ABSOLUTE LIST 5 PRODUCED BY 'XFAL05'
C  AND SUBJECT TO THE CONSTRAINTS OF LIST 12, SETS UP THE
C  TEMPERATURE FACTORS
C
C--THE INPUT VARIABLES ARE :
C
C  IN     CONTROLS WHETHER LIST 12 IS USED TO SET UP THE
C         TEMPERATURE FACTOR INFORMATION :
C
C         -1  LIST 12 IS IGNORED  -  ISO/ANISO IS DECIDED FROM LIST 5
C          0  LIST 12 IS USED  -  CONVERSIONS ARE PROPERLY DONE.
C
C  IM     CONTROLS WHETHER THE SERIAL NUMBER IS OVERWRITTEN
C         BY THE TEMPERATURE FACTOR TYPE FOR THIS ATOM.
C         THE VALUES OF 'IM' ARE :
C
C         -1  DO NOT OVERWRITE THE SERIAL NUMBER.
C          0  DO OVER WRITE THE SERIAL NUMBER.
C
C         THE VALUE PUT IN THE SERIAL NUMBER IS :
C
C         -1  ISOTROPIC ATOM
C          0  ANISOTROPIC ATOM
C
C--RETURN VALUES OF 'KSET52' ARE :
C
C  -1  ONLY ISOTROPIC ATOMS PRESENT
C   0  ANSIO AND ISO ATOMS PRESENT
C
C--
\ISTORE
C
\STORE
\XUNITS
\XSSVAL
\XCONST
\XLST01
\XLST05
\XLST12
\XERVAL
\XIOBUF
C
\QSTORE
C
C
      DATA DFUISO/0.05/
C
C      KSET52=-1
C-C-C-WE ALWAYS SET KSET52=0 (BIG MATRIX AVOIDS LOSS OF SPEC. PARAM.)
      KSET52=0
C--CHECK IF THERE ARE ANY ATOMS TO LOOK AT
      IF(N5)2650,2650,1000
C--CHECK IF LIST 12 IS USED TO DECIDE THE T.F. DATA
1000  CONTINUE
      IF(IN)1300,1050,1050
C--SEARCH LIST 12 TO SEE IF THE OVERALL TEMPERATURE FACTOR IS BEING
C  REFINED
1050  CONTINUE
      M12=L12O
C--SET THE REFINEMENT TYPE FLAG IN 'M'
      M=1
      IF(KPARAM(2,M12,L12A,M12A,0,L5O)) 1300,1300, 1100
C--REFINEMENT OF THE OVERALL T.F.  -  ALTER THE TYPE FLAG
1100  CONTINUE
      M=M+4
C--CHECK THE OVERALL T.F. VALUE
      IF(ABS(STORE(L5O+2))-UISO)1150,1150,1200
C--ASSIGN THE DEFAULT VALUE
1150  CONTINUE
      STORE(L5O+2)=DFUISO
C--LOOP OVER THE ATOMS
1200  CONTINUE
      M5=L5
      DO 1250 I=1,N5
C-C-C-SET ISOTROPIC T.F.'S OF ALL ATOMS TO OVERALL-VALUE
C      STORE(M5+3)=STORE(L5O+2)
      STORE(M5+7)=STORE(L5O+2)
C--CLEAR THE ANISOTROPIC T.F.'S
C-C-C-CLEAR THE ANISOTROPIC T.F.'S (EXCEPT THE ONE -U[11]- FOR U[ISO])
C      CALL XZEROF(STORE(M5+7),6)
      CALL XZEROF(STORE(M5+8),5)
      M5=M5+MD5
1250  CONTINUE
C
C--MAIN LOOP FOR PASSING THROUGH THE ATOMS
1300  CONTINUE
      M12=L12
      M5=L5
      DO 2600 L=1,N5
C--CHECK IF LIST 12 SHOULD BE USED
      IF(IN)1700,1350,1350
C--SET THE INITIAL REFINEMENT TYPE IN 'N'
1350  CONTINUE
      N=M
C--CHECK IF THE ISOTROPIC TEMPERATURE FACTOR OF THIS ATOM IS BEING
C  REFINED
C      IF(KPARAM(3,M12,L12A,M12A,0,M5)) 1450,1450, 1400
      IF(KPARAM(7,M12,L12A,M12A,0,M5)) 1450,1450, 1400
C--OVERALL ISOTROPIC T.F. IS BEING REFINED
C-C-C-CHECK WHETHER ISOTROPIC T.F. IS REALLY BEING REFINED: CHECK FLAG
1400  CONTINUE
      IF(NINT(ABS(STORE(M5+3))) .NE. 1) THEN
      GOTO 1450
      ENDIF
C-C-C-ISOTROPIC T.F. FOR THIS ATOM IS REALLY BEING REFINED
      N=N+1
C--CHECK IF ANY OF THE ANISO-TEMPERATURE FACTORS ARE BEING REFINED
C-C-C-(INCLUDES CHECK FOR SPECIAL FIGURES)
1450  CONTINUE
      IF(KPARAM(7,M12,L12A,M12A,0,M5) .GT. 0.0) THEN
C-C-C-CHECK WHETHER REALLY U[11] IS SET TO BE REFINED OR U[ISO]
       IF(NINT(ABS(STORE(M5+3))) .NE. 1) THEN
       N=N+2
       GOTO 1600
       ENDIF
      ENDIF
C      DO 1550 K=7,12
      DO 1550 K=8,12
      IF(KPARAM(K,M12,L12A,M12A,0,M5)) 1550,1550, 1500
C--AN ANISOTROPIC T.F. IS BEING REFINED
C-C-C-(OR AT LEAST ONE PARAMETER OF SPECIAL FIGURE)
1500  CONTINUE
      N=N+2
      GOTO 1600
1550  CONTINUE
C--JUMP ON THE TOTAL NUMBER OF TEMPERATURE FACTOR TYPES BEING REFINED
1600  CONTINUE
      GOTO(1700,1750,2000,2400,1900,2400,2400,2400,1650),N
C1650  STOP153
1650  CALL GUEXIT(153)
C--NO T.F. FACTOR REFINEMENT INFORMATION  -  CHECK LIST 5
1700  CONTINUE
      N=0
C      IF(ABS(STORE(M5+3))-UISO)2100,1850,1850
C-C-C-CHECK KIND OF ATOM (LIST 5)
      IF(NINT(ABS(STORE(M5+3))) .EQ. 1) THEN
C-C-C-ATOM IS ISOTROPIC
C-C-C-CHECK WHETHER VALUE FOR U[ISO] IS REASONABLE
       IF(ABS(STORE(M5+7))-UISO)1800,1850,1850
      ELSE IF(NINT(ABS(STORE(M5+3))) .EQ. 0) THEN
C-C-C-ATOM IS ANISOTROPIC
      GOTO 2100
      ELSE IF(NINT(ABS(STORE(M5+3))) .EQ. 2) THEN
C-C-C-"ATOM" IS A SPHERE
      GOTO 2310
      ELSE IF(NINT(ABS(STORE(M5+3))) .GE. 3) THEN
C-C-C-"ATOM" IS A LINE OR RING
      GOTO 2320
      ENDIF
C--ONLY THE INDIVIDUAL ISO-TEMPERATURE FACTOR
1750  CONTINUE
C-C-C-CHECK WHETHER FLAG (LIST 5) SAYS: ATOM IS ISOTROPIC
C      IF(ABS(STORE(M5+3))-UISO)1800,1850,1850
      IF(NINT(ABS(STORE(M5+3))) .EQ. 1) THEN
C-C-C-FLAG (LIST 5): ISOTROPIC ATOM
C-C-C-CHECK WHETHER VALUE FOR U[ISO] IS REASONABLE
       IF(ABS(STORE(M5+7))-UISO)1800,1850,1850
      ENDIF
C--INSERT THE DEFAULT SETTING FOR THE ISO-TEMPERATURE FACTOR
1800  CONTINUE
C      STORE(M5+3)=DFUISO
C      STORE(M5+3)=1.0
      STORE(M5+7)=DFUISO
C--CLEAR THE ANISO T.F. ENTRIES
1850  CONTINUE
C      CALL XZEROF(STORE(M5+7),6)
C-C-C-CLEAR THE ANISO T.F. ENTRIES (EXCEPT PLACE FOR U[ISO] AT U[11])
      CALL XZEROF(STORE(M5+8),5)
C--CHECK IF WE SHOULD ALTER THE SERIAL NUMBER
1900  CONTINUE
      IF(IM)2500,1950,1950
C--ALTER THE SERIAL NUMBER TO INDICATE AN ISO ATOM
1950  CONTINUE
C      ISTORE(M5+1)=-1
      GOTO 2500
C--ONLY INDIVIDUAL ANISO-TEMPERATURE FACTORS
C-C-C-ONLY INDIVIDUAL ANISO-TEMPERATURE FACTORS OR SPECIAL PARAMETERS
2000  CONTINUE
C      IF(ABS(STORE(M5+3))-UISO)2050,2100,2100
      IF(NINT(ABS(STORE(M5+3))) .EQ. 0) THEN
      GOTO 2050
      ELSE IF(NINT(ABS(STORE(M5+3))) .EQ. 1) THEN
C      GOTO 2100
      GOTO 2400
      ELSE IF(NINT(ABS(STORE(M5+3))) .EQ. 2) THEN
      GOTO 2310
      ELSE IF(NINT(ABS(STORE(M5+3))) .GE. 3) THEN
      GOTO 2320
      ENDIF
C--INSERT THE DEFAULT SETTING FOR THE ISO-TEMPERATURE FACTOR
2050  CONTINUE
C      STORE(M5+3)=DFUISO
C--CHECK IF ANY OF THE ANISO-TEMPERATURE FACTORS HAVE BEEN SET
2100  CONTINUE
      M5A=M5
C      DO 2200 I=1,6
C      IF(ABS(STORE(M5A+7))-UISO)2150,2300,2300
      DO 2200 I=1,5
      IF(ABS(STORE(M5A+8))-UISO)2150,2300,2300
2150  CONTINUE
      M5A=M5A+1
2200  CONTINUE
C--CHECK IF THIS IS NO REFINEMENT OR ANISO REFINEMENT
C      IF(N)1800,1800,2250
C--INSERT THE DEFAULT ANISO-TEMPERATURE FACTORS
2250  CONTINUE
C-C-C-CHECK WHETHER U[ISO] HAS A REASONABLE VALUE
      IF(ABS(STORE(M5+7)) .LT. UISO) THEN
      STORE(M5+7)=DFUISO
      ENDIF
C      STORE(M5+7)=STORE(M5+3)
C      STORE(M5+8)=STORE(M5+3)
C      STORE(M5+9)=STORE(M5+3)
C      STORE(M5+10)=STORE(M5+3)*STORE(L1C)
C      STORE(M5+11)=STORE(M5+3)*STORE(L1C+1)
C      STORE(M5+12)=STORE(M5+3)*STORE(L1C+2)
      STORE(M5+7)=STORE(M5+7)
      STORE(M5+8)=STORE(M5+7)
      STORE(M5+9)=STORE(M5+7)
      STORE(M5+10)=STORE(M5+7)*STORE(L1C)
      STORE(M5+11)=STORE(M5+7)*STORE(L1C+1)
      STORE(M5+12)=STORE(M5+7)*STORE(L1C+2)
C--SET THE ISO T.F. TO ZERO
2300  CONTINUE
C      STORE(M5+3)=0.
      GOTO 2340
C-C-C-CHECK WHETHER ANY SPECIAL PARAMETERS ARE SET
2310  CONTINUE
C-C-C-"ATOM" IS SPHERE
      IF(ABS(STORE(M5+8)) .LT. UISO) THEN
C-C-C-GIVE "SIZE" (RADIUS) A REASONABLE VALUE
      STORE(M5+8)=1.0
      ENDIF
C-C-C-CLEAR THE OTHER NOT USED ENTRIES
      CALL XZEROF(STORE(M5+9),4)
      GOTO 2340
2320  CONTINUE
C-C-C-"ATOM" IS LINE OR RING
      M5A=M5
      DO 2330 I=1,3
      IF(ABS(STORE(M5A+8))-UISO)2325,2335,2335
2325  CONTINUE
      M5A=M5A+1
2330  CONTINUE
C-C-C-GIVE "SIZE", DECLINAT, AZIMUTH REASONABLE VALUES
      STORE(M5+8)=1.0
      STORE(M5+9)=0.45
      STORE(M5+10)=0.45
2335  CONTINUE
C-C-C-CLEAR THE OTHER NOT USED ENTRIES
      CALL XZEROF(STORE(M5+11),2)
2340  CONTINUE
C-C-C-TELL PROGRAMM THAT NOT ONLY ISOTROPIC ATOMS ARE PRESENT
C-C-C-SHOULDN'T BE NECESSARY ANY MORE, BECAUSE KSET52 IS ALWAYS 0 NOW
      KSET52=0
C--CHECK IF WE SHOULD ALTER THE SERIAL NUMBER
      IF(IM)2500,2350,2350
C--INDICATE ANSIO REFINEMENT
2350  CONTINUE
      ISTORE(M5+1)=0
      GOTO 2500
C--ALL ERRORS
2400  CONTINUE
      CALL XERHDR(0)
      IF (ISSPRT .EQ. 0) WRITE(NCWU,2450)
      WRITE(NCAWU,2450)
      WRITE( CMON ,2450)
      CALL XPRVDU(NCVDU, 1,0)
2450  FORMAT(' Mixed aniso/iso temperature factors',
     2 ' cannot be refined for the same atom')
      CALL XPRTCO(2,M5,I)
      CALL XERHND ( IERERR )
2500  CONTINUE
      M5=M5+MD5
C--CHECK IF LIST 12 IS BEING USED
      IF(IN)2600,2550,2550
2550  CONTINUE
      M12=ISTORE(M12)
2600  CONTINUE
C--AND NOW RETURN
2650  CONTINUE
      RETURN
      END
C
CODE FOR KBLCK
      FUNCTION KBLCK(IN)
C--FINDS THE BLOCK CONTAINING THE PARAMETER 'IN'.
C
C  IN      THE PARAMETER NUMBER, IN THE RANGE 1 TO 'N12'.
C
C--RETURNS SET EQUAL TO THE ADDRESS OF THE DIAGONAL ELEMENT IN
C  LIST 11, AND SETS 'M12B' TO THE ADDRESS OF THE BLOCK INFORMATION.
C
C--
\ISTORE
C
\STORE
\XLST11
\XLST12
C
\QSTORE
C
C--SET UP THE POINTERS TO THE BLOCKING INFORMATION
      M12B=L12B
C--SET UP A POINTER TO THE MATRIX
      M11=L11
C--LOOP OVER ALL THE AVAILABLE BLOCKS
      DO 1050 I=1,N12B
C--CHECK IF THE PARAMETER WAS IN THE LAST BLOCK
      IF(ISTORE(M12B)-IN)1000,1000,1100
C--NOT IN THE LAST BLOCK  -  MOVE TO THE NEXT
1000  CONTINUE
      J=M12B
      K=M11
      M11=M11+((ISTORE(M12B+1)+1)*ISTORE(M12B+1))/2
      M12B=M12B+MD12B
1050  CONTINUE
C--PARAMETER WAS IN THE LAST BLOCK  -  FIND ITS REAL POSITION
1100  CONTINUE
      M12B=J
      M11=K
C--COMPUTE HOW FAR THROUGH THE BLOCK WE MUST GO
      I=IN-ISTORE(M12B)
C--FIND THE ORDER OF THE BLOCK
      J=ISTORE(M12B+1)
C--CHECK IF WE HAVE FOUND THE POSITION FOR THIS PARAMETER
1150  CONTINUE
      IF(I)1200,1200,1250
C--SUCCESS  -  RETURN
1200  CONTINUE
      KBLCK=K
      RETURN
C--NOT THERE YET  -  UPDATE BY ONE PARAMETER
1250  CONTINUE
      I=I-1
      K=K+J
      J=J-1
      GOTO 1150
      END
C
CODE FOR KPARAM
      FUNCTION KPARAM(N,M12,L12A,M12A, ITYPE, L5A)
C--FIND THE LOCATION IN LIST 12 OF PARAMETER N FOR AN ATOM
C
C  N     RELATIVE ADDRESS OF PARAMETER (0,1,.....M)
C  M12   ADDRESS OF THE HEADER FOR THIS ATOM
C  L12A  ADDRESS OF THE PART HEADER  -  SET ON EXIT
C  M12A  ADDRESS OF THE PARAMETER INFORMATION  -  SET ON EXIT
C  ITYPE 0 FOR NOPRINT
C        1 FOR OVERALL
C        2 FOR ATOMS
C  L5A   ADDRESS IN LIST 5 FOR ATOM
C
C--RETURN VALUES OF 'KPARAM' ARE :
C
C  -1  THE PARAMETER IS NOT TO BE REFINED.
C  >0  THE LEAST SQUARES PARAMETER NUMBER FOR THE INDICATED PARAMETER.
C
C--
      CHARACTER *6 COORD
      CHARACTER *8 OVER
C
      DIMENSION COORD(13), OVER(6)
\ISTORE
C
\XUNITS
\XSSVAL
\XLST22
\STORE
\XERVAL
\XIOBUF
C
\QSTORE
C
      DATA COORD/'TYPE', 'SERIAL', 'OCC', 'U[ISO]', 'X', 'Y', 'Z',
     1 'U[11]','U[22]','U[33]','U[23]','U[13]','U[12]'/
      DATA OVER/ 'SCALE','DU[ISO]','OU[ISO]','POLARITY','ENANTIO',
     1 'EXTPAR'/
C
C---- GET THE FIRST PART HEADER
      L12A = KFPH (M12)
      IF ( L12A ) 1000, 1000, 1300
1000  CONTINUE
      KPARAM = -1
1200  CONTINUE
      RETURN
C
1300  CONTINUE
C----- GET THE PARAMETER POSITION
      KPARAM = KFPP (N, L12A, M12A)
C----- IS THIS A MULTI-PART ATOM?
      IF (ISTORE(L12A)) 1200, 1200, 1400
1400  CONTINUE
C----- IT IS
      L12B = ISTORE(L12A)
C------ IS THERE A SECOND PART FOR THIS PARAMETER
      IF( KFPP( N, L12B, JUNK) ) 1200, 1200, 1450
1450  CONTINUE
      IF (ITYPE .EQ. 2) THEN
       IF (ISSPRT .EQ. 0) THEN
       WRITE (NCWU,1550)KPARAM, STORE(L5A),NINT(STORE(L5A+1))
     1 ,COORD(N+1)
       ENDIF
       WRITE (NCAWU,1550)KPARAM,STORE(L5A),NINT(STORE(L5A+1))
     1 ,COORD(N+1)
       WRITE( CMON ,1550)KPARAM,STORE(L5A),NINT(STORE(L5A+1))
     1 ,COORD(N+1)
       CALL XPRVDU(NCVDU, 1,0)
      ELSE IF (ITYPE .EQ. 1) THEN
       IF (ISSPRT .EQ. 0) THEN
       WRITE (NCWU,1500)   KPARAM, OVER(N+1)
       ENDIF
       WRITE (NCAWU,1500)   KPARAM, OVER(N+1)
       WRITE( CMON ,1500)   KPARAM, OVER(N+1)
       CALL XPRVDU(NCVDU, 1,0)
      ENDIF
1500  FORMAT(' Least Squares parameter ', I6,', ',A,
     1 '  has no physical mapping')
1550  FORMAT(' Least Squares parameter ', I6, ', Atom ',A4,I5,3X,
     1 A,' has no physical mapping')
C      CALL XERHND (IERWRN)
      GOTO 1200
      END
C
C
C
CODE FOR KFPH
      FUNCTION KFPH(M12)
C----- FIND THE FIRST PART HEADER
C     M12   ADDRESS OF GROUP HEADER
C
C---- RETURNS
C     -1   NO REFINABLE PARAMETERS
C     >0   ADDRESS OF FIRST PART HEADER - SET IF POSSIBLE
C
C--
\ISTORE
C
\STORE
C
\QSTORE
C
C--CHECK IF ANY PARAMETERS HAVE BEEN REFINED FOR THIS ATOM
      KFPH= ISTORE(M12+1)
      IF (KFPH) 1000, 1000, 1050
1000  CONTINUE
C----- NO PARAMETERS REFINED
      KFPH = -1
1050  CONTINUE
      RETURN
      END
C
C
CODE FOR KFPP
      FUNCTION KFPP (N, L12A, M12A)
C----- FIND PARAMETER POSITION
C
C  N     RELATIVE ADDRESS OF PARAMETER (0,1,.....M)
C  L12A  ADDRESS OF THE PART HEADER  -  SET ON ENTRY
C  M12A  ADDRESS OF THE PARAMETER INFORMATION  -  SET BY THIS ROUTINE
C
C----- RETURN VALUES
C      -1 NOT REFINABLE
C      >0 PARAMETER POSITION
C--
\ISTORE
C
\XLST22
\STORE
C
\QSTORE
C
C----- CHECK IF ANY PARAMETERS RESINED
      IF (L12A) 1000, 1000, 900
900   CONTINUE
C--COMPUTE THE PARAMETER'S POSITION IN THE PART
      M12A=ISTORE(L12A+2)+ISTORE(L12A+1)*(N-ISTORE(L12A+4))
C--CHECK THE VALUE AGAINST THE MINIMUM
      IF(M12A-ISTORE(L12A+2))1000,1200,1150
1000  CONTINUE
      KFPP = -1
1050  CONTINUE
      RETURN
C--CHECK THE VALUE AGAINST THE MAXIMUM
1150  CONTINUE
      IF(ISTORE(L12A+3)-M12A)1000,1200,1200
C--FIND THE LEAST SQUARES PARAMETER NUMBER
1200  CONTINUE
      KFPP=ISTORE(M12A)
      IF(ISTORE(M12A))1050,1050,1250
1250  CONTINUE
      IF(ISTORE(M12A)-L22PD)1050,1350,1050
1350  CONTINUE
      KFPP=-1
      GOTO 1050
      END
