CODE FOR SGEOM
      SUBROUTINE SGEOM
      use unitcell_mod
      implicit none
C--SUBROUTINE TO CALCULATE GENERALISED 
C  PLANES/LINES/ANISO/AXES/TLS 
C  AND TO CALCULATE ANGLES BETWEEN PERPENDICULARS
C  TO THESE PLANES/LINES/TLS
C
C
C      VERSION     DATE              BY    CHANGE
C      -------     ----              --    ------
c      2.20        NOVEMBER2001      DJW   MERGE IN ANISO/AXES/TLS
C      2.11        JANUARY 2001      DJW   ALSO PUNCH EVALUATE ATOMS
C      2.10        JANUARY 2000      DJW   ADD OUTPUT OF CENTROID, AND
C                                          PUNCH DIRECTIVE
C      2.05        FEBRUARY 1989     DJW   ADD 'LINE' DIRECTIVE
C      2.02        AUGUST 1984       PWB   ONLY LIST COORDINATES OF
C                                          ATOMS WHEN A 'PLANE' CARD
C                                          HAS BEEN GIVEN
C
C--THE FOLLOWING ARRAYS ARE USED :
C
C  VA      THE LATENT ROOTS.
C  EQU     THE COEFFICIENTS OF THE EQUATION FOR THE CURRENT PLANE/LINE .
C  ROF     THE MATRIX THAT TRANSFORMS ORTHOGONAL COORDINATES IN ANGSTROM
C          INTO BEST PLANE/LINE  COORDINATES IN ANGSTROM.
C  RCA     THE MATRIX THAT TRANSFORMS FRACTIONAL COORDINATES INTO
C          BEST PLANE/LINE  COORDINATES IN ANGSTROM.
C  RCF     THE MATRIX THAT TRANSFORMS FRACTIONAL COORDINATES INTO
C          BEST PLANE/LINE  COORDINATES IN FRACTIONS.
C  RPCA    THE INVERSE OF 'RCA'.
C  RPCF    THE INVERSE OF 'RCF'.
C  XCF     THE COORDINATES OF THE CENTROID IN CRYSTAL FACTIONS.
C  XCA     THE COORDINATES OF THE CENTROID IN ORTHOGONAL ANGSTROM.
C  XCR     THE COORDINATES OF THE CENTROID IN BEST PLANE ANGSTROM.
C
C -- VARIABLES
C      JJ          INDICATES WHETHER A PLOT IS REQUIRED
C                    -1      NO PLOT
C                     1      PLOT
C
C      JTYPE       INDICATES PLANE OR LINE
C                     0      NOTHING
C                     1      LINE
C                     2      PLANE
C                     3      TLS
C                     4      AXES
C
C     JPUNCH          >0    PUNCH INFO
C
      CHARACTER *9 CESD
C
C
C--
      INCLUDE 'ICOM12.INC'
      INCLUDE 'ISTORE.INC'
C
      real, dimension(3) :: VA, EQU, XCA, XCF, XCR
      real, dimension(3,3) :: RPCA, RPCF, ROF, RCA, RCF
c      DIMENSION DCOSA(3)
c      DIMENSION DCOSB(3)
cdjwdec09
      DOUBLE PRECISION dcosa(3), dcosb(3), DACCUM, DACCA, DACCB
      real, dimension(4) :: XWORKS
      real, dimension(6) :: AVECT
      real, dimension(9) :: ATENS
      real, dimension(3,3) :: DJWA, DJWB
      real, dimension(3) :: PAXIS(3)
C     FRACTIONAL AND ANGSTROM ESDS
      real, dimension(3) :: ANESD, BNESD
      real ans, esd
C-C-C-DECL. OF VARIABLES TO CALC. POLAR COORD. OF SPECIAL FIGURES
      REAL VECPD,VECPA
C
      INCLUDE 'TYPE11.INC'
      INCLUDE 'ICOM11.INC'
      INCLUDE 'XSTR11.INC'
      INCLUDE 'XLST11.INC'
C
      INCLUDE 'STORE.INC'
      INCLUDE 'XUNITS.INC'
      INCLUDE 'XSSVAL.INC'
      INCLUDE 'XLISTI.INC'
      INCLUDE 'XCNTRL.INC'
      INCLUDE 'XCONST.INC'
      !INCLUDE 'XLST01.INC'
      INCLUDE 'XLST02.INC'
      INCLUDE 'XLST05.INC'
      INCLUDE 'XLST09.INC'
      INCLUDE 'XLST12.INC'
      INCLUDE 'XLST20.INC'
      INCLUDE 'XLEXIC.INC'
      INCLUDE 'XCHARS.INC'
      INCLUDE 'XERVAL.INC'
      INCLUDE 'XOPVAL.INC'
      INCLUDE 'XIOBUF.INC'
C
      INCLUDE 'XRTLSC.INC'
C
      INCLUDE 'QLST12.INC'
      INCLUDE 'QSTORE.INC'
      INCLUDE 'QSTR11.INC'
      INCLUDE 'QLST11.INC'
      
      INCLUDE 'IDIM12.INC'      
      
      real a, del, dum, f
      integer i, iall, ibase, ichng, icombf, idirnm, ierr, ii, imod5
      integer inextd, irpl, isave, istart, istat, istep, iuln5, iupdt
      integer iwork, j, ja, jbase, jdjw, jg, jh, jj, jk, jl, jn, jo
      integer jpunch, jtype, jwork, k, kbase, kk, kwork, lbase, lef1
      integer lef2, n, natom, nb, ngp, np, number, iesd
      
      integer, external :: kstall, klxsng, ktyp05, kfdarg, kop, ksynum
      integer, external :: katomu, katoms, kmolax, kinv2, kchnfl, kcomp
      integer, external :: ktlspt, irtls, kfdnum, kexist
C
C
      integer, parameter :: IVERSN=220
      integer, parameter :: IDIMBF=50
      integer, parameter :: IMDINP=35
C for aniso
      character(len=5), dimension(5), parameter :: 
     1    CCALC=(/ ' Non',' Lin','Plan',' TLS','Axis' /)
      real, parameter :: eigmin=0.000001, eigrat=0.01
C
#ifdef _HOL_
      integer, dimension(1) :: BTARG, CTARG
      DATA BTARG(1)/4HAND /,CTARG(1)/4HALL /
#else
      character(len=4), dimension(1), parameter :: BTARG='AND '
      character(len=4), dimension(1), parameter :: CTARG='ALL '
#endif
      CHARACTER(len=5), dimension(4), parameter :: CTYPE=
     1    (/ 'line ', 'plane', 'TLS  ', 'Axes ' /)
      CHARACTER(len=5), dimension(2), parameter :: CDEL=
     1    (/ 'delta', '     ' /)
      CHARACTER(len=5), dimension(2), parameter :: CDEV=
     1    (/ 'delta', ' Zp  ' /)
      CHARACTER(len=5), dimension(2), parameter :: CQUAL=
     1    (/ 'worst', 'best ' /)
      
C
C
C--SET UP THE TIMING CONTROL
      CALL XTIME1 (2)
C--PRINT THE PAGE HEADING
      CALL XPRTCN


C TRY LOADING LIST 11 TO SEE IF ESDS COULD BE CORRECT
      IESD = +1
      IF(KEXIST(11).GE. 1) then
       CALL XFAL11(0,0)
      ENDIF
      IF (IERFLG .LE. 0) THEN 
C       LISTS 5 & 12 DONT MATCH, SO LIST 9 MAY BE WRONG
        WRITE(CMON,'(A)')
     1 'You may prefer to exit GEOM and issue "#ESD", otherwise'
        CALL XPRVDU (NCVDU,1,0)
        WRITE(CMON,1) '{E Continuing without esds'
1       FORMAT(/A/)
        CALL XPRVDU (NCVDU,3,0)
        IERFLG = 1
        IESD = -1
      ENDIF



C--CLEAR THE CORE
c      CALL XRSL
      CALL XCSAE
C----- DISABLE 'PUNCHING'
      JPUNCH=0
      JTYPE=0 ! Set initial value
C----- DIS-ENABLE DETAILED PRINTING
C      ISTAT2 = 1
C----- WORKSPACE FOR REPLACEMENT
      IWORK=KSTALL(3)
      JWORK=KSTALL(9)
      KWORK=KSTALL(30)
C----- SPACE FOR ATOM HEADERS
      MQ=KSTALL(100)
C----- COMMAND BUFFER
C      IDIMBF=50 (moved in declaration section)
      ICOMBF=KSTALL(IDIMBF)
C----- ZERO THE BUFFER
      CALL XZEROF (ISTORE(ICOMBF),IDIMBF)
C----- COMMON BLOCK OFFSET(-1) FOR INPUT LIST
C      IMDINP=35 (moved to declaration section)
C----- INITIALSE LEXICAL PROCESSING
      ICHNG=1
      CALL XLXINI (INEXTD,ICHNG)
C      INCLUDE 'IDIM12.INC' (moved in declaration section)
C--INDICATE THAT LIST 12 IS NOT TO BE USED
      DO 10 I=1,IDIM12
         ICOM12(I)=NOWT
10    CONTINUE
C----- SET PLANES COUNTER TO ZERO
      NP=0
C--SET THE CONSTANTS FOR THE PLANE COEFFICIENTS STACK
      JN=4
      JL=LFL+1
      GO TO 540
C
C--MAIN INSTRUCTION CYCLING LOOP
20    CONTINUE
C----- DO NOT REPLACE ATOMS
      IRPL=0
      IDIRNM=KLXSNG(ISTORE(ICOMBF),IDIMBF,INEXTD)
      IF (IDIRNM.LT.0) GO TO 20
      IF (IDIRNM.EQ.0) GO TO 3670
C--NEXT RECORD HAS BEEN LOADED  -  BRANCH ON THE TYPE
C   1.ATOMS         2.PLANE         3.EVALUATE      4.DIHEDRAL   
C   5.PLOT          6.REPLACE       7.SAVE          8.EXECUTE    
C   9.QUIT         10.LINE         11.PUNCH        
C
C  12.CENTRE       13.DISTANCES    14.ANGLES       15.REJECT     
C  16.LIMITS       17.TLS          18.AXES         19.MODT       
C  20.MODL         21.ZEROS       
C  21.GEOMETRY   
      GO TO (50, 200, 560, 730, 240, 550, 930, 20, 1020, 210,
     1      230,
 
     2      3410, 3260, 3280, 3380, 3340, 3200, 3560, 3850, 3900, 
     3      3800,  40,   30),  IDIRNM
30    CONTINUE
      GO TO 1030
C
40    CONTINUE
C----- MOLAX/ANISO ITSELF
C--LOAD THE RELEVANT LISTS
      CALL XFAL01
      CALL XFAL02
      CALL XFAL20
      IF (IERFLG.LT.0) GO TO 1020
      IULN5=KTYP05(ISTORE(ICOMBF+IMDINP))
      CALL XLDR05 (IULN5)
      IF (IERFLG.LT.0) GO TO 1020
C--LIST READ IN OKAY  -  SET UP THE INITIAL CONTROL FLAGS
C--RESET SOME CONTROL FLAGS FOR THIS ROUTINE
C NOW OPTIONALLY LOAD LIST 9
      IF((KEXIST(9).GE. 1).AND.(IESD.GE.1)) THEN
        CALL XFAL09
        IF (IERFLG.GE.0) IESD = 1
      ENDIF 
      IPRINT=0
      TESTEV=EIGMIN
      TESTER=EIGRAT
      NDEL=0
      CALL XZEROF (JDEL(1),20)
      CALL XZEROF (CF(1),3)
c--SET THE FLAG TO INDICATE NO ATOMS STORED AT PRESENT
      NATOM=0
C--SET THE PLANE/LINE  FLAG TO INDICATE NO ATOMS STORED AT PRESENT
      LEF1=-1
      LEF2 = 0
C----- SET THE CALCULATION TYPE TO NOTHING
      JTYPE=0
      IERR=1
C----- SET GROUP COUNTER TO ZERO
      NGP=0
C----- INDICATE NO MODIFICATIONS YET
      IMOD5=0
C----- INDICATE LIST 20 NOT UPDATED
      IUPDT=0
      GO TO 20
C
C
C--'ATOM' INSTRUCTION
50    CONTINUE
      LEF1=-1
      LEF=0
C----- STORE THE 'END' OF THE ATOM STACK
      IBASE=LFL
      KBASE=NFL
      Z=1.
      NATOM=0
      JTYPE=0
      IERR=+1
      DL=0.
      DA=0.
C----- CLEAR THE CENTROID
      CALL XZEROF (CF(1),3)
C--CHECK FOR SOME ARGUMENTS
      IF (KFDARG(I)) 60,80,80
C--ERROR(S)  -  INCREMENT THE ATOM ERROR COUNT
60    CONTINUE
      LEF2=LEF2+1
      IERR=-1
      GO TO 20
C--CHECK IF THERE ARE MORE ARGUMENTS ON THIS CARD
70    CONTINUE
      IF (KOP(8)) 170,80,80
C--CHECK IF NEXT ARGUMENT IS A NUMBER
80    CONTINUE
      IF (KSYNUM(Z)) 100,90,100
90    CONTINUE
      ME=ME-1
      MF=MF+LK2
C--READ THE NEXT GROUP OF ATOMS
100   CONTINUE
      IF (KATOMU(LN)) 110,110,120
C--ERRORS  -  INCREMENT THE ATOM ERROR COUNT
110   CONTINUE
      LEF2=LEF2+1
      IERR=-1
      GO TO 3650
C--MOVE ATOMS TO STACK WITH CORRECT CO-ORDINATES
120   CONTINUE
      DO 160 J=1,N5A
         LFL=LFL-MD5A
         IF (NFL+27-LFL) 140,3660,3660
C--TRANSFORM THE ATOM AND MOVE IT ACROSS
140      CONTINUE
         IF (KATOMS(MQ,M5A,LFL)) 110,110,150
C--ATOM MOVED OKAY  -  SET THE WEIGHT OVER OCCUPATION
C-- DONT FORGET TO MOVE IT TO +7 FOR MOLAX
150      CONTINUE
         STORE(LFL+2)=Z
C--INCREMENT FOR THE NEXT ATOM
         M5A=M5A+MD5A
160   CONTINUE
      NATOM=NATOM+N5A
      GO TO 70
170   CONTINUE
      LEF2=LEF2+LEF
C----- STORE THE 'START' OF THE ATOM STACK
      JBASE=LFL
      LFL=LFL-1
C--CHECK THAT THERE IS AT LEAST ONE ATOM ON THIS CARD
      IF (NATOM .GE. 1) GOTO 20
C--NO ATOMS ON THIS CARD
180   CONTINUE
      CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) WRITE (NCWU,190)
      WRITE (NCAWU,190)
      WRITE (CMON,190)
      CALL XPRVDU (NCVDU,1,0)
190   FORMAT (' No atoms found')
      GO TO 60
C
C-----  'PUNCH'
230   CONTINUE
C      SET PUNCH 'ON'
      JPUNCH=1
      GO TO 20
C
C-----'PLANE'
200   CONTINUE
      JTYPE=2
      GO TO 220
C--'LINE' INSTRUCTION
210   CONTINUE
      JTYPE=1
220   CONTINUE
      LEF1=1
C----- NO PLOTS TO BE DONE
      JJ=-1
      GO TO 250
240   CONTINUE
C----- 'PLOT' INSTRUCTION
      JJ=1
      JTYPE=2
250   CONTINUE
C -- CHECK THERE ARE SOME ATOMS WHOSE PLANE/LINE  CAN BE CALCULATED
      IF (NATOM.LE.0) GO TO 3750
C--CHECK IF ANY ERRORS HAVE BEEN GENERATED DURING THE INPUT OF THE ATOMS
      IF (LEF2) 280,280,260
260   CONTINUE
      CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) WRITE (NCWU,270)
      WRITE (NCAWU,270)
      WRITE (CMON,270)
      CALL XPRVDU (NCVDU,1,0)
270   FORMAT (' Instruction ignored because of previous errors')
      GO TO 540
280   CONTINUE
C----- SHIFT THE WEIGHT UP
      JO=JBASE+(NATOM-1)*MD5A
      I=JO
C--LOOP OVER EACH ATOM IN TURN
      DO 295 II=JBASE,JO,MD5A
       STORE(I+7) = STORE(I+2)
       I=I-MD5A
295   CONTINUE
C--COMPUTE THE PRINCIPAL AXES
      ISTAT=KMOLAX(STORE(JBASE+4),NATOM,MD5A,XCF,VA,ROF,RCA,XWORKS)
      CALL XMOVE (VA,PAXIS,3)
      IF (JTYPE.EQ.1) THEN
C----- REVERSE ORDER TO GET BEST LINE SYSTEM
         DUM=VA(1)
         VA(1)=VA(3)
         VA(3)=DUM
         DO 300 I=1,3
            DUM=RCA(I,1)
            RCA(I,1)=RCA(I,3)
            RCA(I,3)=DUM
            DUM=ROF(1,I)
            ROF(1,I)=ROF(3,I)
            ROF(3,I)=DUM
300      CONTINUE
      END IF
C
      IF (ISTAT.GE.0) GO TO 320
      IF (N.GT.JTYPE) GO TO 320
C
C--ATOMS DO NOT DEFINE A PLANE/LINE
      CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) WRITE (NCWU,310) CTYPE(JTYPE)
      WRITE (NCAWU,310) CTYPE(JTYPE)
      WRITE (CMON,310) CTYPE(JTYPE)
      CALL XPRVDU (NCVDU,1,0)
310   FORMAT (' Input atoms do not define a ',A)
      GO TO 540
C
C
320   CONTINUE
C--PLANE/LINE COMPUTED OK. INCREMENT THE  PLANE/LINE NUMBER 
      NP=NP+1
C--PRINT THE AXIS CARD AND ITS NUMBER
      IF (ISSPRT.EQ.0) WRITE (NCWU,290) NP
      WRITE (NCAWU,290) NP
      WRITE (CMON,290) NP
      CALL XPRVDU (NCVDU,1,0)
290   FORMAT (' Results for axis number ',I4)
C--CALCULATE THE ROTATION MATRICES FROM 'CRYSTAL ANGSTROM'
      !CALL XMLTMT (ROF,STORE(L1O1+9),RCF,3,3,3)
      rcf=matmul( rof, 
     1    transpose(unitcells(1)%orthogonalisation_exclcell()) )
C--CALCULATE THE EQUATION OF THE PLANE/LINE
      CALL XMOLEQ (XCF,ROF,EQU,F,RCA)
C-C-C-CALCULATION OF POLAR COORDINATES OF ORIENTATION VECTOR
C-C-C-DECLINAT
      IF (ROF(3,1).GE.0.0) THEN
         VECPD=(ACOS(ROF(3,3)))*360.0/TWOPI
      ELSE
         VECPD=(-ACOS(ROF(3,3)))*360.0/TWOPI
      END IF
C-C-C-AZIMUTH
      IF (ABS(ROF(3,1)).LT.ZEROSQ) THEN
         IF (ROF(3,2).GE.0.0) THEN
            VECPA=90.0
         ELSE
            VECPA=-90.0
         END IF
      ELSE
         VECPA=(ATAN(ROF(3,2)/ROF(3,1)))*360.0/TWOPI
      END IF
C--COMPUTE THE ORTHOGONAL COORDINATES OF THE CENTROID AND PRINT THEM
      !CALL XMLTTM (STORE(L1O1),XCF,XCA,3,3,1)
      xca=matmul( transpose(unitcells(1)%orthogonalisation()), 
     1    xcf )
      IF (JJ.NE.1) THEN
         WRITE (CMON,330) (XCF(I),I=1,3)
330      FORMAT (' Centroid, fractions',3X,4F10.3)
         CALL XPRVDU (NCVDU,1,0)
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,340) (XCA(I),I=1,3),(XCF(I),I=1,3)
340         FORMAT (//' Centroid in orthogonal angstrom and crystal',
     1      ' fractions'//3F10.3,10X,3F10.5)
C--PRINT THE LATENT ROOTS AND THE DIRECTION COSINES
            WRITE (NCWU,350) CTYPE(JTYPE),(VA(I),(ROF(I,J),J=1,3),I=1,3)
350         FORMAT (//1X,' Rotation matrix from orthogonal',' to best ',
     1       A,' co-ordinates'//1X,' latent roots',13X,'L',9X,'M',9X,'N'
     2       ,9X,'w.r.t. A*, B'' and C'//(1X,F10.5,9X,3F10.4))
C--PRINT THE ROTATION MATRICES FROM CRYSTAL FRACTIONS
            WRITE (NCWU,360) CTYPE(JTYPE),((RCA(I,J),J=1,3),(RCF(I,J),J=
     1       1,3),I=1,3)
         END IF
360      FORMAT (//1X,' Transformation from crystal fractions w.r.t.',
     1' centroid to best ',A,' coordinates',' in angstrom and fractions'
     2  //  3(14X,3F10.4,11X,3F10.4/))
      END IF
C
C--CALCULATE THE INVERSE MATRICES
      I=KINV2(3,RCA,RPCA,9,0,VA,VA,3)
      I=KINV2(3,RCF,RPCF,9,0,VA,VA,3)
      IF (JJ.NE.1) THEN
C--PRINT THE INVERSE ROTATION MATRICES
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,370) CTYPE(JTYPE),((RPCA(I,J),J=1,3),(RPCF(I,J),
     1       J=1,3),I=1,3)
370         FORMAT (//1X,' Transformation to crystal fractions w.r.t.','
     1 centroid from best ',A,' co-ordinates in angstrom and',' fraction
     2s'//3(14X,3F10.4,11X,3F10.4/))
C--PRINT THE EQUATION OF THE PLANE/LINE
C-C-C-PRINT EQUATION OF PLANE/LINE AND ORIENT. VECTOR IN POLAR COORD.
            WRITE (NCWU,380) CTYPE(JTYPE),(EQU(I),I=1,3),F
            WRITE (NCWU,390) CTYPE(JTYPE),VECPD,VECPD/100,VECPA,VECPA/
     1       100
         END IF
380      FORMAT (//1X,' Equation of the ',A,' :'//F10.5,' * X +',F10.5,'
     1 * Y +',F10.5,' * Z  =',F10.3,20X,'X, Y and Z are in crystal fract
     2ions')
390      FORMAT (/,A,'-vector (in polar coord.):',
     1   //,'DECLINAT =',F9.2,5X,'DECLINAT/100 =',F9.4,/
     2    ,'AZIMUTH  =',F9.2,5X,'AZIMUTH /100 =',F9.4)
         WRITE (NCAWU,400) CTYPE(JTYPE),(EQU(I),I=1,3),F
         WRITE (NCAWU,410) CTYPE(JTYPE),VECPD,VECPD/100,VECPA,VECPA/100
400      FORMAT (/,1X,'Equation of the ',A,' :',/,11X,F10.5,'*X + ',F10.
     1    5,'*Y + ',F10.5,'*Z = ',F10.3,/,1X,20X,'X, Y and Z are in crys
     2tal fractions')
410      FORMAT (/,A,'-vector (in polar coord.): ',
     1   //,'DECLINAT =',F9.2,5X,'DECLINAT/100 =',F9.4,
     2    /,'AZIMUTH  =',F9.2,5X,'AZIMUTH /100 =',F9.4)
C
C--PRINT AN EXPLANATORY CAPTION
c         IF (JJ.NE.1) THEN
c            IF (ISSPRT.EQ.0) WRITE (NCWU,420) CTYPE(JTYPE),CDEV(JTYPE)
c            WRITE (NCAWU,420) CTYPE(JTYPE),CDEV(JTYPE)
c            WRITE (CMON,420) CTYPE(JTYPE),CDEV(JTYPE)
c            CALL XPRVDU (NCVDU,1,0)
420         FORMAT (' Deviations from the ',A,
     1      ', in angstrom, are given by ',A)
c         END IF
C--PRINT THE CO-ORDINATES OF THE ATOMS DEFINING THE PLANE:/LINE
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,430) CQUAL(2),CTYPE(JTYPE),CDEL(1)
         END IF
430     FORMAT (1X,' Co-ordinates of the defining atoms',' projected', 
     1 'onto the ',A,X,A//4X,'Type',5X,'Serial',7X,'Weight',7X,'XP',8X,
     2    'YP',8X,'ZP',7X,A,3x,'esd'/)
         WRITE (CMON,440) CQUAL(2),CTYPE(JTYPE),CDEL(1)
         CALL XPRVDU (NCVDU,3,0)
440      FORMAT (' Co-ordinates of the defining atoms',' projected onto',
     1   ' the ',A,X,A/4X,'Type',5X,'Serial',7X,'XP',8X,'YP',8X,'ZP',7X,
     2    A,3x,'esd'/)
      END IF
C
      IF (JPUNCH.NE.0) WRITE (NCPU,'(''# Plane no '',I4)') NP
C--COMPUTE A FEW ADDRESSES
      JO=JBASE+(NATOM-1)*MD5A
      I=JO
C--LOOP OVER EACH ATOM IN TURN
      DO 480 II=JBASE,JO,MD5A
c      WRITE(123,'(A4,I8)') ISTORE(I), NINT(STORE(I+1))
cdjw  find LIST 9 entry.
         if(iesd .ge.1) THEN
            call xfndesd(ISTORE(I), STORE(i+1), anesd, bnesd)
            esd = (bnesd(1)+bnesd(2)+bnesd(3))/3.
            CALL DESD( ROF, BNESD, ANS)
c      write(123,'(3(3f8.3,5x))') bnesd, esd, ans
c NOTE. the simple arithmetic mean esd is closer to PLATON 
c than Shmueli's expression
            write(cesd,'(f9.4)')esd
         else
            cesd = ' '
         endif
C      WRITE(123,'(A,F9.1,F9.5,2X,A5)')
C     1 ISTORE(i),STORE(i+1),ESD,CESD(5:9)
C
C
         CALL XSUBTR (STORE(I+4),XCF,STORE(I+4),3)
         CALL XMLTMM (RCA,STORE(I+4),STORE(I+10),3,3,1)
         IF (JJ.NE.1) THEN
            IF (JTYPE.EQ.1) THEN
             DEL=SQRT(STORE(I+10)**2+STORE(I+11)**2)
            else
             del = store(i+12)
            endif
            IF (ISSPRT.EQ.0) THEN
              WRITE (NCWU,450) STORE(I),STORE(I+1),STORE(I+7),
     1        STORE(I+10),STORE(I+11),STORE(I+12),DEL,cesd(5:9)
            END IF
450         FORMAT (5X,A4,F9.0,5X,F9.3,1X,4F10.3,2X,A5)
c
               WRITE (NCAWU,460) STORE(I),STORE(I+1),STORE(I+10),
     1          STORE(I+11),STORE(I+12),DEL,CESD(5:9)
               WRITE (CMON,460) STORE(I),STORE(I+1),STORE(I+10),
     1          STORE(I+11),STORE(I+12),DEL,CESD(5:9)
               CALL XPRVDU (NCVDU,1,0)
460         FORMAT (5X,A4,F9.0,2X,4F10.3,2X,A5)
         END IF
         IF (JPUNCH.NE.0) THEN
            WRITE (NCPU,470) STORE(I),STORE(I+1),STORE(I+10),STORE(I+11)
     1       ,STORE(I+12)
         END IF
470      FORMAT ('ATOM ',A4,F9.0,' X= ',3F10.3)
         I=I-MD5A
480   CONTINUE
C----- DO WE WANT THE OVERALL GOODIES ON SCREEN?
      IF (JJ.NE.1) THEN
C---- COMPUTE AXIS RATIOS
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,490) PAXIS(3)/PAXIS(1),1.-(PAXIS(2)+PAXIS(3))/
     1       (2.*PAXIS(1)),1.-(2.*PAXIS(3))/(PAXIS(1)+PAXIS(2))
         END IF
c         WRITE (NCAWU,490) PAXIS(3)/PAXIS(1),1.-(PAXIS(2)+PAXIS(3))/(2.*
c     1    PAXIS(1)),1.-(2.*PAXIS(3))/(PAXIS(1)+PAXIS(2))
         WRITE (CMON,490) PAXIS(3)/PAXIS(1),1.-(PAXIS(2)+PAXIS(3))/(2.*
     1    PAXIS(1)),1.-(2.*PAXIS(3))/(PAXIS(1)+PAXIS(2))
         CALL XPRVDU (NCVDU,4,0)
490      FORMAT (/' Spherical index = ',F6.2,' cylindrical index = ',F6.
     1    2,' Discoidal index = ',F6.2/
     2    ' Value closest to unity is best descriptor.',
     3    ' See D. M. P. Mingos and A. L. Rohl'/
     4    '  J. Chem. Soc. Dalton Trans. (1991), 3419-3425')
         WRITE (NCAWU,500) (XCF(I),I=1,3),((RCA(I,J),J=1,3),I=1,3)
500      FORMAT (/,' Centroid, in crystal fractions ',' Transformation f
     1rom crystal fractions ',/33X,' to best plane, (orthogonal angstrom
     2s)',/3F9.4,3(/,32X,3F9.4))
      END IF
C------ DO WE WANT A PLOT?
      IF (JJ) 520,520,510
510   CONTINUE
      JJ=NFL
      KK=KCHNFL(135)
      KK=135
      CALL PPLOT (JBASE,MD5A,NATOM,10,KK,ISTORE(JJ))
      NFL=JJ
520   CONTINUE
C--PUT DIRECTION COSINES INTO STORE
      K=JL+1
      DO 530 I=1,3
         STORE(K)=ROF(3,I)
         K=K+1
530   CONTINUE
C--MARK THE PLANE/LINE AS ACCEPTABLE
      LEF1=0
      ISTORE(JL)=0
C--RESET THE POINTERS FOR THE NEXT PLANE/LINE
540   CONTINUE
      JL=JL-JN
      ISTORE(JL)=NOWT
      LFL=JL-1
C----- RESET TO SHOW ATOMS ALREADY USED
cdjwmar05
      if (jtype .ne. 3) NATOM=0
      LEF2=0
      GO TO 20
C
C-- 'REPLACE' INSTRUCTION
550   CONTINUE
      IRPL=1
C--'EVALUATE' INSTRUCTION  -  CHECK IF WE CAN PRINT THE ATOMS
560   CONTINUE
      IF (JTYPE .LE. 0) THEN
C--ERROR BECAUSE NO PLANE/LINE/TLS HAS BEEN CALCULATED
570   CONTINUE
      CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) WRITE (NCWU,580) CTYPE(JTYPE)
      WRITE (NCAWU,580) CTYPE(JTYPE)
      WRITE (CMON,580) CTYPE(JTYPE)
      CALL XPRVDU (NCVDU,1,0)
580   FORMAT (' Instruction ignored','  -  no ',A,' has been calculated'
     1,' or errors have been detected')
      GO TO 20
      ELSE IF ((JTYPE .EQ. 1).OR.(JTYPE.EQ.2)) THEN
C--START TO PROCESS THE CARD
590   CONTINUE
      IF (KFDARG(I)) 20,600,600
C--PRINT A CAPTION
600   CONTINUE
      IF (ISSPRT.EQ.0) THEN
         IF (IRPL.EQ.0) WRITE (NCWU,610) CQUAL(2),CTYPE(JTYPE),CDEL(1)
      END IF
610   FORMAT (//' Co-ordinates of other atoms',' projected onto the ',A,
     1 X,A//4X,'Type',5X,'Serial',
     2  20X,'XP',8X,'YP',8X,'ZP',7X,A,3X,'esd'/)
C--CHECK THE CORE AREA
      LFL=LFL-MD5A
      IF (NFL+27-LFL) 620,620,3660
C--ENOUGH CORE  -  COMPUTE THE CENTROID IN BEST PLANE COORDS.
620   CONTINUE
      CALL XMLTMM (ROF,XCA,XCR,3,3,1)
C--CHECK THE TYPE OF THE NEXT ARGUMENT
      IF (ISTORE(MF)) 630,650,650
C--CHARACTERS  -  CHECK FOR 'ALL'
630   CONTINUE
      IF (KCOMP(1,ISTORE(MF+2),CTARG,1,1)) 650,650,710
C--CHECK IF THERE ARE MORE ARGUMENTS TO BE PROCESSED
640   CONTINUE
      IF (KOP(8)) 20,650,650
C--FIND THE NEXT GROUP OF ATOMS
650   CONTINUE
      IF (KATOMU(LN)) 3650,3650,660
C--LOOP OVER EACH OF THE ATOMS WE HAVE FOUND
660   CONTINUE
      IF (JPUNCH.NE.0) WRITE (NCPU,'(a)') '# EVALUATED ATOMS'
      DO 700 J=1,N5A
C--GENERATE THE TRANSFORMED COORDS.
         IF (KATOMS(MQ,M5A,LFL)) 3650,3650,670
C--COMPUTE THE BEST PLANE COORDS.
670      CONTINUE
         CALL XMLTMM (RCA,STORE(LFL+4),STORE(LFL+7),3,3,1)
C--SUBTRACT THE CENTROID
         CALL XSUBTR (STORE(LFL+7),XCR,STORE(LFL+7),3)
         IF (JPUNCH.NE.0) THEN
            WRITE (NCPU,470) STORE(LFL),STORE(LFL+1),STORE(LFL+7),
     1       STORE(LFL+8),STORE(LFL+9)
         END IF
         IF (IRPL.EQ.0) THEN
cdjw in here, find LIST 9 entry.
         if(iesd .ge.1) THEN
c      WRITE(123,'(A4,I8)') ISTORE(LFL), NINT(STORE(LFL+1))
            call xfndesd(ISTORE(LFL), STORE(LFL+1), anesd, bnesd)
            esd = (bnesd(1)+bnesd(2)+bnesd(3))/3.
             CALL DESD( ROF, BNESD, ANS)
c      write(123,'(3(3f8.3,5x))') bnesd, esd, ans
            write(cesd,'(f9.4)') esd
         else
            cesd = ' '
         endif
         IF (JJ.NE.1) THEN
            IF (JTYPE.EQ.1) THEN
             DEL=SQRT(STORE(LFL+7)**2+STORE(LFL+8)**2)
            else
             del = store(LFL+9)
            endif
          ENDIF
            IF (ISSPRT.EQ.0) THEN
               WRITE (NCWU,680) STORE(LFL),STORE(LFL+1),STORE(LFL+7),
     1          STORE(LFL+8),STORE(LFL+9),DEL, CESD(5:9)
            END IF
680         FORMAT (5X,A4,F9.0,15X,4F10.3,2X,A5)
            WRITE (NCAWU,690) STORE(LFL),STORE(LFL+1),STORE(LFL+7),
     1       STORE(LFL+8),STORE(LFL+9),DEL,CESD(5:9)
            WRITE (CMON,690) STORE(LFL),STORE(LFL+1),STORE(LFL+7),
     1       STORE(LFL+8),STORE(LFL+9),DEL,CESD(5:9)
            CALL XPRVDU (NCVDU,1,0)
690         FORMAT (5X,A4,F9.0,2X,4F10.3,2X,A5)
         ELSE
C----- FLATTEN THE STRUCTURE
            STORE(LFL+9)=0.
C----- ADD THE CENTROID
            CALL XADDR (STORE(LFL+7),XCR,STORE(IWORK),3)
C----- RESTORE TO FRACTIONAL
            CALL XMLTMM (RPCA,STORE(IWORK),STORE(M5A+4),3,3,1)
            IMOD5=1
         END IF
         M5A=M5A+MD5A
700   CONTINUE
      GO TO 640
710   CONTINUE
C----- 'ALL' NOW PROCESSED AS A NORMAL ATOM DEFINITION
C--END OF EVALUATION OF LINE/PLANE
C
C--'EVALUATE' TLS INSTRUCTION
3490  CONTINUE
      ELSE IF (JTYPE.EQ.3) THEN
3500  CONTINUE
C--START TO PROCESS THE CARD
      IF (KFDARG(I)) 20,3510,3510
C--PRINT A CAPTION
3510  CONTINUE
      IF (IRPL.EQ.0) THEN
         WRITE (NCAWU,3520)
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,3520)
         END IF
         WRITE (CMON,3520)
         CALL XPRVDU (NCVDU,1,0)
3520     FORMAT (1X,' Co-ordinates of other atoms',' after TLS applicati
     1on')
      END IF
C--CHECK THE CORE AREA
C      LFL=LFL-MD5A
C      IF(NFL + 27 -LFL)3350,3350,8900
C--ENOUGH CORE
C-- 'ALL' NOW PROCESSED AS PART OF NORMAL ATOM DEFINITION
         GO TO 3540
C--CHECK IF THERE ARE MORE ARGUMENTS TO BE PROCESSED
3530  CONTINUE
      IF (KOP(8)) 20,3540,3540
C--FIND THE NEXT GROUP OF ATOMS
3540  CONTINUE
      IF (KATOMU(LN)) 3650,3650,3550
3550  CONTINUE
C----- PRINT THE RESULTS FOR THESE ATOMS
         ISTART=LFL
         NUMBER=N5A
         ISTEP=MD5A
         ISAVE=M5A
      IF (KTLSPT(ISTART,NUMBER,ISTEP,ISAVE,IWORK,JWORK,IALL,IRPL,
     1 IMOD5,JPUNCH).LE.0) GO TO 3700
      IF (IALL.LE.0) GO TO 3530
      GO TO 20
C--END 'EVALUATE' TLS INSTRUCTION
      ENDIF
      GOTO 20
C
C--'DIHEDRAL' INSTRUCTION
730   CONTINUE
      JG=-1
C--CHECK IF THERE IS A NUMBER NEXT ON THE CARD
740   CONTINUE
      IF (ME) 750,750,770
C--ERROR IN THE INPUT NUMBER
750   CONTINUE
      CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,760)
      END IF
      WRITE (NCAWU,760)
760   FORMAT (/' Argument missing or of wrong type')
      GO TO 3650
C--READ THE NUMBER
770   CONTINUE
      IF (KSYNUM(Z)) 750,780,750
C--WE HAVE FOUND A NUMBER  -  UPDATE THE CARD POSITION
780   CONTINUE
      JA=NINT(Z)
      ME=ME-1
      MF=MF+LK2
C--CHECK THAT THE SERIAL NUMBER IS REASONABLE
      IF (JA) 810,810,790
790   CONTINUE
      IF (JA-NP) 800,800,810
C--NOW CHECK IF THIS PLANE HAS BEEN PROCESSED
800   CONTINUE
      K=JL+(NP-JA+1)*JN
      IF (ISTORE(K)) 810,830,830
C--ILLEGAL PLANE OR PLANE SERIAL  -  PRINT OUT THE ERROR MESSAGE
810   CONTINUE
      CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,820) JA
      END IF
      WRITE (NCAWU,820) JA
820   FORMAT (/1X,' There is no axis  with serial number ',I4)
      GO TO 3650
C--CHECK IF THIS IS THE FIRST OR SECOND PLANE
830   CONTINUE
      IF (JG) 840,880,880
C--THIS IS THE FIRST PLANE
840   CONTINUE
      JH=JA
      DCOSA(1)=STORE(K+1)
      DCOSA(2)=STORE(K+2)
      DCOSA(3)=STORE(K+3)
      JG=JG+1
C--CHECK IF THERE IS MORE ON THE CARD
      IF (ME) 750,750,850
C--CHECK IF THE NEXT ARGUMENT IS 'AND'
850   CONTINUE
      IF (ISTORE(MF)) 860,750,750
C--CHECK THE CHARACTERS
860   CONTINUE
      IF (KCOMP(1,ISTORE(MF+2),BTARG,1,1)) 750,750,870
C--THE ARGUMENT IS 'AND'  -  UPDATE THE CARD POSITION
870   CONTINUE
      ME=ME-1
      MF=MF+LK2
      GO TO 740
C--THIS IS THE SECOND PLANE NUMBER
880   CONTINUE
      JK=JA
      DCOSB(1)=STORE(K+1)
      DCOSB(2)=STORE(K+2)
      DCOSB(3)=STORE(K+3)
cdjwdec09
      DACCUM=0.0D0
      DACCA =0.0D0
      DACCB =0.0D0
      DO  J=1,3
        DACCUM=DACCUM+DCOSA(J)*DCOSB(J)
        DACCA = DACCA + DCOSA(J)*DCOSA(J)
        DACCB = DACCB + DCOSB(J)*DCOSB(J)
      ENDDO
      DACCUM = DACCUM/(DSQRT(DACCA)*DSQRT(DACCB))
      DACCUM = DABS(daccum)
      F = SNGL(DACCUM)
      F = ACOS(F)*RTD
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,920) JH,JK,F
      END IF
      WRITE (NCAWU,920) JH,JK,F
      WRITE (CMON,920) JH,JK,F
      CALL XPRVDU (NCVDU,5,0)
920   FORMAT (//1X,' Angle between axis ',I4,' and axis ',I4,' is ',F6.
     12,'  Degrees'//)
      GO TO 20
C
C
930   CONTINUE
C-- 'SAVE' INSTRUCTIONS FOR LIST 20
      IF (JTYPE .LE. 0) THEN
        GOTO 20
      ELSE IF (JTYPE .LE. 2) THEN
C----- 'SAVE' PLANE/LINE INSTRUCTION
            M20M=L20M+MD20M
            M20I=L20I+MD20I
            M20V=L20V+MD20V
            CALL XMOVE (RCA(1,1),STORE(M20M),9)
            CALL XMOVE (RPCA(1,1),STORE(M20I),9)
            CALL XMOVE (XCF(1),STORE(M20V),3)
      ELSE
3570  CONTINUE
C----- 'SAVE' TLS INSTRUCTION
         M20M=L20M+(JTYPE-1)*MD20M
         M20I=L20I+(JTYPE-1)*MD20I
         M20V=L20V+(JTYPE-1)*MD20V
         CALL XMOVE (STORE(KWORK),STORE(M20M),9)
         CALL XMOVE (STORE(KWORK+9),STORE(M20I),9)
         CALL XMOVE (STORE(KWORK+18),STORE(M20V),3)
      ENDIF
      IUPDT=1
      WRITE (CMON,3580) CCALC(JTYPE)
      CALL XPRVDU (NCVDU,1,0)
c      WRITE (NCAWU,'(A)') trim(CMON(1))
      IF (ISSPRT.EQ.0) WRITE (NCWU,3580) trim(CMON(1))
3580  FORMAT (' LIST 20 ',A,' record will be updated ')
      GO TO 20
C
C
C
C--'TLS' INSTRUCTION
3200  CONTINUE
      JTYPE=0
      JJ=-1
C -- CHECK THERE ARE SOME ATOMS
      IF (NATOM.LE.0) GO TO 3750
C--INCREMENT THE NUMBER OF GROUP CARDS READ
      NGP=NGP+1
C--CHECK IF ANY ERRORS HAVE BEEN GENERATED DURING THE INPUT OF THE ATOMS
      IF (IERR) 3210,3210,3230
3210  CONTINUE
      CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,3220)
      END IF
      WRITE (NCAWU,3220)
      WRITE (CMON,3220)
      CALL XPRVDU (NCVDU,1,0)
3220  FORMAT (' Instruction ignored because of previous errors')
      GO TO 20
3230  CONTINUE
      WRITE (NCAWU,3240) NGP
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,3240) NGP
      END IF
      WRITE (CMON,3240) NGP
      CALL XPRVDU (NCVDU,1,0)
3240  FORMAT (' Results for group number ',I4)
C--PRINT THE PAGE HEADING
c      CALL XPRTCN
C----- FIND TLS
      LBASE=NFL
C----- CHECK WORKSPACE FOR NEXT SUBROUTINE
      NFL=NFL+3*NATOM
      N=LFL-NFL
      IF (N.LE.0) GO TO 3660
      IF (IRTLS(JBASE,LBASE,NATOM,MD5A,KWORK,1).GT.0) THEN
C--PLANE/LINE COMPUTED OK. INCREMENT THE  PLANE/LINE NUMBER 
         NP=NP+1
C--MARK THE GROUP AS ACCEPTABLE
         JTYPE=3
         IERR=1
C----- CLEAR THE REJECT AND LIMIT CONDITIONS
         TESTEV=EIGMIN
         TESTER=EIGRAT
         NDEL=0
         CALL XZEROF (JDEL(1),20)
C----- TRANSCRIBE LATENT VECTORS
      CALL XTRANS(STORE(KWORK+21), ROF, 3,3)
         GOTO 520
      ELSE
         WRITE (NCAWU,3250)
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,3250)
         END IF
         WRITE (CMON,3250)
         CALL XPRVDU (NCVDU,1,0)
3250     FORMAT (' TLS analysis fails')
      END IF
      GOTO 20
C
C---'DISTANCES' INSTRUCTION
3260  CONTINUE
      DL=1.8
      IF (ME) 3310,3310,3270
3270  CONTINUE
      IF (KSYNUM(DL)) 3630,3290,3630
C
C---'ANGLES' INSTRUCTION
3280  CONTINUE
      DA=1.8
3290  CONTINUE
      IF (ME) 3310,3310,3300
3300  CONTINUE
      IF (KSYNUM(DA)) 3630,3310,3630
3310  CONTINUE
      IF (JTYPE .EQ. 3) THEN
3320  CONTINUE
C -- CHECK THERE ARE SOME ATOMS
      IF (NATOM.LE.0) GO TO 3750
C----- COMPUTE DISTANCES AND ANGLES
      CALL RDSTAN (JBASE,LBASE,NATOM,MD5A)
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,3330)
      END IF
      WRITE (CMON,3330)
      CALL XPRVDU (NCVDU,3,0)
3330  FORMAT (1X,79('*'),/,10X,
     1 'To continue, you must issue a new ATOM directive',/,1X,
     2 79('*'))
      NATOM=0
      JTYPE=0
      GO TO 20
      ENDIF
      GOTO 3630
C
C
C----- 'LIMITS' INSTRUCTION TO RESET EIGENVALUE TEST LIMITS
3340  CONTINUE
      IF (KFDARG(I)) 3650,3350,3350
C--READ THE FIRST NUMBER
3350  CONTINUE
      IF (KFDNUM(TESTEV)) 3650,3360,3360
C--CHECK IF THERE IS A SECOND NUMBER
3360  CONTINUE
      IF (ME) 20,20,3370
C--READ THE SECOND NUMBER
3370  CONTINUE
      IF (KFDNUM(TESTER)) 3650,20,20
C
C----- 'REJECT' INSTRUCTION TO REJECT CHOSEN EIGENVALUES
3380  CONTINUE
      IF (KFDARG(I)) 3650,3390,3390
C---- READ THE REJECTED EIGENVALUES
3390  CONTINUE
      IF (KFDNUM(A)) 3650,3400,3400
3400  CONTINUE
      NDEL=NDEL+1
      JDEL(NDEL)=NINT(A)
      GO TO 20
C
C
C---'CENTRE' INSTRUCTION
3410  NB=0
3420  IF (ME) 3470,3470,3430
3430  IF (KSYNUM(Z)) 3590,3440,3460
3440  NB=NB+1
      IF (NB-3) 3450,3450,3610
3450  CF(NB)=Z
      ME=ME-1
      MF=MF+LK2
      GO TO 3420
3460  IF (KOP(8)) 3470,3420,3590
3470  IF (NB-3) 3610,20,3610
C
C
3560  CONTINUE
C----- 'AXES' INSTRUCTION
      JTYPE=0
      JJ=-1
      IF (NATOM.LE.0) GO TO 3750
      IF (IERR.LE.0) GO TO 3210
      LBASE=NFL
C----- CHECK WORKSPACE FOR NEXT SUBROUTINE
      NFL=KSTALL(4*NATOM)
Cdjwmar00      CALL XPRAXI (1,1,LBASE,JBASE,MD5A,NATOM,2,KWORK)
      CALL XPRAXI (1,1,0,JBASE,MD5A,NATOM,2,0,JPUNCH)
C--MARK THE CALCULATION AS ACCEPTABLE
      JTYPE=4
      IERR=1
      GO TO 20
C
3800  CONTINUE
C----- ZERO THE S TENSOR
      JDJW=3
      CALL XZEROF (AVECT,6)
      GOTO 1850
C----- MODIFY T TENSOR
3850  CONTINUE
      JDJW = 1
      GOTO 3910       
C----- MODIFT L TENSOR
3900  CONTINUE
      JDJW = 2
3910  CONTINUE
C--CHECK FOR SOME ARGUMENTS
      IF(KFDARG(I))1300,1320,1320
C--ERROR(S)  -  INCREMENT THE ERROR COUNT
1300  CONTINUE
      LEF1=LEF1+1
      GOTO 3610
C--CHECK IF THERE ARE MORE ARGUMENTS ON THIS CARD
1320  CONTINUE
      DO 1550 I = 1,6
1350  CONTINUE
      IF(KOP(8))3610,1400,1400
C--CHECK IF NEXT ARGUMENT IS A NUMBER
1400  CONTINUE
      IF(KSYNUM(Z))3590,1450,3590
1450  CONTINUE
      AVECT(I) = Z
      ME=ME-1
      MF=MF+LK2
1550  CONTINUE
1850  CONTINUE
      IF (JTYPE.EQ.3) THEN
C----- REBUILD TLS TENSOR
C      CONVERT TO TENSOR
       IF (JDJW .EQ.1) THEN
        CALL XPANDU(AVECT,AT)
        CALL XMLTMT (AT,SAVEE,DJWA, 3,3,3)
        CALL XMLTMM (SAVEE,DJWA,DJWB,3,3,3)
        CALL RSUB09 (djwb,AR(1))
       ELSE IF (JDJW .EQ.2) THEN
C       DEGREES SQUARED
        CALL XDVDR(AVECT, RTD, ATENS,9)
        CALL XDVDR(ATENS, RTD, AVECT,9)
        CALL XPANDU(AVECT,AL)
        CALL XMLTMT (AL,SAVEE,DJWA, 3,3,3)
        CALL XMLTMM (SAVEE,DJWA,DJWB,3,3,3)
        CALL RSUB09 (DJWB,AR(7))
       ELSE IF (JDJW .EQ. 3) THEN
C----- ZERO THE S TENSOR
        CALL XZEROF(AS,9)
        CALL XMOVE(AS,AR(13),9)
       ENDIF
      ENDIF
      GOTO 20
C
C
C--ABANDON AND RECYCLE EXIT FOR THESE ROUTINES
C
3750  CONTINUE
C----- NO ATOMS SPECIFIED
      IF (ISSPRT.EQ.0) THEN
         if(jtype<1 .or. jtype>size(ctype)) then
           write(ncwu, '(a)') 'Error: Atom does not exist'
         else
           WRITE (NCWU,3760)ctype(jtype)
         end if
      END IF
      if(jtype<1 .or. jtype>size(ctype)) then
        write(cmon, '(a)') 'Error: Atom does not exist'
      else
        WRITE (CMON,3760)ctype(jtype)
      end if
      CALL XPRVDU (NCVDU,2,0)
3760  FORMAT (1X,'No atoms have been specified for a ',A,/
     1 'Atoms may only be given on a preceeding ATOM card')
      CALL XERHND (IERWRN)
      GO TO 20
C
C--ERROR BECAUSE TLS  HAS NOT BEEN CALCULATED
3630  CONTINUE
      CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,3640)
      END IF
      WRITE (CMON,3640)
      CALL XPRVDU (NCVDU,1,0)
3640  FORMAT (' Instruction ignored. TLS has not been',
     1 ' successfully computed')
      write(CMON,3641)
3641  FORMAT (' Did you really mean DIHEDRAL angles?')
      CALL XPRVDU (NCVDU,1,0)
      GO TO 20
C
C
3650  CONTINUE
      LEF=LEF+1
      CALL XPCA (I)
      GO TO 20
C
C
C--MAIN TERMINATION ROUTINES
C
C
3670  CONTINUE
      IF (IMOD5.GT.0) THEN
         CALL XSTR05 (IULN5,0,1)
         WRITE (NCAWU,3680)
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,3680)
         END IF
         WRITE (CMON,3680)
         CALL XPRVDU (NCVDU,1,0)
3680     FORMAT (' LIST 5 has been updated')
      END IF
      IF (IUPDT.GT.0) THEN
         CALL XSTR20 (20,0,1)
         WRITE (NCAWU,3690)
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,3690)
         END IF
         WRITE (CMON,3690)
         CALL XPRVDU (NCVDU,1,0)
3690     FORMAT (' LIST 20 has been updated')
      END IF
      GO TO 3720
C
C
C---ERROR MODES FOR 'CENTRE' INSTRUCTION
3590  CONTINUE
      CALL XPCLNN (LN)
      I=ISTORE(MF+1)
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,3600) I
      END IF
      WRITE (NCAWU,3600)
      WRITE (CMON,3600)
      CALL XPRVDU (NCVDU,1,0)
3600  FORMAT (' Spurious character at about column',I5)
      GO TO 3650
3610  CALL XPCLNN (LN)
      IF (ISSPRT.EQ.0) THEN
         WRITE (NCWU,3620)
      END IF
      WRITE (NCAWU,3620)
      WRITE (CMON,3620)
      CALL XPRVDU (NCVDU,1,0)
3620  FORMAT (' Too many or too few numbers')
      GO TO 3650
C
3700  CONTINUE
      IF (IMOD5.GT.0) THEN
         N=5
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,3710) N
         END IF
         WRITE (NCAWU,3710) N
         WRITE (CMON,3710) N
         CALL XPRVDU (NCVDU,1,0)
3710     FORMAT (' WARNING. The requested update to LIST ',I4,' has not
     1been performed')
      END IF
      IF (IUPDT.GT.0) THEN
         N=20
         WRITE (NCAWU,3710) N
         IF (ISSPRT.EQ.0) THEN
            WRITE (NCWU,3710) N
            WRITE (CMON,3710) N
            CALL XPRVDU (NCVDU,1,0)
         END IF
      END IF
      GOTO 3720
C
C -- ERRORS
3730  CONTINUE
      CALL XOPMSG (IOPTLS,IOPABN,0)
      GO TO 3700
3740  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG (IOPTLS,IOPCMI,0)
      GO TO 3730
C
C
1020  CONTINUE
C -- ERRORS
      CALL XOPMSG (IOPAXS,IOPABN,0)
      GO TO 3700
1030  CONTINUE
C -- INPUT ERRORS
      CALL XOPMSG (IOPAXS,IOPCMI,0)
      GO TO 1020
C
C--NOT ENOUGH CORE
3660  CONTINUE
      I=0
      J=0
      CALL XSTICA (I,J)
      GO TO 3700
C
3720  CONTINUE
      CALL XOPMSG (IOPTLS,IOPEND,IVERSN)
      CALL XTIME2 (2)
      RETURN
C
      END
C
CODE FOR XFNDESD
      SUBROUTINE XFNDESD(NAME,ASERIAL, ANESD, BNESD)
      use unitcell_mod
      implicit none
C GET THE POSITIONAL ESDS OF AN ATOM IN ANGSTROM
C
      real, DIMENSION(3) :: ANESD, BNESD
      !INCLUDE 'XLST01.INC'
      INCLUDE 'XLST09.INC'
      INCLUDE 'XCONST.INC'
      INCLUDE 'ISTORE.INC'
      INCLUDE 'STORE.INC'
      INCLUDE 'QSTORE.INC'
      
      integer i, name
      real esd, aserial
C
      ESD = 0.0
      M9=L9
      DO I=1,N9
        IF(ABS(STORE(M9+1)-ASERIAL).LE.ZERO) THEN
C           SERIAL FOUND - CHECK TYPE
            IF(ISTORE(M9).EQ.NAME) THEN
C           TYPE ALSO FOUND
            ANESD(1) = store(m9+4)
            ANESD(2) = store(m9+5)
            ANESD(3) = store(m9+6)
C
            BNESD(1) = ANESD(1)*unitcells(1)%a 
            BNESD(2) = ANESD(2)*unitcells(1)%b
            BNESD(3) = ANESD(3)*unitcells(1)%c
            EXIT
            ENDIF
        ENDIF
        M9 = M9+MD9
      ENDDO
      RETURN
      END
C
CODE FOR DESD
      SUBROUTINE DESD( ROF, ESDS, ANS)
C ESD OF DISTANCE FROM MEAN PLANE
      real, dimension(3,3), intent(in) ::  ROF
      real, dimension(3), intent(in) :: ESDS
      real, intent(out) :: ANS
      real temp

C SEE SHMUELI, ACTA 1981, A37, 249-251
C EQUATIONS 4, 9, 10
C [B] IS DIAGONAL, ALL ELEMENTS USUALLY VERY SIMILAR
C ERROR IN PLANE NORMAL IS NEGLECTED
C ERROR IN CENTROID IS NEGLECTED - COULD BE SIGNIFICANT
C FOR SMALL NUMBERS OF ATOMS
C    Var(cent) ~ <Var>/N

      temp=ROF(3,1)*ROF(3,1)*ESDS(1)*ESDS(1) +
     2      ROF(3,2)*ROF(3,2)*ESDS(2)*ESDS(2) +
     3      ROF(3,3)*ROF(3,3)*ESDS(3)*ESDS(3) 
      ANS = SQRT(TEMP)
      RETURN
      END

