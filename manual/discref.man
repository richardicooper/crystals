#PROGRAMMERS REFERENCE MANUAL   
#ZDISC ROUTINES#
#YINTRODUCTION# 
#PTHIS SET OF ROUTINES IS RESPONSIBLE FOR ALL TRANSFERS TO AND FROM THE DISC.   
 WHEN USING THESE SUBROUTINES A PROGRAMMER CAN :
#J  
    
1.  ACCESSS RANDOMLY ANY WORD ON THE DISC.  
    
2.  IGNORE ENTIRELY THE PHYSICAL STRUCTURE OF THE DISC. 
    
#   
#PIN ORDER TO PROVIDE RANDOM ACCESS TO THE DISC IN AN ENVIROMENT    
 WHERE EVERY WORD IS NOT DIRECTLY ADDRESSABLE, IT IS    
 NECESSARY FOR THE DISC ROUTINES TO BUFFER THE DATA THAT IS 
 BEING READ TO OR WRITTEN FROM THE DISC.
 THE SYSTEM USES THE COMMON BLOCK 'XDATA' FOR ITS INTERNAL  
 BUFFERS, AND THIS AREA MUST BE INITIALISED BEFORE THE ROUTINES 
 ARE CALLED.
 THE CODE FOR THIS SHOULD BE :  
#J  
    
      COMMON/XDATA/XNFL,XLFL,XNL,ISTORE(IDEM)   
      . 
      . 
      . 
      . 
      . 
C--INITIALISE THE DISC ROUTINES 
      ISTORE(N)=N   
      CALL XGIVEF(ISTORE(N),L,NL)   
      . 
      . 
    
    
WHERE : 
    
N       THE FIRST WORD IN THE ARRAY 'ISTORE' THAT THE CALLING PROGRAM   
        IS PREPARED TO SURRENDER.   
        
L       THE NUMBER OF WORDS THAT THE CALLING PROGRAM IS PREPARED TO 
        SURRENDER.  
        
NL      THE FIRST WORD AFTER THE BUFFERS THAT THE CALLING PROGRAM MAY   
        USE. (THIS IS SET ON RETURN).   
        
#   
'NL' IS PROVIDED SO THAT THE CALLING PROGRAM DOES NOT NEED TO KNOW  
 EXACTLY THE NUMBER OF WORDS REQUIRED FOR EACH BUFFER AND ITS   
 ASSOCIATED CONTROL WORDS.  
#PTHE VALUES OF 'IDEM', 'N' AND 'L' DEPEND UPON WHETHER THE PROGRAM 
 WISHES TO USE THE COMMON BLOCK 'XDATA' FOR OTHER DATA STORAGE. 
 IF 'XDATA' IS TO BE USED ONLY FOR BUFFERING, THEN SUITABLE VALUES  
 ARE IDEM=1600, N=1 AND L=1600, WHEN 512 WORD BLOCKS ARE BEING USED.
 (KNWRF=512).   
 THIS GIVES THE WHOLE OF THE COMMON BLOCK TO THE BUFFERING SYSTEM.  
 IN OTHER CASES DIFFERENT VALUES MAY BE GIVEN, ALTHOUGH SUFFICIENT  
 SPACE MUST ALWAYS BE ALLOCATED FOR AT LEAST ONE DISC BUFFER.   
 (THE SYSTEM WILL TRY TO USE ALL THE SPACE ASSIGNED TO IT, UP TO
 A MAXIMUM OF 15 BUFFERS).  
#PIF NECESSARY, A PROGRAM CAN DETERMINE THE REAL PHYSICAL SIZE OF THE   
 DATA BLOCKS BEING USED BY CALLING THE FUNCTION :   
#J  
    
      . 
      . 
C--SET 'I' TO THE LENGTH OF ONE SOFTWARE DEFINED DISC BLOCK 
      I=KNWRF(IN)   
      . 
      . 
    
WHERE : 
    
IN      A DUMMY ARGUMENT.   
    
#   
#YREADING AND WRITING WORDS ON THE DISC#
#PONCE THE SYSTEM HAS BEEN INITIALIASED BY A 'XGIVEF' REQUEST, DATA MAY BE  
 TRANSFERED TO AND FROM THE DISC.   
 TO READ INFORMATION, THE NECESSARY INSTRUCTION IS :
#J  
    
      . 
      . 
C--FETCH 'NW' WORDS FROM 'IADD' 
      CALL XDOWNF(IADD,WORD,NW) 
      . 
      . 
    
WHERE : 
    
IADD    THE DISC ADDRESS OF THE FIRST WORD TO BRING DOWN.   
        
WORD    AN ARRAY NAME OR AN ARRAY ELEMENT, DEFINING THE LOCATION
        AT WHICH THE FIRST WORD IS TO BE BROUGHT DOWN.  
        
NW      THE NUMBER OF WORDS TO BRING DOWN.  
        
TO WRITE INFORMATION, THE NECESSARY CODE IS :   
    
      . 
      . 
C--WRITE 'NW' WORDS AT DISC ADDRESS 'IADD'  
      CALL XUPF(IADD,WORD,NW)   
      . 
      . 
    
THE VARIABLES HAVE THE SAME MEANING AS FOR 'XDOWNF'.
    
#   
THE FIRST ADDRESSABLE WORD ON THE DISC IS WORD 0 (ZERO).
 SINCE THE LENGTH OF FLOATING POINT AND INTEGERS NUMBERS IS GREATER THAN
 ONE ACTUAL COMPUTER WORD ON SOME COMPUTERS, THE INCREMENT TO THE   
 DISC ADDRESS AFTER TRANSFERING 'NW' WORDS IS CALCULATED AS FOLLOWS :   
#J  
    
      . 
      . 
C--COMPUTE THE INCREMENT FOR 'NW' WORDS 
      IADD2=IADD1+KINCRF(NW)
      . 
      . 
    
WHERE : 
    
IADD1   THE DISC ADDRESS BEFORE THE TRANSFER.   
        
IADD2   THE NEXT LOCATION AFTER THE DATA THAT HAS BEEN TRANSFERED.  
        
NW      THE NUMBER OF WORDS TRANSFERED. 
    
KINCRF AN INTEGER FUNCTION. 
    
#   
#YCOMPLETION OF DISC TRANSFERS# 
#PAS THE SYSTEM USES A SET OF INTERNAL BUFFERS, IT MAY HAPPEN THAT THE  
 DATA IN A GIVEN BUFFER HAS BEEN MARKED FOR WRITING OUT TO THE DISC, BUT
 THAT THE ACTUAL WRITE INSTRUCTION HAS NOT BEEN GIVEN.  
 IN ORDER TO FORCE THE DISC ROUTINES TO COMPLETE THE OUTPUT 
 OF ALL BUFFERS WAITING TO BE WRITTEN,  
 IT IS NECESSARY FOR THE PROGRAM TO ISSUE A DUMP INSTRUCTION :  
#J  
    
      . 
      . 
C--DUMP ALL WAITING BUFFERS 
      CALL XDUMP
      . 
      . 
    
#   
NO TRANSFER MADE VIA 'XUPF' CAN BE GUARANTEED TO HAVE BEEN COMPLETED UNTIL  
 'XDUMP' HAS BEEN CALLED.   
 ALL THE STANDARD TERMINATION ROUTINES AVAILABLE CALL 'XDUMP' BEFORE THEY   
 DELETE THE CORE IMAGE. 
#YROUTINES FOR MANIPULATION OF REAL WORDS#  
#PCORRESPONDING TO THE SEGMENTS AVAILABLE FOR MANIPULATION OF   
 FLOATING POINT NUMBERS, THERE ARE A SET OF ROUTINES THAT WORK DIRECTLY 
 WITH REAL COMPUTER WORDS.  
 THE RELATIONSHIP BETWEEN THESE TWO SETS OF ROUTINES IS DETERMINED BY THE   
 HARDWARE OF THE COMPUTER ON WHICH THE PROGRAM IS INSTALLED, AND IN GENERAL 
 ONLY THOSE ROUTINES FOR FLOATING POINT NUMBERS SHOULD BE USED. 
 THE CORRSEPONDING ROUTINES ARE :   
#J  
    
XGIVE       XGIVEF  
XUP         XUPF
XDOWN       XDOWNF  
KINCRS      KINCRS  
KNWR        KNWRF   
    
#   
THE ROUTINES WITHOUT THE TERMINAL 'F' HAVE THE SAME ARGUMENTS AND FUNCTIONS,
 APART FROM THE DIFFERING WORD LENGTHS. 
#YINSTALLATION DEPENDENT PARAMETERS#
#PTHE LENGTH OF EACH BLOCK AS DEFINED BY THE DISC SOFTWARE IS SET UP
 IN THE FUNCTIONS 'KNWRF' AND 'KNWR'.   
 ('KNWR' REFERS TO REAL COMPUTER WORDS, WHILE 'KNWRF' REFERS TO FLOATING
 POINT AND INTEGER WORDS USED IN THE CRYSTALLOGRAPHIC CALCULATIONS).
 THE RELATIONSHIP OF THE SOFTWARE DEFINED BLOCKS TO THE PHYSICAL
 BLOCKS IS SET UP IN THE SUBROUTINES 'XSTORE' AND 'XFETCH' WHICH ACTUALLY   
 CONTROL THE DISC.  
 TO BRING DOWN A SOFTWARE DEFINED BLOCK, THE FOLLOWING CODE IS USED :   
#J  
    
      . 
      . 
C--READ DOWN A BLOCK INTO CORE  
      CALL XFETCH(IBLOCK,WORD,NW)   
      . 
      . 
    
WHERE : 
    
IBLOCK  SOFTWARE DEFINED DISC BLOCK NUMBER TO BE READ.  
        (FIRST BLOCK IS 0). 
        
WORD    ARRAY OR ARRAY ELEMENT SPECIFYING THE FIRST WORD
        IN CORE OF THE TRANSFER.
        
NW      NUMBER OF WORDS TO TRANSFER.
    
TO WRITE A DISC BLOCK FROM CORE, THE CODE USED IS : 
    
      . 
      . 
C--WRITE A DISC BLOCK   
      CALL XSTORE(IBLOCK,WORD,NW)   
      . 
      . 
    
THE SAME ARGUMENTS HAVE THE SIGNIFICANCE AS FOR 'XFETCH', EXCEPT THAT   
THE NUMBER OF WORDS TRANSFERED IS ROUNDED UP TO AN INTEGRAL NUMBER OF   
DISC BLOCKS.
    
#   
THESE ROUTINES SHOULD NEVER BE USED BY A THE NORMAL PROGRAMMER. 
#YCOMMON BLOCKS USED#   
#PTHE DISC ROUTINES REQUIRE FOUR COMMON BLOCKS, THREE OF WHICH MUST BE  
 INITIALISED.   
 THESE COMMON BLOCKS ARE :  
#J  
    
      . 
      COMMON/XDATA/XNFL,XLFL,XNL,ISTORE(IDEM)   
      . 
    
THE USE OF THIS COMMON BLOCK HAS ALREADY BEEN EXPLAINED ABOVE.  
    
    
      . 
      COMMON/XDISC/NU,N 
      . 
    
WHERE : 
    
NU      THE UNIT NUMBER OF THE DISC FILE.   
        
N       THE CURRENT REAL DISC ADDRESS.  
    
THE VALUE OF 'NU' MUST BE SET BEFORE THE DISC ROUTINES ARE CALLED.  
    
    
      . 
      COMMON/XDISCB/XIACC,MLSS,ID(12)   
      EQUIVALENCE (XIACC,IACC)  
      . 
    
WHERE : 
    
IACC    THE BUFFER CONTROL FLAG :   
        -1  NO BUFFERS HAVE BEEN ALLOCATED, OR THE  
            ALLOCATION HAS FAILED.  
         0  AT LEAST ONE BUFFER HAS BEEN ALLOCATED TO THE SYSTEM.   
        
MLSS    THE MAXIMUM NUMBER OF BUFFERS THAT THE SYSTEM CAN CLAIM.
        
ID      WORK VARIABLES FOR THE DISC ROUTINES.   
    
'IACC' AND 'MLSS' MUST BE  SET BEFORE THE DISC ROUTINES ARE CALLED. 
    
    
      . 
      COMMON/XUNITS/XCRU,XCRRU,XCWU,XCPU
      EQUIVALENCE (XCWU,NCWU)   
      . 
    
WHERE : 
    
NCWU   THE NUMBER OF THE CURRENT LINE PRINTER UNIT. 
    
#   
ALL THE ABOVE COMMON BLOCKS ARE INITIALISED BY THE SYSTEM WHEN NORMAL   
 CRYSTALS PROGRAMS ARE USED.
#YINTERNAL BUFFER FORMATS#  
#PTHE AREA OF CORE STORE GIVEN BY THE USER PROGRAM IS SET UP AS FOLLOWS :   
#J  
    
0      NOT USED 
1      ADDRESS OF THE FIRST BUFFER IN THE CHAIN.
2      NOT USED 
3      NOT USED 
    
FOR EACH BUFFER :   
    
0      NOT USED 
1      ADDRESS OF THE NEXT BUFFER IN THE CHAIN OR -1.   
2      NUMBER OF THIS BLOCK ON THE DISC.
3      READ/WRITE STATUS WORD FOR THIS BUFFER : 
       0  READ ONLY FROM THIS BUFFER.   
      -1  BUFFER HAS BEEN WRITTEN AND NEEDS DUMPING TO DISC.
4      FIRST WORD OF THE BUFFER 
.      .
.      .
.      .
KNWR-3 LAST WORD OF THE BUFFER. 
    
#   
IN THE SAME WAY AS THE DISC IS ADDRESSED IN REAL COMPUTER WORDS, THE CORE   
 BUFFERS ARE SET UP USING REAL WORDS.   
 THE FIRST DISC BLOCK IS 0 (ZERO).  
#PIN ORDER TO ACCESS A GIVEN BLOCK, THE DISC ROUTINES FIRST SEARCH THROUGH  
 THE BUFFERS IN CORE TO SEE IF THE THE BLOCK IS ALREADY LOADED. 
 IF IT IS NOT IN CORE, THE LAST BUFFER IN THE CHAIN IS REWRITTEN TO THE 
 DISC (IF NECESSARY) AND THE REQUIRED BLOCK ACCESSED FROM THE DISC. 
 THE BUFFER CONTAINING THE REQUIRED BLOCK IS THEN REMOVED FROM ITS POSITION 
 IN THE CHAIN AND BROUGHT TO THE TOP OF THE CHAIN.  
 IN THIS WAY SERIAL ACCESS OR ACCESS OF THE SAME BLOCK REPEATEDLY CAN BE DONE   
 EFFICIENTLY, WHILE THE LEAST USED BLOCKS GRADUALLY FIND THEIR WAY TO THE   
 END OF THE CHAIN AND ARE REPLACED. 
 THE RE-ORDERING OF THE BUFFERS IN THE CHAIN IS ACHIEVED SOLELY BY CHANGING 
 THE LINK ADDRESSES IN WORD 1, THUS PROVIDING A SIMPLE BUT POWERFUL 
 'LEARNING MECHANISM'.  
#PINITIALLY, THE ORDER OF THE BUFFERS IN THE CHAIN IS THE SAME AS THEIR 
 POSITION IN THE GIVEN AREA IN CORE, BUT AFTER REPEATED USE, THE REAL   
 AND 'CHAINED' ORDER BEAR NO RESEMBLENCE TO EACH OTHER. 
 A LINK OF -1 IN WORD 1 INDICATES THE END OF THE CHAIN. 
#J  
****
    
