         120  86  20
#STRUCTURE OF THE COMMAND FILE
#Q
#ZGENERAL
#Q
#PThe COMMAND FILE is a data base defining the data which CRYSTALS can
 accept. CRYSTALS reads the users data and compares it with the definitions
 in the COMMAND FILE inorder to verify the syntax of the data, and if possible
 make default value substitutions. The INSTRUCTION, DIRECTIVE and KEYWORD 
 names are defined in the COMMAND file, and may thus be changed without
 modifying the program itself. The COMMAND file is prepared from a source file
 by the program DEFINE. The COMMAND file must be available to all users, DEFINE
 and the command source should have restricted access. 
#PThe command source file is a fixed format file, and so should be edited with
 care.
#PData are of two types. Type 1 are simple parameters, which
 are identified in the input by having a keyword (and possibly
 a default value). Type 2 are 'data records',in which an
 alphameric string is stored by the input routine for subsequent
 unpicking by the subroutines concerned. For type 2, default values
 cannot be inserted at input time.
#J

#Q
#PThe commands to crystals are structured into blocks.
#J
      $INSTRUCTION PARAMETERS
      DIRECTIVE PARAMETERS
      DIRECTIVE PARAMETERS
      END
#Q
#PThe directive  END  is usually optional (see however LIST5 & LIST 6),
and is implied by the \ of the next instruction.
#PInstructions, directives and parameters are terminated by spaces. For
 a given instruction some or all of the directives and parameters
 may have default values and hence need not be given by the user.
 Each instruction or directive line is scanned for syntax on input, and
 the whole data processed for self consistency at the end of the
 instruction block if possible. Some instruction generate pseudo
 instructions, which will appear in the output listing with the same
 sequence number es the generating instruction. Directives initiating
 an action are obeyedin the order given. Parameters may also be terminated
 by a  ,  and are located either by position (in which case omitted parameters
 must be indicated by the delimiting  ,  ) or by keywords. Keywords
 are delimited by  = . Both methods may be used on the same card, in
 which case the parameter position count for unkeyed parameters follows
 on from the preceeding keyed parameter. Keyed parameters may be input in
 any order.
#PThe input of all data is under the control of the  COMMANDFILE ,
 which contains the definition for instructions, directives and parameters.
 It also contains the default values and interdependancy records. Two
 essentially different sorts of records exist, those in which preprogrammed
 locations are made available for specific data , and those in which
 the form of the data is at the user's discretion. These latter are called
 'data records' and are stored verbatim for detailed analysis by the
 lexical functions. Most of the instructions involving atom specifications
 fall into the second group, with most  LISTS  falling into the first.
 However, an instruction may require data of both types.
#PThe  COMMANDFILE  is a direct access file produced by the program
  DEFINE , which is part of  the CRYSTALS system,
 from a fixed-format source file.
  DEFINE  Also produces line printer output files. The larger of these
 is an annotated plain language version of  COMMANDS , containing
 information giving programmers details of parameter locations in the
 program. The shorter,  is a subset of this information and is intended
 as an aide memoire for users and programmers. This is a vital user
 document since it provides a definative list of the current parameter
 defaults. This information is also available on-line via the COMMANDS
 instruction, or the '?' facility.
#Q
#ZDATA STRUCTURES IN CRYSTALS
#Q
#PPermenant data, which may be needed for several tasks, is stored on a
 direct access disc file in the form of  LISTS , each of which has an
 identifying type number and a serial number. A list of these lists is
 held in an index in the direct access disc file.
 The contents of a list may be completely defined by the
 programmer, with individual locations for data values (see for example
 list 1) ,or may be defined by the user, with the program interpreting
 them later (list 16). In both cases the user is required to present his
 data according to rules defined by the commandfile and described in the
 manuals. For example, the incompatability of simultaneous block
 diagonal and full matrix least-squares refinement is encoded in the
 commandfile under list 12. The commandfile also contains for each
 instruction a list of those lists which must be stored on disc before
 the instruction can be executed.
#P The instruction \COMMANDS enables the user to examine the commandfile
 at run time, producing on his terminal a listing of the relevent
 part of the commandfile listing.  COMMANDS is not intended to replace the
 manuals.
#PAt runtime, the users information is brought from the disc and
 stored in the array  STORE , which is equivalenced to  ISTORE .
 The addresses of location used in this array are held in a common
 block, one for each list loaded, whose format is also defined by
 the commandfile. The common block consists of repeated groups of
 four integers, with one group for each logically distinct data record.
 The four integers are refered to in programmes by mxx,nxx,mdxx and lxx,
 where xx is a nmonic for the data record, e.g. M5 for list 5.
#J
      LXX  is the start address of the block
      MXX  is the current group in the block
      MDXX is the length of the repeat groups
      NXX  is the number or repeat groups in the block

 These indices could be used in a loop header

      MXX := LXX by MDXX to MDXX*(NXX-1)+LXX


#Q
#ZCOMMAND FILE SPECIFICATIONS
#QThe appendix, (COMMENT lines taken from the introduction to LIST50), details
 exactly how the ASCII COMMANDS file is processed to give the direct access
 data base. These notes may throw additional light onto the processing.
 Note that during LIST processing, the lists are identified by their absolute
 position in the COMMAND file, except LIST 33, which uses the symbolic name
 SFLS. All the lists could be given symbolic names in addition to their LIST
 numbers. Before the definitions of the INSTRUCTIONS, the list generation
 commands are given. If an INSTRUCTION (including LIST) later in the file
 includes on of these generated lists in its table of 'LISTS used', the
 required LIST is generated from the defaults in COMMANDS if it does not
 already exist. Thus the INSTRUCTIION 'LP' uses LIST 13, which will be
 generated if necessary.
#J

1.  Defines an INSTRUCTION

    12A1,3X,3I5

       1 instruction name
       2 number of directives      - NR60
       3 number of lists           - NR63
       4 number of submasters that can obey this instruction load details.
         Usually omitted, i.e. zero, but see FINISH for a multiple example.
         First is 0      - NR64

2.  Load details for submaster change - NR64 records of this type.

    I4,I8,17A4

       1 switch value. Used to switch within the submaster to the 
         code processing this instruction (The value returned by KNXTOP)
       2 core size. Used in versions using elastic core.
       3 submaster 'PROGRAM' name, used in the switch in the CRYSTALS master
         segment.

3.  Lists to be loaded before this instruction can be performed. If a list
    is specified in the 'list generation' table, the list will be generated
    if it does not exist.

    20I5

       1 list types. NR63 items, only given if 1.3 (NR63) not zero.

4.  Details for each directive. 
        Note the special directive 'DEPENDENCIES', which has the 'm' parameters
        'LIST n', and is used to ensure that the 'm' specified  lists are
        correctly related to each other.

    I4,1H.,12A1,3X,12I5

       1 directive switch value
       2 directive name
       3 no of parameters to be given definitions in COMMAND file
       4 repeat count. If -ve, common block address of value.
       5 number of excluding directives
       6 number of enabling directives

       7 LENGRP, length of groups                             |
       8 NGRP, number of groups (usually same as repeat count)|
       9 record number                                        |
      10 common block off-set. Block must be at least 4 items |
      11 list type number. Value must not be that of a        |
         permanent list.                                      |

         Items 7 - 11 define a DATA RECORD, and are omitted if the
         directive does not define a data record.
         The 4 COMMON BLOCK slots are MXX,NXX,MDXX and LXX.

         If LENGRP and NGRP are negative, the values are COMMON BLOCK 
         addresses of values, i.e., values are input by a preceeding
         Directive

Records 5. to 8. are only given if the directive defines a data record.
They define how the record should be printed by a PRINT instruction.

5.  Print format pointers

    5X,15I5

       1 title pointer 1.     Values are 0 no print
       2 title pointer 2.                1    print
       3 keyword pointer 1.
       4 keyword pointer 2.
       5 parameter pointer 1.
       6 parameter pointer 2.

6.  Title

    80A1

       Title only given if pointer set on 5.

7.  Keyword print format

    80A1

       Format only given if pointer set in 5.

8.  Parameter value print format

    80A1

       Format only given if pointer set in 5.

9.  Excluding details

    80A1

       1 switch numbers of excluding directives. Only
         given if 4.5 not zero.

10. Enabling details

    5X,15I5

       1 switch number of enabling directive
       2 swith number of enabling parameter
       3 enabling parameter value
         These triads are repeated for each enabling directive
         unless 4.6 is zero. If switch number of the enabling
         parameter is zero all parameters for that directive
         are enabling.

11. Parameter type details

    5X,15I5

       1 parameter type code.  values are 1  integer
                                          2  floating point
                                          3  character string
         Entry for every parameter expected from 4.3

12. Parameter details

    4X,.,12A1,3X,5I5,1X,A4
                     E20,10
                     I10        depending on the type defined in 11.1

       1 parameter keyword
       2 common block offfset. Start from 1. Not given if directive
         defines a data record.
       3 default flag. -1 none provided, 0 one provided.
       4 repeat count
       5 number of allowed values
       6 sequence number associated with first allowed value
       7 default value, if required

13. Allowed values

    5X,5(12A1,3X)
    5X,7I10           number specified in 12.5
    5X,3E20.10          type specified in 11.1



NGRP is the repeat count. LENGRP and NGRP can be given as negative,
when ABS(value) is the common block offset required.



#Q
#ZSOME EXAMPLES
#Q
 This section should be read in conjunction with a listing of the
 COMMAND source file. 
#YLIST 1
#PThis is an instruction with directives that define data records.
 The directive  REAL  has 7 parameters, of which 3 do not have defaults,
 which may be given once only. The directive  REAL  excludes the use of
 the directive  RECIPROCAL . The four common block parameters locating
 and defining the data record in store start at offset 1, i.e. Are the
 first four items in the common block. Similar conditions exist for the
 directive  RECIPROCAL , except that this excludes the directive
  REAL , and its common block entries are items 5 to 8 inclusive. The
 parameter  VOLUME , having a parameter repeat count of zero, cannot
 be given by the user. The directive 'dir tensor', having a directive
 repeat count of zero, cannot be given by the user. However, the
 presence of these parameters and directives in the command file
 causes locations to be reserved for the data which will be computed
 from the input data by a suitable routine.
#Q
#Y Input to DEFINE from COMMANDS.SRC
#J
LIST 1             9    1
   1   40960 CRYSTALSINPUT
   20 
   1.REAL               7    1    1    0    7    1  101    1    1 
         1    1    1    1    1    1    0    0    0    0 
REAL UNIT CELL PARAMETERS 
(10X,6(3X,12A1),2X,12A1) 
(1X,3F15.3,2X,3F15.3,F15.2) 
         2 
         2    2    2    2    2    2    2 
     A                  0   -1    1    0    0 
     B                  0   -1    1    0    0 
     C                  0   -1    1    0    0 
     ALPHA              0    0    1    0    0 90. 
     BETA               0    0    1    0    0 90. 
     GAMMA              0    0    1    0    0 90. 
     VOLUME             0    0    0    0    0 
   2.RECIPROCAL         7    1    1    0    7    1  102    5    1 
         1    1    1    1    1    1    0    0    0    0 
RECIPROCAL UNIT CELL PARAMETERS 
(7X,6(3X,12A1),12A1) 
(1X,3F15.6,2X,F12.3,2F15.3,3X,F15.6) 
         1 
         2    2    2    2    2    2    2 
     A*                 0   -1    1    0    0 
     B*                 0   -1    1    0    0 
     C*                 0   -1    1    0    0 
     ALPHA*             0    0    1    0    0 90. 
     BETA*              0    0    1    0    0 90. 
     GAMMA*             0    0    1    0    0 90. 
     RECIP VOLUME       0    0    0    0    0 
   3.DIR. TENSOR        0    0    0    0    9    2  103    9    1 
         1    1    0    0    1    1 
REAL METRIC TENSOR, INCLUDING AND EXCLUDING THE CELL PARAMETERS 
(3(6X,3F11.4/)/(6X,3F11.4)) 
   4.INV. TENSOR        0    0    0    0    9    2  104   13    1 
         1    1    0    0    1    1 
RECIPROCAL METRIC TENSOR, INCLUDING AND EXCLUDING THE CELL PARAMETERS 
(3(6X,3F12.6/)/(6X,3F12.6)) 
   5.DIR. ORTHOG.       0    0    0    0    9    2  105   17    1 
         1    1    0    0    1    1 
REAL OTHOGONALISATION MATRIX, INCLUDING AND EXCLUDING THE CELL PARAMETERS 
(3(6X,3F11.4/)/(6X,3F11.4)) 
   6.INV. ORTHOG.       0    0    0    0    9    2  106   21    1 
         1    1    0    0    1    1 
RECIPROCAL ORTHOGONALISATION MATRIX, INCLUDING AND EXCLUDING THE CELL PARAMETERS 
(3(6X,3F12.6/)/(6X,3F12.6)) 
   7.R[IJ]'S            6    0    0    0    6    1  107   25    1 
         1    1    1    1    1    1 
THE R(II)'S AND R(IJ)'S USED TO CALCULATE SIN(THETA)/LAMBDA 
(7X,6(3X,12A1)) 
(1X,6F15.6) 
         2    2    2    2    2    2 
     R[11]              0   -1    0    0    0 
     R[22]              0   -1    0    0    0 
     R[33]              0   -1    0    0    0 
     R[23]              0   -1    0    0    0 
     R[13]              0   -1    0    0    0 
     R[12]              0   -1    0    0    0 
   8.ANISO-PARAMS       0    0    0    0    6    1  108   29    1 
         1    1    0    0    1    1 
ANISOTROPIC TEMPERATURE FACTOR COEFFICIENTS 
(6X,6F15.6) 
   9.ANISO-CONV.        0    0    0    0    3    1  109   33    1 
         1    1    0    0    1    1 
CONSTANTS TO CONVERT AN ATOM FROM ISO TO ANISO 
(6X,3F15.6) 
#
#YOutput from DEFINE
#J
\LIST 1             9  DIRECTIVE(S)

 LINK  1     MIN. CORE SIZE    40960     CRYSTALSINPUT

       1. REAL               7  PARAMETER KEYWORD(S)         1   REPEAT(S)

                                  A                L =   0            1      DEF
                                  B                L =   0            1      DEF
                                  C                L =   0            1      DEF
                                  ALPHA            L =   0            1      DEF
                                  BETA             L =   0            1      DEF
                                  GAMMA            L =   0            1      DEF
                                  VOLUME           L =   0            0      DEF

          EXCLUDES :
                          1  RECIPROCAL

          DEFINES RECORD TYPE    101  FOR LIST TYPE     1     LENGRP =      7

          TITLE   FORMAT : REAL UNIT CELL PARAMETERS

          KEY PRT FORMAT : (10X,6(3X,12A1),2X,12A1)

          PRINT   FORMAT : (1X,3F15.3,2X,3F15.3,F15.2)


       2. RECIPROCAL         7  PARAMETER KEYWORD(S)         1   REPEAT(S)

                                  A*               L =   0            1      DEF
                                  B*               L =   0            1      DEF
                                  C*               L =   0            1      DEF
                                  ALPHA*           L =   0            1      DEF
                                  BETA*            L =   0            1      DEF
                                  GAMMA*           L =   0            1      DEF
                                  RECIP VOLUME     L =   0            0      DEF

          EXCLUDES :
                          1  REAL

          DEFINES RECORD TYPE    102  FOR LIST TYPE     1     LENGRP =      7

          TITLE   FORMAT : RECIPROCAL UNIT CELL PARAMETERS

          KEY PRT FORMAT : (7X,6(3X,12A1),12A1)

          PRINT   FORMAT : (1X,3F15.6,2X,F12.3,2F15.3,3X,F15.6)


       3. DIR. TENSOR        0  PARAMETER KEYWORD(S)         0   REPEAT(S)


          DEFINES RECORD TYPE    103  FOR LIST TYPE     1     LENGRP =      9

          TITLE   FORMAT : REAL METRIC TENSOR, INCLUDING AND EXCLUDING THE CELL

          PRINT   FORMAT : (3(6X,3F11.4/)/(6X,3F11.4))


       4. INV. TENSOR        0  PARAMETER KEYWORD(S)         0   REPEAT(S)


          DEFINES RECORD TYPE    104  FOR LIST TYPE     1     LENGRP =      9

          TITLE   FORMAT : RECIPROCAL METRIC TENSOR, INCLUDING AND EXCLUDING THE

          PRINT   FORMAT : (3(6X,3F12.6/)/(6X,3F12.6))


       5. DIR. ORTHOG.       0  PARAMETER KEYWORD(S)         0   REPEAT(S)


          DEFINES RECORD TYPE    105  FOR LIST TYPE     1     LENGRP =      9

          TITLE   FORMAT : REAL OTHOGONALISATION MATRIX, INCLUDING AND EXCLUDING

          PRINT   FORMAT : (3(6X,3F11.4/)/(6X,3F11.4))


       6. INV. ORTHOG.       0  PARAMETER KEYWORD(S)         0   REPEAT(S)


          DEFINES RECORD TYPE    106  FOR LIST TYPE     1     LENGRP =      9

          TITLE   FORMAT : RECIPROCAL ORTHOGONALISATION MATRIX, INCLUDING AND EX

          PRINT   FORMAT : (3(6X,3F12.6/)/(6X,3F12.6))


       7. R[IJ]'S            6  PARAMETER KEYWORD(S)         0   REPEAT(S)

                                  R[11]            L =   0            0      DEF
                                  R[22]            L =   0            0      DEF
                                  R[33]            L =   0            0      DEF
                                  R[23]            L =   0            0      DEF
                                  R[13]            L =   0            0      DEF
                                  R[12]            L =   0            0      DEF

          DEFINES RECORD TYPE    107  FOR LIST TYPE     1     LENGRP =      6

          TITLE   FORMAT : THE R(II)'S AND R(IJ)'S USED TO CALCULATE SIN(THETA)/

          KEY PRT FORMAT : (7X,6(3X,12A1))

          PRINT   FORMAT : (1X,6F15.6)


       8. ANISO-PARAMS       0  PARAMETER KEYWORD(S)         0   REPEAT(S)


          DEFINES RECORD TYPE    108  FOR LIST TYPE     1     LENGRP =      6

          TITLE   FORMAT : ANISOTROPIC TEMPERATURE FACTOR COEFFICIENTS

          PRINT   FORMAT : (6X,6F15.6)


       9. ANISO-CONV.        0  PARAMETER KEYWORD(S)         0   REPEAT(S)


          DEFINES RECORD TYPE    109  FOR LIST TYPE     1     LENGRP =      3

          TITLE   FORMAT : CONSTANTS TO CONVERT AN ATOM FROM ISO TO ANISO

          PRINT   FORMAT : (6X,3F15.6)


#Q
#YLIST 3
#PThis is an instruction with directives that define both simple
 parameters and data records. The directive  READ , with a single
 parameter keyword - NSCATTERERS - places an integer value in the common
 block item 4. The directive  SCATTERING  defines a data record with
 its 4 common block entries in locations 1 to 4, i.e. The value inserted
 by the directive  READ  is also a data record defining parameter.
 There are 12 keywords for this directive, which may be repeated
 m times, where m is the value stored at offset 4, i.e. Was input by
 the directive  READ . The directives 'real form' and 'imag form'
 are not available to the user. However, common block entries are
 set aside for data record definitions (5 to 8 and 9 to 12) used by the
 program.
#Q
#Y Input for DEFINE
#J
LIST 3             4    0 
   3   40960 CRYSTALSINPUT 
   1.READ               1    1    0    0 
         1 
    .NSCATTERERS        4   -1    1    0    0 
   2.SCATTERING        12   -4    0    0   12   -4  101    1    3 
         1    1    1    1    1    1    0    0    0    0 
THE ATOMIC SCATTERING FACTORS IN EXPONENTIAL FORMAT 
(1X,120A1/37X,24A1) 
(1X,A4,2F12.3,2X,7F12.5/31X,2F12.5) 
         3    2    2    2    2    2    2    2    2    2    2    2 
    .TYPE               0   -1    1    0    0 
    .F'                 0    0    1    0    0 0.0 
    .F''                0    0    1    0    0 0.0 
    .A(1)               0   -1    1    0    0 
    .B(1)               0   -1    1    0    0 
    .A(2)               0   -1    1    0    0 
    .B(2)               0   -1    1    0    0 
    .A(3)               0   -1    1    0    0 
    .B(3)               0   -1    1    0    0 
    .A(4)               0   -1    1    0    0 
    .B(4)               0   -1    1    0    0 
    .C                  0   -1    1    0    0 
   3.REAL FORM          0    0    0    0    1   -4  102    5    3 
         0    0    0    0    0    0    0    0    0    0 
   4.IMAG. FORM         0    0    0    0    1   -4  103    9    3 
         0    0    0    0    0    0    0    0    0    0 
#
#YOutput from DEFINE
#J
\LIST 3             4  DIRECTIVE(S)

 LINK  3     MIN. CORE SIZE    40960     CRYSTALSINPUT

       1. READ               1  PARAMETER KEYWORD(S)         1   REPEAT(S)

                                  NSCATTERERS      L =   4            1      DEF

       2. SCATTERING        12  PARAMETER KEYWORD(S)     (   4)  REPEAT(S)

                                  TYPE             L =   0            1      DEF
                                  F'               L =   0            1      DEF
                                  F''              L =   0            1      DEF
                                  A(1)             L =   0            1      DEF
                                  B(1)             L =   0            1      DEF
                                  A(2)             L =   0            1      DEF
                                  B(2)             L =   0            1      DEF
                                  A(3)             L =   0            1      DEF
                                  B(3)             L =   0            1      DEF
                                  A(4)             L =   0            1      DEF
                                  B(4)             L =   0            1      DEF
                                  C                L =   0            1      DEF

          DEFINES RECORD TYPE    101  FOR LIST TYPE     3     LENGRP =     12

          TITLE   FORMAT : THE ATOMIC SCATTERING FACTORS IN EXPONENTIAL FORMAT

          KEY PRT FORMAT : (1X,120A1/37X,24A1)

          PRINT   FORMAT : (1X,A4,2F12.3,2X,7F12.5/31X,2F12.5)


       3. REAL FORM          0  PARAMETER KEYWORD(S)         0   REPEAT(S)


          DEFINES RECORD TYPE    102  FOR LIST TYPE     3     LENGRP =      1


       4. IMAG. FORM         0  PARAMETER KEYWORD(S)         0   REPEAT(S)


          DEFINES RECORD TYPE    103  FOR LIST TYPE     3     LENGRP =      1

 

#Q
#YLIST 5  See the COMMAND file for actual values.
#PThis instruction also sets up simple parameters and data records.
 The overall parameters form a data record with its details
 stored at offsets 13 to 16. The directive  READ  loads the number
 of atoms, layers,scalefactors etc. To be given into common block
 locations 4,19,23 and 27. The directive  ATOM  always expects
 13 parameters, which may be repeated  NATOM  times, i.e. The length
 of the group is 13 and the number of times it is repeated is
 stored at offset 4. The directive  LAYERS  has only one parameter
 keyword, and it may be given once only. However the parameter
 keyword may be repeated several times, so that a single record
 with a length given at offset 19 is stored. The details for
 this record run from offset 17 to 20.


#YLIST 12  See the COMMAND file for actual values.

#PThe data for list 12 is entirely alphmeric, and is unpicked by
 the lexical scanner to form list 22. The repeat counter of 9999
 indicates that the input routines should accept all the user
 data presented and store it as a single record with its details
 starting at offset 5. The conditions for excluding and enabling
 of other directives are checked. No other checking is done on
 input. The data is stored in character form and is converted
 to an executable list 22 at some later stage. It is at that
 stage that the syntax and self-consistency of the data is checked.
#Q
#ZAPPENDIX#
#PThis is taken from the code for XRDHI, in LIST50.SRC. 
#J

C
C --            THE FORMAT OF THE INPUT FILE
C               --- ------ -- --- ----- ----
C
C    1   NEW FILE/APPEND FLAG
C            A SPACE IN COLUMN ONE OF THE FIRST CARD INDICATES A NEW
C        FILE. OTHERWISE AN EXISTING LIST 50 IS EXTENDED - IF AN
C        INSTRUCTION IS SPECIFIED IN THE INPUT FILE WHICH IS ALREADY
C        DEFINED IN THE LIST 50, THE OLD DEFINITION IS REPLACED BY THE
C        NEW ONE.
C
C            THE FIRST RECORD OF THE INPUT FOR A NEW COMMAND FILE IS
C        USED AS A TITLE FOR THAT FILE.
C
C
C
C    2   LIST CREATION INSTRUCTIONS
C            THESE GIVE THE INSTRUCTIONS USED TO CREATE CERTAIN LISTS.
C        THE INPUT FILE SHOULD CONTAIN THE FOLLOWING :-
C
C       A     1 RECORD ( FORMAT : I3 ) SPECIFING THE NUMBER OF DEFINITIO
C                                     RECORDS FOLLOWING ( = NR52 )
C
C       B     NR52 RECORDS ( FORMAT : I3,1X,19A4 ) SPECIFYING THE LIST
C                                     NUMBER AND THE INSTRUCTION WHICH
C                                     GENERATES IT.
C
C
C
C    3    \INSTRUCTION DEFINITIONS
C             THESE DEFINE THE \INSTRUCTIONS AVAILABLE.
C
C       A    1 RECORD ( FORMAT : 12A1 , 3X , 3I5 )
C            12A1 : INSTRUCTION NAME
C            I5   : NUMBER OF DIRECTIVES FOR THIS INSTRUCTION ( = NR60 )
C            I5   : NUMBER OF LISTS REQUIRED ( = NR63 )
C            I5   : NUMBER OF 'LOAD DETAIL' RECORDS ( = NR64 )
C
C       B    NR64 RECORDS ( FORMAT : I4 , I8 , 68A1 )
C            I4   : JUMP NUMBER - RETURNED BY 'KNXTOP' FOR THIS
C                   \INSTRUCTION
C            I8   : CORE SIZE REQUIRED
C            68A1 : NAME OF PROGRAM WHICH EXECUTES THIS \INSTRUCTION
C
C
C
C       C    1 RECORD ( FORMAT : 20I5 ) -- IF NR60 IS GREATER THAN ZERO
C            I5   : LIST NUMBERS TO BE USED
C
C
C
C       DIRECTIVE DEFINTIONS : - ( NR60 TIMES )
C
C       D    1 RECORD ( FORMAT : I4 , 1X , 12A1 , 3X , 12I5 )
C            I4   : DIRECTIVE SEQUENCE NUMBER - IF THIS VALUE IS NEGATIV
C                   THIS DIRECTIVE IS DEFINED BY A PREVIOUS ONE, GIVEN B
C                   THE ABSOLUTE VALUE
C            12A1 : DIRECTIVE NAME
C            I5   : NUMBER OF PARAMETERS
C            I5   : REPEAT COUNT FOR THIS DIRECTIVE - IF NEGATIVE, COUNT
C                   IS GIVEN BY COMMON BLOCK OFFSET OF ABSOLUTE VALUE
C            I5   : NUMBER OF EXCLUDED DIRECTIVES
C            I5   : NUMBER OF ENABLING DIRECTIVES
C            I5   : LENGRP            -- DATA RECORD DEFINITIONS ONLY
C                   IF NEGATIVE, AS FOR REPEAT COUNT ABOVE
C            I5   : NGRP              -- DATA RECORD DEFINITIONS ONLY
C                   IF NEGATIVE, AS FOR REPEAT COUNT ABOVE
C            I5   : RECORD NUMBER     -- DATA RECORD DEFINITIONS ONLY
C            I5   : COMMON BLOCK OFFSET  -- DATA RECORD DEFINITIONS ONLY
C                   THERE MUST BE FOUR SLOTS AVAILABLE IN THE COMMON
C                   BLOCK FOR EACH DATA RECORD TYPE
C            I5   : LIST TYPE NUMBER  -- DATA RECORD DEFINITIONS ONLY
C
C
C
C     E      FORMAT SPECIFICATION FLAGS ( FORMAT : 5X , 18I5 )
C                         -- DATA RECORD DEFINITIONS ONLY
C            I5   : TITLE PRINTER 1     0 = NO PRINT / 1 = PRINT
C            I5   : TITLE PRINTER 2     0 = NO PRINT / 1 = PRINT
C            I5   : KEY WORD PRINTER 1  0 = NO PRINT / 1 = PRINT
C            I5   : KEY WORD PRINTER 2  0 = NO PRINT / 1 = PRINT
C            I5   : VALUES PRINTER 1    0 = NO PRINT / 1 = PRINT
C            I5   : VALUES PRINTER 2    0 = NO PRINT / 1 = PRINT
C            I5   : VALUES PRINTER 1    0 = NO PRINT / 1 = PRINT
C            I5   : KEY WORD PUNCH   1  0 = NO PUNCH / 1 = PUNCH
C            I5   : KEY WORD PUNCH   2  0 = NO PUNCH / 1 = PUNCH
C            I5   : VALUES PUNCH   1    0 = NO PUNCH / 1 = PUNCH
C            I5   : VALUES PUNCH   2    0 = NO PUNCH / 1 = PUNCH
C
C
C
C     F      TITLE/FORMAT SPECIFICATIONS ( FORMAT : 20A4 )
C                        -- AS REQUIRED BY PREVIOUS RECORD
C
C
C
C     G      EXCLUDED DIRECTIVES ( FORMAT : 5X , 19I5 )
C                        -- IF REQUIRED
C            I5   : NUMBER OF EXCLUDED DIRECTIVE 1 ...
C
C
C
C     H      ENABLING DIRECTIVES ( FORMAT : 5X , 18I5 )
C                        -- IF REQUIRED
C            I5   : NUMBER OF ENABLING DIRECTIVE 1
C            I5   : NUMBER OF ENABLING PARAMETER 1 -- IF 0, WHOLE
C                   DIRECTIVE IS ENABLING
C            I5   : VALUE 1
C            ( ... AS REQUIRED )
C
C
C
C     I      PARAMETER TYPE SPECIFICATION ( FORMAT : 5X , 19I5 )
C                        -- IF THERE ARE PARAMETERS
C            I5   : TYPE OF PARAMETER 1 : -
C                                                1 INTEGER
C                                                2 FLOATING
C                                                3 CHARACTER
C                                                4 SPECIAL
C            ( ... AS REQUIRED )
C
C
C
C     PARAMETER DEFINITIONS ( AS MANY AS REQUIRED FOR EACH DIRECTIVE )
C
C
C
C     J      PARAMETER DEFINITION ( FORMAT : 5X , 12A1 , 3X , 5I5 , * )
C                                       * DEPENDS ON TYPE OF PARAMETER
C            12A1 : PARAMETER KEYWORD
C            I5   : COMMON BLOCK OFFSET -- NOT FOR DATA RECORDS
C            I5   : DEFAULT VALUE FLAG -- -1 NO DEFAULT
C                                          0 DEFAULT PROVIDED
C            I5   : REPEAT COUNT
C            I5   : NUMBER OF ALLOWED VALUES -- 0 MEANS ANY VALUE IS
C                                                 ALLOWED
C                                            -- -VE MEANS DEFINED BY
C                                               PREVIOUS DIRECTIVE
C            I5   : VALUE ASSOCIATED WITH FIRST ALLOWED VALUE
C            *    : DEFAULT VALUE ( AS REQUIRED -- DEPENDS ON TYPE )
C                                    INTEGER   I10
C                                    FLOATING  F20.10
C                                    CHARACTER 1X , A4
C
C
C
C     K     ALLOWED VALUE SPECIFICATION ( FORMAT : 5X , * )
C                                    * DEPENDS ON PARAMETER TYPE
C                                    INTEGER   7I10
C                                    FLOATING  5E15.5
C                                    CHARACTER 5 ( 13A1 , 2X )
C
C
C
C     END OF PARAMETER DEFINITION
C
C
C
C     END OF DIRECTIVE DEFINITION
C
C
C
C     END OF INSTRUCTION DEFINITION
C
C
C
C
      The data is held in chained lists, LIST 5n and LIST6n. The
      definitions follow.


C--THIS ROUTINE READS A CARD FILE CONTAINING A SPECIFICATION OF EACH
C  '\' INSTRUCTION AND ITS ASSOCIATED DIRECTIVES AND PARAMETERS, AND
C  OUTPUTS THE RESULTS IN AN INTERNAL FORMAT TO THE DISC AS A LIST 50.
C  WITHIN THIS LIST, SEVERAL TYPES OF DATA RECORD ARE USED :
C
C  IFIRST  THE NUMBER OF THE FIRST COMMAND ADDED IN THIS RUN. THIS IS 1
C          FOR A COMPLETELY NEW FILE AND THE NUMBER OF THE FIRST NEW
C          COMMAND FOR AN APPEND.
C
C  50  RECORD TYPE 50 CONTAINS THE NAMES OF THE INSTRUCTIONS, EACH ONE
C      FOLLOWING DIRECTLY AFTER THE ONE BEFORE IT. THE FORMAT IS
C      ONE CHARACTER PER WORD, AND MAY BE REPRESENTED AS :
C
C          0  THE NUMBER OF CHARACTERS IN THE COMPLETE NAME.
C      1  NAME 1, WORD 1.
C      2  NAME 1, WORD 2.
C
C -51  RECORD TYPE 51 CONTAINS A SET OF DISC POINTERS TO
C      RECORDS 60, 61, 62, 63 AND 64 FOR EACH INSTRUCTION. THE
C      FORMAT OF EACH ENTRY IS AS FOLLOWS :
C
C      0  DISC ADDRESS OF THE RECORD HEADER PRECEDING RECORD 60.
C      1  DISC ADDRESS OF THE RECORD HEADER FOR RECORD TYPE 60.
C      3  DISC ADDRESS OF THE RECORD HEADER PRECEDING RECORD 61.
C
C      THIS FORMAT IS REPEATED FOR EACH RECORD TYPE FOR A INSTRUCTION,
C      AND THEN FOR EACH INSTRUCTION. THIS RECORD IS USED TO RAPIDLY
C      ACCESS DATA FOR A GIVEN INSTRUCTION.
C
C  52  THIS RECORD IS PRESENT ONCE IN THE LIST, AND CONTAINS THE
C      NECESSARY INSTRUCTIONS TO GENERATE LISTS INTERNALLY. THESE
C      INSTRUCTIONS CONTAIN THEIR '\' DELIMITERS, AND STORED IN
C      THE FOLLOWING FORMAT :
C
C      0  THE LIST TYPE NUMBER TO BE GENERATED.
C      1  THE FIRST WORD OF THE COMMAND  -  FORMAT 19A4.
C      2  THE SECOND WORD OF THE COMMAND.
C
C  60  EACH TYPE 60 RECORD CONTAINS THE NAMES OF THE DIRECTIVES
C      THAT ARE AVAILABLE WITH ONE '\' INSTRUCTION, IN THE SAME FORMAT
C      AS A TYPE 50 RECORD. EACH INSTRUCTION CAN HAVE A TYPE 60 RECORD.
C
C  61  EACH TYPE 61 RECORD CONTAINS THE DETAILS FOR THE DIRECTIVES
C      ASSOCIATED WITH ONE '\' INSTRUCTION. THE DETAILS IN A TYPE 61
C      RECORD ARE USED TO ACCESS THE PARAMETER DETAILS WHICH ARE
C      STORED IN A TYPE 62 RECORD. THE DATA IN TYPE 61 RECORDS IS
C      ARRANGED SERIALLY, AND THE ENTRY FOR EACH DIRECTIVE IS AS
C      FOLLOWS :
C
C       0  RELATIVE ADDRESS OF THE DETAILS OF THE PARAMETERS FOR THIS
C          DIRECTIVE.
C       1  NUMBER OF WORDS PER PARAMETER NAME.
C       2  NUMBER OF WORDS REQUIRED FOR THE COMPLETE PARAMETER ENTRY.
C       3  NUMBER OF PARAMETERS FOR THIS DIRECTIVE.
C       4  RELATIVE ADDRESS OF THE DIRECTIVES EXCLUDED FROM INPUT WHEN
C          THIS DIRECTIVE HAS BEEN FOUND.
C       5  NUMBER OF WORDS PER EXCLUDED DIRECTIVE.
C       6  NUMBER OF EXCLUDED DIRECTIVES.
C          THIS VALUE IS SET NEGATIVE WHEN THIS DIRECTIVE HAS BEEN
C          EXCLUDED. THE ABSOLUTE VALUE GIVES THE DIRECTIVE THAT HAS
C          EXCLUDED IT.
C       7  NUMBER OF TIMES THIS DIRECTIVE MAY APPEAR.
C          THIS VALUE IS SET FROM THE GROUP REPEAT COUNT FOR
C          DIRECTIVES THAT DEFINE DATA RECORDS.
C       8  NUMBER OF TIMES THIS DIRECTIVE HAS APPEARED.
C          DURING PROCESSING THIS LOCATION MAY BE SET AS FOLLOWS :
C
C          NEGATIVE  THIS DIRECTIVE HAS ALREADY GENERATED ERRORS.
C          OTHER     THE NUMBER OF TIMES THE DIRECTIVE HAS APPEARED.
C
C       9  THE NUMBER OF WORDS PER GROUP FOR THE RECORD DEFINED BY
C          THIS DIRECTIVE, IF THERE IS ONE.
C      10  THE NUMBER OF GROUPS FOR THE RECORD DEFINED BY THIS DIRECTIVE
C          IF THERE IS ONE.
C      11  THE RECORD TYPE DEFINED BY THIS DIRECTIVE.
C      12  THE COMMON BLOCK OFFSET FOR THE RECORD DEFINED BY THIS DIRECT
C      13  THE LIST TYPE FOR THE RECORD TO BE CREATED.
C      14  THE NUMBER OF WORDS OCCUPIED BY THE TITLE OF THIS RECORD.
C      15  THE NUMBER OF TIMES THE TITLE SHOULD BE PRINTED PER LINE.
C      16  THE RELATIVE ADDRESS IN RECORD TYPE 62 OF THE TITLE.
C      17  THE NUMBER OF WORDS OCCUPIED BY THE PRINT FORMAT FOR THE
C          PARAMETER KEYWORDS FOR THIS RECORD.
C      18  THE NUMBER OF TIMES THE PARAMETER KEYWORDS ARE TO BE PRINTED
C          PER LINE.
C      19  THE RELATIVE ADDRESS IN RECORD TYPE 62 OF THE PRINT FORMAT
C          FOR THE KEYWORDS FOR THIS RECORD.
C      20  THE NUMBER OF WORDS OCCUPIED BY THE PRINT FORMAT FOR THE
C          ELEMENTS OF THIS RECORD.
C      21  THE NUMBER OF GROUPS TO BE PRINTED PER LINE.
C      22  THE RELATIVE ADDRESS IN RECORD TYPE 62 OF THE PRINT FORMAT
C          FOR THE ELEMENTS IN THIS RECORD.
C      23  THE NUMBER OF WORDS OCCUPIED BY THE PUNCH FORMAT FOR THE
C          PARAMETER KEYWORDS FOR THIS RECORD.
C      24  THE NUMBER OF TIMES THE PARAMETER KEYWORDS ARE TO BE PUNCHED
C          PER LINE.
C      25  THE RELATIVE ADDRESS IN RECORD TYPE 62 OF THE PUNCH FORMAT
C          FOR THE KEYWORDS FOR THIS RECORD.
C      26  THE NUMBER OF WORDS OCCUPIED BY THE PUNCH FORMAT FOR THE
C          ELEMENTS OF THIS RECORD.
C      27  THE NUMBER OF GROUPS TO BE PUNCHED PER LINE.
C      28  THE RELATIVE ADDRESS IN RECORD TYPE 62 OF THE PUNCH FORMAT
C          FOR THE ELEMENTS IN THIS RECORD.
C      29  THE RELATIVE ADDRESS OF THE ENABLING DATA FOR THIS
C          DIRECTIVE.
C      30  THE NUMBER OF WORDS PER ENABLING DIRECTIVE.
C      31  THE NUMBER OF ENABLING DIRECTIVES.
C
C      THE BLOCK ABOVE IS REPEATED FOR EACH DIRECTIVE FOR THE CURRENT
C      '\' INSTRUCTION, AND ALL THE ADDRESSES ARE RELATIVE TO THE START
C      OF THE DATA STORED IN RECORD TYPE 62.
C
C  62  ASSOCIATED WITH EACH TYPE 61 RECORD IS A TYPE 62 RECORD, WHICH
C      CONTAINS DETAILS OF THE PARAMETERS FOR EACH DIRECTIVE. EACH
C      DIRECTIVE HAS A POINTER IN RECORD TYPE 61 INDICATING THE START
C      OF ITS PARAMETERS, WHICH ARE STORED SERIALLY AND
C      FORM THE FIRST PART OF THIS RECORD. THE REST OF THE
C      RECORD IS TAKEN WITH FURTHER DATA ADDRESSED VIA THE PARAMETER
C      INFORMATION. THE FORMAT OF AN ENTRY FOR A PARAMETER STARTS
C      WITH THE PARAMETER NAME AS FOLLOWS :
C
C      0  NAME 1, WORD 1.
C      1  NAME 1, WORD 2.
C
C      AFTER THE NAME, THE REST OF THE PARAMETER INFORMATION IS STORED,
C      ATTHE OFFSET GIVEN IN WORD 2 ABOVE, RELATIVE TO THE START OF THE
C      CURRENT PARAMETER. THE NUMBER OF WORDS OF ADDITIONAL DATA
C      IS GIVEN BY WORD 2 MINUS WORD 1 ABOVE.
C      THE FORMAT OF THE REST OF THE DATA FOR EACH PARAMETER IS :
C
C       0  PARAMETER TYPE ON INPUT :
C
C          +1  FIXED POINT NUMBER.
C          +2  FLOATING POINT NUMBER.
C          +3  CHARACTER STRING.
C          +4  STRING TO BE INTERPRETED BY THE CALLING ROUTINE.
C
C       1  RELATIVE ADDRESS OF THE PERMITTED VALUES FOR THIS PARAMETER
C          ON INPUT.
C       2  NUMBER OF WORDS PER PERMISSABLE VALUE.
C       3  NUMBER OF PERMISSABLE VALUES.
C       4  COMMON BLOCK OFFSET FOR THIS PARAMETER.
C       5  TYPE OF ARGUMENT TO BE STORED IN THE COMMON BLOCK. IF THE
C          NUMBER OF PERMISSABLE VALUES IS ZERO, WORD 5 IS SET EQUAL
C          TO WORD 0. IF PERMISSABLE VALUES ARE ALLOWED, WORD 5 IS SET T
C          1, INDICATING AN INTEGER WHICH CAN GIVE THE POSITION OF THE
C          FOUND PERMISSABLE VALUE.
C          NUMBER OF PERMISSABLE VALUES IS ZERO, WORD 5 MUST EQUAL WORD
C          0. IF THE NUMBER OF PERMISSABLE VALUES IS NOT ZERO, THE
C          VALUE FOUND MAY BE STORED (WORD 0 EQUALS WORD 5), OR
C          ANOTHER TYPE OF ARGUMENT MAY BE STORED. THE MOST COMMON
C          EXAMPLE OF THIS IS TO STORE AN INTEGER TO INDICATE THE
C          POSITION OF THE PERMISSABLE VALUE FOUND ON INPUT.
C          IN THIS CASE, WORD 0 WOULD BE 3 AND WORD 5 WOULD BE 1.
C       6  VALUE TO BE ASSIGNED IF THE FIRST PERMISSABLE VALUE
C          IS FOUND. THIS IS AN INTEGER, AND SUCCESSIVE PERMISSABLE
C          VALUES ARE INCREMENTED ACCORDINGLY FROM THIS VALUE.
C       7  DEFAULT INDICATOR :
C
C          -1  NO DEFAULT AVAILABLE.
C           0  DEFAULT VALUE STORED.
C
C       8  DEFAULT VALUE, TYPE GIVEN BY WORD 5.
C       9  NUMBER OF TIMES THIS PARAMETER MAY OCCUR.
C      10  THE NUMBER OF TIMES THIS PARAMETER HAS BEEN INPUT.
C
C      THE REST OF THE TYPE 62 RECORD IS DATA POINTED TO BY THE FIRST
C      PART OF THE RECORD.
C
C  63  THIS RECORD CONTAINS A LIST OF THE LISTS THAT THE '\' INSTRUCTION
C      REQUIRES. THE LISTS ARE STORED BY NUMBER, ONE AFTER THE OTHER.
C
C  64  THIS RECORD CONTAINS THE LOAD DETAILS, WHICH ARE SPECIFIC TO
C      EACH MACHINE. ON THE ICL 1906A, THE FORMAT IS :
C
C      0  THE INSTRUCTION NUMBER FOR THE GIVEN PROGRAM.
C      1  MINIMUM CORE SIZE REQUIRED.
C      2  WORD 1 OF THE FILE NAME TO 'CONT'.
C      3  WORD 2.
C
C--RECORD TYPE 50 IS STORED AS ABOVE, BUT AS EACH INSTRUCTION
C  REQUIRES A RECORD OF TYPE 60, 61, 62, 63 AND 64, THESE ARE STORED
C  WITH RECORD NUMBERS OF -(10000*N + M). 'N' IS THE NUMBER OF THE
C  CURRENT INSTRUCTION IN THE INPUT STREAM, AND M IS THE 60 VALUE.
C  THIS MEANS THAT ONLY RECORD 50 IS LOADED IMMEDIATELY, BUT THAT
C  POINTERS ARE SET UP TO THE REST.
C
C
