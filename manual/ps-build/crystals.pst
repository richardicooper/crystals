%!PS
/top  720 def /bottom   50 def /indent   10 def 
/linegap   10 def /leftmargin  108 def /right  543 def 
/ytitle  756 def /ybanner  264 def 
/pageno    0 def /chapno    0 def /sectno    0 def /point   10 def 
%begin postscript header                                                        
/num 10 string def                                                              
%                                                                               
/Banner                                                                         
{                                                                               
pageno 0 ne {showpage} if                                                       
/Times-Roman findfont 30 scalefont setfont                                      
/ypos ybanner def                                                               
/wid banner stringwidth pop def                                                 
/w right wid sub def                                                            
w ypos moveto                                                                   
banner show                                                                     
/Times-Roman findfont point scalefont setfont                                   
}                                                                               
def                                                                             
%                                                                               
/Newpage                                                                        
{                                                                               
pageno 0 ne {showpage} if                                                       
/Times-Roman findfont 10 scalefont setfont                                      
/ypos ytitle def                                                                
leftmargin ypos moveto                                                          
title show                                                                      
/Times-Roman findfont point scalefont setfont                                   
pageno -1 gt {                                                                  
/pageno pageno 1 add def                                                        
right ypos moveto                                                               
pageno num cvs show }                                                           
if                                                                              
pageno -1 eq                                                                    
{                                                                               
right ypos moveto                                                               
(i) show                                                                        
}                                                                               
if                                                                              
pageno -2 eq                                                                    
{                                                                               
right ypos moveto                                                               
(ii) show                                                                       
}                                                                               
if                                                                              
pageno -3 eq                                                                    
{                                                                               
right ypos moveto                                                               
(iii) show                                                                      
}                                                                               
if                                                                              
pageno -4 eq                                                                    
{                                                                               
right ypos moveto                                                               
(iv) show                                                                       
}                                                                               
if                                                                              
pageno -5 eq                                                                    
{                                                                               
right ypos moveto                                                               
(v) show                                                                        
}                                                                               
if                                                                              
pageno -6 eq                                                                    
{                                                                               
right ypos moveto                                                               
(vi) show                                                                       
}                                                                               
if                                                                              
pageno -7 eq                                                                    
{                                                                               
right ypos moveto                                                               
(vii) show                                                                      
}                                                                               
if                                                                              
pageno -8 eq                                                                    
{                                                                               
right ypos moveto                                                               
(viii) show                                                                     
}                                                                               
if                                                                              
pageno -9 eq                                                                    
{                                                                               
right ypos moveto                                                               
(ix) show                                                                       
}                                                                               
if                                                                              
pageno -10 eq                                                                   
{                                                                               
right ypos moveto                                                               
(x) show                                                                        
}                                                                               
if                                                                              
pageno 0 lt                                                                     
{                                                                               
/pageno pageno 1 sub def                                                        
}                                                                               
if                                                                              
/ypos top def                                                                   
}                                                                               
def                                                                             
                                                                                
/Chapter                                                                        
{                                                                               
ypos top ne                                                                     
{ Newpage } if                                                                  
/chap (Chapter ) def                                                            
/Times-Bold findfont 14 scalefont setfont                                       
/chapno chapno 1 add def                                                        
/wid chap stringwidth pop def                                                   
/n chapno num cvs def                                                           
/wnum n stringwidth pop def                                                     
/wid wid wnum add def                                                           
/w right leftmargin sub wid sub 2 div leftmargin add def                        
w ypos moveto                                                                   
chap show                                                                       
n show                                                                          
%draw line                                                                      
/x currentpoint pop def                                                         
/ypos ypos 5 sub def                                                            
newpath                                                                         
x ypos moveto                                                                   
w ypos lineto                                                                   
0 setgray                                                                       
stroke                                                                          
/sectno 0 def                                                                   
/ypos ypos linegap sub  def                                                     
/Times-Roman findfont point scalefont setfont                                   
%add other text if required                                                     
ichap 1 eq                                                                      
{ /wid chaptext stringwidth pop def                                             
/w right leftmargin sub wid sub 2 div leftmargin add def                        
w ypos moveto                                                                   
chaptext show                                                                   
/ypos ypos linegap sub linegap sub def                                          
/ichap 0 def                                                                    
}                                                                               
if                                                                              
}                                                                               
def                                                                             
                                                                                
                                                                                
/Write                                                                          
                                                                                
{ /Times-Roman findfont point scalefont setfont                                 
/linewidth right left sub def                                                   
/wid textstring stringwidth pop def                                             
/ckern linewidth wid sub def                                                    
last 1 eq                                                                       
{ /ckern 0 def } if                                                             
ckern 0 ne                                                                      
{ /ckern ckern numspace div def } if                                            
left ypos moveto %set starting position of text                                 
ckern 0 8#040 textstring widthshow                                              
%adds ckern to each space ( 8#040 )                                             
%wstring show                                                                   
/ypos ypos linegap sub def % move down the page                                 
} def                                                                           
                                                                                
/WriteCalc                                                                      
                                                                                
{ /Times-Roman findfont point scalefont setfont                                 
left ypos moveto                                                                
/linewidth right left sub def                                                   
/wid textstring stringwidth pop def                                             
/ckern linewidth wid sub def                                                    
last 1 eq                                                                       
{ /ckern 0 def } if                                                             
ckern 0 ne                                                                      
{ /ckern ckern numspace div def } if                                            
} def                                                                           
                                                                                
/WritePart                                                                      
{                                                                               
ckern 0 8#040 textstring widthshow                                              
%adds ckern to each space ( 8#040 )                                             
%wstring show                                                                   
} def                                                                           
                                                                                
/WriteBold                                                                      
{                                                                               
/Times-Bold findfont point scalefont setfont                                    
ckern 0 8#040 textstring widthshow                                              
/Times-Roman findfont point scalefont setfont                                   
} def                                                                           
                                                                                
/WriteItalic                                                                    
{                                                                               
/Times-Italic findfont point scalefont setfont                                  
ckern 0 8#040 textstring widthshow                                              
/Times-Roman findfont point scalefont setfont                                   
} def                                                                           
                                                                                
/Literal                                                                        
{                                                                               
/Courier-BoldOblique findfont litpoint scalefont setfont                        
left ypos moveto                                                                
litstring show                                                                  
/ypos ypos litgap sub def                                                       
/Times-Roman findfont point scalefont setfont                                   
}                                                                               
def                                                                             
                                                                                
                                                                                
/Blank                                                                          
{                                                                               
ypos top ne                                                                     
{ /ypos ypos linegap sub def } if                                               
} def                                                                           
                                                                                
/LitBlank                                                                       
{                                                                               
ypos top ne                                                                     
{ /ypos ypos litgap sub def } if                                                
} def                                                                           
                                                                                
/Instruction                                                                    
{                                                                               
%ind is the indent required specified previously                                
/Times-Bold findfont point scalefont setfont                                    
left ypos moveto                                                                
instr show                                                                      
/ypos ypos linegap sub def                                                      
/left left indent add def                                                       
%indenting for text following                                                   
/Times-Roman findfont point scalefont setfont                                   
/ypos ypos linegap def                                                          
}                                                                               
def                                                                             
                                                                                
/Section                                                                        
                                                                                
{ /left leftmargin def                                                          
%bold and underlined followed by text secttext                                  
/Times-Bold findfont point scalefont setfont                                    
/sectno sectno 1 add def                                                        
left ypos moveto                                                                
/n chapno num cvs def                                                           
n show                                                                          
(.) show                                                                        
/n sectno num cvs def                                                           
n show                                                                          
( ) show                                                                        
secttext show                                                                   
/x currentpoint pop def                                                         
/ypos ypos 4 sub def                                                            
newpath                                                                         
0 setgray                                                                       
x ypos moveto                                                                   
left ypos lineto                                                                
stroke                                                                          
/Times-Roman findfont point scalefont setfont                                   
/ypos ypos linegap sub def                                                      
}                                                                               
def                                                                             
                                                                                
/List                                                                           
{                                                                               
/Times-Bold findfont point scalefont setfont                                    
/listno listno 1 add def                                                        
/n listno num cvs def                                                           
left ypos moveto                                                                
n show                                                                          
(\)) show                                                                       
/Times-Roman findfont point scalefont setfont                                   
left indent add ypos moveto                                                     
liststring show                                                                 
/ypos ypos linegap sub def                                                      
}                                                                               
def                                                                             
                                                                                
/Docontents                                                                     
{                                                                               
/pageno -1 def                                                                  
Newpage                                                                         
/ctext (Table of Contents) def                                                  
/Times-Bold findfont 14 scalefont setfont                                       
/wid ctext stringwidth pop def                                                  
/w right leftmargin sub wid sub 2 div leftmargin add def                        
w ypos moveto                                                                   
ctext show                                                                      
/x currentpoint pop def                                                         
/ypos ypos 5 sub def                                                            
newpath                                                                         
x ypos moveto                                                                   
w ypos lineto                                                                   
0 setgray                                                                       
stroke                                                                          
/ypos ypos linegap sub def                                                      
/Times-Roman findfont point scalefont setfont                                   
}                                                                               
def                                                                             
                                                                                
/Indexchapter                                                                   
{                                                                               
/ypos ypos linegap sub def                                                      
ypos bottom lt                                                                  
{ Newpage } if                                                                  
/left leftmargin indent add def                                                 
left ypos moveto                                                                
(Chapter ) show                                                                 
/n chapno num cvs def                                                           
n show                                                                          
( : ) show                                                                      
Indextext show                                                                  
right indent sub ypos moveto                                                    
/n Indexpage num cvs def                                                        
n show                                                                          
}                                                                               
def                                                                             
                                                                                
/Indexsection                                                                   
{                                                                               
/ypos ypos linegap sub def                                                      
ypos bottom lt                                                                  
{ Newpage } if                                                                  
/left leftmargin indent add indent add def                                      
left ypos moveto                                                                
Indextext show                                                                  
right indent sub ypos moveto                                                    
/n Indexpage num cvs def                                                        
n show                                                                          
}                                                                               
def                                                                             
                                                                                
/Endcontents                                                                    
{                                                                               
ypos top ne { Newpage } if                                                      
}                                                                               
def                                                                             
                                                                                
/Doindex                                                                        
{                                                                               
ypos top ne {Newpage} if                                                        
/itext (Index) def                                                              
%djw /Times-Bold findfont 14 scalefont setfont                                  
/Times-Bold findfont 12 scalefont setfont                                       
/wid itext stringwidth pop def                                                  
/w right leftmargin sub wid sub 2 div leftmargin add def                        
w ypos moveto                                                                   
itext show                                                                      
/x currentpoint pop def                                                         
/ypos ypos 5 sub def                                                            
newpath                                                                         
x ypos moveto                                                                   
w ypos lineto                                                                   
0 setgray                                                                       
stroke                                                                          
/ypos ypos linegap sub def                                                      
%djw /Times-Roman findfont 10 scalefont setfont                                 
/Times-Roman findfont 8 scalefont setfont                                       
/oldtext ( ) def                                                                
/indexline 15 def                                                               
/indexflag 0 def                                                                
/column2 right leftmargin sub 2 div leftmargin add def                          
/yindtop ypos def                                                               
}                                                                               
def                                                                             
                                                                                
/Index                                                                          
{                                                                               
Indextext oldtext eq                                                            
  {                                                                             
  (,) show                                                                      
   /n Indexpage num cvs def                                                     
   n show                                                                       
  }                                                                             
if                                                                              
Indextext oldtext ne                                                            
  {                                                                             
%djw  /ypos ypos indexline sub def                                              
  /ypos ypos linegap sub def                                                    
  ypos bottom lt                                                                
    {                                                                           
    indexflag 0 eq                                                              
      {                                                                         
      /indexflag 2 def                                                          
      /ypos yindtop indexline sub def                                           
      }                                                                         
    if                                                                          
    indexflag 1 eq                                                              
      {                                                                         
      Newpage                                                                   
      /yindtop ypos def                                                         
      /indexflag 0 def                                                          
%djw      /Times-Roman findfont 10 scalefont setfont                            
      /Times-Roman findfont 8 scalefont setfont                                 
      }                                                                         
    if                                                                          
    indexflag 2 eq                                                              
      {                                                                         
      /indexflag 1 def                                                          
      }                                                                         
    if                                                                          
    indexflag 3 eq                                                              
      {                                                                         
      Newpage                                                                   
      /yindtop ypos def                                                         
%djw      /Times-Roman findfont 10 scalefont setfont                            
      /Times-Roman findfont 8 scalefont setfont                                 
      }                                                                         
    if                                                                          
    }                                                                           
  if                                                                            
  indexflag 0 eq                                                                
    {                                                                           
    leftmargin ypos moveto                                                      
    }                                                                           
  if                                                                            
  indexflag 1 eq                                                                
    {                                                                           
    column2 ypos moveto                                                         
    }                                                                           
  if                                                                            
  indexflag 3 eq                                                                
    {                                                                           
    leftmargin ypos moveto                                                      
    }                                                                           
  if                                                                            
  Indextext show                                                                
  (  ) show                                                                     
  /n Indexpage num cvs def                                                      
  n show                                                                        
  /oldtext Indextext def                                                        
  }                                                                             
if                                                                              
}                                                                               
def                                                                             
%end postscript header                                                          
/title (               INTRODUCTION TO THE SYSTEM) def                                                                                                                                                                                                                                                      
/banner (INTRODUCTION TO THE SYSTEM) def                                                                                                                                                                                                                                                                    
Newpage
/chaptext (Introduction To The System) def                                                                                                                                                                                                                                                                  
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
Blank
/secttext (Layout of this manual) def Section                                                                                                                                                                                                                                                               
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
This manual is organised as follows 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
1.0 Introduction 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Definitions and Conventions 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Immediate commands - tailoring the program 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
The CRYSTALS database 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Initial Data input 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Reflection data 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Atoms and Parameters 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Structure factors and least squares 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Fourier and Patterson maps 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Geometry and Results 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Graphics - CAMERON 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Twinned Data 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
The Basic Matrix Calculator 
) def
Write
Blank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
This version of the manual, has been revised to coincide with the release of version 12.00 of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   12 def
/textstring (
CRYSTALS. This revision includes further enhancements to the graphical user interface. Opportunity has
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
also been taken to revise some features of the underlying code. Brief details of the changes are in the web
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   11 def
/textstring (
document #Uhttp:\/\/www.xtl.ox.ac.uk\/fixes.html#. We have tried to mininise the impact on existing users,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
and we hope that the advantages brought about by the changes will become evident. 
) def
Write
/secttext (Status) def Section                                                                                                                                                                                                                                                                              
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
This version of CRYSTALS continues to be based on a version \(Issue 2\) written by J.R. Carruthers in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
collaboration with J.S.Rollett during 1977-78, which was a rewrite of the 1975 CRYSTALS system
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
implemented on the ICL 1900 series of computers. It contains significant contributions by Paul Betteridge,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
David Kinna, Lisa Pearce, Allen Larson, and Eric Gabe and many students and visitors to the Chemical
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
Crystallography Laboratory, Oxford. The graphical user interface \(GUI\) was written by Richard Cooper as
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
part of a Part II and D Phil project \(supported by a CCDC studentship\) in collaboration with Ludwig Macko
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
and Markus Neuburger in Basel, who were working on a parallel Macintosh interface. 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
A suitable citation is: 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Betteridge, P. W., Carruthers, J. R., Cooper, R. I., Prout, K., Watkin, D. J. \(2003\). J. Appl. Cryst. 36, 1487. 
) def
Write
Blank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
While CRYSTALS can still be executed in 'batch mode' \(ASCII file in, ASCII file out\), the major
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
demand is now for the version running under Windows on Intel processors, with some small demand for the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
LINUX version. The GUI permits the user to continually see the structure as it develops, and to interact with
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
it and the analysis through conventional windows features. The 'command line' and 'use file' modes have
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
been retained for experienced users, or users wishing to explore new ideas. The 'SCRIPTing' language has
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
been extended to enable full control and design of the user interface to be handled from ASCII files. 
) def
Write
Blank
/secttext (MAJOR CHANGES for WINDOWS) def Section                                                                                                                                                                                                                                                           
Blank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
The majority of the changes \(many thousand edits\) are concerned with the GUI, the screen and file
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
output, and the internal database. 
) def
Write
Blank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Major changes are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(1      New .DSC file) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(2      Extended LIST 5 format \(the model parameters\)) def Literal                                                                                                                                                                                                                                        
/litstring 
(3      New ADP handling) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(4      New weighting for Fsq) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(5      More items stored in LIST 30) def Literal                                                                                                                                                                                                                                                           
/litstring 
(6      Easier handling of twins) def Literal                                                                                                                                                                                                                                                               
/litstring 
(7      More robust creation of cifs) def Literal                                                                                                                                                                                                                                                           
/litstring 
(8      HTML versions of the manuals) def Literal                                                                                                                                                                                                                                                           
LitBlank
Blank
/left leftmargin def 
/instr (New .DSC File) def Instruction                                                                                                                                                                                                                                                                      
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
The internal format of some of the lists has been extended to accommodate information needed to meet
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
current publication requirements. There is some degree of compatibility between old format .DSC files
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
and the new CRYSTALS. A facility in \/EDIT attempts to do the internal reformatting. There is no
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
backwards compatibility. There is full forward compatibility at the ASCII level - the old LISTS 5 \(the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
model parameters\), 6 \(reflections\), 12 \(constraints\) and 16 \(restraints\) can be input into the new program. 
) def
Write
Blank
Blank
/left leftmargin def 
Newpage
/instr (New Temperature Factor \(ADP\) handling) def Instruction                                                                                                                                                                                                                                            
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
In the original version of CRYSTALS, the value of Uiso was used to indicate whether it was a real usable
) def
/last 0 def 
WriteCalc
/textstring (In the original version of CRYSTALS, the ) def WritePart
/textstring (value ) def
WriteItalic
/textstring (of Uiso was used to indicate whether it was a real usable) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
value \(e.g. 0.055\), or a flag indicating that the atom was anisotropic \(e.g. 0.00\). 
) def
Write
/left  128 def /ipflag    1 def /numspace   17 def
/textstring (
This location in LIST 5 \(the model parameters\) has now been changed to a proper flag, whose value
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
indicates what kind of information is stored after the positional parameters. This has enabled us to have
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
more complex models for the electron distribution. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(original keys:) def Literal                                                                                                                                                                                                                                                                                
Blank
/litstring 
(      type serial occ u[iso] x y z u[11] u[22] u[33] u[23] u[13] u[12] spare) def Literal                                                                                                                                                                                                                  
Blank
/litstring 
(revised keys) def Literal                                                                                                                                                                                                                                                                                  
Blank
/litstring 
(      type serial occ FLAG x y z u[11]  u[22] u[33] u[23] u[13] u[12] spare) def Literal                                                                                                                                                                                                                   
/litstring 
(                                 U[ISO]                               spare) def Literal                                                                                                                                                                                                                   
/litstring 
(                                 U[ISO] SIZE                          spare) def Literal                                                                                                                                                                                                                   
/litstring 
(                                 U[ISO] SIZE  DECLINAT AZIMUTH        spare) def Literal                                                                                                                                                                                                                   
Blank
LitBlank
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
The value of 'FLAG' is used on input of atoms to indicate what kind of patameters will follow, and is
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
used during calculations for the interpretation of the parameters. 
) def
Write
/left leftmargin indent add def 
/instr (FLAG interpretation) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The following table shows the interpretation of the FLAG parameter. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Blank
/litstring 
(FLAG  meaning    parameters) def Literal                                                                                                                                                                                                                                                                   
/litstring 
('old' types of atoms:) def Literal                                                                                                                                                                                                                                                                         
Blank
/litstring 
( 0    Aniso ADP  u[11]  u[22] u[33] u[23] u[13] u[12]) def Literal                                                                                                                                                                                                                                         
/litstring 
( 1    Iso ADP    U[ISO]) def Literal                                                                                                                                                                                                                                                                       
Blank
/litstring 
(New 'special' shapes:) def Literal                                                                                                                                                                                                                                                                         
Blank
/litstring 
( 2    Sphere     U[ISO] SIZE) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( 3    Line       U[ISO] SIZE  DECLINAT AZIMUTH) def Literal                                                                                                                                                                                                                                                
/litstring 
( 4    Ring       U[ISO] SIZE  DECLINAT AZIMUTH) def Literal                                                                                                                                                                                                                                                
Blank
LitBlank
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The parameters have the following meaning for the new special shapes: 
) def
Write
/left leftmargin indent add def 
/instr (Special U[iso]) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
U[iso] is related to the 'thickness' of the line, annulus or shell. 
) def
Write
/left leftmargin indent add def 
/instr (Special SIZE) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
SIZE is the length of the line, or the radius of the annulus or shell. 
) def
Write
/left leftmargin indent add def 
/instr (Special DECLINAT) def Instruction                                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
DECLINAT is the declination angle between the line axis or annulus normal and th z axis of the usual
) def
/last 0 def 
WriteCalc
/textstring (DECLINAT is the declination angle between the line axis or annulus normal and th ) def WritePart
/textstring (z ) def
WriteItalic
/textstring (axis of the usual) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
CRYSTALS orthogonal coordinate system, in degrees\/100. 
) def
Write
/left leftmargin indent add def 
/instr (Special AZIMUTH) def Instruction                                                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
AZIMUTH is the azumuthal angle between the projection of the line axis or annulus normal onto the x
) def
/last 0 def 
WriteCalc
/textstring (AZIMUTH is the azumuthal angle between the projection of the line axis or annulus normal onto the ) def WritePart
/textstring (x ) def
WriteItalic
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
- y plane and the x axis of the usual CRYSTALS orthogonal coordinate system, in degrees\/100. 
) def
WriteCalc
/textstring (- ) def WritePart
/textstring (y ) def
WriteItalic
/textstring (plane and the ) def WritePart
/textstring (x ) def
WriteItalic
/textstring (axis of the usual CRYSTALS orthogonal coordinate system, in degrees\/100. ) def WritePart
/ypos ypos linegap sub def
/left  138 def /ipflag    1 def /numspace   19 def
/textstring (
If either of these angles is input with a value greater than 5.0, it is assumed that the user has
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
forgotten to divide by 100, which is thus done automatically. 
) def
Write
/left leftmargin indent add def 
/instr (Accessing 'Special shapes') def Instruction                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
The special shape parameters can be accessed just like any traditional parameters. FLAG is not a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
refinable parameter, and should only be changed in \/EDIT if corresponding changes are to be made to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
the actual parameter values. This is normally automatic if the FLAG is changed to 0 or 1. To facilitate
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the generation of special shapes from groups of atoms, the following directives are available in \/EDIT. 
) def
Write
/left leftmargin indent add def 
/instr (SPHERE newserial atomlist) def Instruction                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This creates a 'shell' shape from the specified atom list. The centre of the shell is at the centre of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
gravity, the size is the mean distance of the given atoms from the centre, and the occupancy is equal to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
the sum of the occupancies of the atoms listed. U[iso] is the mean of the U[iso] or Ueqiv of the listed
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
atoms. The atom TYPE is QS, with the given serial number. The original atoms are not deleted, though
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
they should be or their occupancy set to zero. The atom type, QS, should be changed to something
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
appropriate. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (RING newserial atomlist) def Instruction                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This creates an 'annulus' shape from the specified atom list. The centre of the ring is at the centre of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
gravity, the size is the mean distance of the given atoms from the centre, and the occupancy is equal to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
the sum of the occupancies of the atoms listed. U[iso] is the mean of the U[iso] or Ueqiv of the listed
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
atoms. The atom TYPE is QR, with the given serial number. The original atoms are not deleted, though
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
they should be or their occupancy set to zero. The atom type, QS, should be changed to something
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
appropriate. The DECLINATION and AZIMUTH are computed from the constituent atoms. 
) def
Write
/left leftmargin indent add def 
Newpage
/instr (LINE newserial atomlist) def Instruction                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This creates an 'line' shape from the specified atom list. The centre of the line is at the centre of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
gravity, the size is twice the mean distance of the given atoms from the centre, and the occupancy is
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
equal to the sum of the occupancies of the atoms listed. U[iso] is the mean of the U[iso] or Ueqiv of the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
listed atoms. The atom TYPE is QL, with the given serial number. The original atoms are not deleted,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
though they should be or their occupancy set to zero. The atom type, QS, should be changed to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
something appropriate. The DECLINATION and AZIMUTH are computed from the constituent atoms. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REFORMAT) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This command converts an old \(non-FLAG\) version of LIST 5 \(atomic parameters\) to the new format. 
) def
Write
Blank
/left  138 def /ipflag    1 def /numspace   15 def
/textstring (
Currently, no action is taken by CRYSTALS for special shapes lying on positions of special site
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
symmetry. The user must set up the appropriate constraints in LIST 12 \(section LIST12 \) \(usually
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
preventing the refinement of one or more parameters\), and set up the correct occupancy in LIST 5
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
\(atomic parameters\). 
) def
Write
Blank
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
Since the special shapes can coexist with normal atoms, it is possible to embed normal atoms in the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
special shapes to give a 'peakey' electron distribtion. The sums of the occupancies will need to be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
constrained. 
) def
Write
/left leftmargin def 
/instr (New Weighting for Fsq refinement) def Instruction                                                                                                                                                                                                                                                   
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
Scheme 14 \(Chebychev weighting\) has been made more robust to ragged distributions of delta squared.
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
The major influence is in Fsq refinement, though there is also a small \(improved\) effect on F refinement. 
) def
Write
Blank
/left leftmargin def 
/instr (New items stored in LIST 30) def Instruction                                                                                                                                                                                                                                                        
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
LIST 30 \(section LIST30 \) has been extended because of changes in the new CIF dictionary. 
) def
Write
Blank
/left leftmargin def 
/instr (Easier handling of twins) def Instruction                                                                                                                                                                                                                                                           
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
Although CRYSTALS has been able to handle twinned data since the program was first designed in the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
1970's, the input was very general, and not easily understood. Now that area detector diffractometers are
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
able to routinely handle TLS and TLQS twins, the input has been revised to handle these special sitautions
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
routinely. The old format input, for twins with up to 9 components, is still available \(see section twinning
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
\) 
) def
Write
Blank
/title (               DEFINITIONS AND CONVENTIONS) def                                                                                                                                                                                                                                                     
/banner (DEFINITIONS AND CONVENTIONS) def                                                                                                                                                                                                                                                                   
Newpage
/chaptext (Definitions And Conventions) def                                                                                                                                                                                                                                                                 
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
/secttext (Syntax of Commands) def Section                                                                                                                                                                                                                                                                  
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
Commands are given to CRYSTALS as small packages, rather like sentences. This enables the program to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
recognise when the user thinks that a piece of input is complete and then, after inserting any default values
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
and checking for errors, perform the task. 
) def
Write
Blank
/left leftmargin def 
/instr (Format of Commands) def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
All command packages follow the same general format. The command is introduced with a backslash \(or
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
alternatively, a hash symbol\) and ends with the word 'END'. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\COMMAND \([keyword=]value \) ...) def Literal                                                                                                                                                                                                                                                      
/litstring 
(      \(DIRECTIVE \([keyword=]value \) ...\)) def Literal                                                                                                                                                                                                                                                  
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
Items in round brackets '\(\)' may be absent, items in square brackets '[]' are optional. Ellipsis '...' means
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
the preceding item may be repeated. 
) def
Write
/left  128 def /ipflag    1 def /numspace   18 def
/textstring (
Actual data on a COMMAND or DIRECTIVE line is input in free format, with at least one space \(or
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
sometimes an optional comma\) terminating an item. Data items may either be preceded with the keyword
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
and its '=' sign, or if the order given in the definition is strictly followed, just by the data values.
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   11 def
/textstring (
COMMANDS, DIRECTIVES and KEYWORDS can be abbreviated to the minimum string which
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
resolves ambiguity. Both types of identification can be intermingled. 
) def
Write
/left  128 def /ipflag    1 def /numspace   14 def
/textstring (
The following examples are all identical to the program. They use the command \\DISTANCES to
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
compute all interatomic distances in the range 0.0-1.9 Angstrom, and all interatomic angles involving
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
bonds in the range 1.6-2.1 Angstrom. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\DISTANCE) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      SELECT RANGE=LIMITS) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      LIMITS DMIN=0.0 DMAX=1.9 AMIN=1.6 AMAX=2.1) def Literal                                                                                                                                                                                                                                              
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\DIS) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      SE RA=LI) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      LI 0.0 1.9 1.6 2.1) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(      EN) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\DIST) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      SEL RANGE=LIM) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      LIMI DMAX=1.9 1.6 2.1) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
Note that in the last example, the value for DMIN is omitted \(its default value turns out to be 0.0\) and the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
list of parameters starts with a DMAX: CRYSTALS knows that the next parameter is AMIN so it need not
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
be specified. 
) def
Write
Blank
/secttext (Syntax of the manual) def Section                                                                                                                                                                                                                                                                
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Those parts of the manual describing data and command input will generally be in the following format: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      1. A summary of the complete command, with all directives and) def Literal                                                                                                                                                                                                                           
/litstring 
(         keywords. Ellipsis \(...\) may be printed to represent omitted) def Literal                                                                                                                                                                                                                       
/litstring 
(         but similar parameters.) def Literal                                                                                                                                                                                                                                                              
/litstring 
(      2. An typical example. This may not demonstrate all the available) def Literal                                                                                                                                                                                                                       
/litstring 
(         options) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      3. A description of all the directives and keywords.) def Literal                                                                                                                                                                                                                                    
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For a simple example, see LIST 1, section LIST01 . 
) def
Write
/secttext (Types of Commands:) def Section                                                                                                                                                                                                                                                                  
/left leftmargin def 
/instr (Lists) def Instruction                                                                                                                                                                                                                                                                              
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
These contain related data items, grouped together so that CRYSTALS can check that the data is
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
complete. These lists are stored in the CRYSTALS database. Usually, input of a new list of a given type
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
over-writes an existing list of the same type. In general, LISTS do not 'do' anything. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
There are two types of syntax for LISTS: 
) def
Write
/left leftmargin indent add def 
/instr (Keyed LISTS) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
In these, CRYSTALS can know in advance how much and what kind of input to expect. Each element
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
of data is identified by an optional keyword. See, for example, LIST 1 \(section LIST01 \). 
) def
Write
/left leftmargin indent add def 
/instr (Lexical LISTS) def Instruction                                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
In these, CRYSTALS cannot know in advance what kind of data the user may wish to input. Each line
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
of input is processed by a lexical scanner, and parsed to determine the action needed. See, for example,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
LIST 12 \(section LIST12 \). 
) def
Write
Newpage
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
For a list of all the lists, see the Lists overview \(section LISTS \). 
) def
Write
Blank
/left leftmargin def 
/instr (Commands) def Instruction                                                                                                                                                                                                                                                                           
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
These cause CRYSTALS to 'do' something, for example, compute a Fourier map. There are two type of
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
syntax for commands, similar to those used for LISTS: 
) def
Write
/left leftmargin indent add def 
/instr (Keyed Commands) def Instruction                                                                                                                                                                                                                                                                     
/left leftmargin indent add def 
/instr (Lexical Commands) def Instruction                                                                                                                                                                                                                                                                   
/left leftmargin def 
/instr (Immediate Commands) def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
These are special commands which are acted upon immediately they are issued. They are never more than
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
one line long, and do not require an 'END'. They can be issued whenever the cursor is at the beginning of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
a line, even inside a COMMAND or LIST. They are not usually involved with the crystallographic
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
calculation, but control some aspect of the way CRYSTALS works, such as hooking in an external data
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
file, or changing the amount of output produced. 
) def
Write
Blank
/left leftmargin def 
/instr (Comments) def Instruction                                                                                                                                                                                                                                                                           
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
Any data line starting with a backslash or hash followed immediately with a space is ignored, and may
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
thus be used as a comment, or to deactivate the line without deleting it from the file. 
) def
Write
Blank
Blank
/left leftmargin def 
/instr (Continuation Lines) def Instruction                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
The directive CONTINUE indicates that the data on the current line is a continuation of the previous line. 
) def
Write
Blank
/secttext (Immediate commands) def Section                                                                                                                                                                                                                                                                  
/left leftmargin def 
/instr (\\FINISH) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This command closes down CRYSTALS neatly. 
) def
Write
/left leftmargin def 
/instr (\\ ..... COMMENTS ....) def Instruction                                                                                                                                                                                                                                                             
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
This is a comment line. Column 1 contains the \\ character and column 2 must be left blank. The
) def
/last 0 def 
WriteCalc
/textstring (This is a comment line. Column 1 contains the \\ character and column 2 ) def WritePart
/textstring (must ) def
WriteBold
/textstring (be left blank. The) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
remaining columns \(3-80\) may be used for a descriptive comment. Such a comment line may appear at
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
any point in the input. 
) def
Write
/left leftmargin def 
/instr (\\TITLE ..... A title to be printed .....) def Instruction                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
This command changes the title that appears at the start of every operation. The characters \\TITLE are
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
terminated by a space in column 7 and the remainder of the line contains the title. 
) def
Write
/left leftmargin def 
/instr (\\TYPE  'filename') def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
The file 'filename' is typed on the users terminal without its contents being interpreted by CRYSTALS.
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Thus \\ commands in this file are NOT acted on, giving the user a method of previewing a USE file. 
) def
Write
/left leftmargin def 
/instr (\\USE source) def Instruction                                                                                                                                                                                                                                                                       
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
This command controls the source of commands for CRYSTALS. If 'source' is a filename then
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
commands are read from that file. If 'source' is LAST ,the current USE file is closed and commands are
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
read from the previous level USE file. If 'source' is CONTROL , all USE files open are closed and
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
commands are read from the main control stream for the job , for example the terminal in an interactive
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
job. 
) def
Write
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
One USE file may contain other USE commands. The maximum depth of USE files allowed will be
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
installation dependent. Note that the USEd file need not be a complete list - it can be as little as only one
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
line. An indirect file should end with '\\USE LAST' , '\\USE CONTROL' , or '\\FINISH' . This command
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
is only available in some implementations. 
) def
Write
/left leftmargin def 
/instr (\\SCRIPT filename) def Instruction                                                                                                                                                                                                                                                                  
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
This command is only available in interactive mode, and passes control to the 'script' file, which tries to
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
assist the user by prompting him for data and information. A separate manual describes the writing of user
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
define scripts. 
) def
Write
/left leftmargin def 
/instr (\\SPAWN      'shell command') def Instruction                                                                                                                                                                                                                                                       
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
A 'shell command' can be issued from inside CRYSTALS with this command. \\SPAWN without a
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
command spawns a sub-process and passes control of the sub-process to the terminal. Return to
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
CRYSTALS by closing the sub-process. 
) def
Write
/left leftmargin def 
/instr ($      'shell command') def Instruction                                                                                                                                                                                                                                                             
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
A 'shell command' can be issued from inside CRYSTALS with this command. Typical examples are:
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
$dir, $notepad, $edit afile, $netscape something.html 
) def
Write
Blank
/left leftmargin def 
/instr (\\COMMANDS   command) def Instruction                                                                                                                                                                                                                                                               
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
This command, which takes other command-names as a parameter \(without the \\ \), produces a listing of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
the available parameters, keywords and defaults for those commands. The listing is derived directly from
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
the 'command file', and is thus completely up to date for the program being run. This command will not
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
operate correctly if the preceding command ended in error. Clear the error flag by performing some
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
successful operation. The facility is an aide-memoire, and not intended to replace the manual. The full
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
significance of the output is detailed in section crysdatabase on the CRYSTALS database. 
) def
Write
/left leftmargin def 
/instr (? text) def Instruction                                                                                                                                                                                                                                                                             
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
This facility allows the user to make brief inquiries from the command file on the commands, directives,
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
and parameters available at the current point in the job. If a command is not being processed, and '?' is
) def
/last 0 def 
Write
Newpage
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
entered alone, a list of the commands is displayed. If '? command' is entered, a list of the directives
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
available with that command is displayed. If '? command directive' is entered, a list of parameters for the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
given command and directive is displayed, and so on. 
) def
Write
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
If a command is currently being processed, the behaviour is similar, but no command name is allowed.
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
Then '?' alone gives a list of directives, while '? directive' gives a list of parameters, and so on. In this
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
case care should be taken: After a '?', CRYSTALS loses track of the last parameter that was input so
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
using CONTINUE will have unpredictable results. To work around this, specify the parameter explicitly
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
on the command line, for example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(  \\EDIT) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(  \\  Start entering a new atom to be added to the model:) def Literal                                                                                                                                                                                                                                     
/litstring 
(  ATOM U 1.0) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(  \\  Refresh your memory as to the rest of the syntax:) def Literal                                                                                                                                                                                                                                       
/litstring 
(  ?atom) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(  \\  Carry on entering the atom, but give the) def Literal                                                                                                                                                                                                                                                
/litstring 
(  \\ parameter name, X, explicitly.) def Literal                                                                                                                                                                                                                                                           
/litstring 
(  CONTINUE X=0.2 0.4 0.5) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(  END) def Literal                                                                                                                                                                                                                                                                                         
LitBlank
/left leftmargin def 
/instr (\\MANUAL  'name') def Instruction                                                                                                                                                                                                                                                                   
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
The 'name' parameter is the name of the volume whose index is required. The special name 'INDEX'
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
gives a list of subjects for each volume. The special name 'LISTS' gives a list of the function of each
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
LIST. 
) def
Write
/left leftmargin def 
/instr (\\HELP   'topic') def Instruction                                                                                                                                                                                                                                                                   
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
The topic 'HELP' contains a list of topics for which help is given. This is likely to be very site-specific. 
) def
Write
Blank
/left leftmargin def 
/instr (\\OPEN devicename filename) def Instruction                                                                                                                                                                                                                                                         
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
This command is similar to RELEASE, except that a wider range of device names may be specified, and
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
different messages are produced. An important facility available with this command is to open a named
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
HKLI file, for the reflection input commands HKLI and LIST 6, using the device name HKLI. Similarly
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
permanent files may be used in data reduction work by using the device names M32 and M33 overriding
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
the default scratch files. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      e.g.) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      \\OPEN HKLI reflection.hkl) def Literal                                                                                                                                                                                                                                                              
Blank
LitBlank
Blank
/left leftmargin def 
/instr (\\CLOSE devicename ) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Any file on specified device is closed. 
) def
Write
/left leftmargin def 
/instr (\\RELEASE  devicename filename) def Instruction                                                                                                                                                                                                                                                     
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
The file currently open on 'devicename' is closed, and a new file opened on that device if necessary. The
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
file just closed can be examined using the \\TYPE command. The filename parameter is optional. If it is
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
specified, the new file will be opened with that name. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
Useful devices currently available include PRINTER, PUNCH, LOG and MONITOR. 
) def
Write
Blank
/left leftmargin def 
/instr (\\APPEND devicename filename) def Instruction                                                                                                                                                                                                                                                       
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Output to the specified device is appended to any output already in the specified file. 
) def
Write
Blank
/left leftmargin def 
/instr (Device names) def Instruction                                                                                                                                                                                                                                                                       
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
Devices are names used inside CRYSTALS to refer to files that it has opened. Deviecs recognised by
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
CRYSTALS are: 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
DISCFILE - the database containing everything. 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
HKLI - an hkl file during input using \\LIST 6 or \\HKLI. 
) def
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
CONTROL - commands being input \(can be a file if you type \\USE filename, but is usually the command
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
input line\) 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
PRINTER - the listing file \(bfilenn.lis by default\) 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
PUNCH - the punch file \(bfilenn.pch by default\) 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
LOG - record of all commands issued \(bfile.log by default\) 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
MONITOR - obsolete, used to be text that appeared on the screen 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
SPY - obsolete, used to collect usage data \(locally!\). 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
NEWDISC - a second database, open during \\PURGE commands. 
) def
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
COMMANDS - the file commands.dsc defines the syntax and data structures of all the commands and
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
lists. 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
M32 M33 MT1 MT2 MT3 MTE - scratch files 
) def
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
SRQ - system request queue. Some high-level commands may issue other CRYSTALS commands using
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
this file. 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
FORN1, FORN2 - output of data for 'foreign' \(ie. external\) programs. 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
SCPDATA - scripts can read directly from any file opened on this device. 
) def
Write
Newpage
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
SCPQUEUE - stores commands that scripts are building up. 
) def
Write
Blank
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
Not all may be opened\/closed by the user from a command prompt. Some are only available inside the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
initialisation file CRYSTSLS.SRC \(See STORE below\). 
) def
Write
/left leftmargin def 
/instr (\\PAUSE interval) def Instruction                                                                                                                                                                                                                                                                   
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
This command causes the program to wait for 'interval' seconds before proceding. The maximum value
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
of 'interval' is 200 seconds. It might be useful in a 'USE' file. 
) def
Write
/left leftmargin def 
/instr (\\BENCH nparam nref) def Instruction                                                                                                                                                                                                                                                                
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
This simulates sfls \(structure factor least squares, i.e. a cycle of refinement, see SFLS \). to enable
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
processor speeds to be compared. No real refinement is done, and the structure is not modified. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      nparam defaults to 500) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      nref   defaults to 5000) def Literal                                                                                                                                                                                                                                                                 
LitBlank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Times for a Microvax 3800 \(circa 1995\) are printed for comparison. 
) def
Write
Blank
/left leftmargin def 
/instr (\\SET LIST   state) def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
This command allows the user to control the monitoring level of transfer of lists to and from the database
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
in conjunction with the SET WATCH command. There are four states available. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
If state is OFF, no list logging information is produced. 
) def
Write
/left  128 def /ipflag    1 def /numspace   17 def
/textstring (
If state is READ or WRITE, list logging information is only produced when lists are read or written
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
respectively. 
) def
Write
/left  128 def /ipflag    1 def /numspace   15 def
/textstring (
If state is BOTH, both reading and writing operations may be monitored. Note that the logging
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
operation may be qualified by a list type specified by SET WATCH. The initial state is WRITE, with the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
specific watch set on list 5 \(the model parameters\), so that only operations creating or modifying list 5 will
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
be monitored. 
) def
Write
/left leftmargin def 
/instr (\\SET WATCH number) def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
This command is used in conjunction with SET LIST to control monitoring of list operations. If number
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
is 0, operations on all list types may be monitored, according to the state set with SET LIST. If number is
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
a positive integer, representing a list type, only operations on that list type may be monitored. The initial
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
value for the list watch is 5, which in conjunction with the initial monitoring state means that operations
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
creating or modifying list 5 will be monitored. 
) def
Write
/left leftmargin def 
/instr (\\SET FILE type) def Instruction                                                                                                                                                                                                                                                                    
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This command is used to control the case of file names generated by CRYSTALS. Possible values are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( LOWER        Filenames are converted to all lower case.) def Literal                                                                                                                                                                                                                                      
/litstring 
( UPPER        Filenames are converted to all upper case.) def Literal                                                                                                                                                                                                                                      
/litstring 
( MIXED        Filenames are left as input or defined.) def Literal                                                                                                                                                                                                                                         
LitBlank
/left leftmargin def 
/instr (\\SET GENERATE state) def Instruction                                                                                                                                                                                                                                                               
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
This command is used to control the generation of output file names and pseudo-generation numbers on
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
non-VMS systems. By default, CRYSTALS modifies the root of filenames for files which should not be
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
overwritten \(normally .LIS, .MON, .LOG\). 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
OFF suppresses automatic name generation. 
) def
Write
/left leftmargin def 
/instr (\\SET EXPORT state) def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
If 'state' is 'on' then LISTS 5 \(atoms\), 12 \(constraints\) and 16 \(restraints\) are copied to the PUNCH file
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
when CRYSTALS closes down. These can be archived for safety, or exported to another computer. 
) def
Write
/left leftmargin def 
/instr (\\SET UEQUIV state) def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
This controls the calculation of Uequiv. Both definitions are acceptable to Acta. The arithmetic mean of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
the principle axes is often similar to the refined value of Uiso. The geometric mean is more sensitive to
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
long or short axes, and so is more useful in publications. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      ARITH = \(U1+U2+U3\)\/3) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(      GEOM  = \(U1*U2*U3\)**1\/3) def Literal                                                                                                                                                                                                                                                              
LitBlank
/left leftmargin def 
/instr (\\SET PAUSE value) def Instruction                                                                                                                                                                                                                                                                  
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
This command sets a time, in seconds, for which the program will pause at the end of each screen full of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
output. It is only effective on DOS machines, and enables the user to use the 'pause' key to hold a selected
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
screen. The maximum value of 'interval' is 200 seconds. 
) def
Write
/left leftmargin def 
/instr (\\SET LOG state) def Instruction                                                                                                                                                                                                                                                                    
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
If state = ON then all user input commands are written to a log file.# If state = OFF then subsequent
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
commands are not written to the log. Any change made to the log state applies only to the current level of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   22 def
/textstring (
USE file and any USE file called by it. Because the log file is a direct copy of the users commands, it may
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
subsequently be used \(probably after modification\) as a control file. 
) def
Write
/left leftmargin def 
/instr (\\SET MONITOR state) def Instruction                                                                                                                                                                                                                                                                
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
If 'state' = ON, then all input is reflected in the monitor file. If 'state' = OFF, monitoring. is suppressed.
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
Any change made to the monitoring state applies only to the current level of USE file and any USE file
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
called by it. 
) def
Write
/left leftmargin def 
/instr (\\SET PAGE length) def Instruction                                                                                                                                                                                                                                                                  
Newpage
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
This command is used to change the length of the assumed 'page' when displaying files on the monitor
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
channel, using the commands 'HELP', 'MANUAL', and 'TYPE'. The initial length is 20 lines. After the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
number of lines specified have been typed, the listing stops and a message indicates the program is
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
waiting. A blank line or carriage return at this point will cause the listing to continue. Any other input is
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
executed normally. If the length is set to zero, or a negative number, the feature is disabled. 
) def
Write
/left leftmargin def 
/instr (\\SET TERMINAL device) def Instruction                                                                                                                                                                                                                                                              
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This command controls the display of SCRIPT menus on some terminals. Possible device types are 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( UNKNOWN This is the default, and requires no special terminal.) def Literal                                                                                                                                                                                                                               
/litstring 
( VT52    For use on terminals with limited screen management facilities.) def Literal                                                                                                                                                                                                                      
/litstring 
( VT100   For use on advanced terminals.) def Literal                                                                                                                                                                                                                                                       
/litstring 
( VGA     For use on PC VGA terminals) def Literal                                                                                                                                                                                                                                                          
/litstring 
( WIN     For use under Win32 and X-windows.) def Literal                                                                                                                                                                                                                                                   
LitBlank
/left leftmargin def 
/instr (\\SET COMMUNICATION speed) def Instruction                                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
This command is used to indicate to the program the speed of the communication line or terminal on
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
which it is being run. This indication is used by some facilities to determine how much output to produce
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
on the monitor channel. The possible values for the speed are "SLOW" and "FAST". These keywords are
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
not associated with any particular terminal speed, and the appropriate value will depend on the user's
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
patience. The initial value is "FAST" 
) def
Write
/left leftmargin def 
/instr (\\SET TIME state) def Instruction                                                                                                                                                                                                                                                                   
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
This command is used to indicate to the program whether the timing messages usually produced at the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
end of each facility are produced. If 'state' is "OFF" the messages are not displayed. If 'state' is "ON" the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
messages are displayed. 
) def
Write
/left leftmargin def 
/instr (\\SET PRINTER state) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This command is used to control output to the 'printer' file. The state OFF suppresses printer output. 
) def
Write
/left leftmargin def 
/instr (\\SET OPENMESSAGE state) def Instruction                                                                                                                                                                                                                                                            
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This command is used to enable or disable file handling messages. OFF suppresses messages. 
) def
Write
/left leftmargin def 
/instr (\\SET MESSAGE state) def Instruction                                                                                                                                                                                                                                                                
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
This command is used to indicate to the program whether the command messages usually produced at the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
end of each facility are produced. If 'state' is "OFF" the messages are not displayed. If 'state' is "ON" the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
messages are displayed. Error messages are always displayed. 
) def
Write
/left leftmargin def 
/instr (\\SET SRQ state) def Instruction                                                                                                                                                                                                                                                                    
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
This command is used to control mirroring of CRYSTALS internal commands. The normal state OFF
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
suppresses the mirroring. 
) def
Write
Blank
Blank
/secttext (Files) def Section                                                                                                                                                                                                                                                                               
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
When CRYSTALS runs it stores all crystallographic data in a single file, by default named crfilev2.dsc.
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
This is a binary file and should not be opened with any other program. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
CRYSTALS outputs results and analysis to several places: 
) def
Write
/left leftmargin indent add indent add def
/instr (The listing file: ) def Instruction                                                                                                                                                                                                                                                                 
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
this will be called bfilenn.lis where nn is a number from 00-99, incremented each time the program
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
is run. When nn reaches 99 this file will be continuously overwritten every time CRYSTALS is run.#
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The listing file contains verbose output about all the calculations that take place. 
) def
Write
/left leftmargin indent add indent add def
/instr (The punch file: ) def Instruction                                                                                                                                                                                                                                                                   
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
called bfile.pch by default. The idea of 'punching' data is a throwback to the days of punched cards.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
This file is used to write out specific bits of data as commands that can then be read back into the
) def
/last 0 def 
WriteCalc
/textstring (This file is used to write out specific bits of data ) def WritePart
/textstring (as ) def
WriteItalic
/textstring (commands ) def
WriteItalic
/textstring (that can then be read back into the) def WritePart
/ypos ypos linegap sub def
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
program. For example, the parameters defining the crystallographic model are stored in CRYSTALS
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
as a 'List 5'. Then 'Punching List 5': 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(  \\PUNCH 5) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(  END) def Literal                                                                                                                                                                                                                                                                                         
LitBlank
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
will result in a full \\LIST 5 command being written to the file bfile.pch. You can then recover that
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
version of the model parameters by typing 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(  \\USE bfile.pch) def Literal                                                                                                                                                                                                                                                                             
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
which causes the commands written in that file to be executed by CRYSTALS. 
) def
Write
/left leftmargin indent add indent add def
/instr (The monitor file: ) def Instruction                                                                                                                                                                                                                                                                 
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
called bfilenn.mon this is obsolete. If there is any output in it, it is from a bit of the program that
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
hasn't been looked at recently. 
) def
Write
/left leftmargin indent add indent add def
/instr (The log file: ) def Instruction                                                                                                                                                                                                                                                                     
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
called bfilenn.log, this contains everything that you typed into CRYSTALS, and commands that
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
were issued on your behalf by the menu system or script processor. 
) def
Write
Blank
/secttext (Errors and Warnings) def Section                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
CRYSTALS recognises the following run time error categories, in addition to any detected by the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
operating system. 
) def
Write
/left leftmargin def 
Newpage
/instr (Warnings) def Instruction                                                                                                                                                                                                                                                                           
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
These will occur only for tasks which produce user-readable output, and do not write to the database. The
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
current task is abandoned if necessary, and the next task fetched from the input stream. 
) def
Write
/left leftmargin def 
/instr (Errors) def Instruction                                                                                                                                                                                                                                                                             
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
The error is such that the current task must be abandoned. In batch or online modes, the job will be
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
terminated as well. In interactive mode the current task is abandoned , and control is returned to the user at
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
terminal. The processing of any 'USE' file will be abandoned. 
) def
Write
/left leftmargin def 
/instr (Severe Errors) def Instruction                                                                                                                                                                                                                                                                      
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
The error detected is such that it is not possible for the job to continue. These errors are usually caused by
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
database management failures. 
) def
Write
/left leftmargin def 
/instr (Catastrophic Errors.) def Instruction                                                                                                                                                                                                                                                               
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
The job is completely terminated. This is usualy the consequence of errors in reading or writing to the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
database. 
) def
Write
/left leftmargin def 
/instr (Programming Errors) def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
The program has detected an inconsistency either in the code, or in the command file. A dump and error
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
report will be generated if possible. The error and the conditions that cause it should be reported to
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Oxford. 
) def
Write
Blank
/left leftmargin def 
/instr (Errors Detected During the Creation of a LIST) def Instruction                                                                                                                                                                                                                                      
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
During all operations that create new versions of a list, either by input or internally, errors may be found
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
that cause the new list not to be written to the database. To prevent the system using an old version of a
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
list when the creation of the latest version has failed, the relevant list type is marked as an 'error list' in the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
'list control table' \(see below\). This error flag is cleared when a new version of the list is created or by
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
user action. 
) def
Write
/left  128 def /ipflag    1 def /numspace   20 def
/textstring (
If a list which is marked as an error list is accessed, a message will be output, and the job terminated.
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
However, for the printing of most lists, the error flags are not checked. 
) def
Write
Blank
/title (               THE CRYSTALS DATABASE) def                                                                                                                                                                                                                                                           
/banner (THE CRYSTALS DATABASE) def                                                                                                                                                                                                                                                                         
Newpage
/chaptext (The Crystals Database) def                                                                                                                                                                                                                                                                       
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
/left  108 def /ipflag    0 def /numspace   23 def
/textstring (
It is quite possible to use CRYSTALS so that all the data is read from text files at the start of every job \(as
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
in SHELXL\). However, for interactive working, it is preferable to establsh a database of crystallographic
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
information which can be used whenever it is needed. This database is called the CRYSTALS 'disk' file. It
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
is usualy a permanent file on the hard disk, and usually has the extension '.DSC'. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( It is a direct-access binary file. DO NOT try to print or edit it.) def Literal                                                                                                                                                                                                                           
LitBlank
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
external user-input lists. In modern terminology, these 'lists' would be called 'objects' or 'data structures'.
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Each list groups together related information, e.g. the cell parameters, the atoms, the reflections etc. 
) def
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
While in general input of a list will overwrite a previous version, for the atomic coordinate list \(LIST 5, see
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
section LIST05 \) a new version is added to the database. In the event that a refinement goes wrong, the user
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
can usually recover an earlier version of the structure. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
In the CRYSTALS system, most of the data required to refine a crystal structure must be input to the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
computer as ASCII, translated into an internal format and stored on a random access disk file. On the disk,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
different types of data are recorded separately, in what are called LISTS. Each list holds only one type of
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
crystallographic information and is identified by a number called the 'list type number'. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
Normally, each structure uses a separate disk file, which is preserved between different jobs and updated
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
whenever a program generates some new data. This means that several different versions of a given list may
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
be produced during the course of a structure analysis. In order that each list may be uniquely identified,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
every list has associated with it a second number, called the 'list serial number'. To specify unambiguously a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
list that is stored in the database, it is necessary to know both the relevant list type number and the list serial
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
number. 
) def
Write
/left  118 def /ipflag    1 def /numspace   21 def
/textstring (
In most cases, however, the version of a given list that is required is the latest list of that type to be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
created. Accordingly, an index called the 'current list index' is maintained, which contains an entry for the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
latest version of each list. When a program requires information about the current version of a list, it
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
accesses the current list index. 
) def
Write
/left  118 def /ipflag    1 def /numspace   21 def
/textstring (
As well as an index of the current version of each list, a second index is kept, called the 'file index'. For
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
each disk file, this latter index contains the information for every list that is present in the database. This
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
index is always checked when a list is written to the database, to ensure that its list type number and list
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
serial number refer to only one list. 
) def
Write
/left  118 def /ipflag    1 def /numspace   20 def
/textstring (
For a user, the major advantage of splitting the input data into logical units in the database is that, for any
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
run, only those lists which need to be changed have to be re-input to the database. New versions of each list
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
that are generated by programs are automatically output to the database so that, provided the database file is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
not destroyed or erased, it is probable that each run will contain only control commands. For example,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
during a structure factor least squares calculation a new set of Fcalcs and a new normal matrix will be
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
generated and stored in the database ready for further calculations. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
Old versions of a list may be reused, provided that they have not been overwritten or deleted, by finding
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the relevant entry in the file index and copying it into the current list index. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The database contains two indices which control access to it. 
) def
Write
/left leftmargin def 
/instr (Current List Index) def Instruction                                                                                                                                                                                                                                                                 
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
This index contains the serial numbers of each list to be used in calculations. This index is updated
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
whenever a list is written to database. 
) def
Write
/left leftmargin def 
/instr (Disk Index) def Instruction                                                                                                                                                                                                                                                                         
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
This is an index of all the lists contained in the database. When a new list is added to the database, its
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
internal address is added to this index, and also inserted into the current disk index. It is possible to copy
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
address from this index to the current disk index, thus changing the currently active version of a list. 
) def
Write
Blank
Blank
/secttext (General List-control Directives  -  \\DISK) def Section                                                                                                                                                                                                                                          
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The list control table can be marked and used in various ways with this command. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\DISK) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( PRINT INDEX= PUNCH= LIST=) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( MARKERROR LIST= SERIAL= RELATIVE= ACTION=) def Literal                                                                                                                                                                                                                                                    
/litstring 
( RETAIN LIST= SERIAL= RELATIVE= ACTION=) def Literal                                                                                                                                                                                                                                                       
/litstring 
( DELETE LIST= SERIAL= RELATIVE= ACTION=) def Literal                                                                                                                                                                                                                                                       
/litstring 
( RESET LIST= SERIAL= RELATIVE=) def Literal                                                                                                                                                                                                                                                                
/litstring 
( USAGE LIST= SERIAL= RELATIVE= FLAG=) def Literal                                                                                                                                                                                                                                                          
/litstring 
( EXTEND RECORDS= FREE= TRIES= SIZE=) def Literal                                                                                                                                                                                                                                                           
/litstring 
( CHECK) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\DISK) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( \\  Print the current list index) def Literal                                                                                                                                                                                                                                                             
/litstring 
( PRINT INDEX=CURRENT) def Literal                                                                                                                                                                                                                                                                          
Newpage
/litstring 
( \\ Print the index containing all the lists stored) def Literal                                                                                                                                                                                                                                           
/litstring 
( \\ on the disk) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( PRINT INDEX=DISK) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( \\ Reset LIST 5 \(the model parameters\) to the one with serial number 4) def Literal                                                                                                                                                                                                                     
/litstring 
( RESET 5 4) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( \\ Reset LIST 10 \(Fourier peaks\) to the 'current serial number - 1') def Literal                                                                                                                                                                                                                        
/litstring 
( RESET 10 0 -1) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( \\ Retain LIST 5 with serial number 6 when the disk) def Literal                                                                                                                                                                                                                                          
/litstring 
( \\ is purged) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( RETAIN 5 6) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( \\ Delete current LIST 11 \(normal\/inverted least squares matrix\)) def Literal                                                                                                                                                                                                                          
/litstring 
( DELETE 11) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/instr (\\DISK) def Instruction                                                                                                                                                                                                                                                                             
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
This is the command which initiates the routines to modify the list control table. The directives
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   11 def
/textstring (
MARKERROR, DELETE, RETAIN, USAGE, and RESET all accept the parameters SERIAL and
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
RELATIVE. The parameters SERIAL and RELATIVE should not both be changed from their default
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
settings on the same directive. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
All directives are executed immediately after they have been entered. 
) def
Write
/left leftmargin indent add def 
/instr (PRINT INDEX=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive causes one of the indexes to be printed. 
) def
Write
/left leftmargin indent add indent add def
/instr (INDEX=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      CURRENT  -  default value) def Literal                                                                                                                                                                                                                                                               
/litstring 
(      DISK) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      SUMMARY) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If 'INDEX' is 'CURRENT', the current list index is printed \(i.e. the index containing the current
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
version of each list stored\). If 'INDEX' is 'DISK', the index containing information about all the lists
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
stored on the disk is printed. If 'INDEX' is 'SUMMARY', a summary of the usage of the disk file is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
printed. 
) def
Write
/left leftmargin indent add indent add def
/instr (PUNCH=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO  -  default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Writes a machine readable summary of whatever is selected by INDEX to the currently open
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
PUNCH file. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      0  -  default value) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      n) def Literal                                                                                                                                                                                                                                                                                       
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
By default \(0\) all lists are printed or punched. If you specify an alternative value for the LIST
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter, then only information about that list number is output. 
) def
Write
/left leftmargin indent add def 
/instr (MARKERROR LIST= SERIAL= RELATIVE= ACTION=) def Instruction                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This directive can either mark a specified type of list as an 'error list', or alternatively, such a mark can
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
be removed from the list control table. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST=n) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
'n' is the list type number \(there is no default value\). 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIAL=n) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
'n' is the list serial number. The default value is zero, which represents the serial number of the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
current list of this type. 
) def
Write
/left leftmargin indent add indent add def
/instr (RELATIVE=n) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
'n' is the offset applied to the serial. The default value is 0. If both SERIAL and RELATIVE are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
zero \(the defaults\) the current list of the specified type will be the one that is marked. 
) def
Write
/left leftmargin indent add indent add def
/instr (ACTION=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   22 def
/textstring (
If ACTION is NO , the entry in the list control table for the list type specified is altered so that it is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
not marked as an 'error list'. If ACTION is YES, the entry in the list control table for the list type
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
specified is altered so that it is marked as an 'error list'. If a program attempts to use such a list, an
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
error is reported, and the job terminated. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (RETAIN LIST= SERIAL= RELATIVE= ACTION=) def Instruction                                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
With this directive, certain old versions of specified lists can be retained when the disk file is PURGED
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
\(see PURGE \). 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST=n) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
'n' is the list type number \(there is no default value\). 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIAL=n) def Instruction                                                                                                                                                                                                                                                                           
Newpage
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add indent add def
/instr (RELATIVE=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add indent add def
/instr (ACTION=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If 'ACTION' is 'YES', the list with the specified type and serial number will be retained when the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
disk file is PURGED. If 'ACTION' is 'NO' , the particular list will be deleted when the disk file is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
PURGEd \(see section PURGE \). 
) def
Write
/left leftmargin indent add def 
/instr (DELETE LIST= SERIAL= RELATIVE= ACTION=) def Instruction                                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
With this directive certain lists can be deleted from the file index. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIAL=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add indent add def
/instr (RELATIVE=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add indent add def
/instr (ACTION=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If 'ACTION' is 'YES', the list with the specified serial number will be marked to be deleted from
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
the file when the file is PURGED. If ACTION is 'NO' , the specified list will not be marked as one
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
to be deleted when the disk file is PURGEd \(see section PURGE \). 
) def
Write
/left leftmargin indent add def 
/instr (RESET LIST= SERIAL= RELATIVE=) def Instruction                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive alters the entry for the list type in the current list index. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter is the list type number, for which there is no default value. 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIAL=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add indent add def
/instr (RELATIVE=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add def 
/instr (USAGE LIST= SERIAL= RELATIVE= FLAG=) def Instruction                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive alters the list write\/overwrite flag. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST=n) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
'n' is the list type number \(there is no default value\). 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIAL=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add indent add def
/instr (RELATIVE=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See markerror definition above \( MARKERROR \). 
) def
Write
/left leftmargin indent add indent add def
/instr (FLAG=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OVERWRITE) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      READY) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      UPDATE  -  default value.) def Literal                                                                                                                                                                                                                                                               
LitBlank
/left leftmargin indent add def 
/instr (EXTEND RECORDS= FREE= TRIES= SIZE=) def Instruction                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive allows the user to extend the database by a specified number of records, and to control
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the auto-extension. On modern platforms the extension of the database is automatic by default. 
) def
Write
/left leftmargin indent add indent add def
/instr (RECORDS=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
This parameter specifies a number of records to be added to the file. The default value is zero i.e. no
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
records are added. 
) def
Write
/left leftmargin indent add indent add def
/instr (FREE=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This parameter specifies a number of records that must be available for use in the file. The file will
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
be extended until there are at least 'FREE' records unused after the next free disk address. 
) def
Write
/left leftmargin indent add indent add def
/instr (TRIES=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This is the number of times the system may try adding 'SIZE' records to the disk file to achieve
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
enough space for the current operation. Usual default is 1. 
) def
Write
/left leftmargin indent add indent add def
/instr (SIZE=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This is the size, in records, that the system will increase the disk by to try to accommodate the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
current operation. The usual default is 5. If the write still fails after TRIES x SIZE records have been
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
added it produces an error. Setting SIZE to zero enables uncontrolled extension of the disk file. This
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
is the default, but if the user gets carried away doing crystallography, they may fill their disk. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (CHECK) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive checks the integrity of the disk file. It takes no parameters. 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (Errors in the DISK file.) def Instruction                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
If CRYSTALS reports errors in the disk file, run this utility to get a list of those LISTS corrupted.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
Use \\PUNCH 5, \\PUNCH 12 and \\PUNCH 16 to make ASCII copies of these important lists \(by
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
default output to the 'punch' file, bfile.pch - rename it after punching to e.g. 'savedlists.pch'\). If the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
final version of a list is corrupt, use \\DISK RESET \(see above RESET \) to point the program to an
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
earlier version and punch that instead. If the disk file becomes totally unusable, delete it, read in the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
reflections again, and then read in these 'punched' lists \(\\USE savedlists.pch\).# If only certain lists
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
are unusable, use the DELETE directive in \\DISK to mark defective LISTS for deletion, and then use
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
\\PURGE NEW to create a new disk file \(by default new.dsc\). Rename new.dsc to crfilev2.dsc to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
make CRYSTALS open it by default when it starts in that directory. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( The following lists can always safely be deleted since CRYSTALS creates) def Literal                                                                                                                                                                                                                      
/litstring 
( new ones automatically.) def Literal                                                                                                                                                                                                                                                                      
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
11 Normal matrix \(section LIST11 \). 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
20 Saved geometrical transformation matrices \(section LIST20 \). 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
22 Constraints in internal format \(section LIST22 \). 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
24 Least squares shift list \(section LIST24 \). 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
26 Restraints in internal format \(section LIST26 \). 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
33 SFLS command in internal format \(section SFLS \). 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
36 List dependency tracking \(not documented\). 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
See section LISTS for all the list definitions. 
) def
Write
Blank
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
Example 1 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(Imagine that the current versions of LIST 5 \(the model parameters\)) def Literal                                                                                                                                                                                                                          
/litstring 
(and LIST 29 \(element properties\) have beome corrupt.) def Literal                                                                                                                                                                                                                                        
/litstring 
(We will also delete any recreatable lists.) def Literal                                                                                                                                                                                                                                                    
Blank
/litstring 
(      \\DISK) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      \\  Check the index) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      CHECK) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      \\  Delete current version of atomic params) def Literal                                                                                                                                                                                                                                             
/litstring 
(      DEL 5) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      \\  Point index to the previous version) def Literal                                                                                                                                                                                                                                                 
/litstring 
(      RESET 5 0 -1) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      \\  Remove corrupt and safe-to-delete lists:) def Literal                                                                                                                                                                                                                                            
/litstring 
(      DEL 29) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DEL 10) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DEL 11) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DEL 20) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DEL 22) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DEL 24) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DEL 26) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DEL 33) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DEL 36) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\  Open a new file save.dat on the 'PUNCH device'.) def Literal                                                                                                                                                                                                                                     
/litstring 
(      \\  Release is equivalent to CLOSE followed by OPEN.) def Literal                                                                                                                                                                                                                                    
/litstring 
(      \\RELEASE PUNCH SAVE.DAT) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      \\  Output the important data lists:) def Literal                                                                                                                                                                                                                                                    
/litstring 
(      \\PUNCH 5) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\PUNCH 12) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\PUNCH 16) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\  Write a new database called rescue.dsc with only the) def Literal                                                                                                                                                                                                                                
/litstring 
(      \\  current index of lists in it:) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      \\PURGE RESCUE) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      \\  Close CRYSTALS) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(      \\FINISH) def Literal                                                                                                                                                                                                                                                                                
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
At this point it would be useful on a stand-alone computer to run a system utility \(e.g. SCANDISK
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
on a PC\) to check the integrity of the computers hard disk, since CRYSTALS rarely corrupts the disk
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
itself. 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
One would then open a command prompt in the working folder and do this: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      del crfilev2.dsc) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(      ren rescue.dsc crfilev2.dsc) def Literal                                                                                                                                                                                                                                                             
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Now restart CRYSTALS in the same folder. Recover the important saved data by typing: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\USE save.dat) def Literal                                                                                                                                                                                                                                                                          
LitBlank
Newpage
/secttext (Elimination of Old Versions of LISTS  -  \\PURGE) def Section                                                                                                                                                                                                                                    
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\PURGE FILE= INITIALSIZE= LOG= LIST=) def Literal                                                                                                                                                                                                                                                        
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/instr (\\PURGE) def Instruction                                                                                                                                                                                                                                                                            
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
This command deletes all but the current version of each list, and any lists explicitly marked to be
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
deleted, except for lists marked to be retained, and then rewrites the disk file so that the space occupied by
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
the old deleted lists is overwritten. This operation does not normally shorten the file physically \(see
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
parameter FILE below for a method of doing this\) , but frees a lot of space that can be reused. The
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   12 def
/textstring (
optional parameters 'FILE' and 'INITIALSIZE' \(available in some implementations only\), allow the user
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
to create a new file with only the current version of each list in it. This file may be smaller than the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
original disk file. 
) def
Write
/left leftmargin indent add indent add def
/instr (FILE=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OLD - default value) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      name - The root to be used form the new database - name.DSC) def Literal                                                                                                                                                                                                                             
/litstring 
(      DATE - The root name is generated by CRYSTALS from the date and) def Literal                                                                                                                                                                                                                         
/litstring 
(             time.) def Literal                                                                                                                                                                                                                                                                            
LitBlank
/left  148 def /ipflag    1 def /numspace   18 def
/textstring (
This parameter controls whether a new file is created. If the value specified is not OLD, a new file
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
will be created containing only the current versions of each list, and any which are marked to be
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
retained. The program automatically extends the file to the size required for all the lists to be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
retained. This new file has the extension .DSC, and may be used in future CRYSTALS tasks. 
) def
Write
/left leftmargin indent add indent add def
/instr (INITIALSIZE=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   22 def
/textstring (
This parameter is used to specify an initial size for a new file. If a new file is not to be created, the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
value is ignored. The default value of zero causes the new file to have the smallest size necessary to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
contain all the copied lists. 
) def
Write
/left leftmargin indent add indent add def
/instr (LOG=) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OFF - default value) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      ON) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
If the value 'ON' is given for this parameter, the types and serial numbers of all lists deleted
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
because they were old versions are listed. The types and serials of all lists not copied for other
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
reasons, e.g. deleted lists, and lists which are marked as being updated, are always listed 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST = n) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
'n' is the type of list to be purged from the database, all old versions of all other lists are preserved.
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If 'n' is 0 \(the default value\) lists of all types are purged. 
) def
Write
Blank
Blank
/secttext (LISTS in Current use) def Section                                                                                                                                                                                                                                                                
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Lists marked * cannot be directly input by the User 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
List Number Type of data 
) def
Write
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
1 Cell parameters \(section LIST01 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
2 Unit cell symmetry \(section LIST02 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
3 Atomic scattering factors \(section LIST03 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
4 Weighting parameters \(section LIST04 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
5 The model parameters \(section LIST05 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
6 Reflection data \(section LIST06 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
7 Reflection data not used for refinement \(section LIST07 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
10 Peak coordinates from Fourier \(section LIST10 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
11 Least squares matrix \(section LIST11 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
12 Refinement directives \(section LIST12 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
13 Crystal and collection data \(section LIST13 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
14 Fourier directives \(section LIST14 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
16 General Restraints \(section LIST16 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
17 Special Restraints \(section LIST17 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
20* Transformation matrices saved by \\GEOMETRY \(section LIST20 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
22* Refinement directives in internal format \(section LIST22 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
23 Structure factor control list \(section LIST23 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
24* Least squares shift list \(section LIST24 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
25 Twin component operators \(section LIST25 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
26* Constraints in internal format \(section LIST26 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
27 Diffractometer scales \(section LIST27 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
28 Reflection condition\/filter list \(section LIST28 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
29 Contents of asymmetric unit and elemental properties \(section LIST 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
30 General information \(section LIST30 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
31 Cell parameter E.S.D.'s \(section LIST31 \) 
) def
Write
Newpage
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
33* Internal - Refinement control \(last SFLS command, see SFLS \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
36* Tracking interdependencies of parameters, normal matrix, weights etc. 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
40 Bond forming\/breaking directives \(section LIST40 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
41* Bonds between atoms \(section LIST41 \) 
) def
Write
Blank
/secttext (Printed Summary of Data lists) def Section                                                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(   \\SUMMARY OF= TYPE= LEVEL=) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(   END) def Literal                                                                                                                                                                                                                                                                                        
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(   \\  Detailed list of model parameters:) def Literal                                                                                                                                                                                                                                                     
/litstring 
(   \\SUMMARY OF=LIST TYPE=5 LEVEL=HIGH) def Literal                                                                                                                                                                                                                                                        
/litstring 
(   END) def Literal                                                                                                                                                                                                                                                                                        
Blank
/litstring 
(   \\  Again, but less typing:) def Literal                                                                                                                                                                                                                                                                
/litstring 
(   \\SUM L 5 HI) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(   END) def Literal                                                                                                                                                                                                                                                                                        
Blank
/litstring 
(   \\  Summary of reflection data:) def Literal                                                                                                                                                                                                                                                            
/litstring 
(   \\SUM L 6) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(   END) def Literal                                                                                                                                                                                                                                                                                        
LitBlank
/left leftmargin def 
/instr (\\SUMMARY OF= TYPE= LEVEL=) def Instruction                                                                                                                                                                                                                                                         
/left leftmargin indent add def 
/instr ( ) def Instruction                                                                                                                                                                                                                                                                                  
/left leftmargin indent add indent add def
/instr (OF=) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter determines the extent of the data summary. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LIST) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      EVERYTHING) def Literal                                                                                                                                                                                                                                                                              
LitBlank
/left  148 def /ipflag    1 def /numspace   18 def
/textstring (
If 'LIST' is specified, a summary of a specific list whose type is given by the 'TYPE' parameter is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
produced. If 'EVERYTHING' is specified, a summary of all current lists for which summaries are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
available is produced. If 'OF = EVERYTHING' is specified, the value of 'TYPE' is ignored. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This parameter indicates the list type for which a summary is required. If a summary of this list type
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
is not available, a warning message will be printed. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (LEVEL=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LOW) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      MEDIUM) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter has three values which indicate the level of detail required in the data summary. The
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter is ignored unless the list type is 5 or 10. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( List      Level   Data printed) def Literal                                                                                                                                                                                                                                                               
/litstring 
( ----      -----   ---- -------) def Literal                                                                                                                                                                                                                                                               
/litstring 
( 5 or 10  LOW     Atom names) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( 5 or 10  MEDIUM  Atom names and positional parameters) def Literal                                                                                                                                                                                                                                        
/litstring 
( 5 or 10  HIGH    All atomic and overall parameters) def Literal                                                                                                                                                                                                                                           
LitBlank
/secttext (Element and Atom names) def Section                                                                                                                                                                                                                                                              
Blank
/left leftmargin def 
/instr (Element Names) def Instruction                                                                                                                                                                                                                                                                      
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
Elements are specified by a name, called the atom TYPE. The 'TYPE' is used to associate the refined
) def
/last 0 def 
WriteCalc
/textstring (Elements are specified by a name, called the atom ) def WritePart
/textstring (TYPE. ) def
WriteBold
/textstring (The 'TYPE' is used to associate the refined) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
atoms with atomic properties, such as form factors, radii, etc. The TYPE must start with a letter, and is not
) def
/last 0 def 
WriteCalc
/textstring (atoms with atomic properties, such as form factors, radii, etc. The TYPE ) def WritePart
/textstring (must ) def
WriteBold
/textstring (start with a letter, and is not) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
case sensitive. REMEMBER that 'blank' is used as a delimiter in CRYSTALS and so must not appear in
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
an atom TYPE. Elements in the form factor list \(LIST 3 - see section LIST03 \) and the atomic properties
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
\(LIST 29 - section LIST29 \) are associated by their TYPE with atoms in the parameter list \(LIST 5\).
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
Numeric properties of the elements are pre-prepared in the files SCATT, SCATCU, SCATMO and
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   12 def
/textstring (
PROPERTI\(.dat\) in the SCRIPT directory \(Often CRYSTALS\\SCRIPT\). The 'elements' C', C", H' and
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
H" are in these files with the properties of C and H. You can define your own element names, but may not
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
use +,- or *. 
) def
Write
Blank
/left leftmargin def 
/instr (Atom names) def Instruction                                                                                                                                                                                                                                                                         
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
Individual atoms are specified by combining the TYPE with a SERIAL number. This is an integer in the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
range 1-9999. When combined with the TYPE, it must be enclosed in parentheses \(\). 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(   e.g.   C\(2\) CL\(123\)) def Literal                                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin def 
Newpage
/instr (Symmetry equivalent atoms) def Instruction                                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
Atoms specified as above correspond exactly to those in the refinable atom list \(LIST 5\). If a symmetry
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
equivalent atom is required, up to 5 additional items are included inside the parentheses. The full
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
specification of an atom is: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       TYPE\(SERIAL,S,L,Tx,Ty,Tz\)) def Literal                                                                                                                                                                                                                                                            
LitBlank
Blank
/left leftmargin indent add def 
/instr (S ) def Instruction                                                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
is the serial number of the symmetry operator in the stored list of space group operators. If negative, it
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
indicates that the atom coordinates are first negated before being operated upon. The default is 1 
) def
Write
Blank
/left leftmargin indent add def 
/instr (L ) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
is the serial number of the non-centring lattice translation to be used. The default is 1. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Tx,Ty,Yz ) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
are whole cell translations parallel to the cell axes. The default is 0. 
) def
Write
/left  138 def /ipflag    1 def /numspace   19 def
/textstring (
If the value of an item is its default, it may be omitted altogether, though its place must be marked
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
by its associated comma. A series of trailing commas may also be omitted. For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       C\(99,-1,1,0,0,0\) - an atom related by inversion at the origin) def Literal                                                                                                                                                                                                                        
/litstring 
(                          \(assuming x,y,z is the first operator\).) def Literal                                                                                                                                                                                                                           
/litstring 
(       C\(99,-1,1,,,0\)   - same atom as above, omitting defaults.) def Literal                                                                                                                                                                                                                            
/litstring 
(       C\(99,-1\)         - same atom as above, omitting) def Literal                                                                                                                                                                                                                                      
/litstring 
(                          defaults and trailing commas.) def Literal                                                                                                                                                                                                                                       
LitBlank
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
For more detailed information, see Atomic and Structural parameters \(section atomparams \) 
) def
Write
Blank
/secttext (Foreign Program Links) def Section                                                                                                                                                                                                                                                               
/left leftmargin def 
/instr (\\FOREIGN) def Instruction                                                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
This command provides links to 'FOREIGN' programs, that is, programs which are not part of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
CRYSTALS, but which provide useful functions in providing a complete system. These programs often
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
come from other laboratories, and are only distributed with the authors permission unless they are public
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
domain. Where practical, we make no changes to the original code. We offer little or no support in
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
connection with these programs, though usually they are in frequent use in Oxford. The linking routine
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
prepares data files for the foreign program, and may initiate a subprocess to execute the rogram. 
) def
Write
/left leftmargin indent add indent add def
/instr (PROGRAM=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SNOOPI  - A plotting program using Tektronix 4010 devices.) def Literal                                                                                                                                                                                                                              
/litstring 
(      CAMERON - An interactive graohics program.) def Literal                                                                                                                                                                                                                                              
/litstring 
(      MULTAN  - Prepares files for MULTAN 84.) def Literal                                                                                                                                                                                                                                                 
/litstring 
(      SHELXS  - Prepares files for SHELXS.) def Literal                                                                                                                                                                                                                                                    
/litstring 
(      SIRxx   - Prepares files for the SIR direct methods system) def Literal                                                                                                                                                                                                                              
LitBlank
/left leftmargin indent add indent add def
/instr (MODE=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This keyword controls the mode of operation of the foreign program. It currently only applies to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SHELXS and SIR. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NORMAL      - DEFAULT, prepares a default data file with recommended) def Literal                                                                                                                                                                                                                    
/litstring 
(                    settings.) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(      DIFFICULT   - Prepares a file with non-default settings.) def Literal                                                                                                                                                                                                                                
/litstring 
(      PATTERSON   - Prepares a default Patterson calculation \(SHELXS only\).) def Literal                                                                                                                                                                                                                 
/litstring 
(      SPECIAL     - Prepares a full SHELX data file \(SHELX only\)) def Literal                                                                                                                                                                                                                            
LitBlank
/title (               INITIAL DATA INPUT) def                                                                                                                                                                                                                                                              
/banner (INITIAL DATA INPUT) def                                                                                                                                                                                                                                                                            
Newpage
/chaptext (Initial Data Input) def                                                                                                                                                                                                                                                                          
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
Blank
/secttext (Scope of the Initial Data Input section.) def Section                                                                                                                                                                                                                                            
Blank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The areas covered are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Abbreviated startup command                      QUICKSTART) def Literal                                                                                                                                                                                                                                  
/litstring 
( Input of the cell parameters                     LIST 1) def Literal                                                                                                                                                                                                                                      
/litstring 
( Input of the unit cell parameter errors          LIST 31) def Literal                                                                                                                                                                                                                                     
/litstring 
( Input of the space group symmetry information    SPACEGROUP) def Literal                                                                                                                                                                                                                                  
/litstring 
( Alternative input of the symmetry information    LIST 2) def Literal                                                                                                                                                                                                                                      
/litstring 
( Input of molecular contents                      COMPOSITION) def Literal                                                                                                                                                                                                                                 
/litstring 
( Input of the atomic scattering factors           LIST 3) def Literal                                                                                                                                                                                                                                      
/litstring 
( Input of the contents of the unit cell           LIST 29) def Literal                                                                                                                                                                                                                                     
/litstring 
( Input of the crystal and data collection details LIST 13) def Literal                                                                                                                                                                                                                                     
/litstring 
( Input of general crystallographic data           LIST 30) def Literal                                                                                                                                                                                                                                     
LitBlank
Blank
/secttext (Abbreviated startup command  -  QUICKSTART) def Section                                                                                                                                                                                                                                          
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The command QUICKSTART is provided to assist in migration from other systems to CRYSTALS. It
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
requires that data reduction \(section DATAREDUC \) has already been done or that a simple 4-circle Lp
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
correction be suitable, and that the reflection data are available in a fixed format file with one reflection per
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
line. This command expands the given data into standard CRYSTALS lists, as described elsewhere in the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
manuals. The user is free to overwrite LISTS created by QUICKSTART by entering new LISTS manually. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\QUICKSTART) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SPACEGROUP SYMBOL=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( CONTENTS FORMULA=) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( FILE NAME=) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( FORMAT EXPRESSION=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( DATA WAVELENGTH= REFLECTIONS= RATIO=) def Literal                                                                                                                                                                                                                                                         
/litstring 
( CELL  A= B= C= ALPHA= BETA= GAMMA=) def Literal                                                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\QUICKSTART) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SPACEGROUP P 21\/n) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( CONTENT C 6 H 4 N O 2 CL) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( FILE CRDIR:REFLECT.DAT) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( FORMAT \(3F3.0, 2X, 2F8.2\)) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( DATA 1.5418) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( CELL 10.2 12.56 4.1 BETA=113.7) def Literal                                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\QUICKSTART) def Instruction                                                                                                                                                                                                                                                                       
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
None of the directives may be omitted, though some parameters do have default values. CONTINUE
) def
/last 0 def 
WriteCalc
/textstring (None of the directives may be omitted, though some parameters do have default values. ) def WritePart
/textstring (CONTINUE ) def
WriteBold
/ypos ypos linegap sub def
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
directives may not be used. 
) def
WriteCalc
/textstring (directives ) def
WriteBold
/textstring (may ) def
WriteBold
/textstring (not ) def
WriteBold
/textstring (be ) def
WriteBold
/textstring (used. ) def
WriteBold
/ypos ypos linegap sub def
Blank
/left leftmargin indent add def 
/instr (SPACEGROUP SYMBOL=) def Instruction                                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive generates symmetry information from the spacegroup symbol. The syntax is exactly as
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
describe for the command SPACEGROUP, given in section SPACEGROUP . 
) def
Write
/left leftmargin indent add indent add def
/instr (SYMBOL=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
There is no default for the symbol, it should be a valid H-M space group symbol, e.g. 'P 21 21 21' or
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
'P 21\/c' or 'I -4 3 m'. Use spaces to separate each of the operators. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (CONTENTS FORMULA=) def Instruction                                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive takes the contents of the UNIT CELL \(cf LIST 29 - section LIST29 \) and generates
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
scattering factors \(LIST 3 - section LIST03 \) and elemental properties \(LIST 29 - section LIST29 \). 
) def
Write
/left leftmargin indent add indent add def
/instr (FORMULA=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
The formula for the UNIT CELL contents \(NOT ASYMMETRIC UNIT - for compatibility with
) def
/last 0 def 
WriteCalc
/textstring (The formula for the UNIT CELL contents ) def WritePart
/textstring (\(NOT ) def
WriteBold
/textstring (ASYMMETRIC ) def
WriteBold
/textstring (UNIT ) def
WriteBold
/textstring (- for compatibility with) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SIR92\) is given as a list with entries of the type 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       'element name' 'number of atoms') def Literal                                                                                                                                                                                                                                                       
Blank
/litstring 
( e.g. CONTENT FORMULA = C  24  H  36  O  8  N  4) def Literal                                                                                                                                                                                                                                              
LitBlank
/left  148 def /ipflag    1 def /numspace   18 def
/textstring (
The items in the list must be separated by at least one space. The number of atoms may be
) def
/last 0 def 
WriteCalc
/textstring (The items in the list ) def WritePart
/textstring (must ) def
WriteBold
/textstring (be separated by at least one space. The number of atoms may be) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
fractional or, if omitted, they default to 1.0. 
) def
Write
Blank
/left leftmargin indent add def 
Newpage
/instr (FILE NAME=) def Instruction                                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive associates the file containing the reflections with the program. The special name
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
'COMMANDS' causes reflection data to be read from the command stream. The reflections MUST
) def
/last 0 def 
WriteCalc
/textstring ('COMMANDS' ) def
WriteItalic
/textstring (causes reflection data to be read from the command stream. The reflections MUST) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
then be terminated with an 'h' value of -512, otherwise the end-of-file is sufficient. 
) def
Write
/left leftmargin indent add indent add def
/instr (NAME=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
The name of the file containing the reflections. The syntax of the name must conform to the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
computers operating system. See the IMMEDIATE command \\SET FILE for case sensitive systems. 
) def
WriteCalc
/textstring (computers operating system. See the ) def WritePart
/textstring (IMMEDIATE ) def
WriteBold
/textstring (command \\SET FILE for case sensitive systems. ) def WritePart
/ypos ypos linegap sub def
Blank
/left leftmargin indent add def 
/instr (FORMAT EXPRESSION=) def Instruction                                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive controls the reading of the reflection list. The reflection file must contain the following
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
items in the order given. Only one reflection is permitted per line. See \\LIST 6 for more flexible input
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
\(section LIST06 \) 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(          h k l F and optionally sigma\(F\)) def Literal                                                                                                                                                                                                                                                   
LitBlank
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
F and sigma\(F\) may be replaced by I or F-squared. 
) def
Write
/left leftmargin indent add indent add def
/instr (EXPRESSION=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
The expression is a normal FORTRAN format expression, including the open and close parentheses.
) def
/last 0 def 
WriteCalc
/textstring (The expression is a normal FORTRAN format expression, ) def WritePart
/textstring (including ) def
WriteBold
/textstring (the ) def
WriteBold
/textstring (open ) def
WriteBold
/textstring (and ) def
WriteBold
/textstring (close ) def
WriteBold
/textstring (parentheses. ) def
WriteBold
/ypos ypos linegap sub def
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
The descriptor 'nX' may be used to skip unwanted columns. The indices may be I or F format. There
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
is no default expression. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (DATA WAVELENGTH= REFLECTIONS= RATIO=) def Instruction                                                                                                                                                                                                                                               
Blank
/left leftmargin indent add indent add def
/instr (WAVELENGTH=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
The wavelength, in Angstroms, used in selecting elemental properties. The default is 0.7107
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\(Molybdenum K-alpha radiation\). 
) def
Write
/left leftmargin indent add indent add def
/instr (REFLECTIONS=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
A keyword to indicate whether the input data is F, F-squared or I. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FOBS     -  Default, indicating F values being input.) def Literal                                                                                                                                                                                                                                   
/litstring 
(      FSQUARED -  Indicating F squared values being input.) def Literal                                                                                                                                                                                                                                    
/litstring 
(      I        -  Indicating intensity values being input.) def Literal                                                                                                                                                                                                                                    
LitBlank
/left  148 def /ipflag    1 def /numspace   14 def
/textstring (
If REFLECTIONS equals I, then an Lp correction is done assuming four circle geometry. Note
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
that the reflections from modern diffractometers are unlikely to be stored as FOBS. Some old X-ray
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
data and neutron data may still be given as FOBS. 
) def
Write
/left leftmargin indent add indent add def
/instr (RATIO=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The minimum ratio of I\/sigma\(I\) to be used in selecting reflections. Default is 3.0 
) def
Write
Blank
/left leftmargin indent add def 
/instr (CELL  A= B= C= ALPHA= BETA= GAMMA=) def Instruction                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The real cell parameters. The angles default to 90.0 degrees. 
) def
Write
Blank
Blank
/secttext (Input of the cell parameters  -  LIST 1) def Section                                                                                                                                                                                                                                             
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
Either the real cell parameters or the reciprocal cell parameters may be input and the three angles be
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
given in degrees or as their cosines. A mixed form, containing both angles and cosines is not allowed. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 1) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( REAL A= B= C= ALPHA= BETA= GAMMA=) def Literal                                                                                                                                                                                                                                                            
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 1) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( REAL 14.6 14.6 23.7 GAMMA=120) def Literal                                                                                                                                                                                                                                                                
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\LIST 1) def Instruction                                                                                                                                                                                                                                                                           
Blank
/left leftmargin indent add def 
/instr (REAL A= B= C= ALPHA= BETA= GAMMA=) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive introduces the real cell parameters. If this directive is present, the directive
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
RECIPROCAL will lead to an input error, and no new LIST 1 will be generated. 
) def
Write
/left leftmargin indent add indent add def
/instr (A=, B=, C=) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameter are the real cell lengths along the A, B and C axes. There are no default values. 
) def
Write
/left leftmargin indent add indent add def
/instr (ALPHA=, BETA=, GAMMA=) def Instruction                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters give the real cell angles or their cosines. The default value is 90 degrees. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (RECIPROCAL A*= B*= C*= ALPHA*= BETA*= GAMMA*=) def Instruction                                                                                                                                                                                                                                      
Newpage
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive introduces the reciprocal cell parameters. If this directive is present, the directive REAL
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
will lead to an input error, and no new LIST 1 will be generated. 
) def
Write
/left leftmargin indent add indent add def
/instr (A*=, B*=, C*=) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters are the reciprocal cell lengths. 
) def
Write
/left leftmargin indent add indent add def
/instr (ALPHA*=, BETA*=, GAMMA*=) def Instruction                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters give the reciprocal cell angles or their cosines. The default value is 90 degrees. 
) def
Write
Blank
/secttext (Printing the cell parameters) def Section                                                                                                                                                                                                                                                        
Blank
/left leftmargin def 
/instr (\\PRINT 1) def Instruction                                                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
This command lists the cell parameters, and all the other information derived from them which is stored
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
in LIST 1. The inter-axial angles are stored in radians in LIST 1, and printed as such. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
There is no command to punch LIST 1. 
) def
Write
Blank
Blank
/secttext (Input of the unit cell parameter errors  -  LIST 31) def Section                                                                                                                                                                                                                                 
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
This list contains the variance-covariance matrix of the unit cell parameters. The input consists of a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
multiplier which is applied to all input parameters, followed by the upper triangle of the variance-covariance
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
matrix \(21 Numbers\). The units for the angles MUST be radians and those for the cell lengths are
) def
/last 0 def 
WriteCalc
/textstring (matrix \(21 Numbers\). The units for the angles ) def WritePart
/textstring (MUST ) def
WriteBold
/textstring (be radians and those for the cell lengths are) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Angstroms. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 31) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( AMULT VALUE=) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( MATRIX V\(11\)= V\(12\)= .. V\(16\)= .. V\(22\)= .. V\(26\)= .. V\(66\)=) def Literal                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 31) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( \\ the values of the input matrix are to be multiplied) def Literal                                                                                                                                                                                                                                       
/litstring 
( \\ by 0.000001) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( AMULT 0.000001) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( \\ the cell is trigonal,) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( \\ with errors of 0.002 along 'a' and 'b', and 0.004 along 'c') def Literal                                                                                                                                                                                                                               
/litstring 
( MATRIX 4 4 1 0 0 0) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( CONT     4 1 0 0 0) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( CONT      16 0 0 0) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( CONT         0 0 0) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( CONT           0 0) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( CONT             0) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\LIST 31) def Instruction                                                                                                                                                                                                                                                                          
Blank
/left leftmargin indent add def 
/instr (AMULT VALUE=) def Instruction                                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive gives the value by which all the subsequent terms are to be multiplied, and has a default
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
of 1.0. 
) def
Write
/left leftmargin indent add indent add def
/instr (VALUE=) def Instruction                                                                                                                                                                                                                                                                             
Blank
/left leftmargin indent add def 
/instr (MATRIX V\(11\)= V\(12\)= . . V\(16\)= V\(22\)= . . V\(66\)=) def Instruction                                                                                                                                                                                                                        
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is used to read in the variance-covariance matrix. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
If you only have the parameter e.s.d's, input the square of these for V\(11\), V\(22\) etc. 
) def
Write
/left leftmargin indent add indent add def
/instr (V\(11\)= V\(12\)= . . V\(16\)= V\(22\)= . .V\(66\)=) def Instruction                                                                                                                                                                                                                                
/left  138 def /ipflag    0 def /numspace   22 def
/textstring (
V\(11\) is the variance of A , V\(12\) is the covariance of A and B , V\(16\) is the covariance of A and
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
GAMMA , V\(22\) is the variance of B , and V\(66\) is the variance of GAMMA . The default values
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
for V\(11\), V\(22\) and V\(33\) correspond to axis e.s.d's of .001 A, V\(44\), V\(55\) and V\(66\) to angle
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
e.s.d's of .01 degree. 
) def
Write
Blank
/secttext (Printing the cell variance-covariance matrix) def Section                                                                                                                                                                                                                                        
Blank
/left leftmargin def 
/instr (\\PRINT 31) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This prints list 31. There is no command for punching LIST 31. 
) def
Write
Blank
Blank
/secttext (Space Group input - \\SPACEGROUP) def Section                                                                                                                                                                                                                                                    
/left  108 def /ipflag    0 def /numspace   12 def
/textstring (
The spacegroup symbol interpretation routines in CRYSTALS are derived from subroutines developed by
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
Allen C. Larson and Eric Gabe. It is distributed with their permission. Standard CRYSTALS command
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
input, error handling, data storage, and output has been added to the basic routines. In addition a more
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
flexible method of specifying the unique axis in a monoclinic spacegroup is used. The routine generates a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
LIST 2 \(symmetry information - section LIST02 \), and a LIST 14 \(Fourier and Patterson asymmetric unit
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
limits - section LIST14 \). 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\SPACEGROUP) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYMBOL EXPRESSION=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( AXIS UNIQUE=) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ Input the symbol for a cubic spacegroup) def Literal                                                                                                                                                                                                                                                   
/litstring 
( \\SPACEGROUP) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYMBOL F d 3 m) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\ Input the symbol for a common monoclinic spacegroup) def Literal                                                                                                                                                                                                                                       
/litstring 
( \\SPACEGROUP) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYMBOL P 21\/c) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\ Input the symbol for a triclinic spacegroup) def Literal                                                                                                                                                                                                                                               
/litstring 
( \\SPACEGROUP) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYMBOL P -1) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\SPACEGROUP) def Instruction                                                                                                                                                                                                                                                                       
Blank
/left leftmargin indent add def 
/instr (SYMBOL EXPRESSION=) def Instruction                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is used to specify the space group symbol. 
) def
Write
/left leftmargin indent add indent add def
/instr (EXPRESSION=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
The value of this parameter is the text making up the spacegroup symbol. At least one space
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
character should appear between each of the axis symbols in the spacegroup symbol. e.g. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Use  P 21 3 rather than P 213, P2 1 3, or P2 13) def Literal                                                                                                                                                                                                                                              
LitBlank
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
Failure to put spaces in the correct place in the symbol will lead to misinterpretation. 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
Rhombohedral cells are always assumed to be on hexagonal indexing. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (AXIS UNIQUE=) def Instruction                                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
This directive specifies the unique axis orientation for monoclinic spacegroups where the symbol
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
specified contains only one axis symbol \(short symbol\). In other cases any information specified with
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
this directive is ignored. 
) def
Write
/left leftmargin indent add indent add def
/instr (UNIQUE=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      A) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      B) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      C) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      GENERATE - the default value.) def Literal                                                                                                                                                                                                                                                           
LitBlank
/left  148 def /ipflag    1 def /numspace   19 def
/textstring (
When UNIQUE has the value A, B, or C the program uses the 'a', 'b', or 'c' axis respectively as
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
the unique axis. When UNIQUE has the value GENERATE, the program will attempt to select the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
unique axis on the basis of the cell parameters currently stored in LIST 1. If this is not possible,
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
because the angles in LIST 1 are all close too 90 degrees or there is no valid cell parameter
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
information, the program will assume that the unique axis is 'b'. 
) def
Write
Blank
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
Further examples. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 1) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( REAL 10.2 11.3 14.1 88.3 90 90) def Literal                                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( \\ Input symmetry - the program will  automatically select 'a' as the) def Literal                                                                                                                                                                                                                        
/litstring 
( \\ unique axis based on the cell parameters.) def Literal                                                                                                                                                                                                                                                 
/litstring 
( \\SPACEGROUP) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYMBOL P 21\/M) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\ Explicitly specify 'c' unique by giving the full symbol.) def Literal                                                                                                                                                                                                                                  
/litstring 
( \\SPACEGROUP) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYMBOL P 1 1 21\/M) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\ Explicitly specify 'c' unique by using the UNIQUE parameter.) def Literal                                                                                                                                                                                                                              
/litstring 
( \\SPACEGROUP) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYMBOL P 21\/M) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( AXIS UNIQUE=C) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/secttext (Input of the symmetry data  -  LIST 2) def Section                                                                                                                                                                                                                                               
/left  118 def /ipflag    1 def /numspace   12 def
/textstring (
The result of inputting a \\SPACEGROUP command \(section SPACEGROUP \) is the automatic
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
generation of a 'LIST 2' containing the explicit symmetry operators and other information that defines the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
spacegroup. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
Direct input of this list enables the user to specify explicitly the symmetry operators to be used. The
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
advantage of this is that they need not comply to any standard convention - the only check made by the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
program is to ensure that the determinant is not zero. For example, this technique may be used to enter a set
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
of symmetry operators that contains a translation of a half along an axis - normally that cell length would be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
halved instead, but it may be useful in order to work consistently with a structure that undergoes a
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
cell-doubling phase transition. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 2) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( CELL NSYMMETRIES=  LATTICE=  CENTRIC=) def Literal                                                                                                                                                                                                                                                        
/litstring 
( SYMMETRY  X=  Y=  Z=) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( SPACEGROUP LATTICE= A-AXIS= B-AXIS= C-AXIS=) def Literal                                                                                                                                                                                                                                                  
/litstring 
( CLASS NAME=) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ the space group is B2\/b) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( \\LIST 2) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( CELL NSYM= 2, LATTICE = B) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( SYM X, Y, Z) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( SYM X, Y + 1\/2,  - Z) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( SPACEGROUP B 1 1 2\/B) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( CLASS MONOCLINIC) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
The CELL directive defines the Bravais lattice type, the number of equivalent positions to be input, and
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
whether the cell is centric or acentric. The equivalent positions are defined by SYMMETRY directives,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
which contain one equivalent position each, and must follow the CELL directive. The equivalent positions
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
input should not include those related by a centre of symmetry if the lattice is defined as centric, and should
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
not include those related by non-primitive lattice translations if the correct Bravais lattice type is given.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
Positions generated by the last two operations are computed by the system. The unit matrix, defining x, y, z,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
MUST ALWAYS be input. If a centric cell is used in a setting which does not place the centre at the origin,
) def
/last 0 def 
WriteCalc
/textstring (MUST ) def
WriteBold
/textstring (ALWAYS ) def
WriteBold
/textstring (be input. If a centric cell is used in a setting which does not place the centre at the origin,) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
then ALL the operators must be given and the cell be treated as non-centric. This will of course increase the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
time for structure factor calculations. 
) def
Write
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
Rhombohedral cells can be treated in two ways. If used with rhombohedral indexing \(a=b=c,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
alpha=beta=gamma\), the lattice type is P, primitive. If used with hexagonal indexing, the lattice type is R. 
) def
Write
Blank
/left leftmargin def 
/instr (\\LIST 2) def Instruction                                                                                                                                                                                                                                                                           
Blank
/left leftmargin indent add def 
/instr (CELL NSYMMETRIES=  LATTICE=  CENTRIC=) def Instruction                                                                                                                                                                                                                                              
/left leftmargin indent add indent add def
/instr (NSYMMETRIES=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This defines the number of SYMMETRY directives that are to follow. There is no default. 
) def
Write
/left leftmargin indent add indent add def
/instr (LATTICE=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This defines the Bravais lattice type, and must take one of the following values : 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      P  -  Default value.) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      I) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      R) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      F) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      A) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      B) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      C) def Literal                                                                                                                                                                                                                                                                                       
LitBlank
/left leftmargin indent add indent add def
/instr (CENTRIC=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter defines whether the cell is centric or acentric, and must take one of the values : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  The default value.) def Literal                                                                                                                                                                                                                                                              
LitBlank
/left leftmargin indent add def 
Newpage
/instr (SYMMETRY  X=  Y=  Z=) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
This directive is repeated NSYMMETRIES times, and each separate occurrence defines one equivalent
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
position in the unit cell. The parameter keywords X , Y and Z are normally omitted on this directive,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
and the equivalent position typed up exactly as given in international tables. The expressions may
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
contain any of the following : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      +X or -X) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      +Y or -Y) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      +Z or -Z) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      + or - a fractional shift.) def Literal                                                                                                                                                                                                                                                              
LitBlank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
The fractional shift may be represented by one number divided by another \(e.g. 1\/2 or 1\/3\) or by a true
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
fraction \(0.5 or 0.33333...\). Apart from terminating text, spaces are optional and ignored. The terms for
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   22 def
/textstring (
the new x, y and z must be separated by a comma \(,\) , and the whole expression may be terminated by ;
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
if required. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SPACEGROUP LATTICE= A-AXIS= B-AXIS= C-AXIS=) def Instruction                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive inputs the space group symbol, and is optional for the correct working of CRYSTALS.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
However, some foreign programs need the symbol as input data, and they will extract it from this
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
record. The keywords LATTICE, A-AXIS etc are normally omitted, and the full space group symbol
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
given with spaces between the operators, e.g. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(        SPACEGROUP P 1 21\/C 1) def Literal                                                                                                                                                                                                                                                                
LitBlank
Blank
/left leftmargin indent add def 
/instr (CLASS NAME=) def Instruction                                                                                                                                                                                                                                                                        
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive inputs the crystal class. It is not used by CRYSTALS, but is required for cif files. 
) def
Write
Blank
Blank
/secttext (Printing the symmetry information) def Section                                                                                                                                                                                                                                                   
Blank
/left leftmargin def 
/instr (\\PRINT 2) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This prints LIST 2. There is no command for punching LIST 2. 
) def
Write
Blank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
Further examples. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ THE SPACE GROUP IS P1-BAR.) def Literal                                                                                                                                                                                                                                                                
/litstring 
( \\LIST 2) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( CELL NSYM= 1) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYM X, Y, Z) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( SPACEGROUP P -1) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ THE SPACE GROUP IS P 321) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( \\LIST 2) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( CELL CENTRIC= NO, NSYM= 6) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( SYM X, Y, Z) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( SYM -Y, X-Y, Z) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( SYM Y-X, -X, Z) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( SYM Y, X, -Z) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SYM -X, Y-X, -Z) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( SYM X-Y, -Y, -Z) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\ THE SPACE GROUP IS P 6122 \(note alternative notation for fractions\)) def Literal                                                                                                                                                                                                                     
/litstring 
( \\LIST 2) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( CELL NSYM= 12, CENTRIC= NO) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( SYM X,Y,Z) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( SYM -X    ,   -Y  ,Z+.5) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( SYM +Y, +X,1\/3-Z) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( SYM -Y,-X,5\/6-Z) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( SYM -Y, X-Y, .333333333+Z) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( SYM Y, Y-X, Z+10\/12) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( SYM -X, Y-X, 4\/6-Z) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( SYM X, X-Y, 1\/6-Z) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( SYM Y-X, -X, Z+4\/6) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( SYM  X-Y, X, Z+1\/6) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( SYM X-Y, -Y, -Z) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( SYM Y-X, Y ,  -Z+.5) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( SPACEGROUP P 61 2 2) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
Blank
/secttext (Input of molecular composition \\COMPOSITION) def Section                                                                                                                                                                                                                                        
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
This command takes the contents of the asymmetric unit, searches the specified data files for required
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
values, and then internally creates normal scattering factors \(LIST 3 - section LIST03 \) and elemental
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
properties \(LIST 29 - section LIST29 \). NOTE LISTS 1 \(see LIST01 \) and 13 \(see LIST13 \) must have been
) def
/last 0 def 
WriteCalc
/textstring (properties \(LIST 29 - section LIST29 \). ) def WritePart
/textstring (NOTE ) def
WriteBold
/textstring (LISTS ) def
WriteBold
/textstring (1 ) def
WriteBold
/textstring (\(see LIST01 \) ) def WritePart
/textstring (and ) def
WriteBold
/textstring (13 ) def
WriteBold
/textstring (\(see LIST13 \) ) def WritePart
/textstring (must ) def
WriteBold
/textstring (have ) def
WriteBold
/textstring (been ) def
WriteBold
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
input beforehand. 
) def
WriteCalc
/textstring (input ) def
WriteBold
/textstring (beforehand. ) def
WriteBold
/ypos ypos linegap sub def
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\COMPOSITION) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( CONTENTS FORMULA=) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( SCATTERING FILE=) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( PROPERTIES FILE=) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\COMPOSITION) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( CONTENT C 6 H 5 N O 2.5 CL) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( SCATTERING CRSCP:SCATT.DAT) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( PROPERTIES CRSCP:PROPERTIES.DAT) def Literal                                                                                                                                                                                                                                                              
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\COMPOSITION) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
There are three directives, none of which have default values. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (CONTENTS FORMULA=) def Instruction                                                                                                                                                                                                                                                                  
/left leftmargin indent add indent add def
/instr (FORMULA=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The formula for the UNIT CELL \(NOT ASYMMETRIC UNIT\) is given as a list with entries 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( 'element TYPE' 'number of atoms'.) def Literal                                                                                                                                                                                                                                                            
LitBlank
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
The items in the list MUST be separated by at least one space. The number of atoms may be omitted,
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
when they default to 1.0, and may be fractional. 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
The element TYPE must conform to the TYPE conventions described in the atom syntax, section
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
ATOMSYNTAX . 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SCATTERING FILE=) def Instruction                                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive gives the name of the file to be searched for scattering factors, and must conform to the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
syntax of the computing system. A file CRSCP:SCATT.DAT is provided for some implementations,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and contains all the scattering factors listed in Volume IV, International Tables. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PROPERTIES FILE=) def Instruction                                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive gives the name of the file to be searched for elemental properties, and must conform to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
the syntax of the computing system. A file CRSCP:PROPERTIES.DAT is provided for some
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
implementations, and contains values gleaned from various sources. The file contains references. 
) def
Write
Blank
Blank
/secttext (Input of the atomic scattering factors  -  \\LIST 3) def Section                                                                                                                                                                                                                                 
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
This list contains the scattering factors that are to be used for each atomic species that may appear in the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
atomic parameter list \(LIST 5\) - see the section of the user guide on Atom and Element names\). 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\LIST 3) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( READ  NSCATTERERS=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( SCATTERING TYPE= F'= F''= A\(1\)= B\(1\)= A\(2\)= . . . B\(4\)= C=) def Literal                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 3) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( READ 2) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( SCATT C    0    0) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( CONT  1.93019  12.7188  1.87812  28.6498  1.57415  0.59645) def Literal                                                                                                                                                                                                                                   
/litstring 
( CONT  0.37108  65.0337  0.24637) def Literal                                                                                                                                                                                                                                                              
/litstring 
( SCATT S 0.35 0.86  7.18742  1.43280  5.88671  0.02865) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT               5.15858  22.1101  1.64403  55.4561) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT              -3.87732) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
The scattering factor of an atom in LIST 5 \(the model parameters\) is determined by its TYPE, an entry for
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
which must exist in LIST 3. 
) def
Write
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
The form factor is calculated analytically at each value of sin\(theta\)\/lambda, s , from the relationship : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( f = sum[a\(i\)*exp\(-b\(i\)*s*s\)] + c       i=1 to 4.) def Literal                                                                                                                                                                                                                                       
LitBlank
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
The coefficients a\(1\) to a\(4\), b\(1\) to b\(4\) and c and the real and imaginary parts of the anomalous dispersion
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
correction are input for each element TYPE. 
) def
Write
Blank
/left leftmargin def 
/instr (\\LIST 3) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This is the normal calling command for the input of LIST 3. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (READ  NSCATTERERS=) def Instruction                                                                                                                                                                                                                                                                 
/left leftmargin indent add indent add def
/instr (NSCATTERERS=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
This must be set to the number of atomic species to be stored in LIST 3, and thus the number of
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SCATTERING directives to follow. There is no default value. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SCATTERING TYPE= F'= F''= A\(1\)= B\(1\)= A\(2\)= . . . B\(4\)= C=) def Instruction                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive provides the form factor details for one atomic species. This directive must be repeated
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
NSCATTERERS times. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
The element TYPE must conform to the TYPE conventions described in the General Introduction.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
The values used for TYPE in LIST 3 will have their counterparts in the TYPEs stored for atoms in
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
LIST 5 \(the model parameters\), and in the TYPEs stored for atomic species in LIST 29 \(see section
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
LIST29 \). There is no default for this parameter. 
) def
Write
/left leftmargin indent add indent add def
/instr (F'= F''=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
These define the real and imaginary parts of the anomalous dispersion correction for this atomic
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
species at the appropriate wavelength. A default value of zero is assumed if these parameters are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
omitted. 
) def
Write
/left leftmargin indent add indent add def
/instr (A\(1\)= B\(1=\) A\(2=\) B\(2\)= A\(3\)= B\(3\)= A\(4\)= B\(4\)= C=) def Instruction                                                                                                                                                                                                                 
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
These define the coefficients used to compute the scattering factor for this atomic species. There are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
no default values. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(  For neutrons, all the A\(i\) and B\(i\) are set to zero, and C is set to) def Literal                                                                                                                                                                                                                    
/litstring 
( the scattering length.) def Literal                                                                                                                                                                                                                                                                       
LitBlank
Blank
/secttext (Printing the scattering factors) def Section                                                                                                                                                                                                                                                     
Blank
/left leftmargin def 
/instr (\\PRINT 3) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This prints LIST 3. There is no command for punching LIST 3. 
) def
Write
Blank
/secttext (Input of the crystal and data collection details  -  LIST 13) def Section                                                                                                                                                                                                                        
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
LIST 13 contains information about those experimental details which may be needed during structure
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
analysis. Information only required for the generation of a cif are held in LIST 30 \(section LIST30 \). 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
If no LIST 13 has been input and one is required, a default list is generated. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\LIST 13) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( CRYSTAL FRIEDELPAIRS= TWINNED= SPREAD=) def Literal                                                                                                                                                                                                                                                       
/litstring 
( DIFFRACTION GEOMETRY= RADIATION=) def Literal                                                                                                                                                                                                                                                             
/litstring 
( CONDITIONS WAVELENGTH= THETA\(1\)= THETA\(2\)= CONSTANTS . .) def Literal                                                                                                                                                                                                                                 
/litstring 
( MATRIX R\(1\)= R\(2\)= R\(3\)= . . . R\(9\)=) def Literal                                                                                                                                                                                                                                                 
/litstring 
( TWO H= K= L= THETA= OMEGA= CHI= PHI= KAPPA= PSI=) def Literal                                                                                                                                                                                                                                             
/litstring 
( THREE H= K= L= THETA= OMEGA= CHI= PHI= KAPPA= PSI=) def Literal                                                                                                                                                                                                                                           
/litstring 
( REAL COMPONENTS= H= K= L= ANGLES=) def Literal                                                                                                                                                                                                                                                            
/litstring 
( RECIPROCAL COMPONENTS= H= K= L= ANGLES=) def Literal                                                                                                                                                                                                                                                      
/litstring 
( AXIS H= K= L=) def Literal                                                                                                                                                                                                                                                                                
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 13) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( DIFF GEOM= CAD4) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( COND WAVE= .7107) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( MATRIX) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\LIST 13) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This directive describes properties that relate to the whole crystal. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (CRYSTAL FRIEDELPAIRS= TWINNED= SPREAD=) def Instruction                                                                                                                                                                                                                                             
Blank
/left leftmargin indent add indent add def
/instr (FRIEDELPAIRS=) def Instruction                                                                                                                                                                                                                                                                      
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
This parameter defines whether Friedel's law should be used during \\SYSTEMATIC in data
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
reduction. It should be set to NO for high accuracy or absolute structure determinations. If omitted,
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Friedel's law will be used. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      YES  -  default value.) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add indent add def
/instr (TWINNED=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter is used during refinement to indicate whether the twin laws should be used. It is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
automatically updated if twinned reflection data is input. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO  -  Default value.) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add indent add def
/instr (SPREAD=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter defines the type of mosaic spread in the crystal. This information is used during the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
calculation of an extinction correction. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      GAUSSIAN  -  Default value. Suitable for X-rays) def Literal                                                                                                                                                                                                                                         
/litstring 
(      LORENTZIAN - Suitable for Neutrons) def Literal                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (DIFFRACTION GEOMETRY= RADIATION=) def Instruction                                                                                                                                                                                                                                                   
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive defines the experimental conditions used to collect the data. 
) def
Write
/left leftmargin indent add indent add def
/instr (GEOMETRY=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This defines the type of data collection method used to measure the raw intensities, and determines
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the type of Lp correction. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NORMAL  -  Normal beam Weissenberg geometry.) def Literal                                                                                                                                                                                                                                            
/litstring 
(      EQUI    -  Equi-inclination Weissenberg geometry.) def Literal                                                                                                                                                                                                                                       
/litstring 
(      ANTI    -  Anti-equi-inclination Weissenberg geometry.) def Literal                                                                                                                                                                                                                                  
/litstring 
(      PRECESSION) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      CAD4    -  Nonius CAD4 diffractometer, Eulerian angles.) def Literal                                                                                                                                                                                                                                 
/litstring 
(      KAPPA   -  Nonius CAD4 in kappa geometry.) def Literal                                                                                                                                                                                                                                               
/litstring 
(      ROLLETT -  Abstract machine, see page 28 , Computing Methods) def Literal                                                                                                                                                                                                                            
/litstring 
(                 in Crystallography.) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      Y290    -  Hilger-Watts Y290 4-Circle diffractometer.) def Literal                                                                                                                                                                                                                                   
/litstring 
(      NONE    -  Default.) def Literal                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add indent add def
/instr (RADIATION=) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter defines the type of radiation used to collect the data. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      XRAYS  -  Default value) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(      NEUTRONS) def Literal                                                                                                                                                                                                                                                                                
LitBlank
/left leftmargin indent add def 
/instr (CONDITIONS WAVELENGTH= THETA\(1\)= THETA\(2\)= CONSTANTS . .) def Instruction                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive describes the conditions that were used when the data were collected. CONSTANTS is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
short for four constants. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Newpage
/litstring 
(      CONSTANT\(1\)= CONSTANT\(2\)= CONSTANT\(3\)= CONSTANT\(4\)=) def Literal                                                                                                                                                                                                                             
LitBlank
/left leftmargin indent add indent add def
/instr (WAVELENGTH=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This defines the wavelength of the radiation used to collect the data. If omitted, a default value of
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
0.71073 is assumed,\(Mo k-alpha\). 
) def
Write
/left leftmargin indent add indent add def
/instr (THETA\(1\)=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This defines the Bragg angle of the monochromator. If omitted, a default of 6.05 is assumed,
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
indicating that a monochromator was used with Mo radiation 
) def
Write
/left leftmargin indent add indent add def
/instr (THETA\(2\)=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This defines the angle between the plane of the monochromator and the diffracting planes of the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
crystal. If this parameter is omitted, a default value of 90 is assumed. This value is not used if
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
THETA\(1\) is zero. Since the angle THETA\(2\) is fixed, the Lp correction computed using these
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
constants is correct only for experiments where THETA\(2\) is a constant. This is true for equatorial
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
geometry experiments, but is not true for equipment that uses Weissenberg or precession geometry. 
) def
Write
/left leftmargin indent add indent add def
/instr (CONSTANT\(1\)= CONSTANT\(2\)= CONSTANT\(3\)= CONSTANT\(4\)=) def Instruction                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
These four parameters are used to input fundamental constants for the diffractometer used to collect
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
the data. How many of the constants, and what values they should have are determined by the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
equipment and its setting. To determine the values required, consult your local diffractometer expert.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
The default values for c\(1\), c\(2\) and c\(3\) are the Nonius CAD4 GONCON constants, and c\(4\) is the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
theta value for the change from bisecting to fixed chi mode \(and has a value of 90 degrees\). These
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
constants are important when machine geometry dependent calculations are made - for example,
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
absorption corrections. The defaults in the program were correct for the Nonius CAD4 in the Oxford
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Chemical Crystallography lab on 13 October 1980. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (MATRIX R\(1\)= R\(2\)= R\(3\)= . . . R\(9\)=) def Instruction                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive is used to input the orientation matrix directly. If this directive is input, the directives
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
TWO , THREE , REAL , and RECIPROCAL \(detailed below\) may not be used. This directive is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
normally used for diffractometer collected data. 
) def
Write
/left leftmargin indent add indent add def
/instr (R\(1\)= R\(2\)= R\(3\)= . . . R\(9\)=) def Instruction                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
The elements of the matrix must be input in the order \(1,1\), \(1,2\), \(1,3\), \(2,1\), etc. The default is a
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
unit diagonal matrix. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TWO H= K= L= THETA= OMEGA= CHI= PHI= KAPPA= PSI=) def Instruction                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive is used to input the setting details required to define a diffractometer orientation matrix
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
from two reflections. The details for the two reflections must be input on separate directives, so that this
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
directive must be repeated twice. This directive may only be input when the GEOMETRY parameter on
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
the DIFFRACTION directive is Y290 or CAD4 . If this directive is input, the directives THREE ,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
REAL , RECIPROCAL , and MATRIX may not be used. The reflections should be given in the same
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
order as in the original experiment. 
) def
Write
/left leftmargin indent add indent add def
/instr (H= K= L=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
These three parameters define the indices of the reflection that is to be used to calculate the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
orientation matrix. 
) def
Write
/left leftmargin indent add indent add def
/instr (THETA= OMEGA= CHI= PHI= KAPPA= PSI=) def Instruction                                                                                                                                                                                                                                                
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
These parameters define the setting angles for the reflection whose indices are given by H , K and L
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
. There are no default values for THETA , OMEGA and PHI , and one of CHI or KAPPA must be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
input. The default values for CHI , KAPPA and PSI are zero. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (THREE H= K= L= THETA= OMEGA= CHI= PHI= KAPPA= PSI=) def Instruction                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive is used to input the setting details required to define a diffractometer orientation matrix
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
from three reflections. The details for the three reflections must be input on separate directives, so that
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
this directive must be repeated three times. This directive may only be input when the GEOMETRY
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
parameter on the DIFFRACTION directive is Y290 or CAD4 . If this directive is input, the directives
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
TWO , REAL , RECIPROCAL , and MATRIX may not be used. 
) def
Write
/left leftmargin indent add indent add def
/instr (H= K= L= THETA= OMEGA= CHI= PHI= KAPPA= PSI=) def Instruction                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters are defined as for TWO above. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REAL COMPONENTS= H= K= L= ANGLES=) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive is used to define the orientation matrix for the Nonius CAD4 diffractometer from the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
components of the real vector along the phi axis and the setting angles of one reflection. The items
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
COMPONENTS and ANGLES are short for: 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
COMPONENT\(1\)= COMPONENT\(2\)= COMPONENT\(3\)= 
) def
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and 
) def
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
THETA= OMEGA= CHI= PHI= KAPPA= PSI= 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
If this directive is input, the directives TWO , THREE , RECIPROCAL , and MATRIX may not be
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
used. This directive may only be input when the GEOMETRY parameter on the DIFFRACTION
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive is CAD4 . 
) def
Write
/left leftmargin indent add indent add def
/instr (COMPONENT\(1\)= COMPONENT\(2\)= COMPONENT\(3\)=) def Instruction                                                                                                                                                                                                                                    
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These three parameters provide the components of the real cell vector that is parallel to the phi axis. 
) def
Write
/left leftmargin indent add indent add def
/instr (H= K= L= THETA= OMEGA= CHI= PHI= KAPPA= PSI=) def Instruction                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters are defined as in TWO above 
) def
Write
Blank
/left leftmargin indent add def 
/instr (RECIPROCAL COMPONENTS= H= K= L= ANGLES=) def Instruction                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive is used to define the orientation matrix for the Nonius CAD4 diffractometer from the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
components of the reciprocal vector along the phi axis and the setting angles of one reflection. The
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
items COMPONENTS and ANGLES are short for: 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
COMPONENT\(1\)= COMPONENT\(2\)= COMPONENT\(3\)= 
) def
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and 
) def
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
THETA= OMEGA= CHI= PHI= KAPPA= PSI= 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
If this directive is input, the directives TWO , THREE , REAL , and MATRIX may not be used. This
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
directive may only be input when the GEOMETRY parameter on the DIFFRACTION directive is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
CAD4 . 
) def
Write
/left leftmargin indent add indent add def
/instr (COMPONENT\(1\)= COMPONENT\(2\)= COMPONENT\(3\)=) def Instruction                                                                                                                                                                                                                                    
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
These three parameters provide the components of the reciprocal cell vector that is parallel to the phi
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
axis. 
) def
Write
/left leftmargin indent add indent add def
/instr (H K L THETA OMEGA CHI PHI KAPPA PSI) def Instruction                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters are defined as in TWO above 
) def
Write
Blank
/left leftmargin indent add def 
/instr (AXIS H= K= L=) def Instruction                                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive is used to define the axis about which data were collected in Weissenberg geometry.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive may only be given when the GEOMETRY parameter on the DIFFRACTION directive is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
one of NORMAL , EQUI or ANTI . 
) def
Write
/left leftmargin indent add indent add def
/instr (H= K= L=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
These three parameters define the zone axis [hkl] about which the crystal was rotated during data
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
collection. If any of these parameters is omitted, a default value of zero is assumed. 
) def
Write
Blank
/secttext (Printing the experimental conditions, LIST 13) def Section                                                                                                                                                                                                                                       
Blank
/left leftmargin def 
/instr (\\PRINT 13) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This prints list 13. There is no command for punching LIST 13. 
) def
Write
Blank
Blank
/secttext (Input of the contents of the asymmetric unit  -  LIST 29) def Section                                                                                                                                                                                                                            
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
To perform calculations based on elemental properties, such as Sim weighting for Fourier maps \(section
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
FOURIER \), connectivity calculations, absorption and density calculations, it is necessary to input the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
numbers and properties of the elements in the cell. This information is stored in LIST 29. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 29) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( READ  NELEMENT=) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( ELEMENT TYPE= COVALENT= VANDERWAALS= IONIC= NUMBER= MUA= WEIGHT= COLOUR=) def Literal                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 29) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( READ NELEMENT=4) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( ELEMENT MO NUM=0 .5) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( ELEMENT S NUM=2) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( ELEMENT O NUM=3) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( ELEMENT C NUM=10) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\LIST 29) def Instruction                                                                                                                                                                                                                                                                          
Blank
/left leftmargin indent add def 
/instr (READ  NELEMENT=) def Instruction                                                                                                                                                                                                                                                                    
/left leftmargin indent add indent add def
/instr (NELEMENT) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This must be set to the number of atomic species in the asymmetric unit, and consequently the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
number of ELEMENT directives that are about to follow this directive. If this directive is omitted, a
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
default value of one is assumed for NELEMENT. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ELEMENT TYPE= COVALENT=  VANDERWAALS= IONIC= NUMBER= MUA= WEIGHT=) def Instruction                                                                                                                                                                                                                  
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Each ELEMENT directive provides the information about that atomic species in the asymmetric unit. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
Newpage
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
The element TYPE must conform to the TYPE conventions described in the section on atom syntax,
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
ATOMSYNTAX . The default value for this parameter is taken from the COMMAND file. When
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
LIST 29 is used for Simm weighting, the TYPE is compared with the TYPEs stored in LIST 3
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\(section LIST03 \) to determine the scattering factor of the given species. 
) def
Write
/left leftmargin indent add indent add def
/instr (COVALENT=) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin indent add indent add def
/instr (VANDERWAALS=) def Instruction                                                                                                                                                                                                                                                                       
/left leftmargin indent add indent add def
/instr (IONIC=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
The radii used during geometry calculations, with a default values set in the COMMAND file. The
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
covalent radius is incremented by 0.1 A for distance contacts, and used for defining restraint targets
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
\(see \\DISTANCES\). The van der Waals radius is incremented by .25A for finding non-bonded
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
contacts, and used for defining energy restraints The ionic radius may be used during geometry
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
calculations. 
) def
Write
/left leftmargin indent add indent add def
/instr (NUMBER=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter gives the number of atoms of the given type in the asymmetric unit. This number can
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
be fractional, depending on the number of atoms in the cell and whether they occupy special
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
positions, and whether they are disordered. 
) def
Write
/left leftmargin indent add indent add def
/instr (MUA=) def Instruction                                                                                                                                                                                                                                                                               
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This is the atomic absorption coefficient x10**\(-23\) \/cm as in INT TAB VOL III. Note that in Vol
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
IV the units are x10**\(-24\). Take care to ensure that the coefficients are appropriate for the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
wavelength used. 
) def
Write
/left leftmargin indent add indent add def
/instr (WEIGHT) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This is the Atomic weight 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (COLOUR) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This is the colour to be used for each atom in CAMERON. The available colours are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( BLACK BLUE    CYAN   GREEN GREY   LBLUE LGREEN LGREY) def Literal                                                                                                                                                                                                                                         
/litstring 
( LRED  MAGENTA ORANGE PINK  PURPLE RED   WHITE  YELLOW) def Literal                                                                                                                                                                                                                                        
LitBlank
Blank
/secttext (Printing the contents of the asymmetric unit, LIST 29) def Section                                                                                                                                                                                                                               
Blank
/left leftmargin def 
/instr (\\PRINT 29) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This prints list 29. There is no command for punching LIST 29. 
) def
Write
Blank
/secttext (Input of General Crystallographic Data - LIST 30) def Section                                                                                                                                                                                                                                    
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
This list holds general crystallographic information for later inclusion in the cif file. CRYSTALS contains
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
no COMMAND for editing this list - inputting a new LIST 30 over writes any existing version. However,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
some CRYSTALS commands update LIST 30 as an analysis proceeds, and there is a SCRIPT which enables
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
some details to be changed. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 30) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( DATRED     NREFMES= NREFMERG= RMERGE= NREFFRIED= RMERGFRIED= REDUCTION=) def Literal                                                                                                                                                                                                                      
/litstring 
( CONDITIONS MINSIZE= MEDSIZE= MAXSIZE= NORIENT=) def Literal                                                                                                                                                                                                                                               
/litstring 
( CONTINUE   THORIENTMIN= THORIENTMAX= TEMPERATURE= STANDARDS= DECAY= SCANMODE=) def Literal                                                                                                                                                                                                                
/litstring 
( CONTINUE   INTERVAL= COUNT= INSTRUMENT=) def Literal                                                                                                                                                                                                                                                      
/litstring 
( REFINEMENT R= RW= NPARAM= SIGMACUT= GOF= DELRHOMIN= DELRHOMAX=) def Literal                                                                                                                                                                                                                               
/litstring 
( CONTINUE   RMSSHIFT= NREFUSED= FMINFUNC= RESTMINFUN= TOTALMINFUN= COEFFICIENT=) def Literal                                                                                                                                                                                                               
/litstring 
( INDEXRANGE HMIN= HMAX= KMIN= KMAX= LMIN= LMAX= THETAMIN= THETAMAX=) def Literal                                                                                                                                                                                                                           
/litstring 
( ABSORPTION ANALMIN= ANALMAX= THETAMIN= THETAMAX= EMPMIN= EMPMAX=) def Literal                                                                                                                                                                                                                             
/litstring 
( CONTINUE   DIFABSMIN= DIFABSMAX= ABSTYPE=) def Literal                                                                                                                                                                                                                                                    
/litstring 
( GENERAL    DOBS= DCALC= F000= MU= MOLWT= FLACK= ESD= ANALYSE-CUT=) def Literal                                                                                                                                                                                                                            
/litstring 
( CONTINUE   ANALYSE-NREF= ANALYSE-R= ANALYSE-RW= SOLUTION=) def Literal                                                                                                                                                                                                                                    
/litstring 
( COLOUR) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( SHAPE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( CIFEXTRA   CALC-SIGMA= CALC-NREF= CALC-R= CALC-RW=) def Literal                                                                                                                                                                                                                                           
/litstring 
( CONTINUE   ALL-SIGMA= ALL-NREF= ALL-R= ALL-RW=) def Literal                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 30) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( CONDITIONS MINSIZE=.1 MEDSIZE=.3 MAXSIZE=.8 NORIENT=25) def Literal                                                                                                                                                                                                                                       
/litstring 
( CONTINUE   THORIENTMIN=15.0 THORIENTMAX=25.0) def Literal                                                                                                                                                                                                                                                 
/litstring 
( CONTINUE   TEMPERATURE=293 STANDARDS=3 DECAY=.05 SCANMODE=2THETA\/OMEGA) def Literal                                                                                                                                                                                                                      
/litstring 
( CONTINUE   INSTRUMENT=MACH3) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( INDEXRANGE HMIN=-12 HMAX=12 KMIN=-13 KMAX=13 LMIN=-1 LMAX=19) def Literal                                                                                                                                                                                                                                 
/litstring 
( COLOUR RED) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( SHAPE PRISM) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\LIST 30) def Instruction                                                                                                                                                                                                                                                                          
Blank
/left leftmargin indent add def 
Newpage
/instr (DATRED NREFMES= NREFMERG= RMERGE= NREFFRIED= RMERGFRIED= REDUCTION=) def Instruction                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Information about the data reduction process. 
) def
Write
/left leftmargin indent add indent add def
/instr (NREFMES=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of reflections actually measured in the diffraction experiment 
) def
Write
/left leftmargin indent add indent add def
/instr (NREFMERG=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Number of unique reflections remaining after merging equivalents applying Friedel's Law 
) def
Write
/left leftmargin indent add indent add def
/instr (RMERGE=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Merging R factor \(R int\) applying Friedel's Law \(as decimal not %\) 
) def
Write
/left leftmargin indent add indent add def
/instr (NREFFRIED=) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Number of unique reflections remaining after merging equivalents without applying Friedel's Law 
) def
Write
/left leftmargin indent add indent add def
/instr (RMERGFRIED=) def Instruction                                                                                                                                                                                                                                                                        
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Merging R factor \(R int\) without applying Friedel's Law \(as decimal not %\) 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (CONDITIONS MINSIZE= MEDSIZE= MAXSIZE= NORIENT= THORIENTMIN= THORIENTMAX= ) def Instruction                                                                                                                                                                                                          
/left leftmargin indent add def 
/instr (CONDITIONS \(continued\) TEMPERATURE= STANDARDS= DECAY= SCANMODE=) def Instruction                                                                                                                                                                                                                  
/left leftmargin indent add def 
/instr (CONDITIONS \(continued\) INTERVAL= COUNT= INSTRUMENT=) def Instruction                                                                                                                                                                                                                              
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Information about data collection. 
) def
Write
/left leftmargin indent add indent add def
/instr (MINSIZE=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin indent add indent add def
/instr (MEDSIZE=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin indent add indent add def
/instr (MAXSIZE=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The crystal dimensions, in mm. 
) def
Write
/left leftmargin indent add indent add def
/instr (NORIENT=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Number of orientation checking reflections. 
) def
Write
/left leftmargin indent add indent add def
/instr (THORIENTMIN=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Minimum theta value for orientating reflections. 
) def
Write
/left leftmargin indent add indent add def
/instr (THORIENTMAX=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Maximum theta value for orientating reflections. 
) def
Write
/left leftmargin indent add indent add def
/instr (TEMPERATURE=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Data collection temperature, Kelvin. 
) def
Write
/left leftmargin indent add indent add def
/instr (STANDARDS=) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Number of intensity control reflections. 
) def
Write
/left leftmargin indent add indent add def
/instr (DECAY=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Average decay in intensity, %. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCANMODE=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Data collection scan method. Options are 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      2THETA\/OMEGA \(Default\)) def Literal                                                                                                                                                                                                                                                               
/litstring 
(      OMEGA) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      UNKNOWN) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/left leftmargin def 
/instr (INTERVAL=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Intensity control reflection interval time, minutes. Used if standards are measured at a fixed time interval 
) def
Write
/left leftmargin indent add indent add def
/instr (COUNT=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
Intensity control reflection interval count. Used if standards are measured after a fixed number
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\(count\) of general reflections. 
) def
Write
/left leftmargin indent add indent add def
/instr (INSTRUMENT) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Instrument used for data collection. Known instruments are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      UNKNOWN \(default\)) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      CAD4) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      MACH3) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      KAPPACCD) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      DIP) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      SMART) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      IPDS) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add def 
/instr (REFINEMENT R= RW= NPARAM= SIGMACUT= GOF= DELRHOMIN= DELRHOMAX= RMSSHIFT=) def Instruction                                                                                                                                                                                                           
/left leftmargin indent add def 
/instr (REFINE \(cont\) NREFUSED= FMINFUNC= RESTMINFUNC= TOTALMINFUNC= COEFFICIENT=) def Instruction                                                                                                                                                                                                        
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Information about the refinement procedure. 
) def
Write
/left leftmargin indent add indent add def
/instr (R=) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Conventional R-factor. 
) def
Write
/left leftmargin indent add indent add def
/instr (RW=) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Hamilton weighted R-factor. 
) def
Write
Blank
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
The weighted R-factor stored in LIST 6 \(section LIST06 \) and LIST 30 is that computed during a
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
structure factor calculation. The conventional R-factor is updated by either an SFLS calculation
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\(section SFLS \) or a SUMMARY of LIST 6. 
) def
Write
/left leftmargin indent add indent add def
/instr (NPARAM=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Number of parameters refined in last cycle. 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (SIGMACUT=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The I\/sigma\(I\) threshold used during refinement. 
) def
Write
/left leftmargin indent add indent add def
/instr (GOF=) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
GOF, Goodness-of-Fit, S. 
) def
Write
/left leftmargin indent add indent add def
/instr (DELRHOMIN=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin indent add indent add def
/instr (DELRHOMAX=) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Minimum and maximum electron density in last difference synthesis. 
) def
Write
/left leftmargin indent add indent add def
/instr (RMSSHIFT=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
R.m.s \(shift\/e.s.d\) in last cycle of refinement. 
) def
Write
/left leftmargin indent add indent add def
/instr (NREFUSED=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Number of reflections used in last cycle of refinement. 
) def
Write
/left leftmargin indent add indent add def
/instr (FMINFUNC=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Minimisation function for diffraction observations. 
) def
Write
/left leftmargin indent add indent add def
/instr (RESTMINFUNC=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Minimisation function for restraints. 
) def
Write
/left leftmargin indent add indent add def
/instr (TOTALMINFUNC=) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Total minimisation function. 
) def
Write
/left leftmargin indent add indent add def
/instr (COEFFICIENT=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Coefficient for refinement. Alternatives are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      F \(Default\)) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      F**2) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      UNKNOWN) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/left leftmargin indent add def 
/instr (INDEXRANGE HMIN= HMAX= KMIN= KMAX= LMIN= LMAX= THETAMIN= THETAMAX=) def Instruction                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Range of reflection limits during data collection. 
) def
Write
/left leftmargin indent add indent add def
/instr (HMIN= HMAX= KMIN= KMAX= LMIN= LMAX=) def Instruction                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Minimum and maximum values of h,k and l. 
) def
Write
/left leftmargin indent add indent add def
/instr (THETAMIN= THETAMAX=) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Minimum and maximum values of theta. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ABSORPTION ANALMIN= ANALMAX= THETAMIN= THETAMAX= EMPMIN= EMPMAX=) def Instruction                                                                                                                                                                                                                   
/left leftmargin indent add def 
/instr (ABSORPTION \(continued\) DIFABSMIN= DIFABSMAX= ABSTYPE=) def Instruction                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Information about absorption corrections. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
NOTE the keywords PSIMIN and PSIMAX have been removed. Store values as EMPMIN and
) def
/last 0 def 
WriteCalc
/textstring (NOTE ) def
WriteBold
/textstring (the keywords PSIMIN and PSIMAX have been removed. Store values as EMPMIN and) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
EMPMAX 
) def
Write
/left leftmargin indent add indent add def
/instr (ANALMIN= ANALMAX=) def Instruction                                                                                                                                                                                                                                                                  
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Minimum and maximum analytical corrections 
) def
Write
/left leftmargin indent add indent add def
/instr (THETAMIN= THETAMAX=) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Minimum and maximum theta dependant corrections 
) def
Write
/left leftmargin indent add indent add def
/instr (EMPMIN= EMPMAX=) def Instruction                                                                                                                                                                                                                                                                    
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
Minimum and maximum empirical corrections \(usually combination of theta and psi or multi-scan
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
for area detectors\). 
) def
Write
/left leftmargin indent add indent add def
/instr (DIFABSMIN= DIFABSMAX=) def Instruction                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Minimum and maximum DIFABS type correction, i.e. based on residue between Fo anf Fc \(see
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
section DIFABS \). In the cif it is called a refdelf correction. 
) def
Write
/left leftmargin indent add indent add def
/instr (ABSTYPE=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Type of absorption correction. Alternatives are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NONE \(default\) EMPIRICAL    GAUSSIAN     SPHERICAL) def Literal                                                                                                                                                                                                                                    
/litstring 
(      DIFABS         MULTI-SCAN   ANALYTICAL   CYLINDRICAL) def Literal                                                                                                                                                                                                                                    
/litstring 
(      SHELXA         SADABS       NUMERICAL) def Literal                                                                                                                                                                                                                                                   
/litstring 
(                     SORTAV       INTEGRATION) def Literal                                                                                                                                                                                                                                                 
/litstring 
(                     PSI-SCAN) def Literal                                                                                                                                                                                                                                                                 
Blank
LitBlank
/left leftmargin indent add def 
/instr (GENERAL DOBS= DCALC= F000= MU= MOLWT= FLACK= ESD=) def Instruction                                                                                                                                                                                                                                  
/left leftmargin indent add def 
/instr (GENERAL \(continued\) ANALYSE-CUT= ANALYSE-NREF=) def Instruction                                                                                                                                                                                                                                   
/left leftmargin indent add def 
/instr (GENERAL \(continue\)  ANALYSE-R= ANALYSE-RW= SOLUTION=) def Instruction                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
General information, usually provided by CRYSTALS. 
) def
Write
/left leftmargin indent add indent add def
/instr (DOBS= DCALC=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Observed density and that calculated by CRYSTALS. 
) def
Write
/left leftmargin indent add indent add def
/instr (F000=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Sum of scattering factors at theta = zero. 
) def
Write
/left leftmargin indent add indent add def
/instr (MU=) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Absorption coefficient, calculated by CRYSTALS. 
) def
Write
/left leftmargin indent add indent add def
/instr (MOLWT=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Molecular weight, calculated bt CRYSTALS. 
) def
Write
/left leftmargin indent add indent add def
/instr (FLACK=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin indent add indent add def
Newpage
/instr (ESD=) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The Flack parameter and its esd, if refined. 
) def
Write
/left leftmargin indent add indent add def
/instr (ANALYSE-CUT=) def Instruction                                                                                                                                                                                                                                                                       
/left leftmargin indent add indent add def
/instr (ANALYSE-NREF=) def Instruction                                                                                                                                                                                                                                                                      
/left leftmargin indent add indent add def
/instr (ANALYSE-R=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin indent add indent add def
/instr (ANALYSE-RW=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
These values are updated when ever \\ANALYSE is run, and can be used to record the effect of
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
different LIST 28 schemes. Remenber that if the LIST 28 conditions are modified to include more
) def
/last 0 def 
WriteCalc
/textstring (different LIST 28 schemes. ) def WritePart
/textstring (Remenber ) def
WriteBold
/textstring (that if the LIST 28 conditions are modified to include more) def WritePart
/ypos ypos linegap sub def
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
reflections than were used in the last \\SFLS calculation \(section SFLS \), the values of Fc for the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
additional reflections will be incorrect. A \\SFLS calculation sets these to the same values as in
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
REFINEMENT above. 
) def
Write
/left leftmargin indent add indent add def
/instr (SOLUTION=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The program\/procedure used for structure solution 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      UNKNOWN \(Default\)) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      SHELXS) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      SIR88) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      SIR92) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      PATTERSON) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      SIR97) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      DIRDIF) def Literal                                                                                                                                                                                                                                                                                  
LitBlank
/left leftmargin indent add def 
/instr (COLOUR) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The crystal colour. 
) def
Write
/left leftmargin indent add def 
/instr (SHAPE) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The crystal shape. 
) def
Write
/left leftmargin indent add def 
/instr (CIFEXTRA) def Instruction                                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
These are filled in by the \\SFLS CALC operation \(section SFLS \). Structure factors are computed for
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
ALL reflections along with R and Rw - LIST 28 is ignored \(LIST 28, reflection filtering, see section
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
LIST28\). R and Rw are also computed for reflections above a given threshold. 
) def
Write
Blank
/secttext (Printing the general information, LIST 30) def Section                                                                                                                                                                                                                                           
Blank
/left leftmargin def 
/instr (\\PRINT 30) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This prints list 30. There is no command for punching LIST 30. 
) def
Write
Blank
Blank
/title (               REFLECTION DATA INPUT) def                                                                                                                                                                                                                                                           
/banner (REFLECTION DATA INPUT) def                                                                                                                                                                                                                                                                         
Newpage
/chaptext (Reflection Data Input) def                                                                                                                                                                                                                                                                       
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
Blank
/secttext (Scope of the Reflection Data Input section of the Reference Manual) def Section                                                                                                                                                                                                                  
Blank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The areas covered are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Reflection Data) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( Simple input of F or Fsq data               - \\LIST 6) def Literal                                                                                                                                                                                                                                       
/litstring 
( Advanced input of F or Fsq data             - \\LIST 6) def Literal                                                                                                                                                                                                                                       
/litstring 
( Reflection Parameter Coefficients) def Literal                                                                                                                                                                                                                                                            
/litstring 
( Storage of reflection data) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( Compressed reflection files) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( Intensity data                              - \\HKLI) def Literal                                                                                                                                                                                                                                         
/litstring 
( Standard Decay Curves                       - \\LIST 27) def Literal                                                                                                                                                                                                                                      
/litstring 
( Data Reduction                              - \\LP) def Literal                                                                                                                                                                                                                                           
/litstring 
( Systematic absence removal                  - \\SYSTEMATIC) def Literal                                                                                                                                                                                                                                   
/litstring 
( Sorting data                                - \\SORT) def Literal                                                                                                                                                                                                                                         
/litstring 
( Merging equivalent reflections              - \\MERGE) def Literal                                                                                                                                                                                                                                        
/litstring 
( Theta-dependent absorption correction       - \\THETABS) def Literal                                                                                                                                                                                                                                      
LitBlank
Blank
/secttext (Reflection Data) def Section                                                                                                                                                                                                                                                                     
Blank
Blank
/left leftmargin indent add def 
/instr (Format of reflection data) def Instruction                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
The reflection data may be embedded into the control data, but it is more normal to hold it in a separate
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
file, the HKLI file. This file may have one of more reflections per line, or a reflection may span several
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
lines. The parameters for each reflection may be in fixed format, i.e. right adjusted columns, or be in
) def
/last 0 def 
WriteCalc
/textstring (lines. The parameters for each reflection may be in fixed format, ) def WritePart
/textstring (i.e. ) def
WriteItalic
/textstring (right adjusted columns, or be in) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
free-format, with at least a single space separating items. 
) def
Write
/left  138 def /ipflag    1 def /numspace   15 def
/textstring (
If fixed-format input is used, the user must supply a FORTRAN format statement. This specifies the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
width of the input fields, where the decimal points are, and any fields to be skipped. Even though the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
indices are usually integer values, CRYSTALS read them as floating point numbers. A FORTRAN 'I'
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
format is automatically changed to an 'F' format. Note that if the input figures contain decimal points,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
these will over-ride values given in the format statement. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Examples - ^ represents a space.) def Literal                                                                                                                                                                                                                                                        
Blank
/litstring 
(      FORMAT \(3F4.0, 2F8.2\)      ^^^1^^12^^^3^^^47.23^^^^9.32) def Literal                                                                                                                                                                                                                               
/litstring 
(      FORMAT \(3I4, 2F8.2\)        ^^^1^^12^^^3^^^47.23^^^^9.32) def Literal                                                                                                                                                                                                                               
Blank
/litstring 
(      FORMAT \(3F4.0, 2F8.0\)      ^^^1^^12^^^3^123456.^^312.16) def Literal                                                                                                                                                                                                                               
Blank
/litstring 
(      FORMAT \(3F4.0, 3X,2F8.0\)   ^^^1^^12^^^3ABC^123456.^^312.16) def Literal                                                                                                                                                                                                                            
LitBlank
/left leftmargin indent add def 
/instr (Termination of reflection data) def Instruction                                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
The reflection data themselves should be terminated with a value less than or equal to -512 for the first
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
value on the final input line. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
If the reflections are embedded into the control data, then correct termination is vital. Incorrect
) def
/last 0 def 
WriteCalc
/textstring (If the reflections are embedded into the control data, then correct termination is ) def WritePart
/textstring (vital. ) def
WriteBold
/textstring (Incorrect) def WritePart
/ypos ypos linegap sub def
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
termination may lead to the program trying to read commands as reflections, producing massive error
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
files. If the reflections are in the HKLI file, most implementations will detect the end-of-file and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
terminate input. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (F or Fsq?) def Instruction                                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
CRYSTALS will accept either F or Fsq observations, signed or unsigned. Either quantity is referred to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
by the name 'Fo'. If sigma values are given, they must refer directly to the signed input F or Fsq values.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
reflections are stored as Fo, and standard deviations are transformed or approximated so that
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
Least-Squares refinement can be performed with either F or Fsq independent of input type. Raw
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
intensities, I, can be input with the HKLI command. The reflection input routines \(LIST 6 or HKLI\) are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
the only routine able to take the square root of the observation. See the chapter on refinement for a brief
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
discussion of the merits of F and FSQ refinements. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Merged or unmerged data?) def Instruction                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
CRYSTALS supports two levels of merging \(averaging\) simultaneously. For Fourier syntheses it is
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
important that all symmetry operations of the Laue Group are applied, including Friedel's Law. For
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
refinement it is permitted to used un-merged data, though in general some merging is performed. For
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   10 def
/textstring (
non-centrosymmetric structures containing strong anomalous scatterers Friedel pairs should be kept
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
separate, but other symmetry operations should be applied. 
) def
Write
Newpage
/left  138 def /ipflag    1 def /numspace   15 def
/textstring (
The reflection list with the minimal amount of merging is the principal reflection list, LIST 6
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
\(section LIST06 \). This can be used to create a full-merged list for Fourier \(or other\) calculations, LIST
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
7 \(section LIST07 \). The user can indicate to most commands which use reflections whether to use
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
LIST 6 or LIST 7, but by default all use LIST 6 for backwards compatibility. 
) def
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
6 or a LIST 7 would be most appropriate. If a LIST 7 is required, the SCRIPT COPY67 is activated to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
output a LIST 6 as a temporary file, and re-input it as a LIST 7. This can then be manupulated
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
independently of the original LIST 6. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Fourier Maps) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      Slant Fourier Maps) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(      Superflip Structure Solution) def Literal                                                                                                                                                                                                                                                            
/litstring 
(      The Hooft\/Straver\/Spek configuration parameter) def Literal                                                                                                                                                                                                                                        
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The experienced or adventurous user can of course use LIST 6 and LIST 7 quite independently for
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
different purposes. 
) def
Write
Blank
Blank
/secttext (Simple input of F or Fsq data - LIST 6) def Section                                                                                                                                                                                                                                              
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
LIST 6 will accept reflection data either as F or Fsq. For routine work, a pre-specified set of coefficients 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      h k l Fobs sigma\(Fobs\)) def Literal                                                                                                                                                                                                                                                                
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
are input and stored for each reflection. 
) def
Write
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
NOTE that 'Fobs' will refer either to F or Fsq, depending on the value of F's. 
) def
WriteCalc
/textstring (NOTE ) def
WriteBold
/textstring (that 'Fobs' will refer either to F or Fsq, depending on the value of F's. ) def WritePart
/ypos ypos linegap sub def
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
The input coefficient list may be expanded for non-routine work - see section ADVANCEDL6 below. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 6) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( READ F'S=) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( FORMAT EXPRESSION=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ The OPEN command connects the reflection file) def Literal                                                                                                                                                                                                                                             
/litstring 
( \\OPEN HKLI REFLECT.DAT) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( \\LIST 6) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( READ F'S=FSQ) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( FORMAT \(3F4.0, 2F8.0\)) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( \\ Close the reflection file) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( \\CLOSE HKLI) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
Blank
/left leftmargin indent add def 
/instr (READ F'S=) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin indent add indent add def
/instr (F'S=) def Instruction                                                                                                                                                                                                                                                                               
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter is used to indicate whether Fo or Fo**2 type coefficients are being read in, and must
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
take one of the following values : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FSQ) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      FO   -  Default) def Literal                                                                                                                                                                                                                                                                         
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default value of 'FO' indicates that coefficients corresponding to Fo are being read in. 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
By default, the reflections are assumed to come in fixed format from the HKLI channel, and may be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
terminated either by the end-of-file, or with -512. 
) def
Write
Blank
/secttext (Creation of LIST 7 from LIST 6 - COPY 6 7) def Section                                                                                                                                                                                                                                           
/left  118 def /ipflag    1 def /numspace   21 def
/textstring (
This command creates a LIST 7 as an exact copy of LIST 6 \(see LIST06 \). The LIST 7 can then be
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
merged using Friedel's Law to create a reflection list suitable for Fourier syntheses 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\COPY INPUT= OUTPUT=) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\COPY 6 7) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/secttext (Printing LIST 6) def Section                                                                                                                                                                                                                                                                     
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The reflections can be output to listing file as follows : 
) def
Write
/left leftmargin def 
/instr (\\PRINT 6 mode) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Mode controls the type of output. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Newpage
/litstring 
(     A - Default - The reflections are in compressed) def Literal                                                                                                                                                                                                                                          
/litstring 
(                   format, on the scale of Fo.) def Literal                                                                                                                                                                                                                                                
/litstring 
(     B -           The reflections are in compressed) def Literal                                                                                                                                                                                                                                          
/litstring 
(                   format, on the scale of Fc.) def Literal                                                                                                                                                                                                                                                
/litstring 
(     C -           A general print of all the data) def Literal                                                                                                                                                                                                                                            
/litstring 
(                   stored for each reflection.) def Literal                                                                                                                                                                                                                                                
LitBlank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
See also \\REFLECTIONS \(section REFLECTIONS \), which produces tables for publication. 
) def
Write
Blank
/secttext (Punching LIST 6) def Section                                                                                                                                                                                                                                                                     
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
LIST 6 can be punched as an ASCII file in several formats. 
) def
Write
/left leftmargin def 
/instr (\\PUNCH 6 mode) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Mode controls the format of the output. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      A - Output the reflections in a compressed format - Default.) def Literal                                                                                                                                                                                                                            
/litstring 
(      B - Output the reflections in 'cif' format. F's) def Literal                                                                                                                                                                                                                                         
/litstring 
(      C - Output stored information in tabulated format.) def Literal                                                                                                                                                                                                                                      
/litstring 
(      D - Output original information in tabulated format.) def Literal                                                                                                                                                                                                                                    
/litstring 
(      E - Output the reflections in 'cif' format. F^s) def Literal                                                                                                                                                                                                                                         
/litstring 
(      F - Output Fo, sigma information in SHELX format.) def Literal                                                                                                                                                                                                                                       
/litstring 
(      G - SHELX output with statistically generated sigmas) def Literal                                                                                                                                                                                                                                    
LitBlank
/left  128 def /ipflag    1 def /numspace   19 def
/textstring (
LIST 6 is also output by the links to the direct methods programs. In these files, the magnitudes of Fo
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
or Fsq are scaled so that the largest fits the format statement. The SHELX file contains Fsq, the SIR file
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
contains Fo. 
) def
Write
Blank
/secttext (Advanced input of F or Fsq data - LIST 6) def Section                                                                                                                                                                                                                                            
/left  118 def /ipflag    1 def /numspace   21 def
/textstring (
LIST 6 will accept reflection data either as F or Fsq. The data may be in free or fixed format. For routine
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
work, a pre-specified set of parameters is stored for each reflection. This may be expanded for non-routine
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
work by INPUT and OUTPUT coefficients. 
) def
WriteCalc
/textstring (work by ) def WritePart
/textstring (INPUT ) def
WriteBold
/textstring (and ) def WritePart
/textstring (OUTPUT ) def
WriteBold
/textstring (coefficients. ) def WritePart
/ypos ypos linegap sub def
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 6) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( READ NCOEFFICIENT= TYPE= F'S= NGROUP= UNIT= CHECK=) def Literal                                                                                                                                                                                                                                           
/litstring 
( INPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)= .  .) def Literal                                                                                                                                                                                                                                               
/litstring 
( STORE NCOEFFICIENT= MEDIUM= APPEND=) def Literal                                                                                                                                                                                                                                                          
/litstring 
( OUTPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)=  .  .) def Literal                                                                                                                                                                                                                                             
/litstring 
( FORMAT EXPRESSION=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( MULTIPLIERS VALUE=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( MATRIX M11=  M12=  ... M33= TOLER= TWINTOLER=) def Literal                                                                                                                                                                                                                                                
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ The OPEN command connects the reflection file) def Literal                                                                                                                                                                                                                                             
/litstring 
( \\OPEN HKLI REFLECT.DAT) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( \\LIST 6) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( READ NCOEF=5 TYPE=FIXED UNIT=HKLI F'S=FSQ) def Literal                                                                                                                                                                                                                                                    
/litstring 
( FORMAT \(3F4.0, 2F8.2\)) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( INPUT H K L \/FO\/ SIGMA\(\/FO\/\)) def Literal                                                                                                                                                                                                                                                           
/litstring 
( STORE NCOEF=7) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( OUTPUT INDICES \/FO\/ SQRTW \/FC\/ BATCH\/PHASE RATIO\/JCODE SIGMA\(\/FO\/\)) def Literal                                                                                                                                                                                                                 
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( \\CLOSE HKLI) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
Blank
/left leftmargin indent add def 
/instr (READ NCOEFFICIENT= TYPE= F'S= NGROUP= UNIT= CHECK=) def Instruction                                                                                                                                                                                                                                 
Blank
/left leftmargin indent add indent add def
/instr (NCOEFFICIENT= ) def Instruction                                                                                                                                                                                                                                                                     
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
Specifies the number of coefficients to be input per reflection. A list of permitted coefficients is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
given below. If this directive is omitted, the default is 5. 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default input coefficients are 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      H K L FOBS SIGMA\(F\)) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This parameter determines the form of the reflections as they are read in, and must take one of the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
following values : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FIXED     -  Fixed format data) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      FREE      -  Free format text  -  default value) def Literal                                                                                                                                                                                                                                         
/litstring 
(      COMPRESSED-  See 'Compressed Reflection Data' below) def Literal                                                                                                                                                                                                                                     
/litstring 
(      COPY      -  LIST 6 is copied from the current input device to the) def Literal                                                                                                                                                                                                                      
/litstring 
(                   output device designated on the STORE directive with) def Literal                                                                                                                                                                                                                       
/litstring 
(                   the number of coefficients given on the OUTPUT and) def Literal                                                                                                                                                                                                                         
/litstring 
(                   COEFFICIENT directives.) def Literal                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add indent add def
Newpage
/instr (F'S=) def Instruction                                                                                                                                                                                                                                                                               
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter is used to indicate whether Fo or Fo**2 type coefficients are being read in, and must
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
take one of the following values : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FSQ) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      FO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default value of 'FO' indicates that coefficients corresponding to Fo are being read in. 
) def
Write
/left leftmargin indent add indent add def
/instr (NGROUP=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter defines the number of reflections per line for fixed format input. \(For free format
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
input, the system can work out this information\). NGROUP will be less than unity if the reflection
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
spans several lines. 
) def
Write
/left leftmargin indent add indent add def
/instr (UNIT=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter defines the source of the reflection data that are to be input. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      HKLI   -  Default value.) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      DATAFILE) def Literal                                                                                                                                                                                                                                                                                
LitBlank
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
HKLI indicates that the reflection data are in a separate file from the main input data. The local
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
implementation may set up default names for this file, or the \\OPEN directive can be used to connect
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the file to CRYSTALS. 
) def
Write
/left  148 def /ipflag    1 def /numspace   14 def
/textstring (
DATAFILE indicates that the reflections follow the directives for '\\LIST 6' in the normal data
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
input stream. If this is the case, the directives for \\LIST6 must be terminated by the directive END,
) def
/last 0 def 
WriteCalc
/textstring (input stream. If this is the case, the directives for \\LIST6 ) def WritePart
/textstring (must ) def
WriteBold
/textstring (be terminated by the directive END,) def WritePart
/ypos ypos linegap sub def
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
otherwise the reflection lines will be processed as normal directives associated with the \\LIST6
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
command, and generate a very large number of input errors. 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
By default, the data are assumed to come from the alternative HKLI channel. 
) def
Write
/left leftmargin indent add indent add def
/instr (CHECK) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter determines whether reflections are rejected on input if they have a zero or negative
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
value for Fo. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      NO -  Default value.) def Literal                                                                                                                                                                                                                                                                    
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
By default checking is disabled so that negative reflections are accepted on input. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (INPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)= .  .) def Instruction                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive defines the coefficients that are to be read in. The number of coefficients is given by the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
NCOEFFICIENT parameter above, or its default value. 
) def
Write
/left leftmargin indent add indent add def
/instr (COEFFICIENT\(1\)= COEFFICIENT\(2\)= ) def Instruction                                                                                                                                                                                                                                               
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Defines the coefficients and their input order. The coefficients must be selected from the following
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
list 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      H             K             L             \/FO\/) def Literal                                                                                                                                                                                                                                        
/litstring 
(      SQRTW         FCALC         PHASE         A-PART) def Literal                                                                                                                                                                                                                                        
/litstring 
(      B-PART        TBAR          FOT           ELEMENTS) def Literal                                                                                                                                                                                                                                      
/litstring 
(      SIGMA\(F\)      BATCH         INDICES       BATCH\/PHASE) def Literal                                                                                                                                                                                                                                
/litstring 
(      SINTH\/L**2    FO\/FC         JCODE         SERIAL) def Literal                                                                                                                                                                                                                                      
/litstring 
(      RATIO         THETA         OMEGA         CHI) def Literal                                                                                                                                                                                                                                           
/litstring 
(      PHI           KAPPA         PSI           CORRECTIONS) def Literal                                                                                                                                                                                                                                   
/litstring 
(      FACTOR1       FACTOR2       FACTOR3       RATIO\/JCODE) def Literal                                                                                                                                                                                                                                  
LitBlank
/left  138 def /ipflag    0 def /numspace   11 def
/textstring (
For the meaning of these coefficients, see section REFPARCOEF - 'Reflection Parameter
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Coefficients' 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
NOTE that 'Fobs' will refer either to F or Fsq, depending on the value of F's. Reflections are
) def
/last 0 def 
WriteCalc
/textstring (NOTE ) def
WriteBold
/textstring (that 'Fobs' will refer either to F or Fsq, depending on the value of F's. Reflections are) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
available during refinement as either signed Fsq or signed Fo independent of the type of input values. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (STORE NCOEFFICIENT= MEDIUM= APPEND=) def Instruction                                                                                                                                                                                                                                                
/left leftmargin indent add indent add def
/instr (NCOEFFICIENT= ) def Instruction                                                                                                                                                                                                                                                                     
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
Specifies the number of coefficients to be stored per reflection. A list of permitted coefficients is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
given above. If this directive is omitted, the default is 9. 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default output coefficients are 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      INDICES \/FO\/ SQRTW \/FC\/ BATCH\/PHASE RATIO\/JCODE SIGMA\(\/FO\/\)) def Literal                                                                                                                                                                                                                   
/litstring 
(      CORRECTIONS ELEMENTS) def Literal                                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add indent add def
/instr (MEDIUM) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter sets the output reflection storage device. This can be a text file, but more normally it
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
is the database, the '.dsc' file. See section STOREREF - 'Storage of Reflection Data'. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
(      FILE        A named or scratch ASCII serial file) def Literal                                                                                                                                                                                                                                        
/litstring 
(      INPUT       A file of the same type as the input reflection source) def Literal                                                                                                                                                                                                                      
/litstring 
(      DISK   -    Default - The current structure database) def Literal                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add indent add def
/instr (APPEND=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter determines whether the input reflections are to replace or be appended to existing
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
reflections. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      YES      The input reflections are appended to existing reflections) def Literal                                                                                                                                                                                                                     
/litstring 
(      NO   -   Default - The input reflections replace any existing reflections) def Literal                                                                                                                                                                                                               
LitBlank
Blank
/left leftmargin indent add def 
/instr (OUTPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)= .  .) def Instruction                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive defines the coefficients that are to be stored. The number of coefficients is given by the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
NCOEFFICIENT parameter above, or its default value, and the coefficients selected from the list
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
above. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
If the OUTPUT directive is omitted, as many of the default coefficients as are required by
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
NCOEFFICIENT are used as output coefficients : 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
If the OUTPUT directive is omitted and NCOEFFICIENT is greater than 9, it is reset to 9 so that the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
coefficients above can be used. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (FORMAT EXPRESSION=) def Instruction                                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive allows the user to define a format statement if fixed format input is being used. This
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive is only valid if the TYPE parameter on the READ directive is FIXED . 
) def
Write
/left leftmargin indent add indent add def
/instr (EXPRESSION=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter defines the format to be used. Normally this keyword is omitted, so that the directive
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
looks like a FORTRAN format statement, except that there must be at least one space between the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
'FORMAT' and the expression, to terminate the directive. Since all the data are read as real numbers,
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
the format expression can only contain F , E , and X field definitions - either find a good Fortran
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
reference book for examples, or ask someone who did crystallography before 1990. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (MULTIPLIERS VALUE=) def Instruction                                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
This directive allows the user to define the multipliers to be applied to the data if they are being read in
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
compressed format. This directive is only valid if the TYPE parameter on the READ directive is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
COMPRESSED . 
) def
Write
/left leftmargin indent add indent add def
/instr (VALUE=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter, whose default value is unity, is repeated the number of times specified by the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
NCOEFFICIENT parameter on the READ directive. The order is the same as the INPUT
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
coefficients. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (MATRIX M11= M12= ...M33= TOLER= TWINTOLER=) def Instruction                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive inputs a matrix to be applied to the reflection indices as they are read in. If any
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
component of the index differs by more than TOLER from an integer, the reflection is rejected.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
TWINTOLER is a value, in A-2, for overlap of potentially twinned reflections. See the chapter on
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
twinning \( twinning \). 
) def
Write
/left leftmargin indent add indent add def
/instr (Mij=) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The 9 elements \(by row\) of an index transformation matrix. The default is a unit matrix 
) def
Write
/left leftmargin indent add indent add def
/instr (TOLER=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
The reflection is rejected if any transformed index differs from an integer by more than TOLER. The
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
default is 0.1. 
) def
Write
/left leftmargin indent add indent add def
/instr (TWINTOLER=) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
The twin element tag is updated if the generated reciprocal lattice point differs from a base lattice
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
point by less than TWINTOLER reciprocal Angstrom. The default is 0.001, but an ideal value will
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
depend upon the integration method, the mosaicity, and the lengths of the cell edges. 
) def
Write
Blank
Blank
Blank
/secttext (Reflection Parameter Coefficients) def Section                                                                                                                                                                                                                                                   
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
CRYSTALS has a very flexible procedure for storing reflection information, enabling the user to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
optimise disk space use. The user must indicate to the program what information is available in the input
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
data, and what information is to be stored. Storage space may also be reserved for data yet to be computed. 
) def
Write
/left  118 def /ipflag    1 def /numspace   12 def
/textstring (
During data reduction \(section DATAREDUC \), space is reserved for relevant coefficients. These
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
coefficients \(_i\{e.g. setting angles\) may not be needed during structure analysis, so they are not normally
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
preserved beyond reduction. 
) def
Write
Blank
/left leftmargin def 
Newpage
/instr (Special Reflection storage) def Instruction                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
The user might need to arrange special reflection storage under the following conditions: 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Refinement using a partial model) def Instruction                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
If the user is experiencing difficulties with a small part of an otherwise well behaved large structure,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
the real and imaginary parts of the structure factors due to the well behaved part can be precomputed
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
and stored and these atoms removed from the atom list \(LIST 5\). The user then only needs recompute
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
the contributions from the varying fragment. The total Fo, Fc, real and imaginary parts are stored with
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the keys 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \/FO\/      \/FC\/      APART      BPART) def Literal                                                                                                                                                                                                                                                
LitBlank
Blank
/left leftmargin indent add def 
/instr (Twinned structures) def Instruction                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
See chapter twinning on handling twinned data. 
) def
Write
Blank
/left leftmargin def 
/instr (Recognised reflection coefficients) def Instruction                                                                                                                                                                                                                                                 
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Coefficients recognised are:) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( H            Reflection index h) def Literal                                                                                                                                                                                                                                                              
/litstring 
( K            Reflection index k) def Literal                                                                                                                                                                                                                                                              
/litstring 
( L            Reflection index l) def Literal                                                                                                                                                                                                                                                              
/litstring 
( INDICES      Packed reflection indices) def Literal                                                                                                                                                                                                                                                       
/litstring 
( \/FO\/         The observed intensity, Fsq or Fo value) def Literal                                                                                                                                                                                                                                       
/litstring 
( \/FOT\/        The observed intensity, Fsq or Fo value for a twinned crystal) def Literal                                                                                                                                                                                                                 
/litstring 
( \/FC\/         The calculated structure factor) def Literal                                                                                                                                                                                                                                               
/litstring 
( SIGMA\(\/FO\/\)  Standard deviation of the input observation) def Literal                                                                                                                                                                                                                                 
/litstring 
( SQRTW        Sqrt of weight to be given a reflection during least squares) def Literal                                                                                                                                                                                                                    
/litstring 
( A-PART       Real part of structure factor) def Literal                                                                                                                                                                                                                                                   
/litstring 
( B-PART       Imaginary part of structure factor) def Literal                                                                                                                                                                                                                                              
/litstring 
( PHASE        Phase angle, radians) def Literal                                                                                                                                                                                                                                                            
/litstring 
( BATCH        An integer associated with reflections measured in batches) def Literal                                                                                                                                                                                                                      
/litstring 
( BATCH\/PHASE  Packed \(compressed into one word\) Batch and Phase) def Literal                                                                                                                                                                                                                            
/litstring 
( SINTH\/L**2   \(Sintheta\/lambda\)**2) def Literal                                                                                                                                                                                                                                                        
/litstring 
( FO\/FC        Fo\/Fc) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( ELEMENTS     Integers corresponding to twin elements) def Literal                                                                                                                                                                                                                                         
/litstring 
( SERIAL       Serial number of reflection) def Literal                                                                                                                                                                                                                                                     
/litstring 
( JCODE        reflection quality code. See RC93 manual) def Literal                                                                                                                                                                                                                                        
/litstring 
( RATIO        Ratio Fo**2\/sigma\(Fo**2\)) def Literal                                                                                                                                                                                                                                                     
/litstring 
( RATIO\/JCODE  Packed ratio and jcode) def Literal                                                                                                                                                                                                                                                         
/litstring 
( TBAR         Absorption weighted X-ray path length) def Literal                                                                                                                                                                                                                                           
/litstring 
( THETA        Bragg angle) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( OMEGA        Setting angle) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( CHI          Setting angle) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( PHI          Setting angle) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( KAPPA        Setting angle) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( PSI          Setting angle) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( CORRECTIONS  Composite correction factor for Fo) def Literal                                                                                                                                                                                                                                              
/litstring 
( FACTOR1      Individual correction factor for Fo) def Literal                                                                                                                                                                                                                                             
/litstring 
( FACTOR2      Individual correction factor for Fo) def Literal                                                                                                                                                                                                                                             
/litstring 
( FACTOR3      Individual correction factor for Fo) def Literal                                                                                                                                                                                                                                             
/litstring 
( NOTHING      A spare location for programmers use) def Literal                                                                                                                                                                                                                                            
LitBlank
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
If an output coefficient is specified without the corresponding input coefficient, it value is set to zero
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
except for BATCH \(default is 1.0\) and SINTH\/L**2 \(value computed from cell parameters\). Packed
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
INDICES are restricted to +\/- 127, packed RATIO to range 0.0 - 999.0, JCODE to range 0 - 9. 
) def
Write
Blank
/secttext (Storage of reflection data) def Section                                                                                                                                                                                                                                                          
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
Reflections may be stored either in the structure database \(the DSC file\), or as external binary serial files.
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
The latter is used mainly during data reduction \(section DATAREDUC \). 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
When a change is made to most other data lists, they are either completely overwritten \(LIST1, cell
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
parameters\), or a new list created in addition to the old list \(LIST 5, atom parameters\). Because the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
reflections are special, they are handled differently. A small piece of information \(called the LIST 6 Header\)
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
is created to hold information about the rest of the reflection list, and new headers are stored each time the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
main body is updated. The main body of the reflection list is modified in-situ if the only changes are ones
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
which can easily be recomputed \( e.g. Fc, phase, sqrtw\), thus reducing the disk activity. If an error occurs
) def
/last 0 def 
WriteCalc
/textstring (which can easily be recomputed \( ) def WritePart
/textstring (e.g. ) def
WriteItalic
/textstring (Fc, phase, sqrtw\), thus reducing the disk activity. If an error occurs) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
during the updating of the body, the list becomes inaccessible to other processes, and the failing process
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
must be re-run correctly. If the changes involve a change in size of the list, then a new body is created. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
During raw data processing \(Data reduction, section DATAREDUC \) the size of the reflection list can
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
change a lot \(coefficients being added or removed, reflections being merged or rejected\). To prevent the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
.DSC file growing too large, binary serial files are used to hold the body of the reflection list. One is used for
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
input and one for output at each stage, the roles being reversed after each stage. The header is kept in the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
.DSC file, and keeps track of the bodies. When data reduction is complete, the body must be copied to the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
.DSC file as follows: 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\  After data reduction, make a final copy of the reflections) def Literal                                                                                                                                                                                                                               
/litstring 
( \\  and STORE THEM IN THE .DSC FILE:) def Literal                                                                                                                                                                                                                                                         
/litstring 
( \\LIST 6) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( READ TYPE=COPY) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/secttext (Compressed reflection data) def Section                                                                                                                                                                                                                                                          
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
CRYSTALS can produce files containing reflections is a 'compressed' format. This might be useful for
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
archiving data. The compressed data is headed by the correct information for its reinput. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
The file contains information for h, k, l, \/FO\/ or \/FOT\/, RATIO\/JCODE and elements. For each KL pair,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   22 def
/textstring (
the K value is given for this group of reflections, then the L value for the group, followed by the H and \/FO\/
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
and other values for the first reflection, the H \/FO\/ and other values for the second reflection, and so on,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
finishing with 512, which is the terminator for this KL pair. This pattern is repeated for all the KL pairs, the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
terminator for the last KL pair being -512, and indicates the end of the reflection list. Take care if you try to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
edit these files, and note that K and L are the two constant indices for each group, while H changes most
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
rapidly. 
) def
Write
Blank
Blank
/secttext (Intensity Data - HKLI) def Section                                                                                                                                                                                                                                                               
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
Raw intensity data require more processing than F or Fsq values. The instruction '\\HKLI' is related to
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
'\\LIST 6', but has different default coefficients and additional directives for geometrical corrections. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\HKLI) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( READ NCOEFFICIENT= TYPE= F'S= NGROUP= UNIT= CHECK=) def Literal                                                                                                                                                                                                                                           
/litstring 
( INPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)= .  .) def Literal                                                                                                                                                                                                                                               
/litstring 
( STORE NCOEFFICIENT= MEDIUM= APPEND=) def Literal                                                                                                                                                                                                                                                          
/litstring 
( OUTPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)=  .  .) def Literal                                                                                                                                                                                                                                             
/litstring 
( FORMAT EXPRESSION=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( CORRECTIONS NSCALE NFACTOR) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( FACTORS COEFFICIENT\(1\)= COEFFICIENT\(2\)=  .  .) def Literal                                                                                                                                                                                                                                            
/litstring 
( ABSORPTION PRINT= PHI= THETA= TUBE= PLATE=) def Literal                                                                                                                                                                                                                                                   
/litstring 
( PHI NPHIVALUES= NPHICURVES=) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( PHIVALUES PHI= .........) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( PHIHKLI H= K= L= I[MAX]=) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( PHICURVE I= .........) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( THETA NTHETAVALUES=) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( THETAVALUES THETA=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( THETACURVE CORRECTION= ........) def Literal                                                                                                                                                                                                                                                              
/litstring 
( TUBE NOTHING OMEGA= CHI= PHI= KAPPA= MU=A[MAX]=) def Literal                                                                                                                                                                                                                                              
/litstring 
( PLATE NOTHING OMEGA= CHI= PHI= KAPPA= MU=A[MAX]=) def Literal                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\  The OPEN command connects the reflection file:) def Literal                                                                                                                                                                                                                                           
/litstring 
( \\OPEN HKLI REFLECT.DAT) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( \\  The HKLI instruction reads the data in:) def Literal                                                                                                                                                                                                                                                  
/litstring 
( \\HKLI) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( \\  There are 12 items to read:) def Literal                                                                                                                                                                                                                                                              
/litstring 
( READ NCOEF=12 FORMAT=FIXED UNIT=HKLI F'S=FSQ CHECK=NO) def Literal                                                                                                                                                                                                                                        
/litstring 
( \\  This is what they are:) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( INPUT H K L \/FO\/ SIGMA\(\/FO\/\) JCODE SERIAL BATCH THETA PHI OMEGA KAPPA) def Literal                                                                                                                                                                                                                  
/litstring 
( \\  And this is their format:) def Literal                                                                                                                                                                                                                                                                
/litstring 
( FORMAT \(5X,3F4.0,F9.0,F7.0,F4.0,F9.0,F4.0,4F7.2\)) def Literal                                                                                                                                                                                                                                           
/litstring 
( \\  We only want to store six of them:) def Literal                                                                                                                                                                                                                                                       
/litstring 
( STORE NCOEF=6) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( \\  Specifically, these ones:) def Literal                                                                                                                                                                                                                                                                
/litstring 
( OUTPUT INDICES \/FO\/ BATCH RATIO\/JCODE SIGMA\(\/FO\/\) CORRECTIONS SERIAL) def Literal                                                                                                                                                                                                                  
/litstring 
( \\  Some absorption corrections have been measured:) def Literal                                                                                                                                                                                                                                          
/litstring 
( ABSORPTION PHI=YES  THETA=YES PRINT=NONE) def Literal                                                                                                                                                                                                                                                     
/litstring 
( \\  Here is the theta dependent absorption curve:) def Literal                                                                                                                                                                                                                                            
/litstring 
( THETA 16) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( THETAVALUES) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( CONT 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75) def Literal                                                                                                                                                                                                                                          
/litstring 
( THETACURVE) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( CONT 3.61  3.60  3.58  3.54  3.50  3.44  3.37  3.30) def Literal                                                                                                                                                                                                                                          
/litstring 
( CONT 3.23  3.16  3.09  3.02  2.96  2.91  2.86  2.82) def Literal                                                                                                                                                                                                                                          
/litstring 
( \\  And here is one azimuthal absorption curve containing 26 points:) def Literal                                                                                                                                                                                                                         
/litstring 
( PHI 26  1) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( PHIVALUES) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( CONT   6  16  21  26  31  36  41  61  66  76) def Literal                                                                                                                                                                                                                                                 
/litstring 
( CONT  81  86  91  96 111 121 131 136 141 146) def Literal                                                                                                                                                                                                                                                 
/litstring 
( CONT 151 156 161 166 171 176) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( \\  This is the reflection we used for the scan:) def Literal                                                                                                                                                                                                                                             
/litstring 
( PHIHKLI    -3   -1    0    28392) def Literal                                                                                                                                                                                                                                                             
/litstring 
( PHICURVE) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( CONT    26887   25377   24608   23990   23445   23049) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT    22867   22801   22782   22937   23104   23368) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT    23713   24129   25669   26836   27892   28250) def Literal                                                                                                                                                                                                                                        
Newpage
/litstring 
( CONT    28291   28256   28101   28009   28204   28373) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT    28392   28203) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( \\  All done. Close the hkl file.) def Literal                                                                                                                                                                                                                                                            
/litstring 
( \\CLOSE HKLI) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
In the following description, for items defined under LIST 6 above only the default value will be given. 
) def
Write
Blank
Blank
/left leftmargin def 
/instr (\\HKLI) def Instruction                                                                                                                                                                                                                                                                             
Blank
/left leftmargin indent add def 
/instr (READ NCOEFFICIENT= TYPE= F'S= NGROUP= UNIT= CHECK=) def Instruction                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive is the same as the READ directive in \\LIST 6 above, except that the following
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
parameters have different default values: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( NCOEFFICIENT= default value is 12) def Literal                                                                                                                                                                                                                                                            
/litstring 
( TYPE= default value is FIXED) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( F'S= default value is FSQ) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( NGROUP= default value is 1) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( UNIT= default value is HKLI) def Literal                                                                                                                                                                                                                                                                  
LitBlank
Blank
/left leftmargin indent add def 
/instr (INPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)= .  .) def Instruction                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive defines the coefficients that are to be read in. The number of coefficients is given by the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
NCOEFFICIENT parameter above, or its default value. 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The default input coefficients are \(i.e. for RC93 output\): 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      H K L \/FO\/ SIGMA\(\/FO\/\) JCODE SERIAL BATCH THETA PHI OMEGA KAPPA) def Literal                                                                                                                                                                                                                   
LitBlank
Blank
/left leftmargin indent add def 
/instr (STORE NCOEFFICIENT= MEDIUM= APPEND=) def Instruction                                                                                                                                                                                                                                                
/left leftmargin indent add indent add def
/instr (NCOEFFICIENT=) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of coefficients that will appear on the OUTPUT directive. The default is 9. 
) def
Write
/left leftmargin indent add indent add def
/instr (MEDIUM=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
The default value is 'FILE'. Since the reflections will be much changed during data reduction
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\(section DATAREDUC \), the intermediate storage is usually a scratch serial file. 
) def
Write
/left leftmargin indent add indent add def
/instr (APPEND=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default value is 'NO'. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (OUTPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)= .  .) def Instruction                                                                                                                                                                                                                                    
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The default coefficients are: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      INDICES \/FO\/ SQRTW \/FC\/ BATCH\/PHASE RATIO\/JCODE SIGMA\(\/FO\/\)) def Literal                                                                                                                                                                                                                   
/litstring 
(      CORRECTIONS ELEMENTS) def Literal                                                                                                                                                                                                                                                                    
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Note that H, K, and L are compressed into one key: 'INDICES'. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (FORMAT EXPRESSION=) def Instruction                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is only valid if the TYPE parameter on the READ directive is FIXED. 
) def
Write
/left leftmargin indent add indent add def
/instr (EXPRESSION=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If the diffractometer type indicated in LIST 13 \(section LIST13 \) is CAD4, the default corresponds
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
to RC93 or RC85 output, otherwise an expression must be given. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(          e.g. \(5X,3F4.0,F9.0,F7.0,F4.0,F9.0,F4.0,4F7.2\)) def Literal                                                                                                                                                                                                                                    
LitBlank
Blank
Blank
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Directives found in HKLI commands, but not in LIST 6 commands are:# 
) def
Write
/left leftmargin indent add def 
/instr (CORRECTIONS NSCALE= NFACTOR=) def Instruction                                                                                                                                                                                                                                                       
/left leftmargin indent add indent add def
/instr (NSCALE=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
Set to 1 or 2 to select the first or second scale factor in LIST 27 \(see section LIST27 \).# The default
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
is 2. 
) def
Write
/left leftmargin indent add indent add def
/instr (NFACTOR=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
Up to three correction per reflection to be applied to the input observations can be included in the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
input file. This keyword specifies how many to use.# The default is 0. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (FACTORS COEFFICIENT\(1\)= COEFFICIENT\(2\)= .  .) def Instruction                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
The permitted coefficients are FACTOR1, FACTOR2 and FACTOR3. These are applied to the input
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
observation before any other action \(including square rooting if requested\) is performed. 
) def
Write
/left leftmargin indent add def 
Newpage
/instr (ABSORPTION PRINT= PHI= THETA= TUBE= PLATE=) def Instruction                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive controls approximate absorption corrections to be applied during input. They are only
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
suitable if the diffractometer used is one of those permitted in LIST 13 \(section LIST13 \). 
) def
Write
/left leftmargin indent add indent add def
/instr (PRINT=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Permitted levels are 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FULL                  Two lines of information per reflection) def Literal                                                                                                                                                                                                                           
/litstring 
(      NONE    - Default     No output is produced) def Literal                                                                                                                                                                                                                                             
/litstring 
(      PARTIAL -             Summary for each reflection) def Literal                                                                                                                                                                                                                                       
LitBlank
/left leftmargin indent add indent add def
/instr (PHI=) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO      - Default) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If YES, then phi \(azimuthal scan\) data must follow. 
) def
Write
/left leftmargin indent add indent add def
/instr (THETA=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO      - Default) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If YES, then a theta dependent correction curve must follow. 
) def
Write
/left leftmargin indent add indent add def
/instr (TUBE=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO      - Default) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If YES, then orientation angles for the tube must follow. 
) def
Write
/left leftmargin indent add indent add def
/instr (PLATE=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO      - Default) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If YES, then orientation angles for the plate must follow. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (PHI NPHIVALUES= NPHICURVES=) def Instruction                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
If phi has been set to 'YES' above, this directive sets up input and computation of azimuthal scan
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
absorption corrections, by the method of North, Phillips and Mathews, Acta Cryst., A24, 351 \(1968\). 
) def
WriteCalc
/textstring (absorption corrections, by the method of North, Phillips and Mathews, Acta Cryst., ) def WritePart
/textstring (A24, ) def
WriteBold
/textstring (351 \(1968\). ) def WritePart
/ypos ypos linegap sub def
/left leftmargin indent add indent add def
/instr (NPHIVALUES=) def Instruction                                                                                                                                                                                                                                                                        
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Number of sampling points on the phi curve. These need not be equally spaced 
) def
Write
/left leftmargin indent add indent add def
/instr (NPHICURVES=) def Instruction                                                                                                                                                                                                                                                                        
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Number of phi curves that will be entered after this directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PHIVALUES PHI= .....) def Instruction                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The 'Nphivalue' phi angles of the points on the absorption curve. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PHIHKLI H= K= L= I[MAX]=) def Instruction                                                                                                                                                                                                                                                           
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The h,k,l and Imax values for the following 'Nphicurve' phi profiles, in the same order as the profiles. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PHICURVE I= .....) def Instruction                                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
The 'Nphivalue' intensity values for the profile at the phi values given on the Phivalues directive.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
There is a Phicurve corresponding to each PHIHKLI directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (THETA NTHETAVALUES=) def Instruction                                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
If theta has been set to 'YES' above this directive sets up the input for and computation of a theta
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
dependent absorption correction. Except when the data has been corrected by a proper analytical
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
correction, a theta dependent correction is ALWAYS recommended, since neither a phi scan,
) def
/last 0 def 
WriteCalc
/textstring (correction, a theta dependent correction is ) def WritePart
/textstring (ALWAYS ) def
WriteBold
/textstring (recommended, since neither a phi scan,) def WritePart
/ypos ypos linegap sub def
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
multi-scan nor DIFABS \(section DIFABS \) will make a good theta approximation. See Int Tab, Vol II,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
p295 and 303 for suitable profiles. 
) def
Write
/left leftmargin indent add indent add def
/instr (NTHETAVALUES=) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of sampling points on the theta curve. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (THETAVALUES THETA= .....) def Instruction                                                                                                                                                                                                                                                           
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The Nthetavalues at which the curve is sampled 
) def
Write
Blank
/left leftmargin indent add def 
/instr (THETACURVE CORRECTION= ......) def Instruction                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The Nthetavalue values of the correction factor profile. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TUBE NOTHING OMEGA= CHI= PHI= KAPPA= MU A[MAX]) def Instruction                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
If TUBE has been set to 'YES' above, this directive sets up the correction for a sample in a tube, or for
) def
/last 0 def 
Write
Newpage
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
an acicular crystal steeply inclined to the phi axis. See J. Appl. Cryst, 8. 491, 1975. 'NOTHING' is a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
place-holder for internal workings. 
) def
Write
/left leftmargin indent add indent add def
/instr (OMEGA= CHI= PHI= KAPPA=) def Instruction                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
These are the settings needed to bring the tube axis into the equatorial plane and perpendicular to the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
incident X-ray beam. Only one of Chi and Kappa may be given. 
) def
Write
/left leftmargin indent add indent add def
/instr (MU=) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The product of Mu and the thickness of the tube wall. 
) def
Write
/left leftmargin indent add indent add def
/instr (A[MAX]) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The maximum permitted correction. Values greater than A[max] generate a warning. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PLATE NOTHING OMEGA= CHI= PHI= KAPPA= MU A[MAX]) def Instruction                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
If PLATE has been set to 'YES' above, this directive sets up the correction for an extended plate-like
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
sample. See J. Appl. Cryst, 8. 491, 1975. 'NOTHING' is a place-holder for internal workings. 
) def
Write
/left leftmargin indent add indent add def
/instr (OMEGA= CHI= PHI= KAPPA=) def Instruction                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
These are the settings needed to bring the plate normal into the equatorial plane and perpendicular to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the incident X-ray beam. Only one of Chi and Kappa may be given. 
) def
Write
/left leftmargin indent add indent add def
/instr (MU=) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The product of Mu and the plate thickness. 
) def
Write
/left leftmargin indent add indent add def
/instr (A[MAX]) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The maximum permitted correction. Values greater than A[max] generate a warning. 
) def
Write
Blank
Blank
/secttext (Intensity Decay Curves  \\LIST 27) def Section                                                                                                                                                                                                                                                   
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 27) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( READ NSCALE=) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SCALE SCALENUMBER= RAWSCALE= SMOOTHSCALE= SERIAL=) def Literal                                                                                                                                                                                                                                            
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
If each reflection has been assigned a serial number \(or some other incrementing value, such as total
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
X-ray exposure time\) then CRYSTALS can apply a correction which is linked to this value. The corrections,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
on the scale of Fsq, are held in LIST 27. Two correction factors can be stored, but only one used. For
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
example, these can be the actual corrections computed from the decay of the standard reflections, and those
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
obtained from a 3-point smoothing of the same correction data. The applied scale factor is obtained by
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
interpolating between those given scale factors with serial numbers above and below the serial number of the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
current reflection. If there is a dramatic change in scale \(for example due to remeasurement of some very
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
strong reflections with attenuated X-rays\), it is important not to interpolate over this discontinuity. To
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
achieve this, a dummy scale factor is inserted at this point with scale values the same as the current scales,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
but with the same serial number as the first scales after the discontinuity - for example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 27) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( READ NSCALE=16) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( SCALE   1      1.000  1.000    1) def Literal                                                                                                                                                                                                                                                             
/litstring 
( SCALE   2      1.066  1.066    4) def Literal                                                                                                                                                                                                                                                             
/litstring 
( SCALE   3      1.074  1.053   57) def Literal                                                                                                                                                                                                                                                             
/litstring 
( SCALE   4      0.997  1.018   83) def Literal                                                                                                                                                                                                                                                             
/litstring 
( SCALE   5      1.003  1.003  564) def Literal                                                                                                                                                                                                                                                             
/litstring 
( SCALE   6      0.370  0.370  564) def Literal                                                                                                                                                                                                                                                             
/litstring 
( SCALE   7      0.372  0.371  617) def Literal                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\LIST 27) def Instruction                                                                                                                                                                                                                                                                          
Blank
/left leftmargin indent add def 
/instr (READ NSCALE=) def Instruction                                                                                                                                                                                                                                                                       
/left leftmargin indent add indent add def
/instr (NSCALE=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of SCALE directives to follow. There is no default value for this parameter. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SCALE SCALENUMBER= RAWSCALE= SMOOTHSCALE= SERIALNUMBER=) def Instruction                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is repeated once for each scale factor that is to be read in. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALENUMBER=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter indicates the number of the scale factor, starting from one. There is no default for
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
this parameter, which currently is not used. 
) def
Write
/left leftmargin indent add indent add def
/instr (RAWSCALE=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter gives the initial scale factor, computed directly from the intensities of the standard
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
reflections.# There is no default. 
) def
Write
/left leftmargin indent add indent add def
/instr (SMOOTHSCALE=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter gives the scale factor after the raw scale factors have been smoothed, so that a
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
continuous curve is fitted to all the data.# There is no default. 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIALNUMBER=) def Instruction                                                                                                                                                                                                                                                                      
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter gives the serial number of the first standard reflection contributing to this scale. The
) def
/last 0 def 
Write
Newpage
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
data reduction programs use the SERIAL to locate the correct scales to use for a given reflection.#
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
There is no default. 
) def
Write
Blank
Blank
/secttext (Printing the decay curve) def Section                                                                                                                                                                                                                                                            
Blank
/left leftmargin def 
/instr (\\PRINT 27) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This command prints the decay curve. There is no command to punch LIST 27. 
) def
Write
Blank
Blank
/secttext (Data Reduction - Lp) def Section                                                                                                                                                                                                                                                                 
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
This command causes the Lp correction to be calculated for each reflection. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
The diffraction geometry, wavelength, etc. are taken from LIST 13 \(section LIST13 \). If LIST 13 is input
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
incorrectly, or has to be generated by the system, the message 'illegal diffraction geometry flag' will be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
output and the job terminated. If the user has forced the storage of Fsq values in \\HKLI, it is necessary to
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
indicate this to the Lp correction. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LP) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( STORE MEDIUM= F'S=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\  Apply an LP correction for the geometry stored) def Literal                                                                                                                                                                                                                                           
/litstring 
( \\  in List 13.) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( \\LP) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/instr (\\LP) def Instruction                                                                                                                                                                                                                                                                               
Blank
/left leftmargin indent add def 
/instr (STORE MEDIUM= F'S=) def Instruction                                                                                                                                                                                                                                                                 
/left leftmargin indent add indent add def
/instr (MEDIUM=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Determines the output medium. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FILE              A serial file) def Literal                                                                                                                                                                                                                                                         
/litstring 
(      INPUT - Default   The same as the input medium) def Literal                                                                                                                                                                                                                                          
/litstring 
(      DISC              The .DSC file.) def Literal                                                                                                                                                                                                                                                        
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default output medium is the same as te input medium - usually a serial file. 
) def
Write
/left leftmargin indent add indent add def
/instr (F'S=) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FO      -      Default) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      FSQ            Indicating that square roots were not taken at) def Literal                                                                                                                                                                                                                           
/litstring 
(                     input time.) def Literal                                                                                                                                                                                                                                                              
LitBlank
Blank
/secttext (Systematic absence removal - \\SYSTEMATIC) def Section                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\SYSTEMATIC INPUTLIST=) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( STORE MEDIUM= F'S= NEWINDICES=  FRIEDEL=) def Literal                                                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\  Remove systematic absences and move each hkl index) def Literal                                                                                                                                                                                                                                       
/litstring 
( \\  by symmetry so that they all lie in the same part of) def Literal                                                                                                                                                                                                                                     
/litstring 
( \\  the reciprocal lattice:) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( \\SYST) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
This routine uses the symmetry operators in LIST 2 \(section LIST02 \) to identify systematic absences,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
which are listed and rejected. It can also use the symmetry operators to transform indices to that the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
reflections fall into a unique part of the reciprocal lattice. The unique set is bounded by the maximum range
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
in 'l', maximum range of 'k' given the 'l' range, and maximum range of 'h', given the 'k,l' range. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
Friedel's Law may be invoked, depending on the flag in LIST 13 \(section LIST13 \). It is important NOT
) def
/last 0 def 
WriteCalc
/textstring (Friedel's Law may be invoked, depending on the flag in LIST 13 \(section LIST13 \). It is important ) def WritePart
/textstring (NOT ) def
WriteBold
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
to use Friedel's Law for structures which have strong anomalous scatterers, since reflections related by
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
Friedel's law are not equivalent in this case and should not be merged together. Similarly, if orientation
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
dependent corrections are to be made \(_i\{e.g. DIFABS\),original indices should be preserved. Note that in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
this case, only exactly equivalent reflections will be merged, and care must be taken when computing
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Fourier maps. See the sections on Fourier maps, FOURIER and DIFABS DIFABS . 
) def
Write
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
If FRIEDEL is set to "YES", Friedel's law is applied whatever the space group. A flag is set in the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
'phase' slot for each reflcetion to indicate if the law was invoked or not. If the data is then sorted byt not
) def
/last 0 def 
Write
Newpage
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
merged, Friedel pairs will be adjacent and flagged. Use by the function "\\TON" for evaluating absolute
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
configuration. 
) def
Write
Blank
Blank
/left leftmargin def 
/instr (\\SYSTEMATIC) def Instruction                                                                                                                                                                                                                                                                       
Blank
/left leftmargin indent add def 
/instr (SYSTEMATIC INPUTLIST=) def Instruction                                                                                                                                                                                                                                                              
Blank
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
6 OR 7 
) def
Write
Blank
/left leftmargin indent add def 
/instr (STORE MEDIUM= F'S= NEWINDICES=) def Instruction                                                                                                                                                                                                                                                     
/left leftmargin indent add indent add def
/instr (MEDIUM=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Determines the output medium. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FILE              A serial file) def Literal                                                                                                                                                                                                                                                         
/litstring 
(      INPUT - Default   The same as the input medium) def Literal                                                                                                                                                                                                                                          
/litstring 
(      DISC              The .DSC file.) def Literal                                                                                                                                                                                                                                                        
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default output medium is the same as the input medium - usually a serial file. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (F'S=) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FO      -      Default) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      FSQ            Indicating that square roots were not taken at) def Literal                                                                                                                                                                                                                           
/litstring 
(                     input time.) def Literal                                                                                                                                                                                                                                                              
LitBlank
Blank
/left leftmargin indent add indent add def
/instr (FRIEDEL=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      No      -      Default) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      YES            Indicating that Friedels law should be applied) def Literal                                                                                                                                                                                                                           
/litstring 
(                     whatever the space group.) def Literal                                                                                                                                                                                                                                                
LitBlank
/left leftmargin indent add indent add def
/instr (NEWINDICES=) def Instruction                                                                                                                                                                                                                                                                        
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Determines whether new indices are computed. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      YES  -  Default - Permits transformation of indices.) def Literal                                                                                                                                                                                                                                    
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
Blank
/secttext (Sorting of the reflection data  -  \\SORT) def Section                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\SORT INPUTLIST=) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( STORE MEDIUM=) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\  Sort reflections into order by L, then K, then H:) def Literal                                                                                                                                                                                                                                        
/litstring 
( \\SORT) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
This routine sorts the data so that the reflections are placed in a predetermined order, in which reflections
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
with the same indices are adjacent in the list. Upon output, the reflections are arranged so that they are in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
groups of constant L, starting with the group with the smallest L value. Within any L group, the reflections
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
are ordered in groups of constant K, starting with the group with the smallest K value. Within each group of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
constant K and L, the reflections are arranged with the smallest H value first and the largest last in ascending
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
order. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
The method of sorting is a multi-pass tree sort, in which as many reflections as possible are held in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
memory during each pass. If all the reflections with a given value of L cannot be in memory at the same
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
time, the program will terminate in error. 
) def
Write
Blank
/left leftmargin def 
/instr (\\SORT) def Instruction                                                                                                                                                                                                                                                                             
Blank
/left leftmargin indent add def 
/instr (STORE MEDIUM) def Instruction                                                                                                                                                                                                                                                                       
/left leftmargin indent add indent add def
/instr (MEDIUM=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Determines the output medium. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FILE              A serial file) def Literal                                                                                                                                                                                                                                                         
/litstring 
(      INPUT - Default   The same as the input medium) def Literal                                                                                                                                                                                                                                          
/litstring 
(      DISC              The .DSC file.) def Literal                                                                                                                                                                                                                                                        
LitBlank
Newpage
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default output medium is the same as the input medium - usually a serial file. 
) def
Write
Blank
Blank
/secttext (Merging equivalent reflections  -  \\MERGE) def Section                                                                                                                                                                                                                                          
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\MERGE INPUT= TWINNED=) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( STORE MEDIUM=) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( REFLECTIONS NJCODE= LIST= LEVEL= F'S=) def Literal                                                                                                                                                                                                                                                        
/litstring 
( JCODE NUMBER= VALUE=) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( REJECT RATIO= SIGMA=) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( WEIGHT SCHEME= NPARAMETERS= NCYCLE=) def Literal                                                                                                                                                                                                                                                          
/litstring 
( PARAMETERS P .....) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\MERGE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( WEIGHT SCHEME=2 NPARAM=6) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( PARAMETERS .5  3.0  1.0  2.0  .01 .00001) def Literal                                                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
The merge routine takes a list of reflections and combines groups of adjacent reflections with exactly the
) def
/last 0 def 
WriteCalc
/textstring (The merge routine takes a list of reflections and combines groups of adjacent reflections with ) def WritePart
/textstring (exactly ) def
WriteItalic
/textstring (the) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
same indices to produce a single mean structure amplitude. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
\\SYST \(section SYSTEMATIC \) and \\SORT \(section SORT \) produce a suitable list, and if either of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
them have been omitted, it is extremely likely that the list of reflections produced by the merge process will
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
contain duplicated entries for certain reflections. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
It is possible to combine equivalent reflections in several different ways, depending upon how each
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
individual contributor is weighted when the mean is computed. Several different weighting schemes are
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
provided, and these are described in the next section \(the WEIGHT directive\). 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
The JCODE key in the list of reflections may be input from some diffractometers \(e.g. a CAD4\) to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
indicate that the value may be inaccurate. Reflections which have JCODES that differ from unity are thought
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
to be inaccurate and can be down-weighted or eliminated during the merge process \(the JCODE directive\).
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Note that JCODES MUST be positive and less than 10. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
Although under normal circumstances LIST 6 \(reflections\) contains \/Fo\/ data rather than \/Fo\/**2 data, the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
calculations performed during the merge are done on the scale of \/Fo\/**2. This means that r-values are
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
computed which refer to \/Fo\/**2, and that reflections can be rejected on the basis of the ratio of \/Fo\/**2 to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
its standard deviation. If for some reason the LIST 6 contains \/Fo\/**2 data rather than the normal \/Fo\/ data,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
it is necessary to use the "F's" parameter of the "REFLECTIONS" directive to inform the system of this fact. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
During the merge process, the system calculates and then prints a set of merging r-values, which are
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
defined as follows : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( R = 100*SUM[ Sd\(i\) ]\/SUM[ M\(i\) ],) def Literal                                                                                                                                                                                                                                                       
/litstring 
(             where 'i' runs over all reflections.) def Literal                                                                                                                                                                                                                                             
Blank
Blank
/litstring 
( Sd\(i\) = SUM[ <Fsq\(i\)> - Fsq\(j\) ],) def Literal                                                                                                                                                                                                                                                      
/litstring 
(             summed over 'j' contributors.) def Literal                                                                                                                                                                                                                                                    
Blank
/litstring 
( and) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( M\(i\) = SUM[ <Fsq\(i\)> ],) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(            summed 'j' times for 'j' contributors.) def Literal                                                                                                                                                                                                                                            
LitBlank
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
The sum variable 'i' runs over all the reflections produced by the merge process which have more than one
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
contributor. The sum variable 'j' runs over all the contributors for each reflection produced by the merge
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
process. <Fsq\(I\)> is the mean value for the reflection 'i' , while Fsq\(j\) is the observed value of Fsq for the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
contributor 'j'. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
If the crystal is twinned, this will affect the merge. See chapter 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
If the data is in Batches with different BATCH scale factors, this will affect the merge. 
) def
Write
Blank
/left leftmargin def 
/instr (WEIGHTING SCHEMES FOR THE DATA MERGE) def Instruction                                                                                                                                                                                                                                               
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
At present there are three different weighting schemes available for merging equivalent reflections. These
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
are : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      1.      Each reflection is given equal weight \(unit weights\).) def Literal                                                                                                                                                                                                                         
/litstring 
(      2.      Weights based on a Gaussian distribution.) def Literal                                                                                                                                                                                                                                       
/litstring 
(      3.      W\(i\) = 1.0\/Sigma\(i\)**2  for each reflection.) def Literal                                                                                                                                                                                                                               
LitBlank
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
Unit and statistical weights \(schemes 1 and 3\) are more or less equivalent unless some reflections have
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
been remeasured under very different regimes \( e.g. with an attenuator set, mA turned down, different
) def
/last 0 def 
WriteCalc
/textstring (been remeasured under very different regimes \( ) def WritePart
/textstring (e.g. ) def
WriteItalic
/textstring (with an attenuator set, mA turned down, different) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
crystal\) 
) def
Write
/left  128 def /ipflag    1 def /numspace   15 def
/textstring (
Scheme 2 is designed to discriminate against outliers, i.e. reflections lying farther from the mean than
) def
/last 0 def 
WriteCalc
/textstring (Scheme 2 is designed to discriminate against outliers, ) def WritePart
/textstring (i.e. ) def
WriteItalic
/textstring (reflections lying farther from the mean than) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
might be expected. For this scheme, a weighted mean value of Fsq is determined iteratively, starting from
) def
/last 0 def 
Write
Newpage
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
unit weights. At each iteration, the weights are recomputed to discriminate against outliers and the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
contributing reflections are given a new weight w\(i\) given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      w\(i\) = exp [ \(-log\(a\) * q\(i\)**2\)\/\(b**2 * e\(i\)**2\) ]) def Literal                                                                                                                                                                                                                        
Blank
/litstring 
( Where) def Literal                                                                                                                                                                                                                                                                                        
Blank
/litstring 
(     q\(i\)  is the deviation of the particular Fsq\(i\) from the current average.) def Literal                                                                                                                                                                                                            
/litstring 
(     e\(i\)  is a predicted mean deviation of the reflection 'i' from the) def Literal                                                                                                                                                                                                                     
/litstring 
(           current mean and is given by a function similar to that used) def Literal                                                                                                                                                                                                                       
/litstring 
(           in Least Squares :) def Literal                                                                                                                                                                                                                                                                 
LitBlank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
e = c + d*Sig\(Fsq\) + g*Sig\(Fsq\)*\/Fo\/ + h*Sig\(Fsq\)*Fsq 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
a,b,c,d,g,h are 6 input parameters provided by the user 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
'a' and 'b' define the Gaussian distribution. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
'a' is the weight to be given to a reflection which has a deviation given by 'q\(i\) = b*e\(i\)'. 
) def
Write
Blank
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
Suggested values of 'a' and 'b' are 0.5 and 3.0 respectively, so that if for example, 'e\(i\) = 3*Sig\(Fsq\)'
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
\(d=3, c=g=h=0\), a deviation q\(i\) of 6*Sig*fsq will assign a reflection a weight of 0.5. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
'c' Provides the bias necessary to allow for failures in the counting statistics at low count rates. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
'd' is a scaling constant. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
'g' and 'h' allow for the increased dispersion of strong reflections. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( For a conventional diffractometer, suggested values for the parameters are :) def Literal                                                                                                                                                                                                                 
Blank
/litstring 
(      a = .5      b=3.0      c=1.0      d=2.0      g=.01      h=.00001) def Literal                                                                                                                                                                                                                        
LitBlank
/left  128 def /ipflag    1 def /numspace   15 def
/textstring (
It is recommended that the Gaussian scheme be used, as it discriminates against zero or widely
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
dispersed intensities very efficiently. 
) def
Write
Blank
/left leftmargin def 
/instr (Standard deviations produced by the merge) def Instruction                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
After the equivalent reflections have been merged two different standard deviations are computed and can
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
be output : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( SIGMA1 = Sqrt \(sum [ w\(i\)*q\(i\)**2 ] \/ sum [ w\(i\) ]\)) def Literal                                                                                                                                                                                                                                 
/litstring 
(             that is, the weighted r.m.s. deviation.) def Literal                                                                                                                                                                                                                                          
Blank
/litstring 
( SIGMA2 = Sqrt \(sum [ w\(i\)*s\(i\)**2 ] \/ sum [ w\(i\) ]\)) def Literal                                                                                                                                                                                                                                 
/litstring 
(             that is, the weighted standard deviation.) def Literal                                                                                                                                                                                                                                        
LitBlank
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
Either of these two standard deviations can be selected as an estimate of Sigma\(Fsq\), and perhaps be
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
converted to a Least Squares weight. If a reflection is measured very many times, SIGMA1 should be
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
similar to SIGMA2. It is almost always much greater. 
) def
Write
Blank
/left leftmargin def 
/instr (\\MERGE) def Instruction                                                                                                                                                                                                                                                                            
Blank
/left leftmargin indent add def 
/instr (MERGE=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin indent add indent add def
/instr (INPUT=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Either 6 or 7. Default is 6. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (TWINNED=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(  NO      Treat data as un-twinned) def Literal                                                                                                                                                                                                                                                            
/litstring 
(  LIST13  Treat data according to list 13) def Literal                                                                                                                                                                                                                                                     
/litstring 
(  YES     Treat data as twinned) def Literal                                                                                                                                                                                                                                                               
LitBlank
Blank
/left leftmargin indent add def 
/instr (STORE MEDIUM=) def Instruction                                                                                                                                                                                                                                                                      
/left leftmargin indent add indent add def
/instr (MEDIUM=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Determines the output medium. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FILE              A serial file) def Literal                                                                                                                                                                                                                                                         
/litstring 
(      INPUT - Default   The same as the input medium) def Literal                                                                                                                                                                                                                                          
/litstring 
(      DISC              The .DSC file.) def Literal                                                                                                                                                                                                                                                        
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default output medium is the same as the input medium - usually a serial file. 
) def
Write
/left leftmargin indent add def 
Newpage
/instr (REFLECTIONS NJCODE= LIST= LEVEL= F'S=) def Instruction                                                                                                                                                                                                                                              
/left leftmargin indent add indent add def
/instr (NJCODE=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Specifies the number of JCODE directives to follow - default zero. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Determines the amount of information printed during the merge process. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OFF) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      MEDIUM  -  Default value) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If LIST is 'HIGH' , all Fsq are listed with their contributors and their deviations from the computed
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
mean. The default value of MEDIUM indicates that the merged Fsq are listed with the contributors
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
and their deviations from the computed mean if the r.m.s. deviation exceeds LEVEL*\(mean standard
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
deviation\). HIGH is equivalent to MEDIUM with LEVEL set at zero. 
) def
Write
/left leftmargin indent add indent add def
/instr (LEVEL=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter specifies the r.m.s. deviation level above which contributors are printed if LIST is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
equal to MEDIUM . They are printed if sigma1 exceeds level*sigma2. The default value for this
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter is 3. 
) def
Write
/left leftmargin indent add indent add def
/instr (F'S=) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FO      -      Default) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      FSQ            Indicating that square roots were not taken at) def Literal                                                                                                                                                                                                                           
/litstring 
(                     input time.) def Literal                                                                                                                                                                                                                                                              
LitBlank
Blank
/left leftmargin indent add def 
/instr (JCODE NUMBER= VALUE=) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive allows reflections whose JCODE key differs from unity to be down-weighted or
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
eliminated from the merge. It is repeated once for each JCODE that is read in. 
) def
Write
/left leftmargin indent add indent add def
/instr (NUMBER=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of the JCODE must be given. There is no default value for this parameter. 
) def
Write
/left leftmargin indent add indent add def
/instr (VALUE=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This is the absolute weight, associated with the JCODE number, that is given to the reflection. If this
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
parameter is omitted a default value of zero is assumed, indicating that the reflection is to be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
eliminated and not included in the merge at all. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REJECT RATIO= SIGMA=) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive causes reflections whose mean intensity is less than product of the ratio and sigma to be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
eliminated. 
) def
Write
/left leftmargin indent add indent add def
/instr (RATIO=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
The default value for this parameter is -10. Use LIST 28 \(section LIST28 \) to suppress the use of
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
reflections with RATIOs below a suitable threshold. 
) def
Write
/left leftmargin indent add indent add def
/instr (SIGMA=) def Instruction                                                                                                                                                                                                                                                                             
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      1) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      2  -  Default value) def Literal                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   22 def
/textstring (
If sigma is equal to 1 the e.s.d. is the weighted r.m.s. deviation. If sigma is equal to 2 the e.s.d. is the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
weighted standard deviation. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (WEIGHT SCHEME= NPARAMETERS= NCYCLE=) def Instruction                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive determines the weighting scheme to be used in merging equivalent reflections. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCHEME=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter determines which of the weighting schemes defined above is to be used in the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
merging of equivalent reflections, and must take one of the following values: 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      1  -  Default value \(unit weights\)) def Literal                                                                                                                                                                                                                                                    
/litstring 
(      2                   \(modified Gaussian\)) def Literal                                                                                                                                                                                                                                               
/litstring 
(      3                   \(statistical\)) def Literal                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If this parameter is omitted, unit weights are applied \(scheme=1\). 
) def
Write
/left leftmargin indent add indent add def
/instr (NPARAMETERS=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This must be set to the number of parameters required to define the weighting scheme, and thus the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
number of values on the PARAMETERS directive to follow. The default value for this parameter is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
zero, as schemes 1 and 3 require no parameters. 
) def
Write
/left leftmargin indent add indent add def
/instr (NCYCLE=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This parameter has a default value of 5 and is the number of cycles of refinement of the weighted
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
mean if scheme 2 is being used in the merge. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PARAMETERS P .....) def Instruction                                                                                                                                                                                                                                                                 
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive contains NPARAMETERS values. 
) def
Write
/left leftmargin indent add indent add def
/instr (P=) def Instruction                                                                                                                                                                                                                                                                                 
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
For weighting scheme 2, these parameters give the values 'a' to 'h' defined above, and describe the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
form of the Gaussian distribution. 
) def
Write
Blank
Blank
/secttext (Theta-dependent Absorption Correction  -  \\THETABS) def Section                                                                                                                                                                                                                                 
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\THETABS) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( THETA NTHETAVALUES=) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( THETAVALUES THETA=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( THETACURVE CORRECTION= ........) def Literal                                                                                                                                                                                                                                                              
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
For example 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\THETABS) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( THETA 16) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( THETAVALUES) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( CONT 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75) def Literal                                                                                                                                                                                                                                          
/litstring 
( THETACURVE) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( CONT 3.61  3.60  3.58  3.54  3.50  3.44  3.37  3.30) def Literal                                                                                                                                                                                                                                          
/litstring 
( CONT 3.23  3.16  3.09  3.02  2.96  2.91  2.86  2.82) def Literal                                                                                                                                                                                                                                          
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
Except when the data has been corrected by a proper analytical correction, a theta dependent correction is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
ALWAYS recommended, since neither a phi scan multi-scan nor DIFABS \(section DIFABS \) will make a
) def
/last 0 def 
WriteCalc
/textstring (ALWAYS ) def
WriteBold
/textstring (recommended, since neither a phi scan multi-scan nor DIFABS \(section DIFABS \) will make a) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
good theta approximation. See Int Tab, Vol II, p295 and 303 for suitable profiles. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (THETA NTHETAVALUES=) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
#KNTHETAVALUES=# The number of sampling points on the theta curve. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (THETAVALUES THETA= .....) def Instruction                                                                                                                                                                                                                                                           
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The Nthetavalues at which the curve is sampled 
) def
Write
Blank
/left leftmargin indent add def 
/instr (THETACURVE CORRECTION= ......) def Instruction                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The Nthetavalue values of the correction factor profile. 
) def
Write
Blank
Blank
Blank
/title (               ATOMIC AND STRUCTURAL PARAMETERS) def                                                                                                                                                                                                                                                
/banner (ATOMIC AND STRUCTURAL PARAMETERS) def                                                                                                                                                                                                                                                              
Newpage
/chaptext (Atomic And Structural Parameters) def                                                                                                                                                                                                                                                            
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
/secttext (Scope of the atomic and structural parameters Section) def Section                                                                                                                                                                                                                               
Blank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The areas covered are: 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Specifications of atoms and other parameters) def Literal                                                                                                                                                                                                                                                 
/litstring 
( Input of atoms and other parameters              - \\LIST 5) def Literal                                                                                                                                                                                                                                  
/litstring 
( Modification of lists 5 and 10 on the disc       - \\EDIT) def Literal                                                                                                                                                                                                                                    
/litstring 
( Conversion of temperature factors                - \\CONVERT) def Literal                                                                                                                                                                                                                                 
/litstring 
( Hydrogen placing                                 - \\HYDROGENS) def Literal                                                                                                                                                                                                                               
/litstring 
( Per-hydrogenation                                - \\PERHYDRO) def Literal                                                                                                                                                                                                                                
/litstring 
( Re-numbering hydrogen atoms                      - \\HNAME) def Literal                                                                                                                                                                                                                                   
/litstring 
( Regularisation of groups in LIST 5               - \\REGULARISE) def Literal                                                                                                                                                                                                                              
LitBlank
Blank
/secttext (Specifications of atoms and other parameters) def Section                                                                                                                                                                                                                                        
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
There is a consistent syntax thoughout CRYSTALS for refering to atoms and atomic parameters. This
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
was referred to briefly in Chapter 1, and will be defined more fully here. 
) def
Write
Blank
/left leftmargin def 
/instr (ATOM SPECIFICATION) def Instruction                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
There are three different but related ways of specifying an atom or a group of atoms. 
) def
Write
/left leftmargin indent add def 
/instr (TYPE\(SERIAL,S,L,TX,TY,TZ\)) def Instruction                                                                                                                                                                                                                                                        
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This specification defines one atom. The various parts of the expression are : 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The atom type, defined in Chapter 1 in the section on form-factors. 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIAL) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The serial number, in the range 1-9999 
) def
Write
/left leftmargin indent add indent add def
/instr (Checking of serial numbers) def Instruction                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Atoms of the same type are distinguished from one another by having different serial numbers.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
However, at no stage is a check made to ensure that there is not more than one atom in LIST 5
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
\(atomic parameters\) with the same type and serial number. If a routine is searching for an atom with
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
a given type and serial number, the first atom found will always be taken, and any subsequent atoms
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
with the same type and serial number will be ignored. 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
Serial numbers are considered to be different if they differ from each other by more than 0.0005. 
) def
Write
/left leftmargin indent add indent add def
/instr (S) def Instruction                                                                                                                                                                                                                                                                                  
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
'S' specifies a symmetry operator provided in the unit cell symmetry LIST \(LIST 2 - see section
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
LIST02 \). 'S' may take any value between '-NSYM' and '+NSYM', except zero, where 'NSYM' is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
the number of symmetry equivalent positions provided in LIST 2. if 'S' is less than zero, the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
coordinates of the atom stored in LIST 5 are negated \(i.e. inverted through a centre of symmetry at
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
the origin\) and then multiplied by the operator specified by the absolute value of 'S' to generate the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
new atomic coordinates. 'S' may be less than zero even if the space group is non-centrosymmetric \(
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
i.e. introduce a false centre\), but must not be greater than 'NSYM'. The default value for 'S' is '1',
) def
/last 0 def 
WriteCalc
/textstring (i.e. ) def
WriteItalic
/textstring (introduce a false centre\), but must not be greater than 'NSYM'. The default value for 'S' is '1',) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
specifying the first matrix in LIST 2, usually the unit matrix. 
) def
Write
/left leftmargin indent add indent add def
/instr (L) def Instruction                                                                                                                                                                                                                                                                                  
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
'L' specifies the non-primitive lattice translation that is to be added after the coordinates have been
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
modified by the operations given by 'S'. 'L' must not be greater than the number of allowed
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
non-primitive translations in the space group. The translations provided by 'L' depend on the lattice
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
type and are given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(          L=    1             2                3                4) def Literal                                                                                                                                                                                                                             
Blank
/litstring 
(      P       0,0,0) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      I       0,0,0      1\/2,1\/2,1\/2) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      R       0,0,0      1\/3,2\/3,2\/3      2\/3,1\/3,1\/3) def Literal                                                                                                                                                                                                                                   
/litstring 
(      F       0,0,0        0,1\/2,1\/2      1\/2, 0 ,1\/2      1\/2,1\/2,0) def Literal                                                                                                                                                                                                                    
/litstring 
(      A       0,0,0        0,1\/2,1\/2) def Literal                                                                                                                                                                                                                                                        
/litstring 
(      B       0,0,0      1\/2, 0 ,1\/2) def Literal                                                                                                                                                                                                                                                        
/litstring 
(      C       0,0,0      1\/2,1\/2, 0) def Literal                                                                                                                                                                                                                                                         
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the default value of 'L' is '1', specifying no non-primitve lattice translation. 
) def
Write
/left leftmargin indent add indent add def
/instr (TX,TY,TZ) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Unit cell translation along the x,y and z directions. 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
The unit cell translations are added to the coordinates after the 'S' and 'L' operations have been
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
performed. The translations may be positive or negative, but must refer to complete unit cell shifts.
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default values for 'TX', 'TY' and 'TZ' are all zero, giving no unit cell translations. 
) def
Write
Blank
Newpage
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The symmetry operations are applied in the order : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      1.  Centre of symmetry if 'S' negative) def Literal                                                                                                                                                                                                                                                  
/litstring 
(      2.  Symmetry operator 'S') def Literal                                                                                                                                                                                                                                                               
/litstring 
(      3.  Non-primitve lattice translation) def Literal                                                                                                                                                                                                                                                    
/litstring 
(      4.  Whole unit cell translations 'T\(X\)', 'T\(Y\)', 'T\(Z\)'.) def Literal                                                                                                                                                                                                                          
Blank
/litstring 
(    i.e.) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(           X'=  [R\(s\)]\(+X\) + t\(s\) + L + T\(X\) + T\(Y\) + T\(Z\)) def Literal                                                                                                                                                                                                                        
/litstring 
(    or) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(           X'=  [R\(s\)]\(-X\) + t\(s\) + L + T\(X\) + T\(Y\) + T\(Z\)) def Literal                                                                                                                                                                                                                        
LitBlank
/left  148 def /ipflag    1 def /numspace   13 def
/textstring (
The format given above is a complete atom definition. For convenience the definition may
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
sometimes be shortened. The obligatory parts are the TYPE and SERIAL. The remaining parameters,
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
S, L, TX, TY, TZ, are optional. 
) def
Write
/left  148 def /ipflag    1 def /numspace   15 def
/textstring (
An optional parameter taking its default value may be omitted, though its place must be marked
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
by its associated comma. A series of trailing commas may be omitted. 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
The following are all equivalent : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      TYPE\(SERIAL,1,1,0,0,0\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      TYPE\(SERIAL,,,0,0,0\)) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      TYPE\(SERIAL,1,,,,0\)) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      TYPE\(SERIAL,,,,,\)) def Literal                                                                                                                                                                                                                                                                     
LitBlank
/left  148 def /ipflag    1 def /numspace   21 def
/textstring (
The values of S , L , TX , TY and TZ are exactly those output and used by the distance angles
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
routines under the headings S\(I\) , L , T\(X\) , T\(Y\) and T\(Z\) respectively. \(See the section of the user
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
guide on 'results of refinement'\). 
) def
Write
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
When the symmetry operators are applied, the actual values of S and L are checked to see that
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
they are reasonable. If the values found are not reasonable, an error message will be output and the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
job terminated. 
) def
Write
/left  148 def /ipflag    1 def /numspace   16 def
/textstring (
In some cases, the symmetry operators are accepted on input, but not used by the routine. The
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
description of the routine will state this. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (UNTIL sequences) def Instruction                                                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
When a group of atoms lie sequentially in the atom parameter list, there is an abbreviated way to refer
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
to the group. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      TYPE1\(SERIAL1,S,L,TX,TY,TZ\)  UNTIL  TYPE2\(SERIAL2\)) def Literal                                                                                                                                                                                                                                  
LitBlank
/left  138 def /ipflag    1 def /numspace   14 def
/textstring (
This definition specifies all the atoms in the current list starting with the atom TYPE1\(SERIAL1\)
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The first atom in the specification must occur before the second atom in the current parameter list,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
otherwise an error message will be output and the task aborted. If symmetry operators are used, they
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
must be given for the first atom of the sequence, and will be appied to all the atoms in the sequence. 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Examples) def Literal                                                                                                                                                                                                                                                                                
Blank
/litstring 
(                  C\(1\) until C\(6\)) def Literal                                                                                                                                                                                                                                                         
Blank
/litstring 
(      Six atoms lying around a centre of symmetry:) def Literal                                                                                                                                                                                                                                            
Blank
/litstring 
(                  C\(1\) until C\(3\) C\(1,-1\) UNTIL C\(3\)) def Literal                                                                                                                                                                                                                                  
LitBlank
/left leftmargin indent add def 
/instr (FIRST   AND   LAST) def Instruction                                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
These specifications each define one atom. FIRST Refers to the first atom stored in LIST 5 \(the model
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
parameters\) or LIST 10 \(Fourier peaks\), and LAST refers to the last atom in the list. If these are used as
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
atom designators, no serial number may be given, but symmetry operators may be. They may be used in
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
until sequences. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      examples) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(                  LAST) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(                  FIRST\(x\)) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(                  FIRST\(-1\) UNTIL C\(16\)  C\(23\) UNTIL LAST) def Literal                                                                                                                                                                                                                               
LitBlank
/left leftmargin indent add def 
/instr (ALL) def Instruction                                                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This specifies all atoms in the list, can take symmetry operators or parameter names, but cannot be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
accompanied on the same line by any other atom specifiers. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      examples) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(                  ALL) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(                  ALL\(x\)) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(                  ALL\(-1\)) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left leftmargin indent add def 
/instr (RESIDUE) def Instruction                                                                                                                                                                                                                                                                            
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This specifies all atoms or parameters with the given residue number. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      examples) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(                  RESIDUE\(3\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(                  RESIDUE\(3,X's\)) def Literal                                                                                                                                                                                                                                                            
LitBlank
/left leftmargin indent add def 
/instr (PART) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This specifies all atoms or parameters with the given part number. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      examples) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(                  PART\(3001\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(                  PART\(3001,X's\)) def Literal                                                                                                                                                                                                                                                            
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The part number is constructed from two values, the assembly number and the group number. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(    PART NO. = 1000 * ASSEMBLY NO. + GROUP NO.) def Literal                                                                                                                                                                                                                                                
LitBlank
Blank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
The assembly number is normally zero, but a value can be given to all atoms that are involved in a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
particular disordered area of the structure. E.g. on a disordered methyl all the H atoms could be placed
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
in assembly number 1. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
The group number within an assembly groups together those atoms which are simultaneously
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
occupied. E.g. on a disordered methyl, all the H atoms approximately 109 degrees apart would be given
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the same group number. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
The part and group numbers affect the default bonds that are determined by CRYSTALS, and
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
subsequently output in the CIF or summary file. Some bonding rules are applied in the following order
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
of priority: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(1. An atom in assembly 0, group 0, will bond to any other nearby atom.) def Literal                                                                                                                                                                                                                        
/litstring 
(2. Atoms in the same assembly, but with different, non-zero group numbers) def Literal                                                                                                                                                                                                                     
/litstring 
(   will not bond to each other.) def Literal                                                                                                                                                                                                                                                               
/litstring 
(3. Atoms in different assemblies with one zero group number) def Literal                                                                                                                                                                                                                                   
/litstring 
(   will not bond to each other.) def Literal                                                                                                                                                                                                                                                               
/litstring 
(4. Atoms in the same assembly and group, but with a negative group number) def Literal                                                                                                                                                                                                                     
/litstring 
(   will not bond to symmetry related atoms in the same assembly and group.) def Literal                                                                                                                                                                                                                    
/litstring 
(5. All remaining close contacts will be bonded together.) def Literal                                                                                                                                                                                                                                      
LitBlank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
Rule 3 may be ignored unless you're trying to set up something very special. Rule 4 is useful if you
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
have a group disordered across a symmetry element. 
) def
Write
Blank
/left leftmargin def 
/instr (ATOMIC PARAMETER SPECIFICATION) def Instruction                                                                                                                                                                                                                                                     
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
Atomic parameters have a NAME. Some directives permit the use of the parameter name by itself, which
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
implies that parameter for all atoms. The parameter name may be combined with an atom specifier, in
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
which case only the parameter for that atom \(or group in an UNTIL sequence\) is referenced. Symmetry
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
operators may be used. The normal drop-out rules apply. 
) def
Write
/left leftmargin indent add def 
/instr (Parameter NAMES) def Instruction                                                                                                                                                                                                                                                                    
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The following NAMES are recognised. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      X      Y      Z      OCC      U[ISO]    SPARE) def Literal                                                                                                                                                                                                                                           
/litstring 
(      U[11]  U[22]  U[33]  U[23]    U[13]     U[12]) def Literal                                                                                                                                                                                                                                           
/litstring 
(      X'S    U'S    UIJ'S  UII'S) def Literal                                                                                                                                                                                                                                                              
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Examples) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(        X            The 'x' coordinate for all atoms) def Literal                                                                                                                                                                                                                                         
/litstring 
(        C\(9,X,Y\)     The 'x' and 'y' coordinates for atom C\(9\)) def Literal                                                                                                                                                                                                                            
/litstring 
(        FIRST\(X'S\)   The 'x','y' and 'z' coordinates for the first atom) def Literal                                                                                                                                                                                                                     
/litstring 
(        FIRST\(U'S\) UNTIL C\(23\)) def Literal                                                                                                                                                                                                                                                            
/litstring 
(                     The anisotropic temperature factors for all atoms) def Literal                                                                                                                                                                                                                        
/litstring 
(                     up to C\(23\).) def Literal                                                                                                                                                                                                                                                           
LitBlank
/left leftmargin indent add def 
/instr (Temperature factor definitions) def Instruction                                                                                                                                                                                                                                                     
/left leftmargin indent add indent add def
/instr (Isotropic temperature factor) def Instruction                                                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( The isotropic temperature factor is defined by:) def Literal                                                                                                                                                                                                                                              
Blank
/litstring 
(       T = exp\(-8*pi*pi*U[iso]*s**2\)) def Literal                                                                                                                                                                                                                                                        
/litstring 
(                                       where s = sin\(theta\)\/lambda) def Literal                                                                                                                                                                                                                         
LitBlank
/left leftmargin indent add indent add def
/instr (Anisotropic Temperature Factor) def Instruction                                                                                                                                                                                                                                                     
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      The anisotropic temperature factor \(adp\) is defined by:) def Literal                                                                                                                                                                                                                               
Blank
Newpage
/litstring 
(       T = exp\(-2*pi*pi*\(h*h*a'*a*u[11]) def Literal                                                                                                                                                                                                                                                     
/litstring 
(                        +k*k*b'*b'*u[22]) def Literal                                                                                                                                                                                                                                                      
/litstring 
(                        +l*l*c'*c'*u[33]) def Literal                                                                                                                                                                                                                                                      
/litstring 
(                    +2.0*k*l*b'*c'*u[23]) def Literal                                                                                                                                                                                                                                                      
/litstring 
(                    +2.0*h*l*a'*c'*u[13]) def Literal                                                                                                                                                                                                                                                      
/litstring 
(                    +2.0*h*k*a'*b'*u[12]\)\).) def Literal                                                                                                                                                                                                                                                 
/litstring 
(                                       where x' are the reciprocal) def Literal                                                                                                                                                                                                                            
/litstring 
(                                       cell parameters and h, k and) def Literal                                                                                                                                                                                                                           
/litstring 
(                                       l are the Miller indices) def Literal                                                                                                                                                                                                                               
LitBlank
/left  148 def /ipflag    1 def /numspace   12 def
/textstring (
CRYSTALS contains two definitions od Uequiv. Both definitions are acceptable to Acta. The
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
arithmetic mean of the principle axes is often similar to the refined value of Uiso. The geometric
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
mean is more sensitive to long or short axes, and so is more useful in publications. Ugeom is the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
sphere with the same volume as the ellipsoid. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      U\(arith\) = \(U1+U2+U3\)\/3) def Literal                                                                                                                                                                                                                                                            
/litstring 
(      U\(geom\)  = \(U1*U2*U3\)**1\/3) def Literal                                                                                                                                                                                                                                                         
/litstring 
(                                    Where Ui are the principal axes of) def Literal                                                                                                                                                                                                                        
/litstring 
(                                    the orthogonalised tensor.) def Literal                                                                                                                                                                                                                                
LitBlank
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
CAUTION 
) def
WriteCalc
/textstring (CAUTION ) def
WriteBold
/ypos ypos linegap sub def
/left  148 def /ipflag    1 def /numspace   19 def
/textstring (
It should be noted that if a set of anisotropic atoms are input with the FLAG key set to anything
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
but 0, then the parameters will be interpreted as Isotropic atoms, or special shapes. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Uequiv) def Instruction                                                                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
Two expressions are available for the equivalent temperature factor \(the geometric or arithmetric mean
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
of the principal components\). The Immediate Command 'SET UEQUIV' sets which definition will be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
used. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Ugeom  = \(Ui * Uj * Uk\)**1\/3) def Literal                                                                                                                                                                                                                                                         
Blank
/litstring 
(      Uarith = \(Ui + Uj + Uk\)\/3) def Literal                                                                                                                                                                                                                                                            
/litstring 
(                                       Where Ui, Uj & Uk are the) def Literal                                                                                                                                                                                                                              
/litstring 
(                                       principal components of U) def Literal                                                                                                                                                                                                                              
Blank
/litstring 
(      Ugeom is the radius of the sphere with the same volume as the adp) def Literal                                                                                                                                                                                                                       
/litstring 
(      ellipsoid, and thus gives a good indication of the quality of the) def Literal                                                                                                                                                                                                                       
/litstring 
(      ellipsoid. Uarith is often closer to the value of Uiso, and so is) def Literal                                                                                                                                                                                                                       
/litstring 
(      useful for returning to an isotropic refinement.) def Literal                                                                                                                                                                                                                                        
LitBlank
/left leftmargin indent add def 
/instr (The Special Shapes) def Instruction                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The SPecial Shape keys are 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Blank
/litstring 
(      type serial occ FLAG x y z u[11]  u[22] u[33] u[23] u[13] u[12] spare) def Literal                                                                                                                                                                                                                   
/litstring 
(                                 U[ISO]                               spare) def Literal                                                                                                                                                                                                                   
/litstring 
(                                 U[ISO] SIZE                          spare) def Literal                                                                                                                                                                                                                   
/litstring 
(                                 U[ISO] SIZE  DECLINAT AZIMUTH        spare) def Literal                                                                                                                                                                                                                   
Blank
LitBlank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
The value of 'FLAG' is used on input of atoms to indicate what kind of patameters will follow, and is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
used during calculations for the interpretation of the parameters. 
) def
Write
/left leftmargin indent add indent add def
/instr (FLAG interpretation) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The following table shows the interpretation of the FLAG parameter. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Blank
/litstring 
(FLAG  meaning    parameters) def Literal                                                                                                                                                                                                                                                                   
/litstring 
('old' types of atoms:) def Literal                                                                                                                                                                                                                                                                         
Blank
/litstring 
( 0    Aniso ADP  u[11]  u[22] u[33] u[23] u[13] u[12]) def Literal                                                                                                                                                                                                                                         
/litstring 
( 1    Iso ADP    U[ISO]) def Literal                                                                                                                                                                                                                                                                       
Blank
/litstring 
(New 'special' shapes:) def Literal                                                                                                                                                                                                                                                                         
Blank
/litstring 
( 2    Sphere     U[ISO] SIZE) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( 3    Line       U[ISO] SIZE  DECLINAT AZIMUTH) def Literal                                                                                                                                                                                                                                                
/litstring 
( 4    Ring       U[ISO] SIZE  DECLINAT AZIMUTH) def Literal                                                                                                                                                                                                                                                
Blank
LitBlank
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
The parameters have the following meaning for the new special shapes: 
) def
Write
/left leftmargin indent add indent add def
/instr (Special U[iso]) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
U[iso] is related to the 'thickness' of the line, annulus or shell. 
) def
Write
/left leftmargin indent add def 
/instr (Special SIZE) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
SIZE is the length of the line, or the radius of the annulus or shell. 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (Special DECLINAT) def Instruction                                                                                                                                                                                                                                                                   
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
DECLINAT is the declination angle between the line axis or annulus normal and th z axis of the
) def
/last 0 def 
WriteCalc
/textstring (DECLINAT is the declination angle between the line axis or annulus normal and th ) def WritePart
/textstring (z ) def
WriteItalic
/textstring (axis of the) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
usual CRYSTALS orthogonal coordinate system, in degrees\/100. 
) def
Write
/left leftmargin indent add indent add def
/instr (Special AZIMUTH) def Instruction                                                                                                                                                                                                                                                                    
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
AZIMUTH is the azimuthal angle between the projection of the line axis or annulus normal onto the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
x - y plane and the x axis of the usual CRYSTALS orthogonal coordinate system, in degrees\/100. 
) def
WriteCalc
/textstring (x ) def
WriteItalic
/textstring (- ) def WritePart
/textstring (y ) def
WriteItalic
/textstring (plane and the ) def WritePart
/textstring (x ) def
WriteItalic
/textstring (axis of the usual CRYSTALS orthogonal coordinate system, in degrees\/100. ) def WritePart
/ypos ypos linegap sub def
/left  148 def /ipflag    1 def /numspace   19 def
/textstring (
If either of these angles is input with a value greater than 5.0, it is assumed that the user has
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
forgotten to divide by 100, which is thus done automatically. 
) def
Write
Blank
Blank
/left leftmargin def 
/instr (OVERALL PARAMETER SPECIFICATION) def Instruction                                                                                                                                                                                                                                                    
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
Overall parameters are specified simply by their keys. The following overall parameter keys may be
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
given : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SCALE      OU[ISO]      DU[ISO]      POLARITY) def Literal                                                                                                                                                                                                                                           
/litstring 
(      ENANTIO    EXTPARAM) def Literal                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add indent add def
/instr (SCALE) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This parameter defines the overall scale factor and has a default value of unity. It is the number by
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
which \/FC\/ must be multiplied to put it onto the scale of \/FO\/, i.e. \/Fo\/ = scale*\/FC\/. 
) def
Write
/left leftmargin indent add indent add def
/instr (DU[ISO]) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter is the dummy overall isotropic temperature factor and has a default value of 0.05. 
) def
Write
/left  148 def /ipflag    1 def /numspace   15 def
/textstring (
The dummy overall temperature factor is in no way related to the overall temperature factor, and
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
its use is explained in the input of LIST 12, which comes in the section of the user guide on 'structure
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
factors'. 
) def
Write
/left leftmargin indent add indent add def
/instr (OU[ISO]) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter is the overall isotropic temperature factor and has a default value of 0.05. 
) def
Write
/left leftmargin indent add indent add def
/instr (POLARITY) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This is the Rogers eta parameter, and is a multiplier for the imaginary part of the anomalous
) def
/last 0 def 
WriteCalc
/textstring (This is the Rogers ) def WritePart
/textstring (eta ) def
WriteItalic
/textstring (parameter, and is a multiplier for the imaginary part of the anomalous) def WritePart
/ypos ypos linegap sub def
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
scattering factor. Setting the value to 1.0 \(its default\) has the effect of using the imaginary part of the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
anomalous scattering factor as given. Changing the value to -1.0 has the effect of changing the hand
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
of the model. Setting the value at zero has the effect of removing the contribution of f". However, if
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
contributions from f" are not required, IT IS MORE EFFICIENT to set ANOMALOUS = NO in
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
LIST 23 \(structure factor control, see section LIST23 \). If you need to use f", remember not to apply
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Friedel's law \(LIST 13, section LIST13 \) during data reduction \(section DATAREDUC \), and to
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
include anomalous scattering \(LIST 3, section LIST03 and LIST 23, section LIST23 \). See D.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   11 def
/textstring (
Rogers, Acta Cryst \(1981\), A37,734-741. POLARITY and ENANTIO should not be used
) def
/last 0 def 
WriteCalc
/textstring (Rogers, Acta Cryst \(1981\), A37,734-741. ) def WritePart
/textstring (POLARITY ) def
WriteItalic
/textstring (and ) def
WriteItalic
/textstring (ENANTIO ) def
WriteItalic
/textstring (should ) def
WriteItalic
/textstring (not ) def
WriteItalic
/textstring (be ) def
WriteItalic
/textstring (used ) def
WriteItalic
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
simultaniously. 
) def
WriteCalc
/textstring (simultaniously. ) def
WriteItalic
/ypos ypos linegap sub def
/left leftmargin indent add indent add def
/instr (ENANTIO) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This overall parameter is the fractional contribution of F\(-h\) to the observed structure amplitude, and
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
like the POLARITY parameter is sensitive to the polarity of the structure. It is defined by 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       Fo**2 =\(1-x\)* F\(h\)**2 + x*F\(-h\)**2) def Literal                                                                                                                                                                                                                                               
LitBlank
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
where x is the ENANTIOpole parameter. A value of 0.0 means the structure stored in LIST 5 is of
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
the correct hand. A value of 1.0 inverts the structure. Its effect on the structure factor is switched on
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
or off by the parameter ENANTIO in LIST 23 \(see section LIST23 \). Computations are more
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
efficient when it is turned off. If the enantiopole is used \(or refined\) then Friedel's law must not be
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
applied \(LIST 13, section LIST13 \) and anomaloue scattering must be included \(LIST 13 and LIST
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
23\). See Howard Flack, Acta Cryst, 1983, A39, 876-881. This parameter is more robust than the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
POLARITY parameter. See also section in Results. 
) def
Write
/left leftmargin indent add indent add def
/instr (EXTPARAM) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
This parameter is Larson's extinction parameter , r*, \(equation 22 in A.C. Larson, Crystallographic
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Computing, 1970, 291-294, ed F.R. Ahmed, Munksgaard, Copenhagen , but with V replaced by the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
cell volume\) and has a default value of zero. 
) def
Write
/left  148 def /ipflag    1 def /numspace   14 def
/textstring (
Note that many other programs use expression \(4\), which cannot cope with Neutron data, and
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
gives a value for 'g' which is about 1,000,000 times smaller than 'r*'. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       g ~= [\(e**2\/mc**2\)**2 . lambda**3\/V**2 . Tbar ] . r*) def Literal                                                                                                                                                                                                                               
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
Tbar is the absorption weighted mean path length, and is assumed to be stored in LIST 6 \(section
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   23 def
/textstring (
LIST06 \) with a key of TBAR . If this key is absent, a default value of 1.0 is used. If extinction is to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
be included in the model, the mosaic spread should have been set in LIST 13 \(section LIST13 \). 
) def
Write
/secttext (Input of atoms and other parameters  -  LIST 5) def Section                                                                                                                                                                                                                                      
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\LIST 5) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( OVERALL SCALE= DU[ISO]= OU[ISO]= POLARITY= ENANTIO= EXTPARAM=) def Literal                                                                                                                                                                                                                                
/litstring 
( READ NATOM= NLAYER= NELEMENT= NBATCH=) def Literal                                                                                                                                                                                                                                                        
/litstring 
( either ATOM TYPE= SERIAL= OCC= FLAG= X= Y= Z= U[11]= ....U[12]=) def Literal                                                                                                                                                                                                                              
/litstring 
( or     ATOM TYPE= SERIAL= OCC= FLAG= X= Y= Z= U[ISO]) def Literal                                                                                                                                                                                                                                         
/litstring 
( INDEX P= Q= R= S= ABSOLUTE=) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( LAYERS SCALE=) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( ELEMENTS SCALE=) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( BATCH SCALE=) def Literal                                                                                                                                                                                                                                                                                 
Blank
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 5) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( OVERALL SCALE=0.123) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( READ NATOM=2 NELEMENT=2) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( ATOM PB 1 FLAG=0 .25 .25 .25 .03 .03 .03 .0 .0 .0) def Literal                                                                                                                                                                                                                                            
/litstring 
( ATOM C 2  X= .23 .13 .67) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( ELEMENTS 0.8 0.2) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
LitBlank
/left leftmargin def 
/instr (\\LIST 5) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin indent add def 
/instr (OVERALL SCALE= DU[ISO]= OU[ISO]= POLARITY= ENANTIO= EXTPARAM=) def Instruction                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive specifies various parameters that refer to the structure as a whole. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALE=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The overall scale factor, default = 1.0 
) def
Write
/left leftmargin indent add indent add def
/instr (DU[ISO]=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The dummy overall isotropic temperature factor, default = 0.05. 
) def
Write
/left leftmargin indent add indent add def
/instr (OU[ISO]=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The overall isotropic temperature factor, default = 0.05. 
) def
Write
/left leftmargin indent add indent add def
/instr (POLARITY=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Rogers eta parameter \(see above\), default = 1.0. 
) def
WriteCalc
/textstring (Rogers ) def WritePart
/textstring (eta ) def
WriteItalic
/textstring (parameter \(see above\), default = 1.0. ) def WritePart
/ypos ypos linegap sub def
/left leftmargin indent add indent add def
/instr (ENANTIO=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Flack enantiopole parameter \(see above\), default = 0.0. 
) def
Write
/left leftmargin indent add indent add def
/instr (EXTPARAM=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Larson r* secondary extincion parameter, default = 0.0. 
) def
Write
/left leftmargin indent add def 
/instr (READ NATOM= NLAYER= NELEMENT= NBATCH=) def Instruction                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive specifies the number of atoms, layer scale factors, element scale factors, and batch scale
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
factors that are to follow. 
) def
Write
/left leftmargin indent add indent add def
/instr (NATOM=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of atom directives to follow, default = 0. 
) def
Write
/left leftmargin indent add indent add def
/instr (NLAYER=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of layer scale factors to follow, default = 0. 
) def
Write
/left leftmargin indent add indent add def
/instr (NELEMENT=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of element scale factors to follow, default = 0. 
) def
Write
/left leftmargin indent add indent add def
/instr (NBATCH=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of batch scale factors to follow, default = 0. 
) def
Write
/left leftmargin indent add def 
/instr (ATOM TYPE= SERIAL= OCC= FLAG= X= Y= Z= U[11]= ..) def Instruction                                                                                                                                                                                                                                   
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The parameters for an atom, repeated NATOM times. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
The atomic species, an entry for which should exist in LIST 3 \(see section LIST03 \). There is no
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
default value. 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIAL=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The atoms serial number. There is no default value. 
) def
Write
/left leftmargin indent add indent add def
/instr (OCC=) def Instruction                                                                                                                                                                                                                                                                               
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
This parameter defines the site occupancy EXCLUDING special position effects \(i.e. is the
) def
/last 0 def 
WriteCalc
/textstring (This parameter defines the site occupancy ) def WritePart
/textstring (EXCLUDING ) def
WriteBold
/textstring (special position effects \(i.e. is the) def WritePart
/ypos ypos linegap sub def
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
'chemical occupancy\). The default is 1.0. Special position effects are computed by CRYSTALS and
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
multiplied onto this parameter. 
) def
Write
/left leftmargin indent add indent add def
/instr (FLAG=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter specifies the type of temperature factor for the atom, and if it is omitted a default
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
value of 1 is assumed. NOTE that it must be set to 0 for anisotropic atoms. 
) def
WriteCalc
/textstring (value of 1 is assumed. ) def WritePart
/textstring (NOTE ) def
WriteBold
/textstring (that it ) def WritePart
/textstring (must ) def
WriteBold
/textstring (be set to 0 for anisotropic atoms. ) def WritePart
/ypos ypos linegap sub def
/left leftmargin indent add indent add def
/instr (X= Y= Z=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters specify the atomic coordinates for the atom, for which there are no default values. 
) def
Write
/left leftmargin indent add indent add def
/instr (U[11]= U[22]= U[33]= U[23]= U[13]= U[12]=) def Instruction                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters have different interpretations depending upon the value of FLAG 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
If FLAG=0 
) def
Write
/left  148 def /ipflag    1 def /numspace   14 def
/textstring (
These parameters specify the anisotropic temperature factors for the atom and if they are omitted
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
default values of zero are assumed. The order of the cross terms is obtained by dropping 1,2,3
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
sequentially from [123]. 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
If FLAG=1 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
The first parameter specifies the isotropic temperature factor, which defaults to 0.05. 
) def
Write
Newpage
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
If FLAG=2,3 or 4, the six parameters represented by u[ij] have the following imterpretation: 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(KEY   shape      parameters) def Literal                                                                                                                                                                                                                                                                   
Blank
/litstring 
( 2    Sphere     U[ISO] SIZE) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( 3    Line       U[ISO] SIZE  DECLINAT AZIMUTH) def Literal                                                                                                                                                                                                                                                
/litstring 
( 4    Ring       U[ISO] SIZE  DECLINAT AZIMUTH) def Literal                                                                                                                                                                                                                                                
Blank
LitBlank
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
The parameters have the following meaning for the new special shapes: 
) def
Write
/left leftmargin indent add indent add def
/instr (Special U[iso]) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
U[iso] is related to the 'thickness' of the line, annulus or shell. 
) def
Write
/left leftmargin indent add def 
/instr (Special SIZE) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
SIZE is the length of the line, or the radius of the annulus or shell. 
) def
Write
/left leftmargin indent add indent add def
/instr (Special DECLINAT) def Instruction                                                                                                                                                                                                                                                                   
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
DECLINAT is the declination angle between the line axis or annulus normal and th z axis of the
) def
/last 0 def 
WriteCalc
/textstring (DECLINAT is the declination angle between the line axis or annulus normal and th ) def WritePart
/textstring (z ) def
WriteItalic
/textstring (axis of the) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
usual CRYSTALS orthogonal coordinate system, in degrees\/100. 
) def
Write
/left leftmargin indent add indent add def
/instr (Special AZIMUTH) def Instruction                                                                                                                                                                                                                                                                    
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
AZIMUTH is the azimuthal angle between the projection of the line axis or annulus normal onto the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
x - y plane and the x axis of the usual CRYSTALS orthogonal coordinate system, in degrees\/100. 
) def
WriteCalc
/textstring (x ) def
WriteItalic
/textstring (- ) def WritePart
/textstring (y ) def
WriteItalic
/textstring (plane and the ) def WritePart
/textstring (x ) def
WriteItalic
/textstring (axis of the usual CRYSTALS orthogonal coordinate system, in degrees\/100. ) def WritePart
/ypos ypos linegap sub def
/left  148 def /ipflag    1 def /numspace   19 def
/textstring (
If either of these angles is input with a value greater than 5.0, it is assumed that the user has
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
forgotten to divide by 100, which is thus done automatically. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (INDEX P= Q= R= S= ABSOLUTE=) def Instruction                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive is used to input the constants that define an index for layer scaling. The layer scale index
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
for the reflection with indices HKL is computed from 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      index = \(h*p + k*q + l*r + s\)) def Literal                                                                                                                                                                                                                                                         
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and the absolute value is taken if the parameter ABSOLUTE = yes. 
) def
Write
/left leftmargin indent add indent add def
/instr (P= Q= R=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters have default values of zero. 
) def
Write
/left leftmargin indent add indent add def
/instr (S=) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has a default value of unity. The zeroth layer must have an index of 1. 
) def
Write
/left leftmargin indent add indent add def
/instr (ABSOLUTE=) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  Default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left leftmargin indent add def 
/instr (LAYERS SCALE=) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive defines the layer scale factors, starting with the scale for an index of 1. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALE=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter gives the layer scale, and has a default value of 1. It is repeated NLAYER times. 
) def
Write
/left leftmargin indent add def 
/instr (ELEMENTS SCALE=) def Instruction                                                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive defines the scale factors for the elements of a twinned structure. See the chapter on
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
twinned structures. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALE=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter gives the element scale factor, and has a default value of 1. It is repeated
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NELEMENT times - the number of components in the twin. 
) def
Write
/left leftmargin indent add def 
/instr (BATCH SCALE=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive defines the batch scale factors. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALE=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter gives the batch scale factor, and has a default value of 1. It is repeated NBATCH
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
times. Remember to set appropriate keys in LIST 6 
) def
Write
Blank
/left leftmargin def 
/instr (Further examples of parameter input) def Instruction                                                                                                                                                                                                                                                
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( ATOM TYPE=C,SERIAL=4,OCC=1,U[ISO]=0,X=0.027,Y=0.384,Z=0.725,) def Literal                                                                                                                                                                                                                                 
/litstring 
( CONT U[11]=0.075,U[22]=0.048,U[33]=.069) def Literal                                                                                                                                                                                                                                                      
/litstring 
( CONT U[23]=-.007,U[13]=.043,U[12]=-.001) def Literal                                                                                                                                                                                                                                                      
/litstring 
( ATOM C 5 U[ISO]=0.0 .108,.365,.815,.074) def Literal                                                                                                                                                                                                                                                      
/litstring 
( CONT .051 .065 -.015 .048 -.014) def Literal                                                                                                                                                                                                                                                              
/litstring 
( ATOM C 2 1 0.05 0.149 0.411 0.651 0 0 0 0 0 0) def Literal                                                                                                                                                                                                                                                
/litstring 
( ATOM C 1 X=0.094,Y=0.343,Z=0.890) def Literal                                                                                                                                                                                                                                                             
/litstring 
( ATOM C 3 X=0.050 0.406 0.648) def Literal                                                                                                                                                                                                                                                                 
LitBlank
/secttext (Printing and punching list 5) def Section                                                                                                                                                                                                                                                        
/left leftmargin def 
/instr (\\PRINT 5) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Lists the current LIST 5 to the printer file. 
) def
Write
/left leftmargin def 
/instr (\\PUNCH 5 mode) def Instruction                                                                                                                                                                                                                                                                     
Newpage
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Mode controls the format of the file. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(        -  Punches the model parameters in CRYSTALS format.) def Literal                                                                                                                                                                                                                                   
/litstring 
(      A -  Punches the model parameters in CRYSTALS format.) def Literal                                                                                                                                                                                                                                   
/litstring 
(      B -  Punches the atomic parameters in XRAY format.) def Literal                                                                                                                                                                                                                                      
/litstring 
(      C -  Punches the atomic parameters in SHELX format.) def Literal                                                                                                                                                                                                                                     
LitBlank
/left leftmargin def 
/instr (Summary display of LIST 5 - \\DISPLAY) def Instruction                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\DISPLAY LEVEL=) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\DISP HIGH) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  128 def /ipflag    1 def /numspace   20 def
/textstring (
This allows the user to display a summary of the contents of list 5. The output is sent to both monitor
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
and listing channels, so the contents of list 5 can be examined on-line during interactive work. The output
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
produced is more compact than that from PRINT 5, and various levels of detail can be selected. The
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
command required is :- 
) def
Write
/left leftmargin def 
/instr (\\DISPLAY    LEVEL=) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
DISPLAY has one optional parameter. 
) def
Write
/left leftmargin indent add indent add def
/instr (LEVEL) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LOW) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      MEDIUM) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
The effects of this parameter are :- 
) def
Write
/left  148 def /ipflag    1 def /numspace   16 def
/textstring (
LOW The names of the atoms, overall parameters, and any layer, batch, and element scales in list
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
5 are displayed. 
) def
Write
/left  148 def /ipflag    1 def /numspace   14 def
/textstring (
MEDIUM Each atom in list 5 is displayed with its type, serial, occupancy, isotropic temperature
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
factor \( if any \), and positional parameters. The values of the overall parameters and of any layer,
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
batch, and element scales are displayed. 
) def
Write
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
HIGH All of the parameters of each atom in list 5 are displayed. The values of the overall
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameters, and of any layer, batch, and element scale factors are displayed. 
) def
Write
Blank
Blank
/secttext (Editing structural parameters -  \\EDIT) def Section                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\EDIT INPUTLIST= OUTPUTLIST=) def Literal                                                                                                                                                                                                                                                                
/litstring 
( EXECUTE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( SAVE) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( QUIT) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( MONITOR LEVEL) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( LIST LEVEL) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( DELETE  ATOM SPECIFICATIONS  .  .) def Literal                                                                                                                                                                                                                                                            
/litstring 
( ATOM TYPE= SERIAL= OCC= FLAG= X= Y= Z= U11= ..) def Literal                                                                                                                                                                                                                                               
/litstring 
( CREATE Z ATOM-SPECIFICATION  ...) def Literal                                                                                                                                                                                                                                                             
/litstring 
( SPLIT Z ATOM-SPECIFICATION ...) def Literal                                                                                                                                                                                                                                                               
/litstring 
( CENTROID Z ATOM-SPECIFICATION ...) def Literal                                                                                                                                                                                                                                                            
/litstring 
( KEEP  Z ATOM-SPECIFICATIONS ...) def Literal                                                                                                                                                                                                                                                              
/litstring 
( AFTER  ATOM-SPECIFICATION) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( MOVE Z ATOM-SPECIFICATION  ...) def Literal                                                                                                                                                                                                                                                               
/litstring 
( SELECT ATOM-PARAMETER  OPERATOR  VALUE, . .) def Literal                                                                                                                                                                                                                                                  
/litstring 
( SORT TYPE1 TYPE2 ...) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( SORT KEYWORD) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( DSORT TYPE1 TYPE2 ...) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( RENAME ATOM1  ATOM2  \(, ATOM1  ATOM2\) ...) def Literal                                                                                                                                                                                                                                                  
/litstring 
( TYPECHANGE KEYWORD OPERATOR VALUE NEW-ATOM-TYPE) def Literal                                                                                                                                                                                                                                              
/litstring 
( RESET PARAMETER-NAME VALUE ATOM-NAMES) def Literal                                                                                                                                                                                                                                                        
/litstring 
( CHANGE  PARAMETER-SPECIFICATION VALUE ...) def Literal                                                                                                                                                                                                                                                    
/litstring 
( ADD  VALUE PARAMETERS  ...) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( SUBTRACT  VALUE  PARAMETERS  ...) def Literal                                                                                                                                                                                                                                                             
/litstring 
( MULTIPLY  VALUE  PARAMETERS  ...) def Literal                                                                                                                                                                                                                                                             
/litstring 
( DIVIDE  VALUE  PARAMETERS  ...) def Literal                                                                                                                                                                                                                                                               
/litstring 
( PERTURB VALUE PARAMETERS ...) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( SHIFT  V1, V2, V3   ATOM-SPECIFICATION . .) def Literal                                                                                                                                                                                                                                                   
/litstring 
( TRANSFORM  R11, R21, R31, . . . R33  ATOM-SPECIFICATION . .) def Literal                                                                                                                                                                                                                                  
/litstring 
( DEORTHOGINAL  ATOM-SPECIFICATION . .) def Literal                                                                                                                                                                                                                                                         
/litstring 
( UEQUIV  ATOM-SPECIFICATIONS  .  .) def Literal                                                                                                                                                                                                                                                            
/litstring 
( ANISO  ATOM-SPECIFICATIONS  .  .) def Literal                                                                                                                                                                                                                                                             
/litstring 
( INSERT IDENTIFIER) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( SPHERE NEWSERIAL ATOMLIST) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( RING NEWSERIAL ATOMLIST) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( LINE NEWSERIAL ATOMLIST) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( REFORMAT) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( ROTATE ANGLE POINT VECTOR ATOM-SPECIFICATION) def Literal                                                                                                                                                                                                                                                 
/litstring 
( ROTATE ANGLE ATOM VECTOR ATOM-SPECIFICATION) def Literal                                                                                                                                                                                                                                                  
/litstring 
( ROTATE ANGLE ATOM1 ATOM2 ATOM-SPECIFICATION) def Literal                                                                                                                                                                                                                                                  
Newpage
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( LIST LOW) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( TYPECHANGE TYPE EQ Q C) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( SELECT U[ISO] LT 0.1) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( ADD  0.25 X) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( RENAME C\(1\) S\(1\)) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( CHANGE  S\(1,OCC\) UNTIL O\(1\) .5) def Literal                                                                                                                                                                                                                                                           
/litstring 
( KEEP  1 FIRST UNTIL LAST) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( L L) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( SPLIT 100 C\(45\)) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( DELETE  C\(46\) UNTIL LAST) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( RESET OCC 1.0 ALL) def Literal                                                                                                                                                                                                                                                                            
LitBlank
Blank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
This is a powerful crystallographic editor for modifying a LIST 5 \(the model parameters\) or LIST 10
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
\(Fourier peaks\). It offers the editing facilities frequently needed for the management of atom parameters,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
including conditional operations and arithmetic. 
) def
Write
Blank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
EDIT is a semi-interactive command, in that each directive is computed as soon as its input is complete.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
Since CONTINUE can be used to extend a directive over several lines, completion is indicated be the start of
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
a new directive, or the special directive EXECUTE. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
After the terminating END, the resulting list is output to the disc. However if the list has not been
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   23 def
/textstring (
changed, a new list will be created only if the list type is being changed \( e.g. 10 to 5 \). The current edited
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
version of the list can be saved at any time to protect against future editing mistakes \( the SAVE directive \).
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
It is also possible to abandon editing without creating a new list \( the QUIT directive \). 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
When used in interactive mode, a new list is created even though errors may have occured during
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
command input unless the QUIT directive is used. In online and batch modes no new list will be created if
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
errors occured during the edit. In this case an error message in generated. 
) def
Write
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
Take care to note that some directives refer to atom or group of atoms, others refer to one or more
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
parameters, and two \(CHANGE and SELECT\)will refer to either an atom specification or a parameter
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
specification. Although atom definitions can include a series of symmetry operators, the only directives that
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
will use them are those for which the subsequent description explicitly states that the symmetry operators are
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
used. In all other cases, the symmetry information will be read in without any error messages and ignored.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
Those operations which require a single parameter type as argument \(ADD, MULTIPLY etc \) will fail if
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
composite parameters \( "U'S", etc \) are given. 
) def
Write
/left leftmargin def 
/instr (\\EDIT INPUTLIST OUTPUTLIST) def Instruction                                                                                                                                                                                                                                                        
/left leftmargin indent add indent add def
/instr (INPUTLIST) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add indent add def
/instr (OUTPUTLIST) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add def 
/instr (END) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This should be the last directive in the set of modification directives. 
) def
Write
/left leftmargin indent add def 
/instr (EXECUTE) def Instruction                                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive which has no parameters does nothing to the edited list. It is provided to allow the user
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
to see the results of one operation \( initiated by the directive whose input is terminated by EXECUTE \)
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
before attempting the next. 
) def
Write
/left leftmargin indent add def 
/instr (SAVE) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Forces the current atom list to be writen to disk. 
) def
Write
/left leftmargin indent add def 
/instr (QUIT) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
This directive will cause the edit to be abandoned without the creation of a new list if it is followed by
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
END . If it is followed by any other directive it is ignored. 
) def
Write
/left leftmargin indent add def 
/instr (MONITOR LEVEL) def Instruction                                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive controls the level of monitoring of editing operations. When each operation is
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
performed, the results can be monitored in the monitor channel and in the listing file. Four levels of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
monitoring are provided. The inital level and the default level used when no value is specified is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
'MEDIUM'. The possible values of the parameter 'level' are :- 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
(      OFF          No monitoring occurs) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      LOW          Type and serial only are displayed) def Literal                                                                                                                                                                                                                                         
/litstring 
(      MEDIUM       Program selects level of display   \(default\)) def Literal                                                                                                                                                                                                                             
/litstring 
(      HIGH         At least the level represented by) def Literal                                                                                                                                                                                                                                          
/litstring 
(                   'MEDIUM' listing is displayed) def Literal                                                                                                                                                                                                                                              
LitBlank
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
When the program selects a monitor level account is taken of the amount of relevant information for
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
the particular directive. Thus for DELETE only 'type' and 'serial' need be displayed whereas for
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
CHANGE all parameter values are displayed. 
) def
Write
/left leftmargin indent add def 
/instr (LIST LEVEL) def Instruction                                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive produces a list of the current edited list in the monitor output stream and in the listing
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
file. If KEEP has been used, the atoms which will be kept are indicated. The possible values for 'level'
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
are :- 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OFF               No listing produced) def Literal                                                                                                                                                                                                                                                   
/litstring 
(      LOW               Type and serial listed) def Literal                                                                                                                                                                                                                                                
/litstring 
(      MEDIUM            Type , serial , occ , u[iso] ,) def Literal                                                                                                                                                                                                                                        
/litstring 
(                        x , y , z listed) def Literal                                                                                                                                                                                                                                                      
/litstring 
(      HIGH              All atomic parameters listed) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add def 
/instr (DELETE  ATOM SPECIFICATIONS  .  .) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
All the specified atoms are removed from the current atomic parameter list. Deleted atoms should not
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
be referenced by subsequent directives. 
) def
Write
/left leftmargin indent add def 
/instr (ATOM TYPE SERIAL OCC FLAG X Y Z U11 ..) def Instruction                                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
This directive causes the system to add an atom to the end of the edited list. The format is the same as
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   22 def
/textstring (
that used in \\LIST 5 \(see section LIST05 \). Values must be provided for 'type' , 'serial' , 'x' , 'y' , and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
'z' . Default values are provided for the other parameters as in \\LIST 5. Example : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( ATOM O 1 X = 0.3427 .89004 .09181) def Literal                                                                                                                                                                                                                                                            
LitBlank
/left leftmargin indent add def 
/instr (CREATE Z ATOM-SPECIFICATION  ...) def Instruction                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive applies the symmetry operators given or assumed by default in the atom specification,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
and creates a set of new atoms from those given. The new atoms are added at the end of the current list.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The serial numbers of the new atoms are given by: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NEWSERIAL = Z + OLDSERIAL) def Literal                                                                                                                                                                                                                                                               
LitBlank
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
The sequence Z ATOM-SPECIFICATIONS can be repeated. When moving from a centrosymmetric to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
a non-centrosymmetric space group, for example, atoms formerly related by the centre of symmetry can
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
be generated : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      CREATE 30 MO\(1,-1\) UNTIL C\(15\)) def Literal                                                                                                                                                                                                                                                      
Blank
/litstring 
(      Creates atoms MO\(31\) until C\(45\)) def Literal                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add def 
/instr (SPLIT Z ATOM-SPECIFICATION ...) def Instruction                                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
Two new isotropic atoms are added to the end of the atom list for every atom referenced in the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
atom-specification. These atoms lie at each end of the principal axis of the original atoms anisotropic
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
adp ellipsoid. 
) def
Write
/left  138 def /ipflag    1 def /numspace   12 def
/textstring (
The original atoms are not deleted. The sequence Z ATOM-SPECIFICATIONS can be repeated.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The new serial numbers are given by 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NEWSERIAL\(1\) = Z* OLDSERIAL and) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      NEWSERIAL\(2\) = Z* OLDSERIAL +1) def Literal                                                                                                                                                                                                                                                        
LitBlank
/left leftmargin indent add def 
/instr (CENTROID Z ATOM-SPECIFICATION ...) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
A new atom is created at the centroid of the specified atoms, and with a pseudo adp representing the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
inertial tensor \(ie the 'shape' of the group\). The atom TYPE is QC, and its serial Z. The sequence Z
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
ATOM-SPECIFICATIONS can be repeated. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (KEEP  Z ATOM-SPECIFICATIONS ...) def Instruction                                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
Only the atoms referenced in this directive will be kept in the list, all the others will be lost, even
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
though they can be referenced right up until the final END. The sequence Z ATOM-SPECIFICATIONS
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
can be repeated. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
Atoms that are KEPT are moved to the top of the list, and stored in the order in which they are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
specified on the KEEP directive. Only one KEEP directive may be given. Use CONTINUE if one line
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
isn't long enough for the atom sequence. 
) def
Write
/left  138 def /ipflag    1 def /numspace   13 def
/textstring (
The atom specifications may contain symmetry operators, which are used to generate the coordinates
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
of the atoms that are to be retained. 'Z' Is an optional parameter which defines the serial number of the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
first atom in the specification immediately following it. For each atom thereafter in the current atom
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
specification, the serial number is incremented by one to generate the output serial number. Atoms
) def
/last 0 def 
Write
Newpage
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
whose serial numbers are changed in this way must be referred to in subsequent directives by their new
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
serial numbers. If 'Z' is not given, the atoms retain their old serial numbers. 
) def
Write
/left  138 def /ipflag    1 def /numspace   18 def
/textstring (
If an UNTIL sequence is used after a KEEP directive has been given, it should be used with care,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
since the order of the new parameter list is different from the input list. 
) def
Write
/left leftmargin indent add def 
/instr (AFTER  ATOM-SPECIFICATION  ...) def Instruction                                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This defines the atom in the list after which atoms that are MOVEd should be placed. \(See MOVE
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
below\). If this directive is omitted, the default option places the first MOVED atom at the head of the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
list, and successive atoms after it. Once one AFTER directive has been given, atoms are placed behind
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
the given atom in the order in which they are presented on MOVE directives. If no atom specification is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
given on this directive, subsequent MOVEs will move the atoms to the head of the list. 
) def
Write
/left leftmargin indent add def 
/instr (MOVE Z ATOM-SPECIFICATION  ...) def Instruction                                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive moves atoms about in the list and places them in the position defined by the latest
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
AFTER directive. \(See the previous directive\). This directive does not remove atoms from the list, but
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
simply reorders the list. The sequence Z ATOM-SPECIFICATIONS can be repeated. 
) def
Write
/left  138 def /ipflag    1 def /numspace   13 def
/textstring (
The atom specifications may contain symmetry operators, which are used to generate the coordinates
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
of the atoms that are to be moved. 'Z' is an optional parameter which defines the serial number of the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
first atom in the specification immediately following it. For each atom thereafter in the current atom
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
specification, the serial number is incremented by one to generate the output serial number. Atoms
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
whose serial numbers are changed in this way must be referred to in subsequent directives by their new
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
serial numbers. If no 'Z' is given, the atoms retain their old serial numbers. 
) def
Write
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
If an UNTIL sequence is used after one or more MOVE directives have been given, it should be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
used with care, since the order of the new parameter list is different from the input list. 
) def
Write
/left leftmargin indent add def 
/instr (SELECT ATOM-PARAMETER  OPERATOR  VALUE, . .) def Instruction                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive selects and retains atoms with parameters satisfying the specified conditions. Only atoms
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
that satisfy ALL the selection criteria, whether these are in the same or different directives, will be kept.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
All other atoms will be deleted from the list. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The operators allowed are : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(            EQ            equal) def Literal                                                                                                                                                                                                                                                               
/litstring 
(            NE            not equal) def Literal                                                                                                                                                                                                                                                           
/litstring 
(            GT            greater than) def Literal                                                                                                                                                                                                                                                        
/litstring 
(            GE            greater than or equal to) def Literal                                                                                                                                                                                                                                            
/litstring 
(            LT            less than) def Literal                                                                                                                                                                                                                                                           
/litstring 
(            LE            less than or equal to) def Literal                                                                                                                                                                                                                                               
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Examples of the SELECT directive are : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SELECT SERIAL LT 50) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      SELECT OCC GT 0.5, OCC LT 1.5) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      SELECT C\(1,X\) LT 1., C\(1,X\) GT 0.) def Literal                                                                                                                                                                                                                                                   
/litstring 
(      SELECT TYPE NE Q) def Literal                                                                                                                                                                                                                                                                        
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This example will only retain atoms with serial numbers less than 50 and occupancies between 0.5 and
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
1.5. The 'X' parameter of atom c\(1\) must also lie between 0.0 and 1.0 oterwise it will be rejected, and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
any atoms of type Q will be deleted. 
) def
Write
/left leftmargin indent add def 
/instr (SORT TYPE1 TYPE2 ...) def Instruction                                                                                                                                                                                                                                                               
/left leftmargin indent add def 
/instr (SORT KEYWORD) def Instruction                                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This directive has two formats, and is used to sort the atoms stored in LIST 5 into a user-defined order.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
The default action sorts the atoms on their types and serial numbers. The types are taken in the order
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
found in LIST 5, and atoms of each type are grouped together. In each group the atoms are arranged by
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
ascending serial number. The order of the types of atoms may also be determined by specifying them
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
explicitly on the SORT directive, or by a mixture of these methods. 
) def
Write
Blank
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
In the second format, a keyword corresponding to an atom parameter name \(as defined in LIST 5,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
see section LIST05 \) is given, and the whole list sorted on increasing value of the specified parameter.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Note that sorting on TYPE will give results depending on the 'collating sequence' of the computer.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Fortunately, this generally leads to alphabetic sorting. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
SORT sorts the whole list 5, and cancels any existing KEEP directives. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (DSORT TYPE1 TYPE2 ...) def Instruction                                                                                                                                                                                                                                                              
/left leftmargin indent add def 
/instr (DSORT KEYWORD) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is exactly analagous to SORT, above, except that it sorts into descending order. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (RENAME ATOM1  ATOM2  \(, ATOM1  ATOM2\) ...) def Instruction                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive requires pairs of atom specifications \(optionally separated by a comma\). The TYPE and
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
SERIAL of 'atom1' are changed to those of 'atom2'. Atom1 must exist in LIST 5, atom2 must NOT
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
exist in LIST 5. An atom can be renamed repeatedly. If atom1 contains symmetry operators, these are
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
applied to the coordinates of the renamed atom. An atom cannot be renamed to itself in a single step. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TYPECHANGE KEYWORD OPERATOR VALUE NEW-ATOM-TYPE) def Instruction                                                                                                                                                                                                                                    
Newpage
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive conditionally changes the TYPES of atoms. If an atomic parameter selected by the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
keyword \(see sort above\) satisfies the conditions defined by the 'operator' and 'value' \(see SELECT
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
above\), then the TYPE of the atom is changed to 'new-atom-type'. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      TYPECHANGE OCC GT 1.2 O) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(                              If Occ large, convert to oxygen) def Literal                                                                                                                                                                                                                                 
/litstring 
(      TYPECHANGE U[ISO] LE 0.03 N) def Literal                                                                                                                                                                                                                                                             
/litstring 
(                              If Uiso small, convert to nitrogen) def Literal                                                                                                                                                                                                                              
/litstring 
(      TYPECHANGE TYPE EQ Q C) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(                              Convert peaks \(type Q\) to carbon) def Literal                                                                                                                                                                                                                              
LitBlank
/left leftmargin indent add def 
/instr (RESET PARAMETER-NAME  VALUE ATOM LIST) def Instruction                                                                                                                                                                                                                                              
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive assigns the given value to the named parameter for all the atoms in the atom list 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      RESET OCC 1.0 ALL) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(      RESET OCC .5 O\(1\) O\(2\) O\(3\)) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      RESET U[11] .05 C\(27\) UNTIL C\(50\)) def Literal                                                                                                                                                                                                                                                   
LitBlank
/left leftmargin indent add def 
/instr (CHANGE  ARG\(1\)  ARG\(2\)  ARG\(3\)  .) def Instruction                                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
There are two possible formats for each 'ARG\(i\)' on this directive. the first is : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( PARAMETER\(i\)  VALUE\(i\)) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
If ARG\(i\) is of this form, the specified parameter or parameters are changed to the value VALUE\(i\) . If
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
PARAMETER\(i\) defines one or more atomic parameters, then the symmetry operators found or
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
inserted by default are applied to the resulting set of atomic parameters. For overall parameters, no
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
symmetry information can be provided. The VALUE associated with this argument must always be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
present. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The second form of ARG\(i\) on this directive is : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( ATOM-SPECIFICATION) def Literal                                                                                                                                                                                                                                                                           
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
For this form of ARG\(i\) , the symmetry operators given in the atom specification or assumed by
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
default are applied, but no other atomic parameter is explicitly altered. There is no VALUE associated
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
with ARG\(i\) in this format. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The two different types of argument on this directive may be used interchangeably : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      CHANGE  S\(1,OCC\) UNTIL O\(1\) .5) def Literal                                                                                                                                                                                                                                                      
/litstring 
(      CONT    C\(1,-2,1\) UNTIL C\(12\)) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      CONT    C\(13,X\) .0179) def Literal                                                                                                                                                                                                                                                                 
LitBlank
/left leftmargin indent add def 
/instr (ADD  VALUE  PARAMETERS  ...) def Instruction                                                                                                                                                                                                                                                        
/left leftmargin indent add def 
/instr (SUBTRACT  VALUE  PARAMETERS  ...) def Instruction                                                                                                                                                                                                                                                   
/left leftmargin indent add def 
/instr (MULTIPLY  VALUE  PARAMETERS  ...) def Instruction                                                                                                                                                                                                                                                   
/left leftmargin indent add def 
/instr (DIVIDE  VALUE  PARAMETERS  ...) def Instruction                                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
These directives causes the 'value' to be applied to the parameter. 'PARAMETER\(I\)' may be an
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
overall parameter, or a single atomic parameter of one or more atoms, as defined above. Any symmetry
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
operators given with this directive will be ignored. Note that the parameter SERIAL is numeric, and so
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
can be arithmetically modified. 
) def
Write
/left leftmargin indent add def 
/instr (PERTURB VALUE PARAMETERS ...) def Instruction                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive perturbs the specified parameters using a rnadom number generator. The VALUE is the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
requested rms perturbation, in the natural units of the parameters. The mean deviation applied should be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
approximately zero, and the rms deviation applied should be approximately that requested. 
) def
Write
/left leftmargin indent add def 
/instr (SHIFT  V1, V2, V3   ATOM-SPECIFICATION . .) def Instruction                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive reads the three numbers of a shift vector, which must be in the same coodrinate system
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
as the atomic parameters, and applies it to the parameters in the atom specification. This directive does
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
not create new atoms, but simply modifies those already present. Any symmetry operators given are
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
applied before the translation. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TRANSFORM  R11, R21, R31, . . . R33  ATOM SPECIFICATION . .) def Instruction                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive reads the nine numbers of a transformation matrix, which must be separated by commas
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
or spaces, and applies the matrix to the atoms given in the atom specification. This directive does not
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
create new atoms, but simply modifies those already present. Any symmetry operators given are applied
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
before the rotation. 
) def
Write
/left leftmargin indent add def 
/instr (DEORTHOGINAL  ATOM SPECIFICATION . .) def Instruction                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive applies the matrix vector saved by a previous MOLAX SAVE directive to the atoms
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
given in the atom specification. THEIR ORIGINAL COORDIANATES x,y,z MUST be in the MOLAX
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
coordinate \(Angstrom\) system This directive does not create new atoms, but simply modifies those
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
already present. Symmetry operators are not permitted. 
) def
Write
/left leftmargin indent add def 
/instr (UEQUIV  ATOM SPECIFICATIONS  .  .) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
The specified atoms to be converted so that they have isotropic temperature factors, U\(equiv\), defined
) def
/last 0 def 
Write
Newpage
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
by the SET UEQUIV command. IT IS NOT simply related to the diagonal elements of U\(aniso\). If an
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
atom is already isotropic, no action is taken. If this directive is given with no arguments, all the atoms in
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
the current atomic parameter list are converted to isotropic temperature factors. Physically impossible
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
values are not rejected. Symmetry operators are ignored. 
) def
Write
/left leftmargin indent add def 
/instr (ANISO  ATOM SPECIFICATIONS  .  .) def Instruction                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive causes all the specified atoms to be converted so that they have anisotropic temperature
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
factors. If an atom is already anisotropic, no action is taken, and any symmetry operators given are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
ignored. If this directive is given with no arguments, all the atoms in the current atomic parameter list
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
are converted to anisotropic temperature factors. 
) def
Write
/left  138 def /ipflag    1 def /numspace   14 def
/textstring (
Note that the anisotropic temperature factor produced by this operation is in fact still spherically
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
symmetrical, and that the s.f.l.s. routines automatically ensure that when the temperature factor of an
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atom is to be refined, it is in the correct form. 
) def
Write
/left leftmargin indent add def 
/instr (INSERT IDENTIFIER=NAME) def Instruction                                                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive inserts the value of the named identifier into the parameter 'SPARE' in the atom list,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
replacing any previous value \(except 'RESIDUE' which uses the 'RESIDUE' paramter in the atom
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
list\). SPARE is normally used to hold rho after Fourier maps. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
Currently available values for NAME are 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
ELECTRON - This inserts the atomic electron count calculated from the form factor 
) def
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
WEIGHT - This inserts the atomic weight from LIST 29 \(see section LIST29 \). 
) def
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
RESIDUE - This inserts a residue number into the 'RESIDUE' slot of list 5 replacing any previous
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
value, such that all connected atoms have the same residue number and each molecule has a different
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
residue number. 
) def
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
NCONN - This inserts the number of atoms connected to an atom, using the list of bonds. 
) def
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
RELAX - This inserts an ID, based upon the bonding topology and atomic types of the atoms. Atoms
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
at topologically identical positions will be given the same ID. \(e.g. the terminal F's in a CF3 group\). 
) def
Write
/left leftmargin indent add def 
/instr (SPHERE NEWSERIAL ATOMLIST) def Instruction                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This creates a 'shell' shape from the specified atom list. The centre of the shell is at the centre of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
gravity, the size is the mean distance of the given atoms from the centre, and the occupancy is equal to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
the sum of the occupancies of the atoms listed. U[iso] is the mean of the U[iso] or Ueqiv of the listed
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
atoms. The atom TYPE is QS, with the given serial number. The original atoms are not deleted, though
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
they should be or their occupancy set to zero. The atom type, QS, should be changed to something
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
appropriate. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (RING NEWSERIAL ATOMLIST) def Instruction                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This creates an 'annulus' shape from the specified atom list. The centre of the ring is at the centre of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
gravity, the size is the mean distance of the given atoms from the centre, and the occupancy is equal to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
the sum of the occupancies of the atoms listed. U[iso] is the mean of the U[iso] or Ueqiv of the listed
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
atoms. The atom TYPE is QR, with the given serial number. The original atoms are not deleted, though
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
they should be or their occupancy set to zero. The atom type, QS, should be changed to something
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
appropriate. The DECLINATION and AZIMUTH are computed from the constituent atoms. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (LINE NEWSERIAL ATOMLIST) def Instruction                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This creates an 'line' shape from the specified atom list. The centre of the line is at the centre of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
gravity, the size is twice the mean distance of the given atoms from the centre, and the occupancy is
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
equal to the sum of the occupancies of the atoms listed. U[iso] is the mean of the U[iso] or Ueqiv of the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
listed atoms. The atom TYPE is QL, with the given serial number. The original atoms are not deleted,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
though they should be or their occupancy set to zero. The atom type, QS, should be changed to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
something appropriate. The DECLINATION and AZIMUTH are computed from the constituent atoms. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REFORMAT) def Instruction                                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive converts an old \(non-FLAG\) version of LIST 5 \(see section LIST05 \) to the new format
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
\(extra parameters, old U[iso] slot now used as a flag and u[11] used for u[iso]\). 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ROTATE) def Instruction                                                                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive rotates a group of atoms a certain number of degrees around a specified vector. The
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
rotation is carried out in orthogonal space so preserves the geometry of the group. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
There are three options available: ROTATE D X Y Z VX VY VZ atom-specification # ROTATE D
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
ATOM1 VX VY VZ atom-specification # ROTATE D ATOM1 ATOMS2 atom-specification # The
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
first rotates the specified atoms, D degrees around the vector VX,VY,VZ keeping point X,Y,Z fixed.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
\(X,Y,Z and VX,VY,VZ are given in crystal fractions\). 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The second notation uses ATOM1 instead of X,Y,Z to specify the fixed point. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
The third notation uses ATOM1 to specify the fixed point and the vector from ATOM1 to ATOM2 to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
rotate around. 
) def
Write
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The rotation is D degrees anti-clockwise, when the specified vector is pointing towards you. 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
1\) Rotate the hydrogens of a methyl group by sixty degrees. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\EDIT) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( ROTATE 60 C\(1\) C\(2\) H\(20\) H\(21\) H\(22\)) def Literal                                                                                                                                                                                                                                              
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
2\) Turn a phenyl ring through 30 degrees around its external connecting bond, c\(1\) to c\(20\). 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\EDIT) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( ROTATE 30 C\(1\) C\(20\) C\(21\) C\(22\) C\(23\) C\(24\) C\(25\)) def Literal                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
3\) Rotate a residue 90 degrees about the a-direction from its centroid, QC\(1\) \(see also CENTROID and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
INSERT RESIDUE directives\) 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\EDIT) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( INSERT RESIDUE) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( CENTROID 1 RESIDUE\(1\)) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( ROTATE 90 QC\(1\) 1 0 0 RESIDUE\(1\)) def Literal                                                                                                                                                                                                                                                         
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/secttext (Reorganisation of lists 5 and 10  -  \\REGROUP) def Section                                                                                                                                                                                                                                      
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\REGROUP INPUTLIST= OUTPUTLIST=) def Literal                                                                                                                                                                                                                                                             
/litstring 
( SELECT MOVE= KEEP= MONITOR= SEQUENCE= SYMMETRY= TRANSLATION= GROUP=) def Literal                                                                                                                                                                                                                          
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\REGROUP) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( SELECT MOVE=1.6,MONITOR=HIGH) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
This routine offers a way of re-ordering the atoms in LIST 5 \(atomic parameters\) or LIST 10 \(Fourier
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
peaks\), so that related atoms or peaks form a sequential group in the list, and the coordinates put the atoms as
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
close together as possible. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
THIS ROUTINE DOES NOT USE LIST 29 \(atomic properties\) to get bonding distances, but uses a
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
single overall distance. 
) def
Write
/left  118 def /ipflag    1 def /numspace   22 def
/textstring (
In this routine, a set of distances is calculated about each atom or peak in the list in turn. For each atom or
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
peak in the list below the current pivot, the minimum contact distance is chosen, and if this is less than a user
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
specified maximum, the atom or peak is moved up the list to a position directly below the pivot. \( The
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
MOVE parameter\). When more than one atom or peak is moved, their relative order is preserved as they are
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
inserted behind the current pivot atom. As well as reordering the list, the necessary symmetry operators are
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
applied to the positional and thermal parameters to bring the atom or peak into the same part of the unit cell
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
as the current pivot atom. The result of this process is to bring related atoms together in the list, and to place
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
all the atoms in the same part of the unit cell. Setting the GROUP parameter to YES causes the PART to be
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
incremented between isolated parts of the structure. 
) def
Write
/left leftmargin def 
/instr (\\REGROUP INPUTLIST= OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                   
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add indent add def
/instr (OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add def 
/instr (SELECT MOVE= KEEP= MONITOR= SEQUENCE= SYMMETRY= TRANSLATION= GROUP=) def Instruction                                                                                                                                                                                                                
/left leftmargin indent add indent add def
/instr (MOVE=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter has a default value of 2.0, and is the distance below which atoms or peaks are
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
considered to be bonded, and are thus moved about the cell and relocated in LIST 5 \(atomic
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameters\). 
) def
Write
/left leftmargin indent add indent add def
/instr (KEEP=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This is the maximum number of atoms that the final output list can contain. If this parameter is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
omitted, all the atoms are output. If MOVE is used to move the atoms around, it is unwise to use the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
KEEP parameter,since some of the original input atoms may find their way to the bottom of the list
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
and be eliminated. \(The default value is 1000000\). 
) def
Write
/left leftmargin indent add indent add def
/instr (MONITOR=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LOW   -  Default value) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
Newpage
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If MONITOR is HIGH, then each pivot atom and its associated moved atoms are listed, as well as
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
any deleted atoms. If MONITOR is LOW, the moved atoms are not listed. 
) def
Write
/left leftmargin indent add indent add def
/instr (SEQUENCE) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If SEQUENCE is YES, the outputlist is resquenced as described above. If SEQUENCE is NO, the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
serial numbers of the atoms are not changed from the original list. 
) def
Write
/left leftmargin indent add indent add def
/instr (SYMMETRY=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter controls the use of symmetry information in the calculation of contacts, and can take
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
three values. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SPACEGROUP  -  Default value. The full spacegroup symmetry is used in) def Literal                                                                                                                                                                                                                   
/litstring 
(                                    all computations) def Literal                                                                                                                                                                                                                                          
/litstring 
(      PATTERSON.     A centre of symmetry in introduced, and the translational) def Literal                                                                                                                                                                                                                
/litstring 
(                     parts of the symmetry operators are dropped.) def Literal                                                                                                                                                                                                                             
/litstring 
(      NONE.          Only the identity operator is used.) def Literal                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add indent add def
/instr (TRANSLATION=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter controls the application of cell translations in the calculation of contacts, and can
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
take the values YES or NO 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (GROUP) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If GROUP is YES, the PART parameter for each atom is set. 
) def
Write
Blank
/secttext (Repositioning of atoms  -  \\COLLECT) def Section                                                                                                                                                                                                                                                
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
This routine changes the atom coordinates so as to form a 'molecule' using the covalent radii given in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
LIST 29 \(atomic properties - see section LIST29 \). The atom TYPE, SERIAL and order in LIST 5 \(atomic
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
parameters - see section LIST05 \) is not changed. 
) def
Write
Blank
/left leftmargin def 
/instr (\\COLLECT INPUTLIST= OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                   
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add indent add def
/instr (OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add def 
/instr (SELECT MONITOR= TOLERANCE= TYPE= SYMMETRY= TRANSLATION=) def Instruction                                                                                                                                                                                                                            
/left leftmargin indent add indent add def
/instr (MONITOR=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LOW   -  Default value) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If MONITOR is HIGH, then each pivot atom and its associated moved atoms are listed, as well as
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
any deleted atoms. If MONITOR is LOW, only deleted atoms are listed. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (TOLERANCE=) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
The tolerance is added to the sum of the co-valent radii taken from LIST 29 \(atomic properties - see
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
section LIST29 \) to give a value used for determining inter-atomic bonds. The default is 0.2 A. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      ALL) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      PEAKS) def Literal                                                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If TYPE equals ALL, then the coodinates of all atoms are liable to be modified by the symmetry
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
operators in order to assemble a single fragment. If TYPE equals PEAKS, then only the peaks are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
moved to bring them as close as possible to existing atoms. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (SYMMETRY=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter controls the use of symmetry information in the calculation of contacts, and can take
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
three values. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
(      SPACEGROUP  -  Default value. The full spacegroup symmetry is used in) def Literal                                                                                                                                                                                                                   
/litstring 
(                                    all computations) def Literal                                                                                                                                                                                                                                          
/litstring 
(      PATTERSON.     A centre of symmetry in introduced, and the translational) def Literal                                                                                                                                                                                                                
/litstring 
(                     parts of the symmetry operators are dropped.) def Literal                                                                                                                                                                                                                             
/litstring 
(      NONE.          Only the identity operator is used.) def Literal                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add indent add def
/instr (TRANSLATION=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter controls the application of cell translations in the calculation of contacts, and can
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
take the values YES or NO 
) def
Write
Blank
Blank
/secttext (Conversion of temperature factors - \\CONVERT) def Section                                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\CONVERT INPUTLIST= OUTPUTLIST= CROSSTERMS=) def Literal                                                                                                                                                                                                                                                 
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\CONVERT) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
This routine will convert the temperature factors of a set of atoms into the correct form when their
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
temperature factor, t, is given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       T = exp\(-B[iso]*S**2\)     where s = sin\(theta\)\/lambda.) def Literal                                                                                                                                                                                                                            
Blank
/litstring 
( or for an anisotropic atom :) def Literal                                                                                                                                                                                                                                                                 
Blank
/litstring 
(       T = exp\(-\(h*h*b[11] + k*k*b[22] + l*l*b[33]) def Literal                                                                                                                                                                                                                                          
/litstring 
(           + k*l*2*b[23] + h*l*2*b[13] + h*k*2*b[12]\)\)) def Literal                                                                                                                                                                                                                                      
LitBlank
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
The cross terms stored in the original LIST 5 \(the model parameters\) may either be B[IJ] or 2*B[IJ] . \(The
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
correct form of the temperature factor, in terms of u[ii]'s and u[ij]'s, is given in the section on the input of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
LIST 5\). After conversion, the atoms are output to the disc as a new LIST 5. Remember that if U[ISO] is
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
non-zero, \(its default at atom input is 0.05\) the U[IJ] are ignored and so will not be converted. 
) def
Write
/left leftmargin def 
/instr (\\CONVERT INPUTLIST= OUTPUTLIST= CROSSTERMS=) def Instruction                                                                                                                                                                                                                                       
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This is the command which initiates the routine to convert the temperature factors. 
) def
Write
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add indent add def
/instr (OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add indent add def
/instr (CROSSTERMS=) def Instruction                                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      B[IJ]   -  Default value.) def Literal                                                                                                                                                                                                                                                               
/litstring 
(      2B[IJ]) def Literal                                                                                                                                                                                                                                                                                  
LitBlank
/secttext (Hydrogen placing - \\HYDROGENS) def Section                                                                                                                                                                                                                                                      
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\HYDROGENS INPUTLIST= OUTPUTLIST=) def Literal                                                                                                                                                                                                                                                           
/litstring 
( DISTANCE  D) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( SERIAL    N) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( U[ISO]    U) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( U[ISO]    NEXT   MULT) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( AFTER     TYPE\(SERIAL\)) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( PHENYL    X R\(1\) R\(2\) R\(3\) R\(4\) R\(5\)) def Literal                                                                                                                                                                                                                                               
/litstring 
( H33       X R\(1\) R\(2\)) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( H23       X R\(1\) R\(2\)) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( H13       X R\(1\) R\(2\) R\(3\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
( H22       X R\(1\) R\(2\)) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( H12       X R\(1\) R\(2\)) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( H11       X R\(1\)) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( HBOND     DONOR ACCEPTOR) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\HYDROGENS) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( DISTANCE  1.09) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( U[ISO]    NEXT   1.2) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( H33     C\(7\) C\(6\) R\(5\)) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( H22     C\(14\) C\(15\) C\(13\)) def Literal                                                                                                                                                                                                                                                              
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
This routine computes the coordinates of hydrogen atoms bonded to a target atom. The hybridisation of the
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
target atom and the identifiers of atoms bonded to it must be given. 
) def
Write
/left leftmargin def 
/instr (\\HYDROGENS INPUTLIST= OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                 
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add indent add def
/instr (OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add def 
/instr (DISTANCE  D) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This sets the central atom-hydrogen atom distance to 'D' angstroms. The default value is 1.0. The
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
current value of 'D' remains in force until another 'DISTANCE' directive is given. 
) def
Write
/left leftmargin indent add def 
/instr (SERIAL  N) def Instruction                                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This sets the serial number of the next hydrogen atom to be added to LIST 5 \(atomic parameters\) to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
'N'. The default value is 1. Subsequent hydrogen atoms will have the serial numbers 'N+1', 'N+2', etc.,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
until the next 'SERIAL' directive is input. 
) def
Write
/left leftmargin indent add def 
/instr (U[ISO]    U) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive sets the isotropic temperature factor of each hydrogen atom to 'U' angstroms squared,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
and remains in force until another 'U[ISO]' directive is given. If no values is given for U, the next
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
definition is used. 
) def
Write
/left leftmargin indent add def 
/instr (U[ISO]    NEXT   MULT) def Instruction                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This is an alternatine form of the preceding directive. It sets the isotropic temperature factor of each
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
hydrogen atom to 'MULT' times the equivalent temperature factor of the atom it is bonded to. The
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
default value is 1.2. The directive remains in force until another 'U[ISO]' directive is given. 
) def
Write
/left leftmargin indent add def 
/instr (AFTER   TYPE\(SERIAL\)) def Instruction                                                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
The hydrogen atoms generated by the placing routines are inserted in the new LIST 5 \(atomic
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   11 def
/textstring (
parameters\) after the atom 'TYPE\(SERIAL\)'. This directive must appear immediately after the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
directive that generated the hydrogen atom coordinates, and applies only to that group of hydrogen
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
atoms. If no 'AFTER' directive is given, the new hydrogen atoms are added at the end of the current
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
LIST 5 \(atomic parameters\). 
) def
Write
/left leftmargin indent add def 
/instr (PHENYL  X R\(1\) R\(2\) R\(3\) R\(4\) R\(5\)) def Instruction                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This generates the coordinates of the five hydrogen atoms of a phenyl group. The first atom specified
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
must be the atom that bonds the phenyl group to the rest of the structure, and the other atoms must be in
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the order of connectivity. 
) def
Write
/left leftmargin indent add def 
/instr (H33  X R\(1\) R\(2\)) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This geneates the hydrogen atoms of a methyl group. The methyl carbon is the first atom specified, and
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
the hydrogen atoms are generated so that one of them is trans with respect to the third atom specified,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
R\(2\). 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      H) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(       \\) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      H-X-R\(1\)-R\(2\)) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(       \/) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      H) def Literal                                                                                                                                                                                                                                                                                       
LitBlank
/left leftmargin indent add def 
/instr (H23  X R\(1\) R\(2\)) def Instruction                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This generates the coordinates of two hydrogen atoms on an sp3 atom X. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      H   R\(1\)) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(       \\ \/) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(        X) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(       \/ \\) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      H   R\(2\)) def Literal                                                                                                                                                                                                                                                                              
LitBlank
/left leftmargin indent add def 
/instr (H13  X R\(1\) R\(2\) R\(3\)) def Instruction                                                                                                                                                                                                                                                        
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This generates the coordinates of one hydrogen atom on an sp3 atom X. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(          R\(1\)) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(         \/) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(     H- X-R\(2\)) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(         \\) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(          R\(3\)) def Literal                                                                                                                                                                                                                                                                              
LitBlank
/left leftmargin indent add def 
/instr (H22  X R\(1\) R\(2\)) def Instruction                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This generates the coordinates of two hydrogen atoms on an sp2 atom X 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
(      H        R\(2\)) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(       \\      \/) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(        X=R\(1\)) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(       \/) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      H) def Literal                                                                                                                                                                                                                                                                                       
LitBlank
/left leftmargin indent add def 
/instr (H12  X R\(1\) R\(2\)) def Instruction                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This generates the coordinates of one hydrogen atom on an sp2 atom X. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(        H) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(         \\) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(          X=R\(1\)) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(         \/) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      R\(2\)) def Literal                                                                                                                                                                                                                                                                                  
LitBlank
/left leftmargin indent add def 
/instr (H11  X  R) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This generates the coordinates of the single hydrogen atom bonded to an SP hybridised atom. 
) def
Write
/left leftmargin indent add def 
/instr (HBOND X  R) def Instruction                                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This generates a single H atom 'DISTANCE' angstroms from the donor in the direction of the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
acceptor. X is the donor, R the acceptor. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Blank
/litstring 
(        X-H....R) def Literal                                                                                                                                                                                                                                                                              
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Place Hydrogen atoms on the following fragment:) def Literal                                                                                                                                                                                                                                              
Blank
/litstring 
(      C\(1\)          C\(5\)) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(          \\        \/) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(           C\(2\)=C\(3\)) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(                   \\) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(                    C\(4\)-Br\(1\)) def Literal                                                                                                                                                                                                                                                            
Blank
/litstring 
(     \\HYDROGENS) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      DISTANCE 0.99) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      U[ISO]   0.06) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      H33 C\(1\) C\(2\) C\(3\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      AFTER C\(1\)) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      H12 C\(2\) C\(1\) C\(3\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      AFTER C\(2\)) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      H23 C\(4\) Br\(1\) C\(3\)) def Literal                                                                                                                                                                                                                                                               
/litstring 
(      AFTER C\(4\)) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      H33 C\(5\) C\(3\) C\(4\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/secttext (Perhydrogenation - \\PERHYDRO) def Section                                                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\PERHYDRO INPUTLIST= OUTPUTLIST=) def Literal                                                                                                                                                                                                                                                            
/litstring 
( DISTANCE  D) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( SERIAL    N) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( U[ISO]    U) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( U[ISO]    NEXT   MULT) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( ACTION    MODE) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( TYPE      C or N) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\PERHYDRO) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( U[ISO] NEXT 1.0) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
This command scans the atomic coordinates for carbon atoms, attempts to assign their hybridisation state
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
\(on the basis of bond lengths\) and then generates \\HYDROGEN commands to create any necessary
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
hydrogen atoms. Existing Hydrogen atoms are not replaced by this routine. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The generated commands may be processed internally by CRYSTALS without the user needing to see
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
them, or they may be sent to the external files for later use. This is the default mode. If no new hydrogen
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
atoms are generated, no new external files are created. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
The external files are called DELH.DAT and PERH.DAT, with DELH containing an entry for every atom
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
created by PERH. Executing DELH and PERH will delete existing named atoms, and recreate them
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
geometrically. 
) def
Write
/left leftmargin def 
/instr (\\PERHYDRO INPUTLIST= OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                  
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add indent add def
/instr (OUTPUTLIST) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Newpage
/litstring 
(      5   -  Default value, the atomic coordinates) def Literal                                                                                                                                                                                                                                            
/litstring 
(      10                    the Fourier peaks search) def Literal                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add def 
/instr (DISTANCE  D) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This sets the central atom-hydrogen atom distance to 'D' angstroms. The default value is 1.0. The
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
current value of 'D' remains in force until another 'DISTANCE' directive is given. 
) def
Write
/left leftmargin indent add def 
/instr (SERIAL  N) def Instruction                                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
This sets the serial number of the next hydrogen atom to be added to LIST 5 to 'N'. The default value
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
is 1. Subsequent hydrogen atoms will have the serial numbers 'N+1', 'N+2', etc., until the next
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
'SERIAL' directive is input. 
) def
Write
/left leftmargin indent add def 
/instr (U[ISO]    U) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive sets the isotropic temperature factor associated with each hydrogen atom to 'U'
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
angstroms squared. The default value is 0.05. The directive remains in force until another 'U[ISO]'
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive is given. 
) def
Write
/left leftmargin indent add def 
/instr (U[ISO]    NEXT   MULT) def Instruction                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This is an alternatine form of the preceding directive. It sets the isotropic temperature factor associated
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
with each hydrogen atom to 'MULT' times the equivalent temperature factor of the atom it is bonded
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
to. The default value is 1.2. The directive remains in force until another 'U[ISO]' directive is given. 
) def
Write
/left leftmargin indent add def 
/instr (ACTION    MODE) def Instruction                                                                                                                                                                                                                                                                     
Blank
/left leftmargin indent add indent add def
/instr (MODE) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NORMAL) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      PUNCH) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      BOTH     -  Default value.) def Literal                                                                                                                                                                                                                                                              
LitBlank
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
NORMAL causes internal commands to be generated and executed. PUNCH causes output to the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
PUNCH file only. BOTH forces both actions. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (TYPE    MODE) def Instruction                                                                                                                                                                                                                                                                       
Blank
/left leftmargin indent add indent add def
/instr (MODE) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      C   -  Default value.) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      N) def Literal                                                                                                                                                                                                                                                                                       
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
C enables the program to place hydrogen atoms on carbon atoms. 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
N enables the program to place hydrogen atoms on nitrogen. 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
It is advisable to perform placement on C before N, since the hybridisation states of C are more
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
clearly defined. 
) def
Write
Blank
Blank
Blank
/secttext (Hydrogen re-numbering - \\HNAME) def Section                                                                                                                                                                                                                                                     
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\HNAME INPUTLIST= OUTPUTLIST=) def Literal                                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\HNAME) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
This command automatically renumbers hydrogen atoms so that their serial numbers are related to the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
bonded non-hydrogen atom. 
) def
Write
Blank
/secttext (Regularisation of atomic groups - \\REGULARISE) def Section                                                                                                                                                                                                                                      
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\REGULARISE    MODE) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( COMPARE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( KEEP) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( REPLACE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( AUGMENT) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( METHOD NUMBER) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( GROUP NUMBER) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( TARGET Atom Specifications) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( IDEAL  Atom Specifications) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( RENAME offset number) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( CAMERON) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( MAP Atom Specifications) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( ONTO Atom Specifications) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( SYSTEM a b c alpha beta gamma) def Literal                                                                                                                                                                                                                                                                
/litstring 
( ATOM    x    y    z) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( CP-RING x) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( HEXAGON x) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( OCTAHEDRON x y z) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( PHENYL) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( SQP x y z) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( SQUARE x y) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( TBP x z) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( TETRAHEDRON x) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\REGULARISE REPLACE) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( GROUP 6) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( TARGET C\(1\) UNTIL C\(6\)) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( PHENYL) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
This routine calculates a fit between the coordinates of a group of atoms in LIST 5 \(atomic parameters\)
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
and another group. The calculated fitting matrix may be used to compare the geometry of two groups, or it
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
may be applied to transform the new coordinates which will then replace the existing group in LIST 5 \(D. J.
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Watkin, Act Cryst \(1980\). A36,975\). 
) def
Write
/left  118 def /ipflag    1 def /numspace   21 def
/textstring (
In this section, the group of atoms in LIST 5 to whose coordinates the fit is made is referred to as the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
'TARGET atoms', and the group to be fitted onto that group is referred to as the 'IDEAL atoms'. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
The source of the 'IDEAL atoms' can be the LIST 5, a pre-stored idealised geometry, or values read in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
from the directives. Those directives that refer to LIST 5 use the usual CRYSTALS formats for atom
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
specifications. Once a transformation has been found, this can be used as the basis for naming one fragment
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
based on the names of another. 
) def
Write
/left leftmargin def 
/instr (Input for REGULARISE) def Instruction                                                                                                                                                                                                                                                               
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
The input to REGULARISE must define the groups to be fitted together, the method used for fitting , and
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
the use to be made of the results. The user must ensure that corresponding atoms are specified in the same
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
positions of the 'TARGET' and 'IDEAL' group definitions, so the program knows which pairs of atoms
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
are to be matched. It is not necessary to have co-ordinates of every atom in the TARGET fragment. The
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
inclusion of atom specifications for which coordinates do not exist in the parameter list indicates that the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
procedure must generate coordinates for these atoms. This allows the user to give a type and serial to new
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
atoms created by the procedure. Any 'atoms' without coordinates are not included in the fitting process. 
) def
Write
/left  128 def /ipflag    1 def /numspace   14 def
/textstring (
The maximum number of atom IDENTIFIERS permitted on an TARGET or IDEAL directive is about
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
250. Note that an UNTIL sequence only counts as two identifiers. The number of implied atoms permitted
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
is very large. 
) def
Write
/left  128 def /ipflag    1 def /numspace   17 def
/textstring (
The 'IDEAL' group may be given in various ways. For calculations on a single structure, it may be
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
extracted from the stored data in the same way as the 'TARGET' group. In this case however, all the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
atoms must previously exist. Alternatively, explicit co-ordinates may be given in a system defined by the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
user, or a predefined group may be used. In any case all the positional parameters of the atoms in the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
'IDEAL' group will be known before the calculation begins. 
) def
Write
/left leftmargin def 
/instr (Output from REGULARISE) def Instruction                                                                                                                                                                                                                                                             
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
The output from REGULARISE includes the fragment centroids, their sums and differences and the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
transformation fitting the IDEAL onto the TARGET. 
) def
Write
/left leftmargin def 
/instr (Method of calculation) def Instruction                                                                                                                                                                                                                                                              
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
The centroid of each fragment is moved to the origin. The atomic coordinates are converted to an
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
orthogonal system and rotated to an 'inertial tensor' system \(to help condition the L.S. matrix\). 
) def
Write
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
The fitting calculation is either constrained to be a pure rotation- inversion, or is a free linear
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   10 def
/textstring (
transformation \(rotation-diltion\). If requested, the pure rotation component of the calculated
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
rotation-dilation matrix is extracted. The calculated matrix is applied to the co-ordinated of the 'IDEAL'
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
group, which is then converted back to crystal fractions, for comparison with the TARGET. 
) def
Write
/left leftmargin indent add def 
/instr (WARNING) def Instruction                                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The 3 by 3 transformation matrices generated at various stages may well be singular, especially if no
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
rotation is defined about one of the axes. To combat possible problems with matrix inversion, a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
Moore-Penrose type matrix inverter is used. Even so, the user should be aware that there may be no
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
unique solution to his problem. For example, when a planar fragment is fitted to an almost planar
) def
/last 0 def 
Write
Newpage
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
fragment one fit may involve inversion of the non-planar fragment. Inversion can be prevented by using
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
Method 3. Note also that if almost planar groups are being fitted, the dilation factor perpendicular to the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
plane may be very large, and thus have an undesirable effect if applied to atoms far from the plane. 
) def
Write
Blank
/left leftmargin def 
/instr (\\REGULARISE    MODE) def Instruction                                                                                                                                                                                                                                                               
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
MODE is an optional parameter. 
) def
Write
/left leftmargin indent add indent add def
/instr (MODE) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      COMPARE      -      Default value) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      KEEP) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      REPLACE) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      AUGMENT) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
The effects are :- 
) def
Write
/left  148 def /ipflag    1 def /numspace   12 def
/textstring (
COMPARE The specified groups are only compared. The translations and rotations necessary to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
match the groups will be calculated but not applied. 
) def
Write
/left  148 def /ipflag    1 def /numspace   12 def
/textstring (
KEEP The specified groups will be compared and the calculated transformations applied. The
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
TARGET atoms are kept, and atoms whose parameters have been calculated will be stored at the end
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   22 def
/textstring (
of the new LIST 5. NOTE. If KEEP is given as a keyword, it can be followed by an offset to be used
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
for the new serial numbers 
) def
Write
/left  148 def /ipflag    1 def /numspace   11 def
/textstring (
REPLACE The specified groups will be compared and the calculated transformations applied.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
The new atoms whose parameters have been calculated will be placed at the end of LIST 5 and the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
old atoms deleted form the list. 
) def
Write
/left  148 def /ipflag    1 def /numspace   11 def
/textstring (
AUGMENT The specified groups will be compared and the calculated transformations applied.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
The TARGET atoms which actually exist in LIST 5 are retained unaltered. Parameters that have been
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
calculated for dummy atoms \(represented by a name only in the TARGET list\) will be placed at the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
end of the new LIST 5. 
) def
Write
/left  148 def /ipflag    1 def /numspace   14 def
/textstring (
For REPLACE and KEEP the 'IDEAL' coordinates define the geometry to be preserved, i.e. the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
model, and the 'TARGET' coordinates specify where, in what orientation and with what atom
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
identifiers the model is to be placed. That is, the TARGET structure is replaced by the IDEAL. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (KEEP  Z) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin indent add def 
/instr (COMPARE) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin indent add def 
/instr (REPLACE) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin indent add def 
/instr (AUGMENT) def Instruction                                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
These 4 directives override the option specified by the MODE parameter of the REGULARISE
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
command. The next group calculated will be treated in the specified mode. See the description of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
MODE for details. If the mode is KEEP, an offset Z can be given to be added to ther SERIAL of kept
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atoms \(default 0\) otherwise there are no parameters. 
) def
Write
/left leftmargin indent add def 
/instr (METHOD NUMBER) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive selects the method for matching the groups by giving its number from the following list:- 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Number     Method) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(      ------     ------) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(       1        Rotation  component of  rotation-dilation) def Literal                                                                                                                                                                                                                                     
/litstring 
(                matrix applied. \( default \)) def Literal                                                                                                                                                                                                                                                 
/litstring 
(       2        Rotation-dilation  matrix  calculated and) def Literal                                                                                                                                                                                                                                     
/litstring 
(                applied.) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(       3        Pure  rotation matrix  calculated  by the) def Literal                                                                                                                                                                                                                                     
/litstring 
(                Kabsch method and applied. This algorithm) def Literal                                                                                                                                                                                                                                     
/litstring 
(                preserves chirality.) def Literal                                                                                                                                                                                                                                                          
/litstring 
(       4        Enable improper rotation in Kabsch method) def Literal                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add def 
/instr (GROUP NUMBER) def Instruction                                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive specifies the number of atoms in the groups to be matched. It should be the first directive
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
for each group of atoms. The appearance of a second or subsequent GROUP directive in the input
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
initiates the calculation for the previous group. 
) def
Write
/left leftmargin indent add def 
/instr (TARGET Atom Specifications) def Instruction                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive is used to specify the 'TARGET' group of atoms. The directive will carry a series of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
atom specifications which will define the positions of the 'TARGET' atoms and the names of any
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
atoms to be created by the routine. Atoms which exist in LIST 5 and atoms to be created can appear in
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
any order in the TARGET group , although the order should be such that corresponding pairs of atoms
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
appear at the same relative positions in the 'TARGET' and 'IDEAL' groups. 
) def
Write
/left leftmargin indent add def 
/instr (IDEAL Atom Specifications) def Instruction                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This directive is used to specify a group of 'IDEAL' atoms to be taken from the stored LIST 5. Every
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atom on this directive must exist. 
) def
Write
/left leftmargin indent add def 
/instr (SYSTEM a b c alpha beta gamma) def Instruction                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is will change the co-ordinate system used to interpret any subsequent ATOM directives. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The initial co-ordinate system has orthogonal axes of unit length and is equivalent to :- 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( SYSTEM  1.0  1.0  1.0  90.0  90.0  90.0) def Literal                                                                                                                                                                                                                                                      
LitBlank
Newpage
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
Values must be given for a', b', and c', the angles default to 90.0. 
) def
Write
/left leftmargin indent add def 
/instr (ATOM    x    y    z) def Instruction                                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive allows the cordinates of a single atom to be specified, in fractional co-ordinates in the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
current co-ordintate system. It must be followed by three decimal numbers which will be the X, Y, and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Z coordinates of the atom. 
) def
Write
/left leftmargin indent add def 
/instr (RENAME offset number) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive can only be used after previous directives have been used to match one group onto
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
another \(REGULARISE COMPARE\), and enables the use of the MAP and ONTO directives. The
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
MAP list of atoms is transformed by the existing transformation matrix \(which may have been
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
computed from only a few specified atoms\). Each atom is then compared with the ONTO list, and the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
TYPE and SERIAL of the MAP atom used to generate a TYPE and SERIAL for the closest ONTO
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atom. 
) def
Write
/left leftmargin indent add indent add def
/instr (OFFSET) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
The serial numbers of the atoms in the group being re-named are related to those of the master group
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
by an increment of 'OFFSET'. The default value is 100 
) def
Write
/left leftmargin indent add indent add def
/instr (NUMBER) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If the number of atoms supplied on the following MAP and ONTO directives does not match
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NUMBER, a warning is printed. 
) def
Write
/left leftmargin indent add def 
/instr (CAMERON) def Instruction                                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This matches atoms as in RENUMBER, but only creates CAMERON files with atoms transformed into
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the common coordinate system. 
) def
Write
/left leftmargin indent add def 
/instr (MAP  Atom Specifications) def Instruction                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This specifies the atoms whose TYPE and SERIAL are to be propogated into the ONTO atoms. The
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atoms can be in any order. 
) def
Write
/left leftmargin indent add def 
/instr (ONTO  Atom Specifications) def Instruction                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This specifies the atoms to be renamed. The atoms may be in any order and have any TYPE, but there
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
must be EXACTLY as many as on the MAP directive. The atoms can have any TYPE, but must have
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
unique SERIAL numbers. 
) def
Write
/left leftmargin indent add def 
/instr (HEXAGON X) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The 'IDEAL' group is a regular hexagon with a side of length 'X'. The default for x is 1.0. 
) def
Write
/left leftmargin indent add def 
/instr (PHENYL) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The same as HEXAGON with a fixed side of 1.39. 
) def
Write
/left leftmargin indent add def 
/instr (CP-RING X) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The 'IDEAL' group is a regular pentagon with a side of length 'X'. The default for x is 1.4. 
) def
Write
/left leftmargin indent add def 
/instr (SQUARE X Y) def Instruction                                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
The 'IDEAL' group is a rectangle with atoms at \(x,0,0\) , \(0,y,0\) , \(-x,0,0\) , \(0,-y,0\) . The parameters X
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and Y specify the size of the group to be used. 
) def
Write
/left leftmargin indent add def 
/instr (OCTAHEDRON X Y Z) def Instruction                                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
The 'IDEAL' group is an octahedron with atoms at \(0,0,0\) , \(-x,0,0\) , \(0,y,0\) , \(x,0,0\) , \(0,-y,0\) , \(0,0,z\)
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
, \(0,0,-z\). The parameters X, Y and Z specify the size of the octahedron. 'z' defaults to 'y' defaults to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
'x' defaults to '1.0' 
) def
Write
/left leftmargin indent add def 
/instr (SQP X Y Z) def Instruction                                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
The 'IDEAL' group is a square pyramid with atoms at \(0,0,0\) , \(x,0,0\) , \(0,y,0\) , \(-x,0,0\) , \(0,-y,0\) ,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
\(0,0,z\). The parameters X, Y and Z specify the size of the octahedron. 'z' defaults to 'y' defaults to 'x'
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
defaults to '1.0' 
) def
Write
/left leftmargin indent add def 
/instr (TBP X Z) def Instruction                                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
The 'IDEAL' group is a trigonal bipyramid with atoms at \(0,0,0\) , \(x,0,0\) , \(-x\/2,0.86603x,0\),
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
\(-x\/2,-0.86603x,0\) , \(0,0,z\) , \(0,0,-z\) . The parameters X and Z specify the scale in the xy plane and z
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directions. 
) def
Write
/left leftmargin indent add def 
/instr (TETRAHEDRON X) def Instruction                                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
The 'IDEAL' group is a regular tetrahedron with an atom at the centre. 'x' is the distance in Angstrom
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
from the centre to an apex and defaults to '1.0' 
) def
Write
/left leftmargin indent add def 
/instr (ORIGIN) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is not yet implemented. 
) def
Write
Blank
/left leftmargin def 
/instr (Uses of \\REGULARISE) def Instruction                                                                                                                                                                                                                                                               
Blank
/left leftmargin indent add def 
/instr (1 - Extending a fragment to a complete molecule) def Instruction                                                                                                                                                                                                                                    
Blank
/left  138 def /ipflag    1 def /numspace   18 def
/textstring (
Three atoms of a phenyl group \( C\(1\), C\(2\) C\(\(6\)\) have been located. Fill in the missing atoms from
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
a non-dilated idealised phenyl group. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\REGULARISE AUGMENT) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      GROUP 6) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      METHOD 1) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      \\ C\(3\), C\(4\), and C\(5\) do not yet exist.) def Literal                                                                                                                                                                                                                                         
/litstring 
(      TARGET C\(1\) C\(2\) C\(3\) C\(4\) C\(5\) C\(6\)) def Literal                                                                                                                                                                                                                                        
/litstring 
(      PHENYL) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add def 
Newpage
/instr (2 - Forcing a regular shape on a group of atoms) def Instruction                                                                                                                                                                                                                                    
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
A group of atoms is approximately octahedral. Replace them by a \(posibly dilated\) regular octahedron. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\REGULARISE REPLACE) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      GROUP 7) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      METHOD 2) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      TARGET CO\(1\) N\(1\) N\(2\) N\(3\) N\(4\) N\(5\) N\(6\)) def Literal                                                                                                                                                                                                                                
/litstring 
(      OCTAHEDRON) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add def 
/instr (3 - Checking for an additional symmetry element) def Instruction                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Determine whether the two molecules in an asymmetric unit are related by a symmetry operation not
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
expected for the space group. The matrix relating the molecules and the translation required to make
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   11 def
/textstring (
their centroids coincide should display any additional \(approximate\) symmetry present. Remember that
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
if one molecule is the enantiomer of the other, Method 3 will lead to an unsatisfactory fitting unless one
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
molecule is inverted, \(by using the operator -1 in the atom specifications e.g. FIRST\(-1\) UNTIL C\(23\).
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This can be done even if the space group is non-centrosymmetric \). 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\REGULARISE COMPARE) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      GROUP 16) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      TARGET C\(101\) UNTIL N\(102\)) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      IDEAL  C\(201\) UNTIL N\(202\)) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add def 
/instr (4 - Renaming a group of atoms) def Instruction                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
A second group of atoms is given new TYPES and SERIAL numbers so that the atom names are
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
related to a previously named group. 
) def
Write
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
In the example, the user has identified two sets of four non-coplanar atoms in each group e.g. C\(1\)
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
with Q\(103\), C\(3\) with Q\(99\) etc. The transformation is then used to map the whole of the first group
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
\(C\(1\) until O\(25\)\) onto the second group \(Q\(96\) until Q\(120\)\). Both of these groups must contain the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
same number of atoms, but they may be in any order. Atom Q\(103\) will be renamed to C\(101\), atom
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
Q\(100\) to C\(107\) etc. Once all the atoms have been renamed, the list could be sorted based on the serial
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
numbers. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\REGULARISE) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      GROUP 4) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      IDEAL C\(1\) C\(3\) C\(5\) C\(7\)) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      TARGET Q\(103\) Q\(99\) C\(116\) Q\(100\)) def Literal                                                                                                                                                                                                                                               
/litstring 
(      RENAME 100) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      MAP C\(1\) UNTIL O\(25\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      ONTO Q\(96\) UNTIL Q\(120\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\EDIT) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      SORT SERIAL) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add def 
/instr (5 - Viewing matched molecules in CAMERON) def Instruction                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This does the mapping as RENAME, but doesn't rename the atoms, just outputs CAMERON input
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
files showing the two molecules superimposed. Use as follows: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(   \\REGULARISE) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(   group 16) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(   target C\(10\) until C\(26\)) def Literal                                                                                                                                                                                                                                                               
/litstring 
(   ideal  C\(60\) until C\(76\)) def Literal                                                                                                                                                                                                                                                               
/litstring 
(   cameron) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(   map    C\(51\) until C\(99\)) def Literal                                                                                                                                                                                                                                                               
/litstring 
(   onto   C\(1\) until C\(49\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(   end) def Literal                                                                                                                                                                                                                                                                                        
LitBlank
/left  128 def /ipflag    0 def /numspace   10 def
/textstring (
by choosing Graphics->Special->Cameron \(use existing...\) from the menu. Then type "obey
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
regular.oby" in Cameron to colour the molecules nicely. The TARGET and IDEAL are used to obtain
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
the mapping. The atoms in MAP and ONTO are just the ones you want to be included. Don't read the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atoms back into CRYSTALS when closing CAMERON - they're in orthogonal coordinates. 
) def
Write
Blank
/left leftmargin indent add def 
/instr ( - Comparing two structures) def Instruction                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
The SYSTEM and ATOM directives enable one to compare one structure with atoms from a second
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
structure. However, since the second structure is not part of the main model, CRYSTALS knows
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
nothing about the connectivity. Using the KEEP z directive, the second strcuture can be added to the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
DSC file, enabling a complete calculation to be performed. 
) def
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
In the following example, O\(16\) is in a quite distinctly different position in the two structures, so place
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
holder Q\(16\) is used during the first mapping. The input coordinates are added to the DSC file with
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
SERIAL numbers off-set by 400. 
) def
Write
Blank
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
In the second calculation O\(16\) of the original structure is compared with Q\(416\) of the input structure. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\regular keep) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(keep 400) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(group 7) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(old mo\(1\) o\(11\) o\(12\) o\(13\) o\(14\) o\(15\) q\(16\)) def Literal                                                                                                                                                                                                                                   
/litstring 
(system 8.4830 10.1870 11.0340 105.260 95.290 95.100 909.60) def Literal                                                                                                                                                                                                                                    
/litstring 
(atom 0.1570 0.5269 0.2514) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(atom 0.1356 0.5975 0.1278) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(atom -0.0296 0.4567 0.2632) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(atom 0.2258 0.3448 0.1750) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(atom 0.1693 0.6928 0.3850) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(atom 0.4211 0.5669 0.2567) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(atom 0.7960 0.1904 0.1727) def Literal                                                                                                                                                                                                                                                                     
Blank
Blank
/litstring 
(\\regular compare) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(group 7) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(old mo\(1\) o\(11\) until o\(16\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
(new mo\(401\) until q\(416\)) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(end) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
Blank
/secttext (Map two atomic groups together - \\MATCH) def Section                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\MATCH) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( MAP Atom Specifications) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( ONTO Atom Specifications) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( RENAME n) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( EQUALATOM) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( METHOD) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\MATCH) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( MAP RESIDUE\(1\)) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( ONTO RESIDUE\(2\)) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( RENAME 100) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   12 def
/textstring (
This routine uses the mapping routines in REGULARISE to compare two residues. Unlike
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
REGULARISE itself, the user does not have to list the atoms in any special order - the routine attempts to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
make pairwise assigments. Initially this is done via a topographical search, and refined by minimising
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
cartesian residuals whenever degeneracy is found. By default, the final coordinate matching is done using
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
method 1. 
) def
Write
/left leftmargin indent add def 
/instr (MAP) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The following list of atoms is the ideal fragment with ideal atom types and numbers 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ONTO) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
The following list of atoms is the fragment ot be compared with the ideal. There must be the same
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
number of atoms in both fragments, but not necessarily in the same order. Inclusion of any Q atoms sets
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the EQUALATOM flag, ie the atom types are ignored. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (EQUALATOM) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
If this parameter is included, the atom types in the "ONTO" list are ignored - they can even be Q atoms 
) def
Write
Blank
/left leftmargin indent add def 
/instr (METHOD) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
One of the METHODS available in REGULARISE# The default is method 1. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (RENAME  n) def Instruction                                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
If the mapping is succerssful, atoms in the ONTO list are given the same type as the corresponding
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atom in the MAP list, and the same SERIAL plus "n". 
) def
Write
Blank
/left leftmargin indent add def 
/instr (OUTPUT LIST= PUNCH=) def Instruction                                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Output takes the values OFF, LOW, MEDIUM, HIGH. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
unch takes the values OFF, RESULTS# 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
Results creates an ASCII file that could be processed by EXCEL or other spreadsheet. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Comparing lots of Z'=2 structures) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
If one has a single cif file containing many Z'=2 structures, the whole file can be processed
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   10 def
/textstring (
structure-by-structure automatically, with automatic matching of the structures. See Structure matching:
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
measures of similarity and pseudosymmetry. A. Collins, R. I. Cooper and D. J. Watkin. Journal of
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Applied Crystallography 2006;39\(6\):842-849. 
) def
Write
Newpage
/left  138 def /ipflag    1 def /numspace   18 def
/textstring (
To do this, extract the structures from the CSD saving the results to a single file using the operation
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
'Import CIF file' from the drop-down menu 'X-ray Data'. Before starting, ensure that a file titled
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
"cifproc.dat" is in the same folder as the composite cif file and that it says: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\/edit) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(mon off) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(list off) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(insert resi) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(sel type ne h) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(end) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(\/match) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(output punch=results) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(map resi\(1\)) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(onto resi\(2\)) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(end) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(\/purge) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(end) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
Blank
/left leftmargin indent add def 
/instr (Output from MATCH) def Instruction                                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
If the output is set to PUNCH=RESULTS, a summary of the result of each matching operation is
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
copied to the Punch file \(Usually BFILE.PCH\) All the information for each match is appended to a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
single line. The items are "tab deliminated" to facilitate reading them into spreadsheets. The keywords
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
are preceeded by a ":" so that an editor can be used to break the line as necessary. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
Description of output:# 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(CSD_CIF_AANHOX01) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(:Centroids    \(the x,y and z coordinates of both centroids\)) def Literal                                                                                                                                                                                                                                 
/litstring 
(:Axes of Inertia    \(the three axes of inertia of both molecules\)) def Literal                                                                                                                                                                                                                           
/litstring 
(:Sum dev sq   \(sum of the squares of the deviations in x,y,z and delta-d\)) def Literal                                                                                                                                                                                                                   
/litstring 
(:RMS dev   \(rms deviations in x,y,z and delta-d\)) def Literal                                                                                                                                                                                                                                            
/litstring 
(:RMS bond and tors dev) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(:Min and Max bond dev) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(:Min and Max tors dev) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(:Sum & delta Centroids) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(:Transformation    \(matrix transforming one molecule to the other\)) def Literal                                                                                                                                                                                                                          
/litstring 
(:Det and trace     \(of the matrix - -ve indicates inversion\)) def Literal                                                                                                                                                                                                                                
/litstring 
(:Closeness to ideal rotation) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(:Closeness to group operator) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(:Combined measure of closeness) def Literal                                                                                                                                                                                                                                                                
/litstring 
(:Rworst & Raverage) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(:Symmetry) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(:Pseudo) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(:Operator) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(:No_Atoms) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(:S.G.) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
(:Cell) def Literal                                                                                                                                                                                                                                                                                         
LitBlank
Blank
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
Example of output# 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(CSD_CIF_AANHOX01) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(:Centroids       0.9169 0.6281 0.3346 1.0255 0.8741 0.8117) def Literal                                                                                                                                                                                                                                    
/litstring 
(:Axes of Inertia 59.3690 10.0284 0.1392 59.1659 10.1380 0.0762) def Literal                                                                                                                                                                                                                                
/litstring 
(:Sum dev sq      0.0014 0.0014 0.0726 0.0754) def Literal                                                                                                                                                                                                                                                  
/litstring 
(:RMS dev         0.0115 0.0114 0.0812 0.0828) def Literal                                                                                                                                                                                                                                                  
/litstring 
(:RMS bond and tors dev 0.0040 2.3978) def Literal                                                                                                                                                                                                                                                          
/litstring 
(:Min and Max bond dev  0.0003 0.0094) def Literal                                                                                                                                                                                                                                                          
/litstring 
(:Min and Max tors dev  0.2952 6.1112) def Literal                                                                                                                                                                                                                                                          
/litstring 
(:Sum & delta Centroids 0.9712 0.7511 0.5731 0.1086 0.2461 0.4771) def Literal                                                                                                                                                                                                                              
/litstring 
(:Transformation 0.9662 0.1296 -0.071 -0.237 0.961 0.146 -0.476 0.292 -0.960) def Literal                                                                                                                                                                                                                   
/litstring 
(:Det and trace -1.0000 0.9679) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(:Closeness to ideal rotation 0.21507) def Literal                                                                                                                                                                                                                                                          
/litstring 
(:Closeness to group operator 0.21567) def Literal                                                                                                                                                                                                                                                          
/litstring 
(:Combined measure of closeness 0.21522) def Literal                                                                                                                                                                                                                                                        
/litstring 
(:Rworst & Raverage 0.203432098 0.186725736 10) def Literal                                                                                                                                                                                                                                                 
/litstring 
(:Symmetry m) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(:Pseudo m) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(:Operator 0.11+X 0.25+Y 1.15-Z) def Literal                                                                                                                                                                                                                                                                
/litstring 
(:No_Atoms 11) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(:S.G. P N A 21) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(:Cell 7.5570 11.4580 17.6020 90.0000 90.0000 90.0000) def Literal                                                                                                                                                                                                                                          
LitBlank
Blank
/secttext (Calculation of interatomic bonds - \\BONDCALC) def Section                                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\BONDCALC) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(  END) def Literal                                                                                                                                                                                                                                                                                         
LitBlank
Blank
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\BONDCALC FORCE) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
This routine calculates a list of unique bonds between atoms in LIST 5 including bonds to symmetry
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
related atoms. The bonds are stored in LIST 41. 
) def
Write
/left leftmargin def 
/instr ( Method of calculation) def Instruction                                                                                                                                                                                                                                                             
/left  128 def /ipflag    1 def /numspace   15 def
/textstring (
The BONDCALC routine uses the atomic positions from LIST 5 \(the model parameters, see LIST05 \)
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
\(together with cell \(LIST 1, see LIST01 \) and spacegroup information \(LIST 2, see LIST02 \), the covalent
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
radii from LIST 29 \(atomic properties, see LIST29 \), and any additional bonding information in LIST 40
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
to calculate a list of bonds. The algorithm and tolerances used depend upon settings in LIST 40. 
) def
Write
/left  128 def /ipflag    1 def /numspace   19 def
/textstring (
LIST 41 is only updated by \\BONDCALC if there has been a change to LISTS 5 or 40 OR if
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
\\BONDCALC FORCE is issued.# 
) def
Write
Blank
/secttext (Bonding information - \\LIST 40) def Section                                                                                                                                                                                                                                                     
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 40) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( DEFAULTS TOLTYPE= TOLERANCE= MAXBONDS= NOSYMMETRY= SIGCHANGE=) def Literal                                                                                                                                                                                                                                
/litstring 
( READ NELEMENTS= NPAIRS= NMAKE= NBREAK=) def Literal                                                                                                                                                                                                                                                       
/litstring 
( ELEMENT TYPE= RADIUS= MAXBONDS=) def Literal                                                                                                                                                                                                                                                              
/litstring 
( PAIR TYPE1= TYPE2= MIN= MAX= BONDTYPE=) def Literal                                                                                                                                                                                                                                                       
/litstring 
( MAKE TYPE= SERIAL= S= L= TX= TY= TZ=) def Literal                                                                                                                                                                                                                                                         
/litstring 
(      TYPE2= SERIAL2= S2= L2= TX2= TY2= TZ2= BONDTYPE=) def Literal                                                                                                                                                                                                                                        
/litstring 
( BREAK TYPE= SERIAL= S= L= TX= TY= TZ=) def Literal                                                                                                                                                                                                                                                        
/litstring 
(       TYPE2= SERIAL2= S2= L2= TX2= TY2= TZ2=) def Literal                                                                                                                                                                                                                                                 
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add def 
/instr (DEFAULTS TOLTYPE= TOLERANCE= MAXBONDS= NOSYMMETRY= SIGCHANGE=) def Instruction                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive may only appear once. It affects the algorithm used to update LIST 41. 
) def
Write
/left leftmargin indent add indent add def
/instr (TOLTYPE=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
A value of 1 \(default\) causes \\BONDCALC to use as a threshold for bonding, the sum of the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
covalent radii * the tolerance given. A value of 0 causes \\BONDCALC to use the sum of the covalent
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
radii + the tolerance given \(in Angstroms\), as a threshold. 
) def
Write
/left leftmargin indent add indent add def
/instr (TOLERANCE=) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
The tolerance to be used in the \\BONDCALC calculation as a threshold for bonds. Exact use
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
depends on the value of the TOLTYPE keyword above. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAXBONDS=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Specifies the maximum number of bonds that may be formed to an atom. The BONDCALC
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
calculation proceeds through the list of atoms searching for bonds, according to the TOLERANCE
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
criteria. If more than MAXBONDS bonds are found, the best MAXBONDS will be kept. Best bonds
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
are those where the sum of the covalent radii is closest to the actual bond length. \(Where a PAIR
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
directive has been used, the best are the closest to the mean of the min and max values on the PAIR
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
directive.\) Note well: The calculation proceeds through the list of atoms, so bonds are formed from
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
atoms near the top of the list to those lower down. While atoms lower down will still only form at
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
most MAXBONDS bonds, they are less likely to be the 'best' bonds since they are formed from
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
atoms higher up the list. E.g. You have an H right at the end of the list, and you set MAXBONDS=1
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
for H \(see ELEMENT\). If the first atom forms a bond to that H, then no more bonds can be formed to
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   23 def
/textstring (
that H even if they are better. If the H were at the top of the list it would get the choice of which
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
bonds to pick. This is fairly unimportant stuff, it is rare that there will be ambiguities over whether
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
something is bonded or not. The default value of MAXBONDS is therefore 15. 
) def
Write
/left leftmargin indent add indent add def
/instr (NOSYMMETRY=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
0 \(default\) searches for all symmetry related bonds. 1 ignores symmetry, will not find bonds across
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
operators, may speed up bond bond calculation slightly. 
) def
Write
/left leftmargin indent add indent add def
/instr (SIGCHANGE=) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
Number of angstroms that any atom in LIST 5 must move during refinement for it to be considered a
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
significant change resulting in a recalculation of bonding. 
) def
Write
/left leftmargin indent add def 
/instr (READ NELEMENTS= NPAIRS= NMAKE= NBREAK=) def Instruction                                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Specify the number of ELEMENT, PAIR, MAKE and BREAK directives that are to follow. 
) def
Write
/left leftmargin indent add def 
/instr (ELEMENT TYPE= RADIUS= MAXBONDS=) def Instruction                                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Override the covalent radius in L29 and the MAXBONDS value on the DEFAULTS directive for a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
specific element. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The element type. E.g. C 
) def
Write
/left leftmargin indent add indent add def
/instr (RADIUS=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The covalent radius to use for this element. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAXBONDS=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The maximum number of bonds to this element. 
) def
Write
/left leftmargin indent add def 
/instr (PAIR TYPE1= TYPE2= MIN= MAX= BONDTYPE=) def Instruction                                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Override the covalent based calculation altogether. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE1=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
An element type, e.g. C 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (TYPE2=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
An element type, e.g. O 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN=) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The minimum length of a bond. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAX=) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The maximum length of a bond. 
) def
Write
/left leftmargin indent add indent add def
/instr (BONDTYPE=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
The bondtype to be assigned to this bond. BONDCALC will eventually have a go at bond type
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
assignment, if you are forced to add in extra PAIR commands then there is not much chance that the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
assignment will be correct so it can be specified here. Use 0 for unknown. 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
More than one pair of the same elements can be used at once: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(e.g.) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
(  PAIR C O 1.0 1.2 BONDTYPE=2) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(  PAIR C O 1.2 1.4 BONDTYPE=1) def Literal                                                                                                                                                                                                                                                                 
LitBlank
/left leftmargin indent add def 
/instr (MAKE TYPE= SERIAL= S= L= TX= TY= TZ= TYPE2= SERIAL2= S2= L2= TX2= TY2= TZ2= BO) def Instruction                                                                                                                                                                                                     
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Makes a bond between two atoms \(possibly symmetry related\). 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE= TYPE2=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
An element type, e.g. C. 
) def
Write
/left leftmargin indent add indent add def
/instr (SERIAL= SERIAL2=) def Instruction                                                                                                                                                                                                                                                                   
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The serial number of the atom. \(From List 5, atomic parameters\). 
) def
Write
/left leftmargin indent add indent add def
/instr (S= S2=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
The number of the symmetry matrix used from List 2 \(list of space group symmetry operators, see
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
section LIST02 \) \(default, unity = 1\). Negative indicates centre of symmetry applied aswell. 
) def
Write
/left leftmargin indent add indent add def
/instr (L= L2=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of the non-primitive lattice translation from List 2. \(default =1, see section LIST02 \) 
) def
Write
/left leftmargin indent add indent add def
/instr (TX= TY= TZ= TX2= TY2= TZ2=) def Instruction                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Translations from asymmetric unit co-ordinates. 
) def
Write
/left leftmargin indent add indent add def
/instr (BONDTYPE=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
The bondtype to be assigned to this bond. BONDCALC will eventually have a go at bond type
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
assignment, if you are forced to add in extra MAKE commands then there is not much chance that
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the assignment will be correct so it can be specified here. Use 0 for unknown. 
) def
Write
/left leftmargin indent add def 
/instr (BREAK TYPE= SERIAL= S= L= TX= TY= TZ= TYPE2= SERIAL2= S2= L2= TX2= TY2= TZ2=) def Instruction                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
As for MAKE, but without the BONDTYPE keyword. 
) def
Write
Blank
/secttext (Bonding information - \\BONDING) def Section                                                                                                                                                                                                                                                     
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\BONDING ACTION) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( DEFAULTS TOLTYPE= TOLERANCE= MAXBONDS= NOSYMMETRY= SIGCHANGE=) def Literal                                                                                                                                                                                                                                
/litstring 
( ELEMENT TYPE= RADIUS= MAXBONDS=) def Literal                                                                                                                                                                                                                                                              
/litstring 
( PAIR TYPE1= TYPE2= MIN= MAX= BONDTYPE=) def Literal                                                                                                                                                                                                                                                       
/litstring 
( MAKE  atom-specification TO atom-specification bondtype) def Literal                                                                                                                                                                                                                                      
/litstring 
( BREAK atom-specification TO atom-specification) def Literal                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
THis is a more user-friendly alternative to inputting a LIST 40. Directive syntax is like \\LIST 40 with the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
following exceptions: 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
1\) ACTION. This can take two values: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      REPLACE \(Default, and replace previous LIST 40 with a new on\)) def Literal                                                                                                                                                                                                                         
/litstring 
(      EXTEND  \(adds new commands to end of existing LIST 40\)) def Literal                                                                                                                                                                                                                                
LitBlank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
2\) The MAKE and BREAK directives look like this: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( MAKE C\(1\) TO C\(4\) 8) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( BREAK N\(1\) TO H\(14\)) def Literal                                                                                                                                                                                                                                                                      
LitBlank
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
Symmetry may be specified in the standard CRYSTALS way, the numbers in parenthesis are
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
serial,S,L,Tx,Ty,Tz \(see above\) the list may be truncated when the rest are default values: \(serial,1,1,0,0,0\): 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( MAKE C\(1,2,1,0,1,1\) TO C\(8\) 4) def Literal                                                                                                                                                                                                                                                            
LitBlank
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
3\) The READ directive need not be given. This makes it easier to edit text files containing the command
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
as you don't have to remember to alter the values on the READ directive. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
3\) The command may be given as \\BONDING EXTEND, in which case it takes any directives given and
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
adds them to the existing LIST 40. 
) def
Write
Blank
/secttext (Printing of LIST 40) def Section                                                                                                                                                                                                                                                                 
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
LIST 40 may be listed with either 
) def
Write
/left leftmargin def 
/instr (\\PRINT 40) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
or 
) def
Write
/left leftmargin def 
Newpage
/instr (\\SUMMARY 40) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
LIST 40 may be punched with 
) def
Write
/left leftmargin def 
/instr (\\PUNCH 40) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
which will produce a standard List 40 in CRYSTALS format, or 
) def
Write
/left leftmargin def 
/instr (\\PUNCH 40 B) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
which will produce a \\BONDING command which is easier to edit. 
) def
Write
Blank
/secttext (Creating a null LIST 40) def Section                                                                                                                                                                                                                                                             
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
A null LIST 40, containing no extra information, may be created with 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 40) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
or 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\BONDING) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/secttext (Printing of LIST 41) def Section                                                                                                                                                                                                                                                                 
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
LIST 41 may be listed with either 
) def
Write
/left leftmargin def 
/instr (\\PRINT 41) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
or 
) def
Write
/left leftmargin def 
/instr (\\SUMMARY 41) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Issuing \\BONDCALC when there is no LIST 40 will cause a null list 40 to be created. 
) def
Write
Blank
Blank
/title (               STRUCTURE FACTORS AND LEAST SQUARES) def                                                                                                                                                                                                                                             
/banner (STRUCTURE FACTORS AND LEAST SQUARES) def                                                                                                                                                                                                                                                           
Newpage
/chaptext (Structure Factors And Least Squares) def                                                                                                                                                                                                                                                         
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
/secttext (Scope of the structure factors and least squares section) def Section                                                                                                                                                                                                                            
Blank
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
This section describes the necessary LISTS and explains how structure factor calculation and least
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
squares refinement can be carried out. 
) def
Write
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Refinement 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 23 - Structure factor calculation control list \( LIST23 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
SPECIAL - Special positions constraints \( SPECIAL \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 12 - Input of refinement directives \( LIST12 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 16 - Input of the restraints \( LIST16 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 4 - Weighting the reflections \( LIST04 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 28 - Reflection restriction list \( LIST28 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
CHECK - Checking the refinement and restraint directives 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
SFLS - Structure factor least squares calculations \( SFLS \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
ANALYSE - Systematic comparisons of Fo and Fc 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
DIFABS - Least squares absorption correction 
) def
Write
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Internal workings 
) def
Write
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 22 - Refinement parameter map \( LIST22 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 17 - Input of the special restraints \( LIST17 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 11 - The least squares matrix \( LIST11 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 24 - The least squares shift list \( LIST24 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 26 - Restraints in internal format \( LIST26 \) 
) def
Write
Blank
/secttext (Refinement) def Section                                                                                                                                                                                                                                                                          
Blank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
Before a stucture factor-least squares calculation is performed, the following lists must exist in the .DSC
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
file 
) def
Write
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 1 Cell parameters \(section LIST01 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 2 Symmetry inforamation \(section LIST02 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 3 Scattering factors \(section LIST03 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 4 Weighting scheme 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 5 Atomic and other model parameters \(section LIST05 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 6 Reflection data \(section LIST05 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 12 Refinement definitions \(section LIST12 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 16 Restraints \(section LIST16 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 17 Special position restraints \(section LIST17 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 23 Structure factor control list \(section LIST23 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 25 Twin laws, only for twinned refinements \(section LIST25 \) 
) def
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 28 Reflection control list \(section LIST28 \) 
) def
Write
Blank
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
LISTS 12,16 and 17 \(constraints LIST12 , restraints LIST16 and special restraints LIST17 \) are not required
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
if structure factors are only going to be calculated. 
) def
Write
Blank
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
The refinement directives specify which model parameters are to be refined, and the control directives
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
control the terms in the minimisation function. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
During structure factor least squares calculations, the partial derivatives with respect to each of the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
parameters is calculated for each structure factor and added into the 'normal equations'. This system of
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
equations may be represented in matrix notation as : 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
(       A.x = b) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(       WHERE :) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(       A      'A' is a symmetric n*n matrix. an element) def Literal                                                                                                                                                                                                                                       
/litstring 
(              'A\(i,j\)' of 'A'is given by :) def Literal                                                                                                                                                                                                                                                  
/litstring 
(               A\(i,j\) = Sum [ w\(k\)*Q\(i,k\)*Q\(j,k\) ] over k.) def Literal                                                                                                                                                                                                                            
/litstring 
(       n       number of parameters being refined.) def Literal                                                                                                                                                                                                                                            
/litstring 
(       k       indicates reflection number 'k'.) def Literal                                                                                                                                                                                                                                               
/litstring 
(       w\(k\)    weight of reflection k.) def Literal                                                                                                                                                                                                                                                      
/litstring 
(       Q\(i,k\)  the partial differential of Fc\(k\) with) def Literal                                                                                                                                                                                                                                     
/litstring 
(               respect to parameter i.) def Literal                                                                                                                                                                                                                                                        
/litstring 
(       x       a column vector of order n, containing) def Literal                                                                                                                                                                                                                                         
/litstring 
(               the shifts in the parameters.) def Literal                                                                                                                                                                                                                                                  
/litstring 
(       b       also a column vector, an element) def Literal                                                                                                                                                                                                                                               
/litstring 
(               of which is given by :) def Literal                                                                                                                                                                                                                                                         
/litstring 
(               b\(i\) = Sum [ w\(k\)*DF\(k\)*Q\(i,k\) ] over k.) def Literal                                                                                                                                                                                                                               
/litstring 
(       DF\(k\)   delta for reflection k, given by :) def Literal                                                                                                                                                                                                                                           
/litstring 
(               DF\(k\) = [Fo\(k\) - Fc\(k\)]) def Literal                                                                                                                                                                                                                                                  
Blank
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
As the matrix A is symmetric, only \(n\(n+1\)\)\/2 of its elements need to be calculated and stored, together
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
with a few house keeping items. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
In some cases, because of either storage or time considerations, it is impractical to use the full normal
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
matrix A . In this situation, it is necessary to use a 'block diagonal approximation' to the full matrix, in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
which interactions between parameters which are known not to be highly correlated are ignored. The effect
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
of ignoring such interactions is to leave blank areas of the full matrix, related symmetrically across the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
diagonal, which do not need to be stored or accumulated. A common \(but not very efficient or stable\)
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
example of this approach is to place one atom in each of the blocks used to approximate the normal matrix,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
so that each block is of order either 4 \(x, y, z and u[iso]\) or 9 \(x, y, z and the anisotropic thermal parameters\). 
) def
Write
/left  118 def /ipflag    1 def /numspace   20 def
/textstring (
One of the main purposes of the refinement directives is to describe the areas of the matrix A that are to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
be calculated. If the matrix A is approximated by m blocks of order n\(1\), n\(2\),.....n\(m\), The total amount of
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
memory needed to hold the matrix and vector is: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Elements = 12 + 4*m + Sum n\(i\)*\(5 +n\(i\)\)\/2,) def Literal                                                                                                                                                                                                                                      
Blank
/litstring 
(                                                 i = 1 to m) def Literal                                                                                                                                                                                                                                   
Blank
/litstring 
(      Currently \(June 2003\) elements=8,388,608, giving over 4000) def Literal                                                                                                                                                                                                                            
/litstring 
( parameters in a single block.) def Literal                                                                                                                                                                                                                                                                
LitBlank
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
The formation of the blocks that are to be used to approximate the normal matrix A is controlled in the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
refinement directive list by a series of BLOCK directives, each of which contains the coordinates that are to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
be included in the newly specified block. Further control instructions for the current block may appear on
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
subsequent directives until a new BLOCK directive is found, when the formatio of another block with its
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
associated parameters is started. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
Two special directives are provided to allow for the most common cases required, full matrix refinement
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
\(a FULL directive\) and one atom per block \(a DIAGONAL directive\). For all these cases only the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
parameters specified on the control directives and the following directives are refined. 
) def
Write
/left leftmargin indent add def 
/instr (Correlations in Refinement) def Instruction                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
Highly correleated parameters MUST be refined together. Refining them in different cycles or different
) def
/last 0 def 
WriteCalc
/textstring (Highly correleated parameters ) def WritePart
/textstring (MUST ) def
WriteBold
/textstring (be refined together. Refining them in different cycles or different) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
blocks will lead to an incorrect structure. 
) def
Write
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
As a rough guide, the following groups of parameters are in general highly correlated and should be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
refined in the same block if possible : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( 1.  Temperature factors, scale factors, the extinction) def Literal                                                                                                                                                                                                                                       
/litstring 
(     parameter, the polarity parameter and the) def Literal                                                                                                                                                                                                                                                
/litstring 
(     enantiopole parameter.) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( 2.  Coordinates of bonded atoms.) def Literal                                                                                                                                                                                                                                                             
/litstring 
( 3.  Non-orthogonal coordinates of the same atom.) def Literal                                                                                                                                                                                                                                             
/litstring 
( 4.  U\(11\), U\(22\) and U\(33\) of the same atom.) def Literal                                                                                                                                                                                                                                           
LitBlank
/left  138 def /ipflag    1 def /numspace   15 def
/textstring (
If it is necessary to split the temperature factors and scale factor into different blocks, their
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
interactions must not be neglected but must be allowed for by using a 'dummy overall isotropic
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
temperature factor'. In this case, the scale factor and the dummy temperature factor must be put into a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
block of order 2 by themselves, and the program will make the appropriate corrections to all the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
temperature factors. This dummy temperature factor should not be confused with the 'overall
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
temperature factor' which is a temperature factor that applies to all the atoms and is therefore just a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
convenience and requires no special treatment. 
) def
Write
/left  138 def /ipflag    1 def /numspace   14 def
/textstring (
For further details, Computing Methods in Crystallography, edited by J. S. Rollett, page 50, and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Crystalographic Computing, ed Ahmed, 1970, page 174. 
) def
Write
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
Although it is possible to input an overall temperature factor as one of the overall parameters, it is
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
not possible to use it under all circumstances. The structure factor routines always take the temperature
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
factor of an individual atom as the value or values stored for that atom. If the overall temperature factor
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
is to be refined, the system will ensure that the current value of the overall temperature factor is inserted
) def
/last 0 def 
Write
Newpage
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
for the temperature factor of all the atoms. When the new parameters are computed after the solution of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
the normal equations, this substitution is again made, so that all the atoms have the same overall
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
isotropic temperature factor. However, if the overall temperature factor is not refined, or no refinement
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
is done, the individual temperature factor for each atom will be used, and the overall temperature factor
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
ignored. 
) def
Write
/left leftmargin indent add def 
/instr (CAUTION) def Instruction                                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
It should be noted that if a set of anisotropic atoms are input with no U[ISO] key and U[ISO] data, then
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
the default value of 0.05 will be inserted by the sfls routines. This implies that all such atoms are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
isotropic, so that the anisotropic temperature factors will be set to zero, and the calculation will proceed
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
for isotropic atoms. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (F or Fsq refinement?) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
Both type of refinement have been available in CRYSTALS since the early 70's. For most data sets,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
there is little difference between the two correclty weighted refinements. One of the current reasons for
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
choosing Fsq refinement is 'so that -ve observations may be used'. Such a choice is based on the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
misapprehension that the moduli in \/Fo\/ are the result of taking the square root of Fsq. In fact, it
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
indicates that the phase cannot be observed experimentally. The experimental value of Fo takes the sign
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
of Fsq and the positive square root. With proper weighting, both refinemets converge to the same
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   10 def
/textstring (
minima \(Rollett, J.S., McKinlay,T.G. and Haigh, N.P., 1976, Crystallographic Computing Techniques,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   10 def
/textstring (
pp 413-415, ed F.R. Ahmed,Munksgaard; and Prince,E. 1994, Mathematical Techniques in
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   11 def
/textstring (
Crystalography and Materials Science, pp 124-125.Springer-Verlag\). However, the path to the minima
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
will be different, and there is some evidence that Fsq refinement has less false minima. Using all data,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
including -ve observations, increases the observation:variable ratio, but it is not evident that a large
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
number of essentially unobserved data will improve the refinement. If the difference between F and Fsq
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
refinement is significant, then the analysis requires care and attention. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Hydrogen Atom Refinement) def Instruction                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Several strategies are available for refining hydrogen atoms. Which you use is probably a matter of
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
taste. 
) def
Write
/left leftmargin indent add indent add def
/instr (Geometric re-placement) def Instruction                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   11 def
/textstring (
The command \\HYDROGEN or \\PERHYDRO is used to compute geometrically suitable positions
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
for the H atoms. These are not refined \(either they are left out of LIST 12, or a fixed with the FIX
) def
/last 0 def 
WriteCalc
/textstring (for the H atoms. These are ) def WritePart
/textstring (not ) def
WriteBold
/textstring (refined \(either they are left out of LIST 12, or a fixed with the FIX) def WritePart
/ypos ypos linegap sub def
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
directive\). After a few cycles of refinement of the remaining parameters, they are deleted \(\\EDIT
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
<cr> SELECT TYPE NE H\) and new positions computed. This ensures optimal geometry, ensures
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
that Fcalc is optimal, but avoids the cost of including the deviatives in the normal matrix. 
) def
Write
/left leftmargin indent add indent add def
/instr (Riding hydrogens) def Instruction                                                                                                                                                                                                                                                                   
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
As above, the hydrogens are placed geomtrically, but they are included in the formation of the least
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
squares matrix. Their derivatives are added to those of the corresponding carbon, and a composite
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
shift computed for each carbon and its riding hydrogens. This preserves the C-H vector, but can
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
distort C-C-H angles. A cycle of refinement takes almost twice as long as the re-placement method. 
) def
Write
/left leftmargin indent add indent add def
/instr (Restrained hydrogens) def Instruction                                                                                                                                                                                                                                                               
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
In this method, starting positions are hound for the hydrogen atoms \(either from Fourier maps of
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
geometrically\), and the hydrogen positions are refined along with other atoms. The C-H distances
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
and C-C-H angles are restrained to acceptable values in LIST 16. This calculation is even slower than
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
the riding model, and would normally only be applied to an atom of special significance \( e.g. a
) def
/last 0 def 
WriteCalc
/textstring (the riding model, and would normally only be applied to an atom of special significance \( ) def WritePart
/textstring (e.g. ) def
WriteItalic
/textstring (a) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
hydrogen bond H atom\). 
) def
Write
/left leftmargin indent add indent add def
/instr (Free refinement) def Instruction                                                                                                                                                                                                                                                                    
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
The hydrogen atom is treated like any other atom. Requires good data, and may be applied to atoms
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
of special interest. 
) def
Write
Blank
/left  148 def /ipflag    1 def /numspace   14 def
/textstring (
Note that the different methods can be mixed in any way, with some hydrogens placed
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
geometrically, and others refined. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (R-Factor and minimisation function definitions) def Instruction                                                                                                                                                                                                                                     
/left leftmargin indent add def 
/instr (Conventional R-value) def Instruction                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This is defined as: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      R = 100*Sum[\/\/Fo\/-\/Fc\/\/]\/Sum[\/Fo\/]) def Literal                                                                                                                                                                                                                                             
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The summation is over all the reflections accepted by LIST 28. This definition is used for both
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
conventional and F-squared refinement. 
) def
Write
/left leftmargin indent add def 
/instr (Weighted R-value) def Instruction                                                                                                                                                                                                                                                                   
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The Hamilton weighted R-value is defined as : 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
(      100*Sqrt\(Sum[ w\(i\)*D'\(i\)*D'\(i\) ]\/SUM[ w\(i\)*Fo'\(i\)*Fo'\(i\) ]\)) def Literal                                                                                                                                                                                                              
Blank
/litstring 
(      D'  = Fo'-Fc') def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      Fo' = Fo for normal refinement, Fsq for F-squared refinement.) def Literal                                                                                                                                                                                                                           
/litstring 
(      Fc' = Fc for normal refinement, Fc*Fc for F-squared refinement.) def Literal                                                                                                                                                                                                                         
LitBlank
/left leftmargin indent add indent add def
/instr (Minimisation function) def Instruction                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This is defined by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      MINFUNC = Sum[ w\(i\)*D\(i\)*D\(i\) ]) def Literal                                                                                                                                                                                                                                                   
Blank
/litstring 
(      D', Fo', Fc' defined above.) def Literal                                                                                                                                                                                                                                                             
LitBlank
/left leftmargin indent add indent add def
/instr (Residual) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The residual and weighted residual are defined by: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      residual = Sum D'\(i\)**2) def Literal                                                                                                                                                                                                                                                               
/litstring 
(      weighted residual = Sum w\(i\)*D'\(i\)**2) def Literal                                                                                                                                                                                                                                               
LitBlank
Blank
/secttext (Special positions) def Section                                                                                                                                                                                                                                                                   
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
The second major purpose of the refinement directives is to allow for atoms on special positions. For
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
example, the atom at the Wyckoff site H in the space group P6\(3\)\/mmc \(no. 194\) has coordinates X,2X,Z .
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
In a least squares refinement, the X and Y coordinates of this atom must be set to the same variable, i.e. they
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
become equivalent. The command \\SPECIAL \(section SPECIAL \) can be used to generate the necessary
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
constraints or restraints, and may be invoked automatically before structure factor calculations by setting the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
appropriate parameters in LIST 23 \(structure factor control settings, see section LIST23 \) The user can do
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
this manually via the refinement directives, LIST 12. The relationship is set up by an EQUIVALENCE
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
directive, which sets all the parameters on the directive to the same least squares parameter. In this example,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
it is also necessary to alter the contribution of the Y coordinates to the normal matrix by multiplying the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
derivatives by 2. This facility is provided by the WEIGHT directive, which should not be confus with the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
weight ascribed to each reflection in the refinement. For a full treatment of atoms on special positions, see
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
Crystallographic Computing, edited by F. R. Ahmed, page 187, or Computing Methods in Crystallography,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
page 51. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Similar relationships also hold for the anisotropic temperature factors. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The relationships between the variable parameters in a refinement may also be defined by RESTRAINTS.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
These are held in LIST 17 \(see LIST17 \), and are particularly usefull if a complex matrix has been defined
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
\(e.g. using RIDE, LINK, EQUIVALENCE, WEIGHT, BLOCK, GROUP or COMBINE\). 
) def
Write
/secttext (Atomic parameter refinement) def Section                                                                                                                                                                                                                                                         
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
Atomic parameters may be specified in three different ways. Firstly, there is an IMPLICIT definition, in
) def
/last 0 def 
WriteCalc
/textstring (Atomic parameters may be specified in three different ways. Firstly, there is an ) def WritePart
/textstring (IMPLICIT ) def
WriteBold
/textstring (definition, in) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
which parameters for all the atoms are specified simply by giving the appropriate key or keys. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Hydrogen atoms are automatically excluded from implicit definitions. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
Secondly, there is an EXPLICIT definition, in which the parameters of one atom are specified by giving
) def
/last 0 def 
WriteCalc
/textstring (Secondly, there is an ) def WritePart
/textstring (EXPLICIT ) def
WriteBold
/textstring (definition, in which the parameters of one atom are specified by giving) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the atom name followed by the appropriate keys. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
Lastly, the parameters for a continuous group of atoms in LIST 5 may be specified by an UNTIL
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
sequence. This type of parameter definition is taken to be implicit. 
) def
Write
/left leftmargin indent add def 
/instr (KEY[1] . . . KEY[K]) def Instruction                                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
parameters defined by the keys KEY[1] . . KEY[K] are included \(or excluded\) for all the atoms in
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
LIST 5, e.g. X U[ISO] implies that the 'X' and 'U[ISO]' parameters of all the atoms in the current LIST
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
5 will be used. This is an implicit definition, since parameters for all the atoms in LIST 5 are specified
) def
/last 0 def 
WriteCalc
/textstring (5 will be used. This is an ) def WritePart
/textstring (implicit ) def
WriteBold
/textstring (definition, since parameters for all the atoms in LIST 5 are specified) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
simply by giving the appropiate key. 
) def
Write
/left leftmargin indent add def 
/instr (TYPE\(SERIAL,KEY[1], . . ,KEY[K]\)) def Instruction                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
parameters defined by the keys KEY[1] . . . KEY[K] are included \(or excluded\) for the atom of type
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
'TYPE' with the serial number 'SERIAL', e.g. C\(21,X,U[ISO]\) implies that the 'X' and 'U[ISO]'
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
parameters of atom C\(21\) will be used. This is an explicit definition. 
) def
WriteCalc
/textstring (parameters of atom C\(21\) will be used. This is an ) def WritePart
/textstring (explicit ) def
WriteBold
/textstring (definition. ) def WritePart
/ypos ypos linegap sub def
/left leftmargin indent add def 
/instr (TYPE1\(SERIAL1,KEY[1], . ,KEY[K]\)  UNTIL  TYPE2\(SERIAL2\)) def Instruction                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
the parameters defined by the keys KEY[1] . . KEY[K] are included \(or excluded\) for atoms in LIST 5
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
starting at the atom with type 'TYPE1' and serial 'SERIAL1', and finishing with the atom of type
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
'TYPE2' and serial 'SERIAL2'. This definition is implicit, since the number of atoms included by this
) def
/last 0 def 
WriteCalc
/textstring ('TYPE2' and serial 'SERIAL2'. This definition is ) def WritePart
/textstring (implicit, ) def
WriteBold
/textstring (since the number of atoms included by this) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
definition depends on the number and order of the atoms in LIST 5. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
Parameter definitions of all three types may appear on any directive in any desired combination. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( EXAMPLE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(       LIST 5 contains  FE\(1\) C\(1\) C\(2\) C\(3\) C\(4\) C\(5\) C\(6\) N\(1\)) def Literal                                                                                                                                                                                                              
Blank
/litstring 
(       \\LIST 12) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(       BLOCK X'S C\(1,U[ISO]\) UNTIL C\(6\) FE\(1,U'S\)) def Literal                                                                                                                                                                                                                                       
/litstring 
(       END) def Literal                                                                                                                                                                                                                                                                                    
Blank
/litstring 
(      This refines x,y,z of all atoms, u[11]...u[12] of iron, and) def Literal                                                                                                                                                                                                                             
/litstring 
(      u[iso] of the other atoms.) def Literal                                                                                                                                                                                                                                                              
LitBlank
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The following parameter keys may be given in an atom definition : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( OCC     X       Y         Z) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( U[ISO]  SIZE    DECLINAT  AZIMUTH) def Literal                                                                                                                                                                                                                                                            
/litstring 
( U[11]   U[22]   U[33]     U[23]    U[13]    U[12]) def Literal                                                                                                                                                                                                                                            
Blank
/litstring 
( X'S      Indicating  X,Y,Z) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( U'S      Indicating  U[11],U[22],U[33],U[23],U[13],U[12]) def Literal                                                                                                                                                                                                                                     
/litstring 
( UII'S    Indicating  U[11],U[22],U[33]) def Literal                                                                                                                                                                                                                                                       
/litstring 
( UIJ'S    Indicating  U[23],U[13],U[12]) def Literal                                                                                                                                                                                                                                                       
LitBlank
/secttext (Overall parameter refinement) def Section                                                                                                                                                                                                                                                        
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
Overall parameters, apart from the layer scale factors and the element scale factors, are specified simply
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
by their keys. Such a specification is considered to be an explicit definition. The following overall parameter
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
keys may be given : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( SCALE       OU[ISO]       DU[ISO]) def Literal                                                                                                                                                                                                                                                            
/litstring 
( POLARITY    ENANTIO       EXTPARAM) def Literal                                                                                                                                                                                                                                                           
LitBlank
/secttext (Scale factor definitions) def Section                                                                                                                                                                                                                                                            
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
The OVERALL scale factor is always applied to the structure factor calculation, though it need not
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
necessarily be refined. LAYER and BATCH scale factors are applied only if indicated in LIST 23 \(structure
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
factor control settings, see section LIST23 \), and ELEMENT scales only if the crystal is marked as being
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
twinned in LIST 13. Note that all of these scale factors can be expected to be correlated with each other, and
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the overall parameters. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
The layer scale factors, batch scale factors and the element scale factors may be given in three different
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
ways, all of which are considered to be explicit : 
) def
Write
/left leftmargin indent add def 
/instr (LAYER\(M\), BATCH\(M\)   OR   ELEMENT\(M\)) def Instruction                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
this indicates only scale factor 'M' of the specified type. 'M' must be in the correct range, which for
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
'N' layer scale factors is 0 to 'N-1', and for 'N' element scale factors is 1 to N. 
) def
Write
/left leftmargin indent add def 
/instr (LAYER\(P\) UNTIL LAYER\(Q\)   OR   BATCH\(P\) .....) def Instruction                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
this indicates all the scale factors of the specified type from 'P' to 'Q'. 'P' and 'Q' must be in the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
correct range, as defined for 'M' in the previous section. 
) def
Write
/left leftmargin indent add def 
/instr (LAYER SCALES, BATCH SCALES   OR   ELEMENT SCALES) def Instruction                                                                                                                                                                                                                                   
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
this indicates all the scale factors of the given type. 
) def
Write
Blank
/secttext (Structure factor calculation control list  -  LIST 23) def Section                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 23) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( MODIFY ANOM= EXTINCT= LAYERSCALE= BATCHSCALE= PARTIAL= UPDATE= ENANTIO=) def Literal                                                                                                                                                                                                                      
/litstring 
( MINIMISE NSINGULARITY= F-SQUARED= REFLECTIONS= RESTRAIN=) def Literal                                                                                                                                                                                                                                     
/litstring 
( REFINE  SPECIAL= UPDATE= TOLERANCE=) def Literal                                                                                                                                                                                                                                                          
/litstring 
( ALLCYCLES MIN-R= MAX-R= *-WR= *-SUMSQ= *-MINFUNC= U[MIN]=) def Literal                                                                                                                                                                                                                                    
/litstring 
( INTERCYCLE MIN-DR= MAX-DR= *-DWR= *-DSUMSQ= *-DMINFUNC=) def Literal                                                                                                                                                                                                                                      
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 23) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( MODIFY EXTINCTION=YES, ANOMALOUS=YES) def Literal                                                                                                                                                                                                                                                         
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
This LIST controls the structure factor calculation. The default calculation involves the minimum of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
computation \(atomic parameters and overall sale factor\). More extensive calculations have to be indicated by
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
entries in this list. The presence of a parameter in the parameter list \(LIST 5\) does not automatically mean
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
that it will be included in the structure factor calculation. 
) def
Write
/left  118 def /ipflag    1 def /numspace   20 def
/textstring (
This list also controls the treatment of atoms on special positions, the use of F or Fsq, and the use of
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
restraints. 
) def
Write
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
The presence of information in the DSC file does not ensure that it will be used by the structure factor
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
routines. Thus, the operations corresponding to RESTRAIN , ANOMALOUS , EXTINCTION , PARTIAL ,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
BATCHSCALES, LAYERSCALES and ENANTIO are not performed unless they are explicitly asked for in
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
a LIST 23. 
) def
Write
Blank
/left leftmargin def 
/instr (\\LIST 23) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin indent add def 
Newpage
/instr (MODIFY ANOM= EXTINCT= LAYERSCALE= BATCHSCALE= PARTIAL= UPDATE= ENANTIO=) def Instruction                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive controls modifications that can be applied to Fo and Fc. 
) def
Write
/left leftmargin indent add indent add def
/instr (ANOMALOUS=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If ANOMALOUS is YES , the imaginary part of the anomalous dispersion correction, input in LIST
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
3 \(see section LIST03 , will be included in the s.f.l.s. calculations. For computational efficiency, it is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
recommended only to use the value YES towards the end of a refinement. Note that the value YES
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
should be used even for centro-symmetric crystals if they contain a heavy atom. 
) def
Write
/left leftmargin indent add indent add def
/instr (EXTINCTION=) def Instruction                                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If EXTINCTION is YES , the calculated structure factors are modified to allow for the effects of
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
extinction by the method of A. C. Larson. See Atomic and Structural Parameters for the definition. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (LAYERSCALES=) def Instruction                                                                                                                                                                                                                                                                       
/left leftmargin indent add indent add def
/instr (BATCHSCALES=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SCALE keys have two alternatives: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If either SCALE key is YES , the corresponding scale factors stored in LIST 5 \(the model
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
parameters\) are applied to the reflection data. If this parameter is omitted, the scale factors are not
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
applied, even if they exist in LIST 5 
) def
Write
/left leftmargin indent add indent add def
/instr (PARTIAL=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
If PARTIAL is YES , the fixed partial contributions stored in LIST 6 \(section LIST06 \) are added in
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
during the calculation of Fc and the phase. The partial contributions must already be present in LIST
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
6, and should have the keys A-PART and B-PART . The atoms which have contributed to the partial
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
terms should be omitted from LIST 5 whenever PARTIAL is YES . 
) def
Write
/left leftmargin indent add indent add def
/instr (UPDATE=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
If UPDATE is YES , the contributions of the atoms to A and B are output to LIST 6 with the keys
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
A-PART and B-PART . If UPDATE is NO , its default value, the partial contributions are not
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
changed during structure factor calculations. This requires that LIST 6 contain the keys A-PART and
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
B-PART. 
) def
Write
/left leftmargin indent add indent add def
/instr (ENANTIO=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If ENANTIO is YES, then Fc is computed with 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Fc = SQRT\( \(1-x\)*F\(h\)**2 + x*F\(-h\)**2 \)) def Literal                                                                                                                                                                                                                                         
LitBlank
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Where x is the enantiopole parameter from LIST 5. Once the correct enantiomer has been
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
established, set this parameter back to NO. 
) def
Write
/left leftmargin indent add def 
/instr (MINIMISE= NSINGULARITY= F-SQUARED= REFLECTIONS= RESTRAIN= ) def Instruction                                                                                                                                                                                                                         
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive controls modifications made to the minimisation function during s.f.l.s. 
) def
Write
/left leftmargin indent add indent add def
/instr (NSINGULARITY=) def Instruction                                                                                                                                                                                                                                                                      
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
The default value is zero. If this parameter is omitted, any singularities discovered during the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
inversion of the normal matrix will cause the program to terminate after the current cycle of
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
refinement. If NSINGULARITY is greater than zero, it represents the number of singularities
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
allowed before the program will terminate. 
) def
Write
/left leftmargin indent add indent add def
/instr (F-SQUARED=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If F-SQUARED is NO, the traditional minimisation function is: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Minimisation function = Sum[ w*\(Fo - Fc\)**2 ]) def Literal                                                                                                                                                                                                                                         
LitBlank
Newpage
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If F-SQUARED is YES , the minimisation function is: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Minimisation function = Sum[ w*\(Fo**2 - Fc**2\)**2 ]) def Literal                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
If F-SQUARED is YES , the weights given by w in the above expression are assumed to be on the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
correct scale and to refer to Fsq rather than Fo's. Note that refinement can be against Fo or Fsq
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
independent of whether the input was Fo or Fsq. 
) def
Write
/left leftmargin indent add indent add def
/instr (REFLECTIONS=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
REFLECTIONS has two alternatives: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  Default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If REFLECTIONS is YES, the reflections stored in LIST 6 \(and subject to the checks in LIST 28\)
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
are used for computing structure factors and the derivatives added into the matrix if required. 
) def
Write
/left  148 def /ipflag    1 def /numspace   18 def
/textstring (
If REFLECTIONS is NO, LIST 6 is not used, whether it is present or not. This setting could be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
used for refinement against restraints only. See the section DLS, 'Distance Least Squares'. 
) def
Write
/left leftmargin indent add indent add def
/instr (RESTRAIN=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
RESTRAIN has two alternatives: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  Default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If RESTRAIN is YES, the restraints in LIST 16 \(section LIST16 \) and LIST 17 \(section LIST17 \)
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
are added into the normal equations. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REFINE  SPECIAL= UPDATE= TOLERANCE=) def Instruction                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive controls the refinement of atoms on special positions and the control of floating origins.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
The default action for atoms is to try to constrain them. However, if an atom is already the subject of a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
user defined constraint, the symmetry requirements are imposed by restraints. The site occupancy,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
positional and thermal parameters can be set to satisfy the site symmetry. The site occupancy is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
indepentant of any chemical or physical partial occupancy by an atom. 
) def
Write
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
Floating origins are controlled by restraining the center of gravity of the structure along the axis to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
remain fixed. 
) def
Write
/left leftmargin indent add indent add def
/instr (SPECIAL=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(     SPECIAL = NO                  No action) def Literal                                                                                                                                                                                                                                                  
/litstring 
(             = TEST                Displays but does not store any restrictions) def Literal                                                                                                                                                                                                               
/litstring 
(             = ORIGIN              Tests for and restrains floating origins) def Literal                                                                                                                                                                                                                   
/litstring 
(             = RESTRAIN            Creates and stores restraints) def Literal                                                                                                                                                                                                                              
/litstring 
(             = CONSTRAIN \(Default\) Attempt to create constraints) def Literal                                                                                                                                                                                                                            
LitBlank
/left leftmargin indent add indent add def
/instr (UPDATE=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      UPDATE = NO                    Nothing updated) def Literal                                                                                                                                                                                                                                          
/litstring 
(             = OCCUPATION            Site occupancies modified) def Literal                                                                                                                                                                                                                                
/litstring 
(             = PARAMETERS  \(Default\) All adjustable parameters modified) def Literal                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add indent add def
/instr (REWEIGHT=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Not currently used 
) def
Write
/left leftmargin indent add indent add def
/instr (GROUPS=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO  -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
GROUPS is automatically set to YES if LIST 12 contains any GROUP directives. It forces the group
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
derivatives to be recalculated between each cycle or refinement. Not currently used 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (COMPOSITE=) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Not currently used 
) def
Write
/left leftmargin indent add indent add def
/instr (TOLERANCE=) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Atoms within 'TOLERANCE' Angstrom of a symmetry equivalent atom are regarded as being on a
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
special position. The default is 0.6A. For high symmetry spacegroups with disorder, the value might
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
need reducing if multiplicities are incorrectly calculated. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ALLCYCLES MIN-R= MAX-R= *-WR= *-SUMSQ= *-MINFUNC= U[MIN]=) def Instruction                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive controls conditions that must be satisfied after each cycle if refinement is to continue. It
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
can be used to detect converged or 'blown-up' refinements. The heading has been abbreviated, the *
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
representing MIN and MAX . 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN-R=, MAX-R=) def Instruction                                                                                                                                                                                                                                                                     
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
The normal R-value must lie between MIN-R and MAX-R, otherwise refinement is terminated after
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the current cycle. The default values for MIN-R and MAX-R are 0.0 and 100.0 percent. 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (MIN-WR MAX-WR) def Instruction                                                                                                                                                                                                                                                                      
/left  138 def /ipflag    0 def /numspace   11 def
/textstring (
The Hamilton weighted R-VALUE must lie between MIN-WR and MAX-WR, otherwise the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
refinement is terminated after the current cycle. The default values for MIN-WR and MAX-WR are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
0.0 and 100.0 percent respectively. 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN-SUMSQ=, MAX-SHUMSQ=) def Instruction                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
The rms \(shift\/e.s.d.\) fo all parameters in the refinement must lie between MIN-SUMSQ and
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
MAX-SUMSQ, otherwise the refinement is terminated after the current cycle. The sum of the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
squares of the ratios is defined as : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SUMSQ = SQRT\(SIGMA\(SHIFT\/ESD\)\)\/N\)) def Literal                                                                                                                                                                                                                                                
/litstring 
(  The default values) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( of  MIN-SUMSQ  and  MAX-SUMSQ  are 0.03 and 10000.0, .) def Literal                                                                                                                                                                                                                                       
LitBlank
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
The minimisation function, on the scale of Fo, must lie between MIN-MINFUNC and
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
MAX-MINFUNC, otherwise the refinement is terminated after the current cycle. The default values
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
of MIN-MINFUNC and MAX-MINFUNC are 0.0 and 1000000000000000.0. 
) def
Write
/left leftmargin indent add indent add def
/instr (U[MIN]=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
If Uiso or a principal component of the adp of any atom is less than U[MIN] , then a warning is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
issued and the idp reset to u[min], or the components of the adp reset to MAX\(Uii,U[MIN]\) or
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
MAX\(Uij,0.01U[min]\). If this parameter is omitted, a default value of 0.0 is assumed. 
) def
Write
/left leftmargin indent add def 
/instr (INTERCYCLE MIN-DR= MAX-DR= *-DWR= *-DSHIFT\/ESD= *-DMINFUNC=) def Instruction                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive refers to conditions that must be obeyed before the next cycle of least squares refinement
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
can proceed. \(A quantity undergoes a positive change if OLD - NEW is positive, not NEW - OLD \).
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The definitions are similar to ALLCYCLES. The abbreviation '*' represents MIN and MAX . 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN-DR= MAX-DR=) def Instruction                                                                                                                                                                                                                                                                    
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
Between two cycles of least squares, the change in R-VALUE must lie between MIN-DR and
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
MAX-DR, otherwise the refinement is terminated. The default values are -5.0 and 100.0. 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN-DWR MAX-DWR) def Instruction                                                                                                                                                                                                                                                                    
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default values are -5.0 and 100.0. 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN-DSUMSQ MAX-DSUMSQ) def Instruction                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default values are -10. and 10000.0. 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN-DMINFUNC MAX-DMINFUNC) def Instruction                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default values are 0.0 and 1000000000000000.0. 
) def
Write
Blank
/secttext (Printing the SLFS control list) def Section                                                                                                                                                                                                                                                      
Blank
/left leftmargin def 
/instr (\\PRINT 23) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This prints LIST 23. There is no command for punching LIST 23. 
) def
Write
Blank
/secttext (Special position constraints - \\SPECIAL) def Section                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\SPECIAL  ACTION= UPDATE= TOLERANCE=#) def Literal                                                                                                                                                                                                                                                       
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\SPECIAL) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
\\SPECIAL can be issued at any time to get information about atoms on special positions. However,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
normally it is called automatically by setting the SPECIAL keyword in LIST 23 \(section LIST23 \). 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
Atoms on special positions may be constrained through LIST 12 \(section LIST12 \), or restrained through
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
LIST 17 \(section LIST17 \). CRYSTALS will attempt to generate the special position conditions when
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
requested via the SPECIAL command, and also update coordinates of atoms on special positions. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
If the RESTRAIN option is chosen, then the special conditions are imposed on the refinement by
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
restraints, which are generated without reference to what is being specified in LIST 12, the refined parameter
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
definition list. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
If the CONSTRAIN option is chosen, then CRYSTALS examines the site restrictions as it processes
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
LIST 12. If an atom on a special position is being refined without any user defined conditions
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   12 def
/textstring (
\(EQUIVALENCE, RIDE, LINK, COMBINE, GROUP, WEIGHT\), and the related coordinates are in the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
same matrix block, then the internal representation of LIST 12 \(LIST 22\) is dynamically modified to include
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
the necessary constraints. If the atom is already the object of a constraint, then LIST 12 cannot safely be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
modified, and the special condition is applied as a restraint. In either case, CRYSTALS warns the user about
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
what is being done. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
The origins of polar space groups are always fixed by restraints, since this produces a better conditioned
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
matrix than one from just fixing atomic coordinates. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The UPDATE directive controls whether parameters of atoms near special positions will be modified to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
make them exact. The routine will update just the site occupancies, or the occupancies and the other variable
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
parameters. The crystallographic site occupancy is held temporarily in the key SPARE, leaving the key OCC
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
available for a refinable chemical occupancy. Take care if an atom refines onto \(or off\) a special position. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
The function SPECIAL is actioned automatically for every round of least squares refinement. Its action is
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
then determined by values held in LIST 23 \(structure factor control, see section LIST23 \) 
) def
Write
/left leftmargin def 
/instr (\\SPECIAL  ACTION= UPDATE= TOLERANCE=) def Instruction                                                                                                                                                                                                                                              
/left leftmargin indent add indent add def
/instr (ACTION) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      ACTION = NONE      No action) def Literal                                                                                                                                                                                                                                                            
/litstring 
(             = TEST      Displays but does not store any restrictions) def Literal                                                                                                                                                                                                                         
/litstring 
(             = ORIGIN    Tests for and restrains floating origins) def Literal                                                                                                                                                                                                                             
/litstring 
(             = RESTRAIN  Creates and store a LIST 17) def Literal                                                                                                                                                                                                                                          
/litstring 
(             = CONSTRAIN Attempt to create constraints.) def Literal                                                                                                                                                                                                                                       
/litstring 
(             = LIST23    \(Default\) Takes the action defined in LIST 23) def Literal                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add indent add def
/instr (UPDATE) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      UPDATE = NONE        Nothing updated) def Literal                                                                                                                                                                                                                                                    
/litstring 
(             = OCCUPATION  Site occupancies modified) def Literal                                                                                                                                                                                                                                          
/litstring 
(             = PARAMETERS  All adjustable parameters modified) def Literal                                                                                                                                                                                                                                 
/litstring 
(             = LIST23      \(Default\) Takes action defined in LIST 23) def Literal                                                                                                                                                                                                                        
LitBlank
/left leftmargin indent add indent add def
/instr (TOLERANCE) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   11 def
/textstring (
TOLERANCE is the maximum separation, in Angstrom, between nominally equivalent sites. The
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
default is 0.6A. 
) def
Write
/secttext (Printing the special position information) def Section                                                                                                                                                                                                                                           
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Force the atom parameter list \(LIST 5\) to be updated and send it to the PCH file. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\SPECIAL TEST PARAMETER) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\PUNCH 5  \(to get a listing with 5 decimal places\)) def Literal                                                                                                                                                                                                                                   
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/secttext (Refinement directives  -  LIST 12) def Section                                                                                                                                                                                                                                                   
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
This list defines the parameters to be refined in the least squares calculation, and specifies relationships
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
between those parameters. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 12) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( BLOCK  PARAMETERS ...) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( FIX  PARAMETERS ...) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( EQUIVALENCE  PARAMETERS ...) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( RIDE  ATOM_PARAMETER SPECIFICATIONS ...) def Literal                                                                                                                                                                                                                                                      
/litstring 
( LINK PARAMETER_LIST AND PARAMETER_LIST AND PARAMETER_LIST.) def Literal                                                                                                                                                                                                                                   
/litstring 
( COMBINE PARAMETERS_LIST AND PARAMETERS_LIST) def Literal                                                                                                                                                                                                                                                  
/litstring 
( GROUP  ATOM SPECIFICATIONS) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( WEIGHT F1 PARAMETERS F2 PARAMETERS ...) def Literal                                                                                                                                                                                                                                                       
/litstring 
( FULL  PARAMETERS) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( DIAGONAL  PARAMETERS) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( PLUS  PARAMETERS) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 12) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( BLOCK SCALE X'S U'S) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/instr (\\LIST 12) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin indent add def 
/instr (BLOCK  PARAMETERS) def Instruction                                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive defines the start of a new matrix block. Any parameters that come on this directive and
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
any directives until another BLO directive are put into the same matrix block. If only one BLOCK
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive is given, then the refinement is 'full matrix'. 
) def
Write
/left leftmargin indent add def 
/instr (FIX  PARAMETERS) def Instruction                                                                                                                                                                                                                                                                    
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The specified parameters are not to be refined. 
) def
Write
/left leftmargin indent add def 
/instr (EQUIVALENCE  PARAMETERS) def Instruction                                                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Sets the given parameters to a single least squares parameter \(see the examples\). 
) def
Write
/left leftmargin indent add def 
/instr (RIDE  ATOM_PARAMETER SPECIFICATIONS) def Instruction                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive links corresponding parameters for all the atoms specified on the directive. The
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
parameters specified for the first atom given on this directive are each assigned to individual least
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
squares parameters, and parameters for subsequent atoms are EQUIVALENCED, in the order given, to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
the corresponding least squares parameter. Only explicit atom parameters can be used on this directive.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
Usually, the same parameter keys will be given in the same order for all atoms referenced, though this
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
may not be true for high symmetry space groups. 
) def
Write
/left leftmargin indent add def 
/instr (LINK PARAMETER_LIST AND PARAMETER_LIST \( AND PARAMETER_LIST.\)) def Instruction                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
Links the parameters defined after the AND with those specified in the first parameter list. A least
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
squares parameter is assigned to each physical parameter in the first list. Physical parameters specified
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
in the second \(and subsequent if present\) lists are then assigned IN THE ORDER GIVEN to these least
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
squares parameters. There must be the same number of parameters in each parameter list. The
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
parameter list may contain more than one atom, and is terminated by the 'AND' or the end of the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive. Overall and implicit parameters may be given. 
) def
Write
/left leftmargin indent add def 
Newpage
/instr (COMBINE PARAMETERS_1 AND PARAMETERS_2) def Instruction                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
Combines the parameters defined before the AND with those defined after. Physical parameters are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
taken pairwise in the order given from parameter list 1 and 2 and two least-squares parameters defined
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
such that one is the sum and the other is the difference of the physical parameters. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      x' = x1 + x2) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      x" = x1 - x2) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(                        where x1 and x2 are physical parameters,) def Literal                                                                                                                                                                                                                              
/litstring 
(                          and x' and x" are least squares parameters.) def Literal                                                                                                                                                                                                                         
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
Such a re-parameterisation is useful for dealing with certain sorts of ill- conditioning, such as that due
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   11 def
/textstring (
to pseudo-symmetry, of the normal matrix \(see Edward Prince, Mathematical Techniques in
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
Crystallography and Material Science, 1982, Springer-Verlag, page 113\). NOTE that only one AND
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
can be given. 
) def
Write
/left leftmargin indent add def 
/instr (GROUP  ATOM SPECIFICATIONS) def Instruction                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
The positional coordinates of the atoms given in the ATOM SPECIFICATIONS are refined as a rigid
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
group. Parameter specifications MUST NOT be included. The first atom specified is taken as the pivot
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
atom of the group. All atoms in the group may be the subject of restraints to atoms in other parts of the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
structure, or in other groups. Use LINK, RIDE or EQUIVALENCE to build a suitable model for the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
temperature factors. 
) def
Write
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
Because of the linearisation algorithm used, some distortion of the group will occur if there are large
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
parameter shifts. Use REGULARISE to re-form it. 
) def
Write
/left leftmargin indent add def 
/instr (WEIGHT w1 PARAMETERS w2 PARAMETERS . .) def Instruction                                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
Before the contributions of the specified parameters are included in the normal equations, they are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
multiplied by the number wI . Similarly , when the normal equations are solved, the shifts and e.s.d.'s
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
are multiplied by the same wI. The default value of wI is 1.0. The parameters are multiplied by the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
value of wI that precedes them \(see the examples\). 
) def
Write
/secttext (Obsolete Refinement directives) def Section                                                                                                                                                                                                                                                      
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
The following directives may be removed in some future release. 
) def
Write
/left leftmargin indent add def 
/instr (FULL  PARAMETERS) def Instruction                                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
The parameters on the directive directive plus any other parameters defined on subsequent directives
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
are to be included in a full matrix refinement. The scale factor is automatically included, while the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
dummy overall isotropic temperature factor is fixed. This is equivalent to: 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
BLOCK SCALE PARAMETERS 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PLUS  PARAMETERS) def Instruction                                                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
The specified parameters are to be refined, and they will be placed in the current block of the normal
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
matrix. This is equivalent to: 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
CONTINUE PARAMETERS after the BLOCK directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (DIAGONAL  PARAMETERS) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
All the specified parameters in the LIST 12 are included in a block diagonal approximation to the full
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
matrix, based on one block for each atom. Both the SCALE FACTOR and the DUMMY OVERALL
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
ISOTROPIC TEMPERATURE FACTOR are automatically included. 
) def
Write
Blank
/secttext (Defining the least squares matrix) def Section                                                                                                                                                                                                                                                   
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
Parameters may be referred to either implicitly, by just giving the parameter name \(in which case that
) def
/last 0 def 
WriteCalc
/textstring (Parameters may be referred to either ) def WritePart
/textstring (implicitly, ) def
WriteItalic
/textstring (by just giving the parameter name \(in which case that) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
parameter is referenced for all atoms\), or explicitly by specifying the parameter for an atom or group of
) def
/last 0 def 
WriteCalc
/textstring (parameter is referenced for all atoms\), or ) def WritePart
/textstring (explicitly ) def
WriteItalic
/textstring (by specifying the parameter for an atom or group of) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
atoms. All implicit specifications ignore H atoms. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( e.g.) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
(      IMPLICIT: x, u's) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(      EXPLICIT C\(1,X\), O\(1,U'S\) UNTIL O\(14\)) def Literal                                                                                                                                                                                                                                             
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
A parameter may not be referenced more than once either explicitly or implicitly. A parameter may be
) def
/last 0 def 
WriteCalc
/textstring (A parameter may not be referenced more than once either explicitly or implicitly. A parameter ) def WritePart
/textstring (may ) def
WriteItalic
/textstring (be) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
referenced both implicitly and explicitly, in which case the explicit reference takes precedence. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( e.g.) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
(      BLOCK x's            \(implicit reference\)) def Literal                                                                                                                                                                                                                                             
/litstring 
(      FIX Pb\(1,y\)          \(explicit reference\)) def Literal                                                                                                                                                                                                                                           
/litstring 
(                  This establishes the refinement of z,y,z for all atoms) def Literal                                                                                                                                                                                                                      
/litstring 
(                  except Pb\(1\), for which only x and z are refined.) def Literal                                                                                                                                                                                                                         
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( EXAMPLES :) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      1. BLOCK SCALE X) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(         FIX C\(1,X\)     ALLOWED) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      2. BLOCK SCALE  X) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(         FIX X          NOT ALLOWED) def Literal                                                                                                                                                                                                                                                           
LitBlank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
The refinement directives are read and stored on the disc. Before the structure factor least squares
) def
/last 0 def 
Write
Newpage
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
routines can use the information in LIST 12 \(constraint directives\), it is validated aga LIST 5 \(the model
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
parameters\) and stored symbolically as a LIST 22. This is done automatically by the SFLS routines \(section
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
SFLS \), but the user can force the verification of LIST 12 by issuing the command \\LIST 22. 
) def
Write
/secttext (Printing of LIST 12) def Section                                                                                                                                                                                                                                                                 
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
LIST 12 may be listed with either 
) def
Write
/left leftmargin def 
/instr (\\PRINT 12) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
or 
) def
Write
/left leftmargin def 
/instr (\\SUMMARY 12) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
LIST 12 may be punched with 
) def
Write
/left leftmargin def 
/instr (\\PUNCH 12) def Instruction                                                                                                                                                                                                                                                                         
Blank
/secttext (Creating a null LIST 12 ) def Section                                                                                                                                                                                                                                                            
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
A null LIST 12, containing no refinement directives, may be created with 
) def
Write
/left leftmargin def 
/instr (\\CLEAR 12) def Instruction                                                                                                                                                                                                                                                                         
Blank
/secttext (Processing of LIST 12) def Section                                                                                                                                                                                                                                                               
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
LIST 12 is processed to greate a LIST 22 with 
) def
Write
/left leftmargin def 
/instr (\\LIST 22) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Examples.) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( 1. Full matrix isotropic refinement of a structure without H atoms) def Literal                                                                                                                                                                                                                           
Blank
/litstring 
(      \\LIST 12) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      BLOCK SCALE X'S U[ISO]) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
Blank
/litstring 
( 2. Full matrix anisotropic of a structure with C\(25\) as the last) def Literal                                                                                                                                                                                                                           
/litstring 
( non-hydrogen, not refining the H atoms.) def Literal                                                                                                                                                                                                                                                      
Blank
/litstring 
(      \\LIST 12) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      BLOCK SCALE FIRST\(X'S,U'S\) UNTIL C\(25\)) def Literal                                                                                                                                                                                                                                              
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
Blank
/litstring 
( 3. Refine all positions, aniso non-H, iso H atoms) def Literal                                                                                                                                                                                                                                            
Blank
/litstring 
(      \\LIST 12) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      BLOCK SCALE X'S) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(      CONTINUE FIRST\(U'S\) UNTIL C\(25\)) def Literal                                                                                                                                                                                                                                                     
/litstring 
(      CONTINUE H\(1,U[ISO]\) UNTIL LAST) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
Blank
/litstring 
( 4. Ride H\(1\) positions on C\(21\) positions, etc. There are 2 H on C\(25\)) def Literal                                                                                                                                                                                                                 
Blank
/litstring 
(      \\LIST 12) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      BLOCK SCALE X'S) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(      CONTINUE FIRST\(U'S\) UNTIL C\(25\)) def Literal                                                                                                                                                                                                                                                     
/litstring 
(      CONTINUE H\(1,U[ISO]\) UNTIL LAST) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      RIDE C\(21,X'S\) H\(1,X'S\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      RIDE C\(22,X'S\) H\(2,X'S\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      RIDE C\(23,X'S\) H\(3,X'S\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      RIDE C\(24,X'S\) H\(4,X'S\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      RIDE C\(25,X'S\) H\(51,X'S\) H\(52,X'S\)) def Literal                                                                                                                                                                                                                                                
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
Blank
/litstring 
( 5. A fragment is distributed over 2 sites. The fragments are) def Literal                                                                                                                                                                                                                                 
/litstring 
( C\(100\) C\(101\) O\(102\) C\(103\) and C\(200\) C\(201\) O\(202\) C\(203\)) def Literal                                                                                                                                                                                                                  
Blank
/litstring 
(      \\LIST 12) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      BLOCK SCALE X'S) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(      ... ...) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      EQUIVALENCE C\(100,OCC\) UNTIL C\(103\) C\(200,OCC\) UNTIL C\(203\)) def Literal                                                                                                                                                                                                                     
/litstring 
(      WEIGHT -1 C\(200,OCC\) UNTIL C\(203\)) def Literal                                                                                                                                                                                                                                                   
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
Blank
LitBlank
/secttext (Restraints  -  LIST 16) def Section                                                                                                                                                                                                                                                              
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
This list defines the restraint to be used as supplemental observations. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\LIST 16) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( DISTANCES  VALUE, E.S.D= BOND1, BOND2) def Literal                                                                                                                                                                                                                                                        
/litstring 
( DISTANCES  VALUE, E.S.D= MEAN BOND1, BOND2) def Literal                                                                                                                                                                                                                                                   
/litstring 
( DISTANCES  VALUE, E.S.D= DIFFERENCE BOND1, BOND2) def Literal                                                                                                                                                                                                                                             
/litstring 
( NONBONDED  VALUE, POWERFACTOR=  BOND1, BOND2) def Literal                                                                                                                                                                                                                                                 
/litstring 
( ANGLES     VALUE, E.S.D= ANGLE1, ANGLE2) def Literal                                                                                                                                                                                                                                                      
/litstring 
( ANGLES     VALUE, E.S.D= MEAN ANGLE1, ANGLE2) def Literal                                                                                                                                                                                                                                                 
/litstring 
( ANGLES     VALUE, E.S.D= DIFFERENCE ANGLE1, ANGLE2) def Literal                                                                                                                                                                                                                                           
/litstring 
( VIBRATIONS VALUE, E.S.D= BOND1, BOND2) def Literal                                                                                                                                                                                                                                                        
/litstring 
( U\(IJ\)'S    VALUE, E.S.D= BOND1, BOND2) def Literal                                                                                                                                                                                                                                                      
/litstring 
( PLANAR            E.S.D  FOR 'ATOM SPECIFICATIONS') def Literal                                                                                                                                                                                                                                           
/litstring 
( LIMIT             E.S.D  FOR 'PARAMETER SPECIFICATIONS') def Literal                                                                                                                                                                                                                                      
/litstring 
( ORIGIN            E.S.D  FOR 'PARAMETER SPECIFICATIONS') def Literal                                                                                                                                                                                                                                      
/litstring 
( SUM               E.S.D  FOR 'PARAMETER SPECIFICATIONS') def Literal                                                                                                                                                                                                                                      
/litstring 
( AVERAGE           E.S.D  FOR 'PARAMETER SPECIFICATIONS') def Literal                                                                                                                                                                                                                                      
/litstring 
( SAME       BOND-ESD ANGLE-ESD FOR GROUP-1 AND GROUP-2 AND ...) def Literal                                                                                                                                                                                                                                
/litstring 
( DELU       ADP-ESD  GROUP-1 \(AND GROUP-2 AND ...\)) def Literal                                                                                                                                                                                                                                          
/litstring 
( SIMU       ADP-ESD  GROUP-1 \(AND GROUP-2 AND ...\)) def Literal                                                                                                                                                                                                                                          
/litstring 
( RESTRAIN   VALUE, E.S.D= TEXT) def Literal                                                                                                                                                                                                                                                                
/litstring 
( DEFINE NAME = TEXT) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( COMPILER) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( EXECUTION) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 16) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( DIST  1.39 , .01 =      C\(1\) to C\(2\), C\(2\) to C\(3\), C\(3\) to C\(4\)) def Literal                                                                                                                                                                                                                 
/litstring 
( DIST  0.0  , .01 = MEAN C\(1\) to C\(2\), C\(2\) to C\(3\), C\(3\) to C\(4\)) def Literal                                                                                                                                                                                                                 
/litstring 
( VIBR  0.0  , .01 =      C\(1\) to C\(2\), C\(2\) to C\(3\), C\(3\) to C\(4\)) def Literal                                                                                                                                                                                                                 
/litstring 
( U\(IJ\) 0.0  , .02 =      C\(1\) to C\(2\), C\(2\) to C\(3\), C\(3\) to C\(4\)) def Literal                                                                                                                                                                                                               
/litstring 
( PLANAR                  C\(1\) until C\(6\)) def Literal                                                                                                                                                                                                                                                  
/litstring 
( SUM                     K\(1,OCC\), K\(2,OCC\) K\(3,OCC\)) def Literal                                                                                                                                                                                                                                    
/litstring 
( SUM                     ELEMENT SCALES  \(twin element scale factors\)) def Literal                                                                                                                                                                                                                       
/litstring 
( LIMIT                   U[11] U[22] U[33]) def Literal                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
The restraints that can be applied under this system are of a type originally described by J. Waser, Acta
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
Cryst. 1963, 16, 1091. A good summary of the present facilities and aims is provided by J.S. Rollett in
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Crystallographic Computing, p170. 
) def
Write
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
In this method of restraints, the user provides a set of physical or chemical restraints that are to be applied
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
to the proposed model. These restraints are usually based upon observations of similar compounds \(for
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
example, bond lengths or bond angles\) or upon known physical laws \(for example, the difference in mean
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
square displacement of two atoms along the bond that joins them\). These restraints are not rigidly applied to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
the model, but each restraint has associated with it an e.s.d., which is used to calculate a weight so that the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
restraint can then be added into the normal equations. \(The e.s.d.'s are provided on an absolute scale, and
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
rescaled by the program onto the same scale as the xray data\). In this way, the importance of the restraints,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
which are treated as extra observations, can be varied with respect to the importance of the X-ray data. If the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
structure is required to adhere closely to the proposed model, the restraints are given high weights \(i.e. small
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
e.s.d.'s\) otherwise they can be given smaller weights. 
) def
Write
/left  118 def /ipflag    1 def /numspace   20 def
/textstring (
If, at the end of a refinement, the restraints are not compatible with the Xray data, this is shown by a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
discrepancy between the requested value for the restraint, and that computed from the refine parameters. If
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
this is found, the validity of the restraints that have been imposed should be carefully checked. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
In order that the restraint routines should be completely general, each atom that is part of a restraint can
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
be modified by a set of symmetry operators before the restraint is applied. \(This is vital for molecules that lie
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
across a symmetry element, as all the atoms that constitute the molecule are not present in LIST 5\). 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
If a structure uses symmetry related atoms to form bonds, the command \\DISTANCE with OUTPUT
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
PUNCH=RESTRAIN can be used to set up a proforma restraints list, including symmetry codes. The
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
distances and e.s.ds will have to be edited to the correct target values. Use appropriate values on the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
SELECT, INCLUDE and EXCLUDE directives for DISTANCE to tailor the generated list. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
Note that restraints may be used without diffraction data, see the chapter 'Distance Least Squares' for
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
examples. 
) def
Write
/left leftmargin indent add def 
/instr (NOTE) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The restraint directives are read and stored on the disc. Before the structure factor least squares routines
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
can use the information in LIST 16 \(restraints\), it is validated against LIST 5 \(the model parameters\)
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
and stored symbolically as a LIST 26 \(see LIST26 \). This is done automatically by the SFLS routines
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
\(section SFLS \), but the user can force the verification of LIST 16 by issuing the command \\CHECK
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
\(see later\). 
) def
Write
/secttext (Parameter, atom, bond and angle specifications) def Section                                                                                                                                                                                                                                      
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Composite parameter specifications are not permitted \( e.g. U's\), atom specifications are as in Chapter 4. 
) def
WriteCalc
/textstring (Composite parameter specifications are not permitted \( ) def WritePart
/textstring (e.g. ) def
WriteItalic
/textstring (U's\), atom specifications are as in Chapter 4. ) def WritePart
/ypos ypos linegap sub def
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Two atoms that are bonded together are defined in the following way : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      atom1 to atom2,) def Literal                                                                                                                                                                                                                                                                         
LitBlank
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
'atom1' and 'atom2' are standard atom specifications as described in chapter 4, and are separated from any
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   23 def
/textstring (
other text on the line by at least one space. If there is more than one bond specification on a line, it may be
) def
/last 0 def 
Write
Newpage
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
separated from another by either a space or a comma. The 'TO' is mandatory, and is terminated by one or
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
more spaces. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The definition of an angle is an extension of the definition of a bond: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      atom1 to atom2 to atom3,) def Literal                                                                                                                                                                                                                                                                
LitBlank
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
The angle is defined as the angle subtended at atom2 by atom1 and atom3. The restraints routines apply all
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
the required symmetry if specified in an atom definition, while still conserving the partial derivatives in their
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
correct form. 
) def
Write
/left leftmargin def 
/instr (\\LIST 16) def Instruction                                                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
The restraints routines regard all continuation directives as part of the original directive, so that the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
column of a character on a continuation directive will have had '80*n' added to it, where 'n' is the number
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
of directives between the current continuation directive and the start of the directive. The ',', '=' signs and
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
separator 'MEAN' are mandatory if shown in the definition. 
) def
Write
/left leftmargin indent add def 
/instr (DISTANCES  VALUE, E.S.D. = BOND1, BOND2, . . . . .) def Instruction                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
The bonds specified after the '=' sign are restrained to have a length of 'VALUE', with an e.s.d. of
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
'E.S.D.'. 
) def
Write
/left leftmargin indent add def 
/instr (DISTANCES VALUE, E.S.D. = MEAN BOND1, BOND2, . . . .) def Instruction                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Initially the restraints routines calculate the 'MEAN' value of all the bonds specified by the directive.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
Each of the bonds specified is then restrained to be equal to 'MEAN' + 'VALUE', with an e.s.d. of
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
'E.S.D.'. The 'DELTA' used in the right hand sides of the normal equations is defined by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      DELTA = MEAN + VALUE - BOND CALCULATED.) def Literal                                                                                                                                                                                                                                                 
LitBlank
/left leftmargin indent add def 
/instr (DISTANCES VALUE, E.S.D. = DIFFERENCE BOND1, BOND2, . .) def Instruction                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
Each of the bonds in this directive is restrained to be equal to 'VALUE' plus the length of each of the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
bonds that follow it. The computed value of 'DELTA' used in the right hand sides of the normal
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
equations is thus given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      DELTA = VALUE + BOND\(N\) - BOND\(M\)) def Literal                                                                                                                                                                                                                                                   
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Where BOND\(N\) occurs after BOND\(M\) in the directive. 
) def
Write
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
Each such restraint is added into the normal equations with an e.s.d. Of E.S.D. . However, as each
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
bond is restrained to each of the bonds that follow it, \(N*\(N-1\)\)\/2 separate restraints are generated.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
Many of these restraints involve the same bond lengths and are thus not independent. To be strictly
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
accurate, a non-diagonal weight matrix should be used with this restraint but such a facility is not
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
available. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The letters DIFFERENCE are terminated by one or more spaces and may be abbreviated to DIFF. 
) def
Write
/left leftmargin indent add def 
/instr (NONBONDED  VALUE, POWERFACTOR =, BOND1, BOND2, . . . . .) def Instruction                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This restraint is similar to the 'DISTANCE' restraint in that the pairs of atoms defining the bond are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
restrained to be at the 'VALUE' distance appart. However, the weight to be given to the restraint is
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
computed from the difference between the observed and the requested contact distance using the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
expression: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       weight = 10000*\(requested\/observed\)**\(powerfactor*12\)) def Literal                                                                                                                                                                                                                             
LitBlank
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
When the observed equals the requested distance, the weight corresponds to an e.s.d. of .01. If the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
requested is less than the observed, the weight is reduced slowly as a function of the discrepancy. If the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
requested is greater than the observed, the weight rises rapidly with discrepancy. The function is like
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
the repulsive part of a 6-12 energy expression, having greatest effect on anomalously short contacts.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Powerfactors of between 1 and 4 seem to be suitable. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ANGLES VALUE, E.S.D. = ANGLE1, ANGLE2, . . . .) def Instruction                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
Each of the angles given in the directive is restrained to a value of 'VALUE', with an e.s.d. of 'E.S.D.'.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The angles must be in degrees. 
) def
Write
/left leftmargin indent add def 
/instr (ANGLES VALUE, E.S.D. = MEAN ANGLE1, ANGLE2, . . . . .) def Instruction                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This is the analagous to the MEAN distance restaint, except that the mean value is computed for the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
specified angles and each of the angles is then restrained to 'MEAN' + 'VALUE', with an e.s.d. of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
'E.S.D.'. The 'DELTA' values and the syntax rules are all the same as for the equivalent distance
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
restraint. 
) def
Write
/left leftmargin indent add def 
/instr (ANGLES VALUE, E.S.D. = DIFFERENCE ANGLE1, ANGLE2, . .) def Instruction                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This restraint is analogous to the DIFFERENCE restraint for bond lengths. Each of the angles in the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
directive is restrained to be equal to 'VALUE' plus each of the angles after it in the input. Although
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
each such restraint is applied with an e.s.d. of 'E.S.D.', the same reservations about the validity of the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
weighting scheme exist here as for the equivalent distance restraint. 
) def
Write
/left leftmargin indent add def 
/instr (VIBRATIONS VALUE, E.S.D. = BOND1, BOND2, . . . .) def Instruction                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The difference in mean square displacement along the bond direction of the two atoms that form the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
bond is restrained to be 'VALUE', with an e.s.d. of 'E.S.D.'. In general, 'VALUE' is assumed to be
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
zero, while the e.s.d. reflects the maximum discrepancy in m.s.d. that would be expected for the type of
) def
/last 0 def 
Write
Newpage
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
bond being considered. If either or both of the given atoms is isotropic, the program will convert the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
m.s.d. into the appropriate form and calculate the derivatives for the isotropic atom correctly. 
) def
Write
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
Note that the atoms defining a 'bond' need not actually be bonded, but merely serve to define a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
direction. For really bonded atoms, try an esd of .002; for 1-3 atoms or diagonals of phenyl groups, try
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
.005. 
) def
Write
/left leftmargin indent add def 
/instr (U\(IJ\)'S VALUE, E.S.D. =, BOND1, BOND2, . . . .) def Instruction                                                                                                                                                                                                                                   
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This is a similarity restraint, and may be used to ensure that the vibration parameters of adjacent atoms
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
are similar, as must be the case even for flexible systems. The esd used must be softer than for a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
VIBRATION restraint, typically 0.01. In this restraint, the difference between corresponding u\(ii\) and
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
u\(ij\) terms is restrained to be 'VALUE', with an e.s.d. of 'E.S.D.'. Each bond that is specified generates
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
therefore six separate restraints, one for each of the anisotropic temperature parameters. If an atom with
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
an isotropic temperature factor is included in this restraint, the specified bond and all six restraints are
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
ignored. 
) def
Write
/left leftmargin indent add def 
/instr (PLANAR E.S.D. FOR 'ATOM SPECIFICATIONS') def Instruction                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive instructs the system to compute the mean plane through the atoms given in the atom
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
specifications, and then to restrain each of the atoms to lie in the plane. The 'E.S.D.' with which each
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
atom is restrained to be on the plane is given in angstrom. This parameter is optional and has a default
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
value of 0.01. 'FOR' is optional. 'ATOM SPECIFICATIONS' define the atoms that are on the plane.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
Each 'ATOM SPECIFICATIONS' may consist of one atom, together with symmetry data, or two
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atoms separated by 'UNTIL'. One or more specifications must be given. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Examples :) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(       PLANAR C\(1,2\) UNTIL C\(6\) C\(9\) C\(10,2,2\)) def Literal                                                                                                                                                                                                                                        
/litstring 
(       PLANAR 0.05 C\(1\) C\(2\) UNTIL C\(6\)) def Literal                                                                                                                                                                                                                                                 
/litstring 
(       PLANAR 0.05 FOR C\(1\) C\(2\) UNTIL C\(6\)) def Literal                                                                                                                                                                                                                                             
/litstring 
(       PLANAR FOR C\(1,2\) UNTIL C\(6\)) def Literal                                                                                                                                                                                                                                                       
LitBlank
/left leftmargin indent add def 
/instr (LIMIT E.S.D. FOR 'PARAMETER SPECIFICATIONS') def Instruction                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This restraint seta a target shift of zero for the specified parameters, with the specified esd, and thus
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
tries to limit the shift in the parameters. Since it modifies the normal matrix, it does not have the same
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
effect as partial shifts \(SHIFT,MAXIMUM,and FORCE in SFLS [section SFLS ]\). In particular, the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
e.s.d. on the parameter will depend upon the E.S.D. given to this restraint. The default for E.S.D. is
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
.001. Reducing this to about .00001 will have almost the same effect as FIX in LIST 12. Increasing it to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
10.0 will cause the restraint to have almost no effect unless the parameter involved is almost singular
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
with respect to some other parameter. Note that this is only a restraint, and if the medel and X-ray data
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
are good, the specified parameters will still shift. This restraint is valuable during the development of a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
poor starting model. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ORIGIN E.S.D. FOR 'PARAMETER SPECIFICATIONS') def Instruction                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This is used for polar space groups, where the singularity up the polar axis may be removed by holding
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the electron weighted sum of all the coordinates up that axis constant. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Example) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(       ORIGIN Y) def Literal                                                                                                                                                                                                                                                                               
LitBlank
/left leftmargin indent add def 
/instr (SUM E.S.D. FOR 'PARAMETER SPECIFICATIONS') def Instruction                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This restraint holds the sum of the parameters on the directive constant during the refinement. A typical
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
case is where several \(more than 2, which are better treated with EQUIVALENCE, in LIST 12\) atoms
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
share a site. 'E.S.D.' is the e.s.d. with which the sum of the parameters is held constant. This is an
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
optional parameter and has a default value of 0.0001. 'FOR' is optional. 'PARAMETER
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
SPECIFICATIONS' define the parameters that are to be summed. They may be given as : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       overall parameters e.g. SCALE,) def Literal                                                                                                                                                                                                                                                         
/litstring 
(       all atomic parameters of one type e.g. X, Y, U[11],) def Literal                                                                                                                                                                                                                                    
/litstring 
(       atomic parameters of one type for a group of atoms) def Literal                                                                                                                                                                                                                                     
/litstring 
(             e.g. NA\(1,OCC\) UNTIL RB\(6\),) def Literal                                                                                                                                                                                                                                                  
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Examples :) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(       SUM 0.0001 NA\(1,OCC\) UNTIL RB\(6\)) def Literal                                                                                                                                                                                                                                                   
/litstring 
(       SUM LAYER SCALES) def Literal                                                                                                                                                                                                                                                                       
LitBlank
/left leftmargin indent add def 
/instr (AVERAGE E.S.D. FOR 'PARAMETER SPECIFICATIONS') def Instruction                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
For this directive, the system computes the mean of the given parameters, and then restrains each to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
have the mean value with an e.s.d. of 'E.S.D.'. The parameters are as for the 'SUM' directive above. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (SAME BOND-ESD ANGLE-ESD FOR GROUP-1 AND GROUP-2 AND ...) def Instruction                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
The first group on the card is the 'target' - all following groups are mapped onto it \(in order specified\)
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and the distances angles restrained - using the connectivity of the first group. 
) def
Write
Blank
Newpage
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
The first two arguments are the e.s.d for bond length restraints and the e.s.d for angle restraints. Groups
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
are seperated by the word 'AND'. NOTE the absence of the usual '=' sign. I.E: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( SAME 0.01, 0.1 FOR RESI\(1\) AND RESI\(2\)) def Literal                                                                                                                                                                                                                                                   
/litstring 
(   maps all atoms in resi\(1\) onto all the atoms in resi\(2\) - note that) def Literal                                                                                                                                                                                                                    
/litstring 
(   although this shorthand is appealing, the order of resi\(1\) and resi\(2\)) def Literal                                                                                                                                                                                                                 
/litstring 
(   must be identical in List 5, although the residues may interpenetrate.) def Literal                                                                                                                                                                                                                     
Blank
/litstring 
( SAME 0.01 , 0.1) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( CONT C\(17\)  C\(18\)  H\(183\) H\(182\) H\(181\) AND) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT C\(17\)  C\(18\)  H\(182\) H\(181\) H\(183\)) def Literal                                                                                                                                                                                                                                            
/litstring 
(   imposes 3-fold symmetry on a single methyl group.) def Literal                                                                                                                                                                                                                                          
Blank
/litstring 
( SAME 0.01 , 0.1) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( CONT C\(17\)  C\(18\)  H\(183\) H\(182\) H\(181\) AND) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT C\(17\)  C\(19\)  H\(193\) H\(192\) H\(191\) AND) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT C\(8\)   C\(9\)   H\(93\)  H\(92\)  H\(91\) AND) def Literal                                                                                                                                                                                                                                         
/litstring 
( CONT C\(8\)   C\(10\)  H\(103\) H\(102\) H\(101\) AND) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT C\(14\)  C\(15\)  H\(153\) H\(152\) H\(151\) AND) def Literal                                                                                                                                                                                                                                        
/litstring 
( CONT C\(14\)  C\(16\)  H\(163\) H\(162\) H\(161\)) def Literal                                                                                                                                                                                                                                            
/litstring 
(   restrains six methyl groups to have the same geometry as each) def Literal                                                                                                                                                                                                                              
/litstring 
(   other. Combining the last two restraints would make all the) def Literal                                                                                                                                                                                                                                
/litstring 
(   methyls have 3 fold symmetry, and all be the same.) def Literal                                                                                                                                                                                                                                         
LitBlank
/left  138 def /ipflag    1 def /numspace   22 def
/textstring (
Errors are generated if 1\) the size of any of the groups on the SAME card is not the same as the first
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
group. 2\) the element type in a group does not match the corresponding element type in the first group. 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Warnings are printed if there are zero bonds to any of the atoms in the first group. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
The comma separating the e.s.d arguments, and the 'FOR' separating the e.s.d.s from the atom
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
specifications are optional. The second e.s.d is optional, the default is 0.1 degrees. The first e.s.d is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
optional unless you wish to specify the second, the default is 0.01 Angstroms. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
List 41 \(bonds\) is loaded by the restraint generating routine, if it does not exist an error will occur. \(By
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
default L41 is kept up to date with the current model.\) 
) def
Write
Blank
/left leftmargin indent add def 
/instr (DELU ADP-ESD  FOR GROUP-1 \(AND GROUP-2 AND ...\)) def Instruction                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
The adps of all pairs of bonded atoms in each group are restrained to be equal in the direction of the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
bond. Unlike SAME, a single group can be given. 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The first argument is the e.s.d for adp-restraint, I.E: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( DELU 0.01, 0.1 FOR RESI\(1\) AND RESI\(2\)) def Literal                                                                                                                                                                                                                                                   
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
Restrains the adps of all pairs on bonded atoms in RESIDUE\(1\) and \(2\). Note that although this
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
shorthand is appealing, the order of resi\(1\) and resi\(2\) must be identical in List 5, although the residues
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
may interpenetrate. 
) def
Write
Blank
/left  138 def /ipflag    1 def /numspace   22 def
/textstring (
Errors are generated if 1\) the size of any of the groups on the DELU card is not the same as the first
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
group. 2\) the element type in a group does not match the corresponding element type in the first group. 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Warnings are printed if there are zero bonds to any of the atoms in the first group. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The 'FOR' separating the e.s.d.s from the atom specifications is optional. The first e.s.d is optional, the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
default is 0.01 Angstroms. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
List 41 \(bonds\) is loaded by the restraint generating routine, if it does not exist an error will occur. \(By
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
default L41 is kept up to date with the current model.\) 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SIMU ADP-ESD  FOR GROUP-1 \(AND GROUP-2 AND ...\)) def Instruction                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
The adps of all pairs of bonded atoms in each group are restrained to be similar. Unlike SAME, a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
single group can be given. 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The first argument is the e.s.d for adp-restraint. I.E: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( SIMU 0.01, 0.1 FOR RESI\(1\) AND RESI\(2\)) def Literal                                                                                                                                                                                                                                                   
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
Restrains the adps of all pairs on bonded atoms in RESIDUE\(1\) and \(2\). Note that although this
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
shorthand is appealing, the order of resi\(1\) and resi\(2\) must be identical in List 5, although the residues
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
may interpenetrate. 
) def
Write
Blank
/left  138 def /ipflag    1 def /numspace   22 def
/textstring (
Errors are generated if 1\) the size of any of the groups on the DELU card is not the same as the first
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
group. 2\) the element type in a group does not match the corresponding element type in the first group. 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Warnings are printed if there are zero bonds to any of the atoms in the first group. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The 'FOR' separating the e.s.d.s from the atom specifications is optional. The first e.s.d is optional, the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
default is 0.04 Angstroms. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
List 41 \(bonds\) is loaded by the restraint generating routine, if it does not exist an error will occur. \(By
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
default L41 is kept up to date with the current model.\) 
) def
Write
Blank
/secttext (General restraints) def Section                                                                                                                                                                                                                                                                  
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The 'general restraint' enables the user to write out a restraining equation explicitly. The system
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
automatically calculates the value of the restraint and then evaluates the partial derivatives for each of the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
refinable parameters 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Thes restraints look like simple fortran statements involving operators and operands. 
) def
Write
/left leftmargin indent add def 
/instr (OPERATORS) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The available operators are : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \() def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      \)) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      **            must be followed by an operand.) def Literal                                                                                                                                                                                                                                           
/litstring 
(      *             must join two operands.) def Literal                                                                                                                                                                                                                                                   
/litstring 
(      \/             must join two operands.) def Literal                                                                                                                                                                                                                                                  
/litstring 
(      +             must precede an operand.) def Literal                                                                                                                                                                                                                                                  
/litstring 
(      -             must precede an operand.) def Literal                                                                                                                                                                                                                                                  
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
An operand may be a simple variable or an expression enclosed in parentheses. 
) def
Write
/left  138 def /ipflag    1 def /numspace   12 def
/textstring (
The operators above assume their normal FORTRAN meanings, and the combination of operands
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
and operators is the same as in standard FORTRAN, except that all calculations are done in floating
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
point. 
) def
Write
/left leftmargin indent add def 
/instr (ATOMIC COORDINATES) def Instruction                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
These are specified by a modified form of the atom definition given above. This is : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       TYPE\(SERIAL,S,L,TX,TY,TZ,KEY\)) def Literal                                                                                                                                                                                                                                                        
LitBlank
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
KEY Specifies the relevant coordinate of the atom. The KEY is regarded as an obligatory parameter,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
but for the remaining symmetry parameters, the drop out rules and default settings described under the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
atom definition may be applied, so that the simplest form of coordinate definition is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
TYPE\(SERIAL,KEY\), similar to a LIST 12 definition . The usual parameter keys are recognized. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (OVERALL PARAMETERS) def Instruction                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The usual overall paameter keys are recognized. 
) def
Write
/left leftmargin indent add def 
/instr (VARIABLES) def Instruction                                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
These are unsubscripted variables specified by up to 8 characters, of which the first must be a letter.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
Many commonly occurring crystallographic quantities are already prestored by the system, and the user
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
has the ability to declare new constants with a 'DEFINE' directive, which is described below. When a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
user defines a new variable, he must not use a name that has already been declared by the system. The
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
system variables are: 
) def
Write
/left leftmargin indent add def 
/instr (ARRAY VARIABLES) def Instruction                                                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   11 def
/textstring (
The system has pre-stored various arrays and variables holding useful crystallographic information,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
and users may not define or declare new arrays. The addressing is done in the normal Fortran manner,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
except that the element required must be specified by numeric arguments, and not variables. Thus
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
A\(3,1\) is allowed, but A\(I,J\) is illegal. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      A\(6\)       the cell parameters \(angles in radians\)) def Literal                                                                                                                                                                                                                                  
/litstring 
(      CV         real cell volume) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      AR\(6\)      reciprocal cell parameters \(angles in radians\)) def Literal                                                                                                                                                                                                                           
/litstring 
(      RCV        reciprocal cell volume) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      G\(3,3\)     real metric tensor) def Literal                                                                                                                                                                                                                                                         
/litstring 
(      GR\(3,3\)    reciprocal metric tensor) def Literal                                                                                                                                                                                                                                                   
/litstring 
(      L\(3,3\)     real orthogonalization matrix) def Literal                                                                                                                                                                                                                                              
/litstring 
(      LR\(3,3\)    reciprocal orthogonalization matrix) def Literal                                                                                                                                                                                                                                        
/litstring 
(      CONV\(3\)    conversion factor for the 'U\(ij\)'s' from 'U[iso]') def Literal                                                                                                                                                                                                                        
/litstring 
(      RIJ\(6\)     coefficients needed to calculate [sin\(theta\)\/l]**2) def Literal                                                                                                                                                                                                                      
/litstring 
(      ANIS\(6\)    coefficients needed to calculate the temperature) def Literal                                                                                                                                                                                                                           
/litstring 
(                 factor from the anisotropic temperature factors) def Literal                                                                                                                                                                                                                              
/litstring 
(      SM\(3,4,p\)  symmetry matrix 'p', where the translational) def Literal                                                                                                                                                                                                                               
/litstring 
(                 part is stored in sm\(i,4,p\)) def Literal                                                                                                                                                                                                                                                
/litstring 
(      SMI\(3,4,p\) inverse symmetry operators) def Literal                                                                                                                                                                                                                                                 
/litstring 
(      NPLT\(3,n\)  non-primitive lattice translations) def Literal                                                                                                                                                                                                                                         
/litstring 
(      PI         3.141......... etc.) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      TPI        2*Pi) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(      TPIS       2*pi*pi) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(      DTR        conversion of degrees to radians) def Literal                                                                                                                                                                                                                                             
Newpage
/litstring 
(      RTD        conversion of radians to degrees) def Literal                                                                                                                                                                                                                                             
/litstring 
(      ZERO       0.0) def Literal                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The following functions are also recognized : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SIN\(ARG\)      COS\(ARG\)      TAN\(ARG\)      ACOS\(ARG\)) def Literal                                                                                                                                                                                                                             
/litstring 
(      ASIN\(ARG\)     ATAN\(ARG\)     EXP\(ARG\)      SQRT\(ARG\)) def Literal                                                                                                                                                                                                                             
LitBlank
/secttext (General restraints) def Section                                                                                                                                                                                                                                                                  
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
There are two directives. 
) def
Write
/left leftmargin indent add def 
/instr (DEFINE NAME = TEXT) def Instruction                                                                                                                                                                                                                                                                 
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
This may be used to set up a user defined variable, which may be referred to later on by 'NAME'. The
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
text comprises a series of variables and numeric constants interspersed with operators. The 'NAME'
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
must not be one of the standard functions or variables, and may be overwritten several times - i.e. its
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
value may be redefined. 
) def
Write
/left leftmargin indent add def 
/instr (RESTRAIN VALUE, E.S.D. = TEXT) def Instruction                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The physical or chemical quantity defined by the 'TEXT' is restrained to be 'VALUE', with an e.s.d.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
of 'E.S.D.'. The text is comprised of operands separated by operators. The system will differentiate the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
'TEXT' with respect to each of the refinable coordinates that it contains and add the derivatives to the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
normal matrix in the usual way. 
) def
Write
/secttext (Debugging restraints) def Section                                                                                                                                                                                                                                                                
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Debugging commands are available to help with the creation of general restraints 
) def
Write
/left leftmargin indent add def 
/instr (COMPILER ) def Instruction                                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
During the formation of LIST 26 \(see LIST26 \), the input directives are listed, together with various
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
internal stacks. 
) def
Write
/left leftmargin indent add def 
/instr (EXECUTION ) def Instruction                                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
During the application of the restraints to the normal equations, various stacks are printed and all the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
calculated derivatives are printed \(use with care\). 
) def
Write
/secttext (Printing the contents of LIST 16) def Section                                                                                                                                                                                                                                                    
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The contents of LIST 16 may be listed with: 
) def
Write
/left leftmargin def 
/instr (\\PRINT 16) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
or 
) def
Write
/left leftmargin def 
/instr (\\SUMMARY LIST 16) def Instruction                                                                                                                                                                                                                                                                  
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
LIST 16 may be punched with: 
) def
Write
/left leftmargin def 
/instr (\\PUNCH 16) def Instruction                                                                                                                                                                                                                                                                         
Blank
/secttext (Creating a null LIST 16 ) def Section                                                                                                                                                                                                                                                            
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
A null LIST 16, containing no restraints, may be created with 
) def
Write
/left leftmargin def 
/instr (\\CLEAR 16) def Instruction                                                                                                                                                                                                                                                                         
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( restrain a set of distances to 1.5 angstrom with an) def Literal                                                                                                                                                                                                                                          
/litstring 
( e.s.d. of 0.03, note the use of symmetry indicators.) def Literal                                                                                                                                                                                                                                         
Blank
/litstring 
(      DISTANCE 1.5 , 0.03 = C\(1\) TO S\(1\) , C\(1,5\) TO S\(1,5\)) def Literal                                                                                                                                                                                                                           
/litstring 
(      CONT                  S\(1,7,1,-1\) TO C\(1,7,1,-1\)) def Literal                                                                                                                                                                                                                                    
Blank
/litstring 
( restrain the first distance above explicitly, by a user defined) def Literal                                                                                                                                                                                                                              
/litstring 
( restraint) def Literal                                                                                                                                                                                                                                                                                    
Blank
/litstring 
(      RESTRAIN 1.5 , 0.03 = SQRT) def Literal                                                                                                                                                                                                                                                              
/litstring 
(      CONT \(\(C\(1,5,X\)-S\(1,5,X\)\)*\(C\(1,5,X\)-S\(1,5,X\)\)*G\(1,1\)) def Literal                                                                                                                                                                                                                     
/litstring 
(      CONT +\(C\(1,5,X\)-S\(1,5,X\)\)*\(C\(1,5,Y\)-S\(1,5,Y\)\)*G\(1,2\)) def Literal                                                                                                                                                                                                                      
/litstring 
(      CONT +\(C\(1,5,X\)-S\(1,5,X\)\)*\(C\(1,5,Z\)-S\(1,5,Z\)\)*G\(1,3\)) def Literal                                                                                                                                                                                                                      
/litstring 
(      CONT +\(C\(1,5,Y\)-S\(1,5,Y\)\)*\(C\(1,5,X\)-S\(1,5,X\)\)*G\(2,1\)) def Literal                                                                                                                                                                                                                      
/litstring 
(      CONT +\(C\(1,5,Y\)-S\(1,5,Y\)\)*\(C\(1,5,Y\)-S\(1,5,Y\)\)*G\(2,2\)) def Literal                                                                                                                                                                                                                      
/litstring 
(      CONT +\(C\(1,5,Y\)-S\(1,5,Y\)\)*\(C\(1,5,Z\)-S\(1,5,Z\)\)*G\(2,3\)) def Literal                                                                                                                                                                                                                      
/litstring 
(      CONT +\(C\(1,5,Z\)-S\(1,5,Z\)\)*\(C\(1,5,X\)-S\(1,5,X\)\)*G\(3,1\)) def Literal                                                                                                                                                                                                                      
/litstring 
(      CONT +\(C\(1,5,Z\)-S\(1,5,Z\)\)*\(C\(1,5,Y\)-S\(1,5,Y\)\)*G\(3,2\)) def Literal                                                                                                                                                                                                                      
/litstring 
(      CONT +\(C\(1,5,Z\)-S\(1,5,Z\)\)*\(C\(1,5,Z\)-S\(1,5,Z\)\)*G\(3,3\)\)) def Literal                                                                                                                                                                                                                    
Blank
/litstring 
( restrain some distances to their mean) def Literal                                                                                                                                                                                                                                                        
Blank
/litstring 
(      DISTANCE 0.0 , 0.03 = MEAN O\(1\) TO S\(1\) O\(2\) TO S\(1\)) def Literal                                                                                                                                                                                                                            
/litstring 
(      CONT                       O\(1,2\) TO S\(1\) O\(1,7\) TO S\(1\)) def Literal                                                                                                                                                                                                                        
Blank
/litstring 
( vibration restraints along a bond) def Literal                                                                                                                                                                                                                                                            
Blank
/litstring 
(      VIBRATION 0.0 , 0.01 = S\(1,5\) TO O\(1,5\) S\(1,7\) TO C\(1,7\)) def Literal                                                                                                                                                                                                                        
/litstring 
(      CONT                  S\(1\) TO O\(1\) S\(1\) TO C\(1\)) def Literal                                                                                                                                                                                                                                 
Blank
/litstring 
( thermal similarity restraints) def Literal                                                                                                                                                                                                                                                                
Blank
Newpage
/litstring 
(      U\(IJ\)  0.0 , 0.01 = S\(1,5\) TO O\(1,5\) S\(1,7\) TO C\(1,7\)) def Literal                                                                                                                                                                                                                         
/litstring 
(      CONT                S\(1\) TO O\(1\) S\(1\) TO C\(1\)) def Literal                                                                                                                                                                                                                                   
Blank
/litstring 
( user defined restraints to some of the U\(IJ\)'S. This might cure a npd) def Literal                                                                                                                                                                                                                      
/litstring 
( atom) def Literal                                                                                                                                                                                                                                                                                         
Blank
/litstring 
(      RESTRAIN 0.0,0.01=S\(1,U[11]\)-S\(1,U[33]\)) def Literal                                                                                                                                                                                                                                             
/litstring 
(      RESTRAIN 0.0,0.01=S\(1,U[12]\)) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      RESTRAIN 0.0,0.01=S\(1,U[13]\)) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      RESTRAIN 0.0,0.01=S\(1,U[23]\)) def Literal                                                                                                                                                                                                                                                          
Blank
LitBlank
/secttext (The special restraints  -  LIST 17) def Section                                                                                                                                                                                                                                                  
/left leftmargin def 
/instr (\\LIST 17) def Instruction                                                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
LIST 17 is generated automatically by the command \\SPECIAL \(section SPECIAL \), and is intended to
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
take care of floating origins and atoms on special positions. The user may create their own LIST 17, but
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
this will be over written by SPECIAL unless it this is deactivated. 
) def
Write
Blank
/secttext (Printing and punching LIST 17) def Section                                                                                                                                                                                                                                                       
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 17 may be printed with: 
) def
Write
/left leftmargin def 
/instr (\\PRINT 17) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
or 
) def
Write
/left leftmargin def 
/instr (\\SUMMARY LIST 17) def Instruction                                                                                                                                                                                                                                                                  
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
It is punched with: 
) def
Write
/left leftmargin def 
/instr (\\PUNCH 17) def Instruction                                                                                                                                                                                                                                                                         
Blank
/secttext (Creating a null LIST 17 ) def Section                                                                                                                                                                                                                                                            
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
A null LIST 17, containing no restraints, may be created with 
) def
Write
/left leftmargin def 
/instr (\\CLEAR 17) def Instruction                                                                                                                                                                                                                                                                         
Blank
/secttext (Checking restraints - CHECK) def Section                                                                                                                                                                                                                                                         
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
\\CHECK LEVEL= END \\CHECK HI END 
) def
Write
Blank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
The target values for the restraints can be checked against the calculated values by issuing the following
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
command : 
) def
Write
/left leftmargin def 
/instr (\\CHECK LEVEL=) def Instruction                                                                                                                                                                                                                                                                     
/left leftmargin indent add indent add def
/instr (LEVEL=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LOW      Default value) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  148 def /ipflag    1 def /numspace   15 def
/textstring (
This command causes the restraints to be calculated, but not added into the normal equations. The
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
observed and calculated values are output to the listing file, with a summary on the terminal. If the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
LEVEL is LOW, only restraints where the calculated value differs significantly from the target are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
printed, otherwise all restraints are printed. 
) def
Write
Blank
/secttext (Weighting schemes for refinement-  LIST 4) def Section                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 4) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( SCHEME NUMBER= NPARAMETERS= TYPE= WEIGHT= MAXIMUM=) def Literal                                                                                                                                                                                                                                           
/litstring 
( PARAMETERS P=) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\LIST 4) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( SCHEME 14 3) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
LitBlank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
The weighting of least squares refinement is still very controversial. The matter is discussed at some
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
length by Schwartzenbach et al in Statistical Descriptors, and further insights may be gleaned from
) def
/last 0 def 
WriteCalc
/textstring (length by Schwartzenbach ) def WritePart
/textstring (et ) def
WriteItalic
/textstring (al ) def
WriteItalic
/textstring (in Statistical Descriptors, and further insights may be gleaned from) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
Numerical Recipies. Weighting the refinement can serve several purposes, and the weighting may need to be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
changed as the refinement proceeds. The weighting of Fo and Fsq refinements will be different. To a first
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
approximation, 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      w\(Fsq\) = w\(Fo\)\/2Fo) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(                              note the problem as Fo approaches 0.0) def Literal                                                                                                                                                                                                                           
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
Initially the analyst must choose a scheme which will hasten the rate of convergence, and reduce the risk
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
of the refinement falling into a false minimum. Towards the end of the refinement, once all the parameters
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
have been approximately refined, a different scheme will be necessary to generate reliable parameter s.u.s
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
\(e.s.d.s\) 
) def
Write
Newpage
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
My advice \(DJW,1996\) is to use unit weights for Fo refinement \(1.\/4Fsq for Fsq refinement\) until the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
structure is fully parameterised, and then an empirical scheme for the final refinement. It seems that pure
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
'statistical' weights are rarely satisfactory. The crucial thing is to look at the analysis of variance
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
\(\/ANALYSE\). The weighted residual \(see definition of Fo' etc above\) w\(Fo'-Fc'\)**2 should be invariant for
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
any rational ranking of the data. If there are any trends, then either the model is wrong or the estimates of w
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
are wrong. If the model is believed to be full parameterised and substantially correct, the trend in residual
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
can be used to estimate the weights. 
) def
Write
/secttext (Weighting for refinement against Fo) def Section                                                                                                                                                                                                                                                 
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
This set of weighting schemes should be selected when the minimisation function that is to be used
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
during the least squares process is given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       SUM\( w*\(Fo - Fc\)**2 \)) def Literal                                                                                                                                                                                                                                                              
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Where the summation is over all the reflections. 
) def
Write
/secttext (Weighting for refinement against Fsq) def Section                                                                                                                                                                                                                                                
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
Refinement against Fo or Fsq is also controversial. The controversy is not really concerned with negative
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
observations, since Fo can be given the sign of Io. The real problem is that the error distribution for Fo is not
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
the same as that of Fsq, and is not simply related to it for very weak reflections. However, the argument is
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
academic, since the error estimates for Fsq are not really known. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
CRYSTALS provides two different alternatives for the case in which the minimisation function is given
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(          SUM\( w*\(Fo**2 - Fc**2\)**2 \)) def Literal                                                                                                                                                                                                                                                     
LitBlank
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
In the first of these options, the weights are calculated normally for Fo, and then converted so that they
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
apply to Fsq by the operation : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(          w' = w\/\(4*Fo*Fo\)) def Literal                                                                                                                                                                                                                                                                 
LitBlank
/left  108 def /ipflag    0 def /numspace   22 def
/textstring (
Where w' is the weight for Fsq and w is the weight for Fo. This option is selected by the parameter TYPE =
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
1\/2Fo in the SCHEME directive above. For example, pseudo unit weights are selected by the input : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\LIST 4) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      SCHEME 9 0 1\/2Fo) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
This option may be used with any of the weighting schemes above. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
The second option also uses the weighting scheme types for Fo, except that Fsq is substituted for Fo in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
the equations. This option is selected by the parameter TYPE = Fo**2 in the SCHEME directive above. This
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
choice would be suitable for the Chebychev weighting schemes. 
) def
Write
/left leftmargin def 
/instr (\\LIST 4) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin indent add def 
/instr (SCHEME= NUMBER= NPARAMETERS= TYPE= WEIGHT= MAXIMUM=) def Instruction                                                                                                                                                                                                                                
/left leftmargin indent add indent add def
/instr (NUMBER=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of the weighting scheme to be used \(see below\). The default value is 9 \(unit weights\). 
) def
Write
/left leftmargin indent add indent add def
/instr (NPARAMETERS=) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of parameters to be provided for the weighting scheme. The default value is zero, 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE) def Instruction                                                                                                                                                                                                                                                                               
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NORMAL) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      1\/2Fo) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      Fo**2) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      CHOOSE    -  Default value) def Literal                                                                                                                                                                                                                                                              
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
The value of NORMAL indicates that the weighting scheme type is for refinement against Fo. If
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
TYPE is 1\/2Fo or Fo**2 the weighting scheme type is for refinement against Fsq \(see above\). 
) def
Write
/left  148 def /ipflag    1 def /numspace   15 def
/textstring (
If TYPE equals CHOOSE, one of the three previous type is chosen depending on the scheme
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
number and the refinement type set in LIST 23 \(structure factor control, see section LIST23 \). 
) def
Write
/left leftmargin indent add indent add def
/instr (WEIGHT=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
This parameter determines the weight assigned to reflections during the determination of Chebychev
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
coefficients. For each reflection the weight with which it is added into the Chebychev normal
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
equations is given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      W = 1\/[1+Fo**WEIGHT].) def Literal                                                                                                                                                                                                                                                                  
LitBlank
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
Thus if WEIGHT is equal to zero, all the weights will be the same and equal to 0.5. The default
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
value is 2.0 
) def
Write
/left leftmargin indent add indent add def
/instr (MAXIMUM=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter is used to set the maximum weight that can be applied, and is usefull for the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Dunitz-Seiler scheme \(13\), and the Chebyshev schemes \(10 and 14\). 
) def
Write
Blank
/left leftmargin indent add def 
Newpage
/instr (PARAMETERS P=) def Instruction                                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
The parameters that are to be used to compute the weight for a given reflection are specified with this
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive. 
) def
Write
/left leftmargin indent add indent add def
/instr (P=) def Instruction                                                                                                                                                                                                                                                                                 
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
This directive contains NPARAMETERS values. If this parameter is omitted, default values of zero
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
are assumed for P. 
) def
Write
/left  148 def /ipflag    1 def /numspace   18 def
/textstring (
The parameters must always be provided on the scale of Fo, not on the scale of Fc. For example,
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
the agreement analysis programs can work on the scale of Fc, so that constants derived from such
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
output must be put on the scale of Fo by multiplying them by the scale factor in LIST 5 \(the model
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameters\). 
) def
Write
/secttext (Weights stored in LIST 6) def Section                                                                                                                                                                                                                                                            
/left  118 def /ipflag    1 def /numspace   21 def
/textstring (
If w is the weight to be applied to a reflection in the least squares refinement, the value to be stored in
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
LIST 6 \(section LIST06 \) is sqrt\(w\), given the key SQRTW. If weights are computed by some external
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
utiity, then either is should generate sqrt\(w\), or the values be converted after input to CRYSTALS - see
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
scheme 5 below. 
) def
Write
/secttext (Weighting schemes) def Section                                                                                                                                                                                                                                                                   
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
In the equations and explanations below, NP is an abbreviation of NPARAMETERS , the number of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
parameters required to define the weighting scheme, P\(1\) is the first such parameter and P\(NP\) the last
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
parameter. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The available weighting schemes are : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( 1.     sqrt\(W\) = Fo\/P\(1\), Fo < P\(1\) OR Fo = P\(1\)) def Literal                                                                                                                                                                                                                                    
/litstring 
(        sqrt\(W\) = P\(1\)\/Fo, Fo > P\(1\)) def Literal                                                                                                                                                                                                                                                   
Blank
/litstring 
( 2.     sqrt\(W\) = 1      , Fo < P\(1\) OR Fo = P\(1\)) def Literal                                                                                                                                                                                                                                       
/litstring 
(        sqrt\(W\) = P\(1\)\/Fo, Fo > P\(1\)) def Literal                                                                                                                                                                                                                                                   
Blank
/litstring 
( 3.     sqrt\(W\) = sqrt\(1\/\(1 + [\(Fo - P\(2\)\)\/P\(1\)]**2\)\)) def Literal                                                                                                                                                                                                                           
Blank
/litstring 
( 4.     sqrt\(W\) = sqrt\(1\/[P\(1\) + Fo + P\(2\)*Fo**2 + . . + P\(NP\)*Fo**NP]\)) def Literal                                                                                                                                                                                                            
Blank
/litstring 
(        try P\(1\) = 2*FMIN and P\(2\) = 2\/FMAX,) def Literal                                                                                                                                                                                                                                             
/litstring 
(        Cruickshank, Computing Methods and the Phase) def Literal                                                                                                                                                                                                                                          
/litstring 
(        Problem, Pepinsky et al, 1961, page 45) def Literal                                                                                                                                                                                                                                                
Blank
/litstring 
( 5.     sqrt\(W\) = SQRT\(data with the key 'SQRTW' in list 6\)) def Literal                                                                                                                                                                                                                               
Blank
/litstring 
( 6.     sqrt\(W\) = \(data with the key 'SQRTW' in list 6\)) def Literal                                                                                                                                                                                                                                   
Blank
/litstring 
( 7.     sqrt\(W\) = SQRT\(1\/\(data with the key 'sigma\(Fo\)' in LIST 6\)\)) def Literal                                                                                                                                                                                                                  
Blank
/litstring 
( 8.     sqrt\(W\) = 1\/\(DATA WITH THE KEY 'SIGMA\(Fo\)' IN LIST 6\)) def Literal                                                                                                                                                                                                                          
/litstring 
(                  ** remember that for schemes 7 & 8, LIST 6  **) def Literal                                                                                                                                                                                                                              
/litstring 
(                  ** must store both weight and sigma.        **) def Literal                                                                                                                                                                                                                              
Blank
/litstring 
( 9.     sqrt\(W\) = 1.0 \(Unit weights, default\)) def Literal                                                                                                                                                                                                                                             
Blank
/litstring 
( 10.    sqrt\(W\) = sqrt\(1.0\/[A[0]*T[0]'\(X\) + A[1]*T[1]'\(X\) . .) def Literal                                                                                                                                                                                                                         
/litstring 
(                  +A[NP-1]*T[NP-1]'\(X\)]\)) def Literal                                                                                                                                                                                                                                                   
/litstring 
(                  Chebychev weighting - see below for details) def Literal                                                                                                                                                                                                                                 
Blank
/litstring 
( 11.     As for 10, but only applying previously determined parameters.) def Literal                                                                                                                                                                                                                       
Blank
/litstring 
( 12.    sqrt\(W\) = sqrt\([SIN\(THETA\)\/LAMBDA]**P\(1\)\)) def Literal                                                                                                                                                                                                                                    
/litstring 
(                  If  NP  is zero, a value of -1 is assumed for P\(1\) .) def Literal                                                                                                                                                                                                                      
Blank
/litstring 
( 13.    sqrt\(W\) = sqrt\([weight] * exp[8*\(p\(1\)\/p\(2\)\)*\(pi*s\)**2]\)) def Literal                                                                                                                                                                                                                  
/litstring 
(                  Dunitz Seiler weighting - see below for details) def Literal                                                                                                                                                                                                                             
Blank
/litstring 
( 14.    sqrt\(W\) = sqrt\(W' * \(1. - \(delta\(F\)\/ 6* del\(F\)est\)**2\)**2\)) def Literal                                                                                                                                                                                                               
/litstring 
(             W' = 1.0\/[A[0]*T[0]'\(X\) + A[1]*T[1]'\(X\) . .) def Literal                                                                                                                                                                                                                                 
/litstring 
(                  +A[NP-1]*T[NP-1]'\(X\)]) def Literal                                                                                                                                                                                                                                                     
/litstring 
(                   Robust-resistant refinement - see below) def Literal                                                                                                                                                                                                                                    
Blank
/litstring 
( 15.     As for 14, but only applying previously determined parameters.) def Literal                                                                                                                                                                                                                       
Blank
/litstring 
( 16.     sqrt\(W\) = Sheldrick SHELX-97 weights \(page 7-31\). The P1-P6) def Literal                                                                                                                                                                                                                      
/litstring 
(                   correspond to Sheldricks parameters a-f, but are not) def Literal                                                                                                                                                                                                                       
/litstring 
(                   refined automatically. Fo and Fc replace Fosq and) def Literal                                                                                                                                                                                                                          
/litstring 
(                   Fcsq for Fo refinement.) def Literal                                                                                                                                                                                                                                                    
/litstring 
(                   Use 0.1 0 0 0 0 .333 to get Sheldrick defaults.) def Literal                                                                                                                                                                                                                            
LitBlank
/secttext (Dunitz Seiler weighting - scheme 13) def Section                                                                                                                                                                                                                                                 
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
S is sin\(theta\)\/lambda, pi is 3.141... Use p\(1\) = 1 and p\(2\) = 4 to simulate p=3, q=9 in Dunitz and Seiler
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
Acta\(1973\),B29,589. Set MAXIMUM to 100. This scheme may be used for refinement before looking for
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
bonding electrons. 
) def
Write
/secttext (Chebychev weighting schemes 10, 11) def Section                                                                                                                                                                                                                                                  
Blank
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
A[i] are the coefficients of a Chebyshev series in t[i]'\(x\), where x = Fo\/Fo\(max\). \(There is an account of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
CHEBYSHEV series in Computing Methods in Crystallography, edited by J.S. Rollett, p40\). For this
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
weighting scheme, the coefficients a[i] are calculated by the program using a least squares procedure which
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
minimizes sum[\(Fo - Fc\)**4] over all the reflections. The resulting coefficients are stored in a new LIST 4
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
as weighting scheme type 11 \(see below\), and then used to calculate the weights for each of the reflections.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
It is recommended that several different values of NP are used \(e.g 3 to 5\), so that series of various orders
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
are tested to see which gives the best fit. If negative or very small reciprocal weights are computed \(i.e. the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
computed curve fall close to or crosses the ordinate axis\), the parameter MAXIMUM can be used to restrict
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
the maximum weight. For data on 'ordinary' scales, this will require a value of about 100. \(This is best seen
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
by computing an agreement analysis once the new weights have been calculated\). The parameters P\(i\) need
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
not be given, because they are to be computed. When the Chebyshev coefficients have been determined, p\(1\)
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
is overwritten by the value determined for a[1]. \(Carruthers and Watkin, Acta Cryst \(1979\) A35, 698\).
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Scheme 10 generates the parameters needed for a scheme 11. 
) def
Write
/secttext (Robust-resistant weighting schemes 14, 15) def Section                                                                                                                                                                                                                                           
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
This scheme should only be used towards the end of a refinement, when all of the expected variables have
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
been introduced. It is usefull when there is suspicion of uncorrelated but significant errors in the data, and its
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
effect is similar to scheme 10 in the absence of such errors. The expression for W' is as in Scheme 10 above,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
except that X is Fc\/Fc\(max\). This weight is then modified by a function expressing confidence in Fo-Fc. If
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
the observed delta is large compared with the delta estimated from the Chebychev fitting, the reflection is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
down weighted. It it is more than 6 times the estimate, the weight is set to zero and the reflection flagged as
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
an 'OUTLIER'. This scheme is recommended in preference to Scheme 10, which is kept for old times sake.
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
See E. Prince, Mathematical Techniques in Crystallography, Springer-Verlag, for the background. 
) def
Write
Blank
/secttext (Statistical Weights, 16) def Section                                                                                                                                                                                                                                                             
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
This scheme can in principle be introduced at any time, but the parameters P\(i\) are best optimised near the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
end of a refinement. Typical values for CAD4 data are: p\(1\)=.001, p\(2\)=3.0 and p\(4\)=1. 
) def
Write
/secttext (Printing LIST 4) def Section                                                                                                                                                                                                                                                                     
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
of LIST 4 may be printed with: 
) def
Write
/left leftmargin def 
/instr (\\PRINT 4) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
There is no command for punching LIST 4. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Example) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      \\ Weighting scheme type 10 \(Chebyshev\) with 3 parameters) def Literal                                                                                                                                                                                                                             
/litstring 
(      \\LIST 4) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      SCHEME NUMBER = 10,NPARAM = 3) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/secttext (Weighting the reflections - WEIGHT) def Section                                                                                                                                                                                                                                                  
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
If the weighting scheme is changed, new weights are automatically computed for the next structure factor
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
calculation. The computation of weights can be forced at any time with \\WEIGHT. 
) def
Write
/left leftmargin def 
/instr (\\WEIGHT INPUT=) def Instruction                                                                                                                                                                                                                                                                    
/left leftmargin indent add indent add def
/instr (INPUT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Indicates which reflection list to use. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      6      Default) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      7      Alternative reflection list) def Literal                                                                                                                                                                                                                                                      
LitBlank
Blank
/secttext (Re-weighting the reflections - REWEIGHT) def Section                                                                                                                                                                                                                                             
/left leftmargin def 
/instr (\\REWEIGHT INPUT= FACTOR=) def Instruction                                                                                                                                                                                                                                                          
/left leftmargin indent add indent add def
/instr (INPUT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Indicates which reflection list to use. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      6      Default) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      7      Alternative reflection list) def Literal                                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add indent add def
/instr (FACTOR) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
If FACTOR is less or equal zero, the code tries to compute a value which will make S \(GoF\) about
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
unity. It is important that the GoF stored in LIST 30 is up to date. The SCRIPT REWEIGHT will try
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
to do this for you. 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If FACTOR is greater than zero, all weights will be multiplied by this amount. The default value is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
inity. 
) def
Write
Blank
Blank
/secttext (Reflection restriction list  -  LIST 28) def Section                                                                                                                                                                                                                                             
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\LIST 28) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( MINIMA COEFFICIENT\(1\)= COEFFICIENT\(2\)= ...) def Literal                                                                                                                                                                                                                                               
/litstring 
( MAXIMA COEFFICIENT\(1\)= COEFFICIENT\(2\)= ...) def Literal                                                                                                                                                                                                                                               
/litstring 
( READ NSLICES= NOMISSION= NCONDITION=) def Literal                                                                                                                                                                                                                                                         
/litstring 
( SLICE P= Q= R= S= T= TYPE=) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( OMIT H= K= L=) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( CONDITION P= Q= R= S= T= TYPE) def Literal                                                                                                                                                                                                                                                                
/litstring 
( SKIP STEP=) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 28) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( MINIMA RATIO=3) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( READ NOMIS=1) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( OMIT 2 0 0) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
LIST 6 \(section LIST06 \) should contain all the reflections, including negative ones. LIST 28 can then be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
used to dynamically select which ones are to be omitted from a calculation. Several conditions may be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
specified, and ALL the conditions must be satisfied for a reflection to be used, i.e. the conditions are ANDed
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
together. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
It is also possible to specify individual reflections which are to be omitted. 
) def
Write
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
TAKE CARE WHEN CHANGING LIST 28. If the conditions are relaxed, reflections may become
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
acceptable for which Fc and phase have not been recomputed because they were rejected at an earlier stage.
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Recompute them all. 
) def
Write
Blank
/left leftmargin def 
/instr (\\LIST 28) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin indent add def 
/instr (MINIMA COEFFICIENT\(1\)= COEFFICIENT\(2\)= .  .) def Instruction                                                                                                                                                                                                                                    
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This defines the coefficients whose minimum values are to be restricted. 
) def
Write
/left leftmargin indent add indent add def
/instr (COEFFICIENT=  VALUE) def Instruction                                                                                                                                                                                                                                                                
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
Each such parameter defines one coefficient and its minimum value. The following are known to the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
system, BUT REMEMBER, with the exception of \(sintheta\/lambda\)**2, which is computed for each
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
reflection from the cell parameters, only those coefficients specifically stored in the LIST 6 \(see
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
section LIST06 \) will have values. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      H             K             L             \/FO\/) def Literal                                                                                                                                                                                                                                        
/litstring 
(      SQRTW         FCALC         PHASE         A-PART) def Literal                                                                                                                                                                                                                                        
/litstring 
(      B-PART        TBAR          FOT           ELEMENTS) def Literal                                                                                                                                                                                                                                      
/litstring 
(      SIGMA\(F\)      BATCH         INDICES       BATCH\/PHASE) def Literal                                                                                                                                                                                                                                
/litstring 
(      SINTH\/L**2    FO\/FC         JCODE         SERIAL) def Literal                                                                                                                                                                                                                                      
/litstring 
(      RATIO         THETA         OMEGA         CHI) def Literal                                                                                                                                                                                                                                           
/litstring 
(      PHI           KAPPA         PSI           CORRECTIONS) def Literal                                                                                                                                                                                                                                   
/litstring 
(      FACTOR1       FACTOR2       FACTOR3       RATIO\/JCODE) def Literal                                                                                                                                                                                                                                  
LitBlank
/left leftmargin indent add def 
/instr (MAXIMA COEFFICIENT\(1\) COEFFICIENT\(2\) .  .) def Instruction                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This defines the coefficients whose maximum values are to be restricted. See MINIMA above. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (READ NSLICES= NOMISSION= NCONDITION=) def Instruction                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This gives the number of conditional directives to follow. 
) def
Write
/left leftmargin indent add indent add def
/instr (NSLICES) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This specifies the number of SLICE directives, default is zero. 
) def
Write
/left leftmargin indent add indent add def
/instr (NOMISSIONS) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This specifies the number of OMIT directives, default is zero. 
) def
Write
/left leftmargin indent add indent add def
/instr (NCONDITION) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This specifies the number of CONDITION directives, default is zero. 
) def
Write
/left leftmargin indent add def 
/instr (SLICE P= Q= R= S= T= TYPE=) def Instruction                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
This directive selects reflections to those giving values of \(h*p + k*q + l*r\) in the range s to t. The
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
number of such directives is specified on the READ directive above. TYPE indicates whether the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
selected reflections are accepted or rejected. The records are processed in the order given. If a reflection
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
matches the conditions, the specified action is taken and no further slice directives are considered. This
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
enables quite fancy intersections to be specified. 
) def
Write
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
For example, a single layer of reciprocal points, or a set of adjacent layers, oriented in any desired
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
crystallographic direction, can be selected. 
) def
Write
/left leftmargin indent add indent add def
/instr (P= Q= R= S= T=) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters, whose default values are zero, specify selected slices of reciprocal space. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      REJECT \(default\) causes rejection of selected reflections.) def Literal                                                                                                                                                                                                                            
/litstring 
(      ACCEPT           accepts reflections) def Literal                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add def 
/instr (OMIT H= K= L=) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive causes the reflection with the indices H, K, and L to be omitted. 
) def
Write
/left leftmargin indent add indent add def
/instr (H= K= L=) def Instruction                                                                                                                                                                                                                                                                           
Newpage
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters specify the indices of the reflection to be omitted. 
) def
Write
/left leftmargin indent add def 
/instr (CONDITION P= Q= R= S= T= TYPE=) def Instruction                                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive causes selection of reflections giving values of \(h*p + k*q + l*r + s\) exact multiples of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
't'. TYPE indicates whether the selected reflections are accepted or rejected. The number of such
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
directives is specified on the READ directive above. The records are processed in the order given. If a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
reflection matches the conditions, the specified action is taken and no further slice directives are
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
considered. This enables quite fancy intersections to be specified. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
For example, l odd layers can be rejected by setting 'r' and 's' to 1, 't' to 2. 
) def
Write
/left leftmargin indent add indent add def
/instr (P= Q= R= S= T=) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
These parameters, whose default values are zero, specify selected slices of reciprocal space. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      REJECT \(default\) causes rejection of selected reflections.) def Literal                                                                                                                                                                                                                            
/litstring 
(      ACCEPT           accepts reflections) def Literal                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add def 
/instr (SKIP STEP=) def Instruction                                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive can be used sample the data by skipping through LIST 6, \(reflections, section LIST06 \)
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and may be usefull to speed up initial refinement. 
) def
Write
/left leftmargin indent add indent add def
/instr (STEP=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
This is the skip step length, and has a default of 1, i.e. all reflections are accepted. A value 3 selects
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
every third reflection. 
) def
Write
/secttext (Creating a null LIST 28) def Section                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 28) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Allows all the reflections in LIST 28 to be used. 
) def
Write
/secttext (Printing the contents of LIST 28) def Section                                                                                                                                                                                                                                                    
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
LIST 28 may be listed by the command : 
) def
Write
/left leftmargin def 
/instr (\\PRINT 28) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
There is no command for punching LIST 28. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Example 1) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      \\LIST 28) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      \\ Set the minimum ratio I\/sigma\(i\) to 3.0,) def Literal                                                                                                                                                                                                                                          
/litstring 
(      \\ a maximum Fo to 1000) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(      \\ and omit the 0 2 0 reflection) def Literal                                                                                                                                                                                                                                                        
/litstring 
(      \\) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      MINIMA Ratio=3) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      MAXIMA Fo=1000) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      READ NOMIS = 1) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      OMIT 0 2 0) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
Blank
/litstring 
(      Example 2. To reject h and k simultaneously even:) def Literal                                                                                                                                                                                                                                       
Blank
/litstring 
(      condit p=1 s=1 t=1 type=accept    \\lets ALL with h odd through) def Literal                                                                                                                                                                                                                         
/litstring 
(      condit q=1 s=1 t=1 type=accept    \\lets ALL with k odd through) def Literal                                                                                                                                                                                                                         
/litstring 
(      condit s=1 t=1 type=reject        \\rejects remaining.) def Literal                                                                                                                                                                                                                                  
Blank
/litstring 
(      Example 3. To reject all k=0, k=2:) def Literal                                                                                                                                                                                                                                                      
Blank
/litstring 
(      slice q=1 s=0 t=0 type=reject) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      slice q=1 s=2 t=2 type=reject) def Literal                                                                                                                                                                                                                                                           
Blank
/litstring 
(      Example 4. To reject all k=0, k=2 but keep the l=0 row:) def Literal                                                                                                                                                                                                                                 
Blank
/litstring 
(      slice r=1 s=0 t=0 type=accept) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      slice q=1 s=0 t=0 type=reject) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      slice q=1 s=2 t=2 type=reject) def Literal                                                                                                                                                                                                                                                           
Blank
/litstring 
(      Example 5. To only allow specific zones, the ones wanted are) def Literal                                                                                                                                                                                                                            
/litstring 
(      selected, and then the rest rejected, eg for h=0:) def Literal                                                                                                                                                                                                                                       
Blank
/litstring 
(      slice p=1 s=0 t=0 type=accept              \\ accept the h00 zone) def Literal                                                                                                                                                                                                                       
/litstring 
(      slice p=1 q=1 r=1 s=-500 t=500 type=reject \\ reject everything else) def Literal                                                                                                                                                                                                                    
Blank
LitBlank
/secttext (Structure Factor Least Squares Calculations  -  \\SFLS) def Section                                                                                                                                                                                                                              
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\SFLS  INPUT=) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( CALCULATE LIST= MAP= \/Fo\/= THRESHHOLD=) def Literal                                                                                                                                                                                                                                                     
/litstring 
( SCALE LIST= MAP= \/Fo\/=) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( REFINE LIST= MAP= \/Fo\/= PUNCH= MATRIX= MONITOR= INVERTOR=) def Literal                                                                                                                                                                                                                                  
/litstring 
( SHIFT  KEY= KEY=) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( MAXIMUM  KEY= KEY=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( FORCE  KEY= KEY=) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( SOLVE MONITOR= MA=P \/Fo\/= PUNCH= MATRIX=) def Literal                                                                                                                                                                                                                                                   
/litstring 
( VECTOR MONITOR= MAP= \/Fo\/= PUNCH= MATRIX=) def Literal                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\SFLS) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( REFINE) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( REFINE) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/secttext (Definitions) def Section                                                                                                                                                                                                                                                                         
/left leftmargin indent add def 
/instr (Minimisation funtion for Fsq) def Instruction                                                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Minimisation function = Sum[ w*\(Fo**2 - Fc**2\)**2 ]) def Literal                                                                                                                                                                                                                                   
LitBlank
/left leftmargin indent add def 
/instr (Minmisation function for Fo) def Instruction                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Minimisation function = Sum[ w*\(Fo - Fc\)**2 ]) def Literal                                                                                                                                                                                                                                         
LitBlank
/left leftmargin indent add def 
/instr (R-factor for Fo) def Instruction                                                                                                                                                                                                                                                                    
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      R = 100*Sum[\/\/Fo\/-\/Fc\/\/]\/Sum[\/Fo\/]) def Literal                                                                                                                                                                                                                                             
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The summation is over all the reflections accepted by LIST 28. This definition is used for both
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
conventional and F-squared refinement. 
) def
Write
/left leftmargin indent add def 
/instr (R-Factor, Hamilton weighted) def Instruction                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      100*Sqrt\(Sum[ w\(i\)*D'\(i\)*D'\(i\) ]\/SUM[ w\(i\)*Fo'\(i\)*Fo'\(i\) ]\)) def Literal                                                                                                                                                                                                              
Blank
/litstring 
(      Fo' = Fo for normal refinement, Fsq for F-squared refinement.) def Literal                                                                                                                                                                                                                           
/litstring 
(      Fc' = Fc for normal refinement, Fc*Fc for F-squared refinement.) def Literal                                                                                                                                                                                                                         
/litstring 
(      D'  = Fo'-Fc') def Literal                                                                                                                                                                                                                                                                           
LitBlank
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
The weighted R-factor stored in LIST 6 \(section LIST06 \) and LIST 30 \(section LIST30 \) is that
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
computed during a structure factor calculation. The conventional R-factor is updated by either an SFLS
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
calculation or a SUMMARY of LIST 6. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Minimisation function) def Instruction                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Fo' = Fo for normal refinement, Fo*Fo for F-squared refinement.) def Literal                                                                                                                                                                                                                         
/litstring 
(      Fc' = Fc for normal refinement, Fc*Fc for F-squared refinement.) def Literal                                                                                                                                                                                                                         
/litstring 
(      D'  = Fo'-Fc') def Literal                                                                                                                                                                                                                                                                           
Blank
/litstring 
(      MINFUNC = Sum[ w\(i\)*D\(i\)*D\(i\) ]) def Literal                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
Good references to the theory and practice of structure factor least squares are in the chapters by J.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
S. Rollett and D. W. J. Cruickshank in Crystallographic Computing, edited by F. R. Ahmed, and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
chapters 4, 5 and 6 in Computing Methods in Crystallography, edited by J. S. Rollett. 
) def
Write
/secttext (Unstable refinements) def Section                                                                                                                                                                                                                                                                
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
If a refinement 'blows up', i.e. diverges rapidly, the user should seek out the physical cause \(wrong space
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
group, pseudo symmetry, incorrect data processing, disorder, twinning etc\). If the cause of the divergence is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
simply that the model is too inaccurate, the divergence can by controlled by limiting the shifts applied in the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
first few cycles. The modern way to do this is via 'shift limiting restraints' \(Marquardt modifier\) in LIST 16.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
An older method was to use partial shift factors. These are set up by directives to the \\SFLS command
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
\(section SFLS \). During the solution of the normal equations, the user may specify that more or less than the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
whole calculated shift should be applied. Alternatively, the program can be instructed to scale the shifts so
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
that the maximum shift for any parameter group is limited to a given value. \(The SHIFT , MAXIMUM and
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
FORCE directives\). 
) def
Write
Blank
/secttext (Sorting of LIST 6 for structure factor calculations) def Section                                                                                                                                                                                                                                 
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
During a structure factor least squares calculation, the values for the real and imaginary parts of A and B
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
and their derivatives are computed and stored. These values are then taken and formed into Fc and its
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
derivatives, which are added into the normal matrix. Between reflections, the values for A and B and their
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
derivatives are retained. If the next reflection in LIST 6 \(section LIST06 \) has a set of indices which are
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
equivalent to the last reflection, the same values for the real and imaginary parts of A and B and their
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
derivatives can be used. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
This type of situation can arise either when anomalous scatterers are present, implying that F\(h,k,l\) is not
) def
/last 0 def 
Write
Newpage
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
equal to F\(-h,-k,-l\), or when an extinction parameter is being refined and formally equivalent reflections
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
have different Fo values and mean path lengths. In this sort of case, the time for a structure factor calculation
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
can be significantly reduced if reflections with symmetry related sets of indices are adjacent in LIST 6, when
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the conserved values of A and B can be used repeatedly. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
In a similar way, during a structure factor calculation for a twinned crystal, the contribution and
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
derivatives for each element are stored as they are calculated and then combined to produce \/FCT\/ when all
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
the contributions have been accumulated. Between reflections this stored information is retained, so that if
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
the next reflection contains contributions from elements with the same indices as the previous reflection, it is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
unnecessary to re-compute the A and B parts. Obviously, reflections with common contributors must again
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
be adjacent in LIST 6, in which case a structure factor calculation, with or without least squares, takes only
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
slightly longer than the corresponding normal calculation with the same number of observations. 
) def
Write
/left leftmargin def 
/instr (\\SFLS) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
The directives are carried out in the order in which they appear. 
) def
Write
/left  128 def /ipflag    1 def /numspace   13 def
/textstring (
The directives REFINE, SCALE, and CALCULATE initiate cycles of S.F.L.S. calculations. If one of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
the directives SHIFT , MAXIMUM or FORCE is given following REFINE, a scaled shift will be applied
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
to that cycle of refinement. 
) def
Write
/left leftmargin indent add def 
/instr (SFLS INPUT=) def Instruction                                                                                                                                                                                                                                                                        
/left leftmargin indent add indent add def
/instr (INPUT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Indicates which reflection list to use. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      6      Default) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      7      Alternative reflection list) def Literal                                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add def 
/instr (CALCULATE LIST= MAP= \/Fo\/= THRESHOLD=) def Instruction                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
If CALCULATE is included with other commands within a single \\SFLS block, it MUST BE the last
) def
/last 0 def 
WriteCalc
/textstring (If CALCULATE is included with other commands within a single \\SFLS block, it ) def WritePart
/textstring (MUST ) def
WriteBold
/textstring (BE ) def
WriteBold
/textstring (the last) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
command. 
) def
Write
/left  138 def /ipflag    1 def /numspace   15 def
/textstring (
This directive indicates that structure factors should be calculated, but that no refinement of any type
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
should be done. Structure factors are computed for every reflection and used to compute R and Rw for
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
all data. R and Rw are also computed for reflections with I>threshold Sigma\(I\). The default value for
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the threshold is 4. 
) def
Write
/left  138 def /ipflag    1 def /numspace   14 def
/textstring (
The directives SHIFT , MAXIMUM and FORCE may not be given before the next REFINE
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls the listing of reflection information. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OFF   -  Default) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(      MEDIUM) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
The value OFF indicates that the discrepancy for each reflection \(\/Fo-Fc\/\)\/Fo is computed and if
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
greater than 3*\(overall R factor\) from the previous cycle of structure factors, a warning is printed.
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Only the first 25 such reflections are listed. 
) def
Write
/left  148 def /ipflag    1 def /numspace   13 def
/textstring (
If the ENANTIOPOLE parameter is activated in LIST 23 \(structure factor control, see section
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
LIST23 \), sensitive reflections, for which \/\(F+\)-\(F-\)\/ .> .05 *\(\(F+\)+\(F-\)\/2\), are also listed. 
) def
Write
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
If LIST is MEDIUM , the structure factors are listed as they are computed. The output contains h,
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
k, l, Fo \(on the scale of Fc\), Fc, the phase and sin\(theta\)\/lambda, the unweighted and weighted
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
delta's. \(Fo - Fc or Fo**2 - Fc**2, depending upon the type of refinement being done\), and
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
information which is useful when anomalous dispersion effects are present, and contains the real part
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
of Fc \(\/Fc'\/\), the imaginary part of Fc \(\/Fc"\/\), the computed difference between \/F\(h,k,l\)\/**2 and
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\/F\(-h,-k,-l\)\/**2, and the calculated or theoretical Bijvoet ratio \(t.b.r.\). 
) def
Write
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
When a twinned crystal structure is being refined, LIST = HIGH gives FoT and \/FcT\/ in place of
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
Fo and Fc, respectively. Also, the contributions of each element to each reflection of a twinned
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
crystal are listed. As well as \/FcT\/ and the indices, Fc, multiplied by the square root of the element
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
scale factor, and the element number are also printed for each component under the column headed
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
by \/FC'\/. This option is only obeyed if LIST 13 \(section LIST13 \) indicates that a twinned crystal
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
structure is being refined. 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
List MEDIUM and HIGH produces one line of output for each reflection. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAP) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls printing of the memory map - mainly used by programmers 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NONE  -  Default value) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      PART) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      FULL) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
If MAP is PART , a list of core addresses is printed, together with any unused locations. If MAP is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
FULL , the addresses and contents of the areas of code claimed by each list as it is brought down are
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
printed on the line printer as the list is loaded. This option produces reams of output and should never
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
be used except by programmers. If MAP is NONE , its default value, a core map is not printed. 
) def
Write
/left leftmargin indent add indent add def
/instr (\/Fo\/) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls the treatment of twinned data. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
(      FoT        -  Default value) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      Scaled-FoT) def Literal                                                                                                                                                                                                                                                                              
LitBlank
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
In the refinement of a twinned crystal, if \/Fo\/ = FoT , its default value, the FoT is output as the data
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
for the key \/Fo\/ , the corresponding \/FcT\/ is output for Fc , and the phase is arbitrarily set to zero. If
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
\/Fo\/ is SCALED-FoT , the data for Fo , Fc and PHASE contain an estimate of the required quantities
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
for the element in whose reference system the nominal indices are given, i.e. estimates of the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
resolved data are produced. 
) def
Write
/left leftmargin indent add indent add def
/instr (THRESHOLD) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Sets a sigma\(I\) threshold for computing the restricted Rfactor. The default value is 4.0 
) def
Write
/left leftmargin indent add def 
/instr (SCALE LIST= MAP= \/Fo\/=) def Instruction                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive indicates that structure factors should be calculated and the overall scale factor should be
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
refined. The directives SHIFT , MAXIMUM and FORCE may not be given before the next REFINE
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAP) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (Fo) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add def 
/instr (REFINE LIST= MAP= \/Fo\/= PUNCH= MATRIX= MONITOR= INVERTOR= ) def Instruction                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive indicates a complete structure factor least squares calculation. 
) def
Write
/left leftmargin indent add indent add def
/instr (LIST) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAP) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (Fo) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (PUNCH) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls punching LIST 5 \(the model parameters\) to the .PCH file 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If PUNCH is YES, LIST 5 is punched after the current cycle of refinement. 
) def
Write
/left leftmargin indent add indent add def
/instr (MATRIX) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls re-use of the normal matrix 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NEW  -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      OLD) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If MATRIX is NEW, a new matrix is computed for the current cycle. 
) def
Write
Blank
/left  148 def /ipflag    1 def /numspace   18 def
/textstring (
If MATRIX is OLD , the left hand side of the normal matrix is not accumulated during the cycle
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
of refinement. Instead, the version that already exists is used with the new right hand sides. This
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
option is particularly useful at the end of a refinement of a large structure when the left hand side
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
does not change appreciably from cycle to cycle. It greatly reduces the time for a cycle. 
) def
Write
/left leftmargin indent add indent add def
/instr (MONITOR) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls the shift information printed out. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LOW  -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      MEDIUM) def Literal                                                                                                                                                                                                                                                                                  
LitBlank
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
The MEDIUM listing outputs details about all parameters refined, and lists the values, shifts and
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
e.s.d.s of all parameters in LIST 5. The LOW listing outputs information only for those l.s.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
parameters for which the SHIFT RATIO exceeds 3.0, and\/or the SHIFT\/ESD exceeds 1.0 . Only
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
those atoms in LIST 5 containing one or more refinable parameters are listed. 
) def
Write
/left leftmargin indent add indent add def
/instr (INVERTOR) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Two matrix inversion methods are provided. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      CHOLESKI  -  Default value) def Literal                                                                                                                                                                                                                                                              
/litstring 
(      EIGENVALUE) def Literal                                                                                                                                                                                                                                                                              
LitBlank
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
The default Choleski invertor is suitable for most well conditioned problems. The alternative
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
Eigenvalue invertor is suitable for ill-conditioned cases, such as those involving pseudo-symmetry. It
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
is slower than the Choleski method and cannot handle such large normal matrices. The memory
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
required is almost three times that used for each block in the Cholesky method. 
) def
Write
/left leftmargin indent add indent add def
/instr (AUGFACT) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This is a constant to be added to all eigen values during eigenvalue inversion. The default value is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
0.0. 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (FILTER) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
The inverse of eigen values below this threshold are set to 0.0 rather than 1.\/value. It filters out latent
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
singularities. The default is 0.0 
) def
Write
/left leftmargin indent add indent add def
/instr (DISCRIMINATOR) def Instruction                                                                                                                                                                                                                                                                      
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If the ratio of two adjacent eigenvalues in a ranked listing exceeds this value, the inverse of the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
smaller and all subsequent eigen values is set to 0.0. The default is 100.0 
) def
Write
/left leftmargin indent add def 
/instr (SHIFT  KEY = VALUE  KEY = VALUE .  .  .  .) def Instruction                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive sets the shift factor for the specified cycle of refinement. \(The shift factor is the amount
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
by which the calculated shift is multiplied before it is applied to generate the new parameters\). For each
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
of the parameters given by the KEYS on the directive, the shift factor is changed to the value given by
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
VALUE. The = sign is not optional. 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
If more than one shift directive \( SHIFT , MAXIMUM or FORCE \) is given for the same parameter,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
only the last is obeyed. 
) def
Write
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The following KEYS are recognized : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      GENERAL   This refers to all the variable parameters) def Literal                                                                                                                                                                                                                                    
/litstring 
(      OVERALL   This refers to the overall parameters) def Literal                                                                                                                                                                                                                                         
Blank
/litstring 
(      OCC     U[ISO]      X       Y       Z) def Literal                                                                                                                                                                                                                                                   
/litstring 
(      U[11]   U[22]   U[33]   U[23]   U[13]   U[12]) def Literal                                                                                                                                                                                                                                           
/litstring 
(      SPISO   SPSIZE  LINISO  LINSIZE LINDEC  LINAZI) def Literal                                                                                                                                                                                                                                          
/litstring 
(      RINGISO RINGSIZ RINGDEC RINGAZI) def Literal                                                                                                                                                                                                                                                         
LitBlank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This is the default for GENERAL, OVERALL and SPECIAL parameters, with default shift factors 1.0. 
) def
Write
/left leftmargin indent add def 
/instr (MAXIMUM  KEY = VALUE  KEY = VALUE .  .  .  .) def Instruction                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive is similar to the directive SHIFT above, except that the maximum shift that is applied for
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
the given parameters cannot be greater than VALUE. The units of VALUE are conventional, WITH x,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
y, z measured in angstrom, and ADPs in Angstrom sq. If none of the shifts exceend VALUE, then they
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
are applied unmodified. This provides a method of automatically scaling down the applied shifts if the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
matrix inversion has become unstable. Shift limiting restraints \(LIST 16\) are a more controlled
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
alternative 
) def
Write
Blank
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
The KEYS are the same as in SHIFT above, and this is the default action for Occ, adps and positions,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
with maximal values: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OCC 1.0) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      U*  0.05 \(Angstrom sq\)) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      X's 1.0  \(Angstom\)) def Literal                                                                                                                                                                                                                                                                    
Blank
LitBlank
/left leftmargin indent add def 
/instr (FORCE  KEY = VALUE  KEY = VALUE .  .  .  .) def Instruction                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This is similar to MAXIMUM above, except that the maximum shift is scaled to VALUE even if it is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
less than VALUE. 
) def
Write
Blank
Blank
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The KEYS are the same as in SHIFT above. There is no default shift. 
) def
Write
/left leftmargin indent add def 
/instr (VECTOR MONITOR MAP Fo PUNCH MATRIX) def Instruction                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This is an obsolete feature, and will be removed at a later date. 
) def
Write
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
This directive indicates that structure factors are to be calculated and then the shift vector stored in
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   21 def
/textstring (
LIST 24 \(see LIST24 \) is to be applied. This is used to apply a shift vector calculated from one of the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
eigenvalues of the normal matrix. Although no new matrix is produced by this directive, sufficient
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
space must be allocated for the normal matrix, since it is loaded when the new coordinates are
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
calculated. 
) def
Write
/left leftmargin indent add indent add def
/instr (MONITOR) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAP) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (Fo) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the CALCULATE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (PUNCH) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the REFINE directive above. 
) def
Write
/left leftmargin indent add indent add def
/instr (MATRIX) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has the same options as for the REFINE directive above. 
) def
Write
/secttext (Processing of the refinement directives) def Section                                                                                                                                                                                                                                             
/left  118 def /ipflag    1 def /numspace   11 def
/textstring (
The program expands the CALCULATE, SCALE or REFINE directives into sub-directives. These
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
sub-directives MUST NOT be given by a user: 
) def
WriteCalc
/textstring (sub-directives ) def WritePart
/textstring (MUST ) def
WriteBold
/textstring (NOT ) def
WriteBold
/textstring (be given by a user: ) def WritePart
/ypos ypos linegap sub def
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( 1.   \\REFINE) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(                  Compute structure factors and) def Literal                                                                                                                                                                                                                                               
/litstring 
(                  derivatives. No refinement is) def Literal                                                                                                                                                                                                                                               
/litstring 
(                  actually done.) def Literal                                                                                                                                                                                                                                                              
/litstring 
( 2.   \\SCALE) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(                  Calculate structure factors and) def Literal                                                                                                                                                                                                                                             
/litstring 
(                  refine the overall scale factor.) def Literal                                                                                                                                                                                                                                            
/litstring 
( 3.   \\CALCULATE) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(                  Calculate structure factors.) def Literal                                                                                                                                                                                                                                                
/litstring 
( 4.   \\RESTRAIN) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(                  Apply the restraints stored in) def Literal                                                                                                                                                                                                                                              
/litstring 
(                  the current lists 16 and 17.) def Literal                                                                                                                                                                                                                                                
/litstring 
( 5.   \\INVERT) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(                  Invert the current normal matrix) def Literal                                                                                                                                                                                                                                            
/litstring 
(                  and store a shift list as list 24.) def Literal                                                                                                                                                                                                                                          
/litstring 
( 6.   \\SOLVE) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(                  Take the current list 5 \(the model parameters\)) def Literal                                                                                                                                                                                                                            
/litstring 
(                  and apply the shifts given in the current) def Literal                                                                                                                                                                                                                                   
/litstring 
(                  list 24.) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( 7.   \\NEWSHIFTS) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(                  Allocate space for list 24.) def Literal                                                                                                                                                                                                                                                 
/litstring 
( 8.   \\CYCLENDS) def Literal                                                                                                                                                                                                                                                                              
LitBlank
/left leftmargin indent add indent add def
/instr (e.s.d.s) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
Most publication listings require e.s.ds. These are computed from the normal matrix. If LIST 5 \(the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
model parameters\) has been modified in ANY WAY \(including simply renaming or ordering atoms\)
) def
/last 0 def 
WriteCalc
/textstring (model parameters\) has been modified in ) def WritePart
/textstring (ANY ) def
WriteBold
/textstring (WAY ) def
WriteBold
/textstring (\(including simply renaming or ordering atoms\)) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
since the last refinement cycle, the matrix will be invalid. 
) def
Write
/left  148 def /ipflag    1 def /numspace   16 def
/textstring (
CRYSTALS will warn you that LIST 11, the normal matrix, cannot be loaded. To create a valid
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
matrix without changing the parameter values, compute a refinement cycle but set all the shifts to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
zero. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\SFLS) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      REFINE) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      SHIFT GENERAL = 0.0) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/secttext (Analysis of residuals -  \\ANALYSE) def Section                                                                                                                                                                                                                                                  
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ANALYSE INPUT=) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( FO INTERVAL= TYPE= SCALE=) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( THETA INTERVAL=) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( LIST LEVEL=) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( LAYERSCALE AXIS= APPLY= ANALYSE=) def Literal                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ANALYSE) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( LIST HIGH) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
ANALYSE provides a comparison between Fo and Fc as a function of the indices, various parity groups,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
ranges of F and ranges of sin\(theta\)\/lambda. For a well refined structure with suitable weights, <Fo>\/<Fc>
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
should be about unity for all ranges, and <wdeltasq> should also be about unity for all ranges. A serious
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
imbalance in Fo\/Fc may mean the structure is incomplete, or unsuitable data reduction \(section
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
DATAREDUC \). A systemstic trend in <wdeltasw> may mean unsuitable weights are being used. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The monitor listing is always just as a funtion of F. The output to the listing file is user controlled. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
This routine will also compute approximate layer scale factors for data which has been collected by
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
layers. These can be refined in the least squares to complete a refinement. 
) def
Write
/left leftmargin def 
/instr (\\ANALYSE INPUT=) def Instruction                                                                                                                                                                                                                                                                   
/left leftmargin indent add indent add def
/instr (INPUT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Indicates which reflection list to use. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      6      Default) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      7      Alternative reflection list) def Literal                                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add def 
/instr (FO INTERVAL= TYPE= SCALE=) def Instruction                                                                                                                                                                                                                                                          
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Controls the analysis as a function of F. 
) def
Write
/left leftmargin indent add indent add def
/instr (INTERVAL=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
The interval between successive ranges of F. Its value should be determined in combination with the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter TYPE. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls how F is sampled. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      sqrt\(Fc\)  -  Default value) def Literal                                                                                                                                                                                                                                                            
/litstring 
(      Fc) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      sqrt\(Fo\)) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      Fo) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
Newpage
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If TYPE is sqrt\(Fc\), \(its default value\), the interval between successive F ranges is based on 'the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
square root of Fc' Values of Fc in the interval '0 to INTERVAL**2' will be analysed in the first
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
range, Fc values that lie in the range INTERVAL**2 to 4*INTERVAL**2 in the second and so on\).
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
INTERVAL is thus the increment in the square root of Fc between successive ranges and, in this
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
case, has a default value of 1. If TYPE is Fc , the interval between successive Fc ranges is based on
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the value of Fc. In this case INTERVAL is the increment in Fc and has a default value of 2.5. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALE) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls the scale of the listing 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Fo  -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      Fc) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
If SCALE is Fo, the reflection information is printed on the scale of Fo. \(This is useful as the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
weighting parameters in LIST 4 \(section LIST04 \) must be provided on the scale of Fo\). If SCALE is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Fc, the reflection information is printed on the scale of Fc. 
) def
Write
/left leftmargin indent add def 
/instr (THETA INTERVAL=) def Instruction                                                                                                                                                                                                                                                                    
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive determines the interval between successive sin\(theta\)\/lambda squared ranges. 
) def
Write
/left leftmargin indent add indent add def
/instr (INTERVAL=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default is 0.04. 
) def
Write
/left leftmargin indent add def 
/instr (LAYERSCALE AXIS= APPLY= ANALYSE=) def Instruction                                                                                                                                                                                                                                                   
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive allows the results of layer scaling to be investigated. 
) def
Write
/left leftmargin indent add indent add def
/instr (AXIS=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Selects the axis for layer scaling 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NONE  -  Default value) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      H) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      K) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      L) def Literal                                                                                                                                                                                                                                                                                       
LitBlank
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
The default value of NONE indicates that no layer scaling is to be done. H, K and L indicate the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
axes up which layer scaling is to be done. 
) def
Write
/left leftmargin indent add indent add def
/instr (APPLY=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
When layer scaling has been completed and the results printed, the calculated scale factors will be
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
applied to the stored Fo data if APPLY is YES . If APPLY is NO , its default setting, then the new
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
scales will not be applied to the data. If AXIS is NONE , then APPLY is ignored. 
) def
Write
/left leftmargin indent add indent add def
/instr (ANALYSE) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  Default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If ANALYSE is YES, a second agreement analysis will be performed after the layer scaling so that
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
the results of the new scales can be seen. \(This is true whether the new scales are applied or not, i.e.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
independent of the value of APPLY \). In this way the effects of layer scaling can be seen without
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
damaging the data. If ANALYSE is NO , the second agreement analysis is suppressed. 
) def
Write
/left leftmargin indent add def 
/instr (LIST LEVEL=) def Instruction                                                                                                                                                                                                                                                                        
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive determines the amount of output produced. 
) def
Write
/left leftmargin indent add indent add def
/instr (LEVEL=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      LOW   -  Default value) def Literal                                                                                                                                                                                                                                                                  
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If LEVEL is LOW the analysis is against Fo and sin theta only. 
) def
Write
Blank
/secttext (Least squares absorption correction  - \\DIFABS) def Section                                                                                                                                                                                                                                     
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\DIFABS  ACTION= MODE= INPUT=) def Literal                                                                                                                                                                                                                                                               
/litstring 
( CORRECTION THETA=) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( DIFFRACTION GEOMETRY= MODE=) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\DIFABS ACTION=NEW MODE=FC) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
LitBlank
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
Although this is a least squares fitting technique for an arbitary model, it does not form part of the main
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
refinement module. The DIFABS parameters cannot be refined simultaneously with the atomic parameters. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
A low order term Fourier series is used to model an absorption surface for differences between the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
observed structure factors and those obtained from a structure factor calculation after isotropic least squares
) def
/last 0 def 
Write
Newpage
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
refinement. Spherical polar angles are used to define the incident and diffracted beam path directions so that
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
each reflection is characterised by four angles - viz. PHI\(p\), MU\(p\), PHI\(s\), and MU\(s\). A theta-dependent
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
correction is evaluated to allow for diffracted beams with different path lengths occurring at the same polar
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
angles. A low order term Fourier series is used in Bragg angle THETA, but is highly correlated with the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
temperature factors, and not normally recommended. This version is general for any 4-circle diffractometer
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
data collection geometry. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The quantity minimised is the sum of the squares of the residuals, Rj, where 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(               Rj = \( \/\/Fc\/-\/Fo\/\/\)wj) def Literal                                                                                                                                                                                                                                                  
LitBlank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
The weighting function, wj, used is derived from the overall scale factor, the counting statistics standard
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
deviation, and the Lorentz-polarisation factor. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
In the original implementation, the correction factor was applied to Fo. This lead to criticism in the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
literature that the observations were being tampered with. In the current implementaion in CRYSTALS, the
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
correction can be applied to Fo or Fc. 
) def
Write
Blank
Blank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
References: N. Walker and D. Stuart, 1983, Acta Cryst., A39, 158 - 166. The code is incorporated with
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the permission of Dr N. Walker 
) def
Write
Blank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Implementation# 
) def
Write
/left  118 def /ipflag    1 def /numspace   11 def
/textstring (
The correction is evaluated using observed structure factors, \/Fo\/, corrected for Lorentz-polarisation
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   13 def
/textstring (
effects and any decay in intensity standards during data collection, with systematically absent reflections
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   12 def
/textstring (
removed. Since equivalent reflections will be measured at different diffractometer settings, the correction
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
should be calculated and applied to the data set without any transformation of the reflection indices, and
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   11 def
/textstring (
without symmetry- equivalent or Friedel-pair reflections being averaged. Calculated amplitudes must be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
obtained from the isotropic refinement of an as-complete a model as practical from the unique \(merged\) data
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
set. Such a LIST 6 \(reflections, section LIST06 \) will probably be unsuitable for Fourier or difference maps
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
\(since these expect a unique segment of data only\) unless you then remerge the data. The best maps must be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
computed with the correction applied to Fo before the data is merged. In addition, the most reliable merging
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
R factor \(Rint\) must be computed from corrected Fos. 
) def
Write
/left leftmargin indent add def 
/instr (WARNING ) def Instruction                                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
To use DIFABS most successfully, you should probably do data-reduction again from scratch,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
inhibiting the merging of all but exactly equivalent reflections. 
) def
Write
/left  138 def /ipflag    1 def /numspace   15 def
/textstring (
In favourable cases, when the observed data is the unique segment plus a small redundant volume
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
\(e.g. often the -1 layers at Oxford\), you may get away with applying the correction to normally
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
\(merged\) processed data during structure development. 
) def
Write
/left  138 def /ipflag    1 def /numspace   15 def
/textstring (
Once the structure is fully developed \(ie all atoms found and partially refined with an extinction
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
correction if necessary\), data reduction should be repeated inhibiting all index transformations. New
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
values of Fc must be computed from isotropic atoms \(Use UEQUIV in \\EDIT to recover equivalent
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
isotropic temperature factors, and then do a few cylces of isotropic refinement\) and the DIFABS
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   11 def
/textstring (
correction applied to Fc. Anisotropic refinement can be computed to completion \(including
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
optimisation of weights\) using unmerged data. If you wish to see an absorption correctd Rint and
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
compute a final difference map, the data must be re-merged. Use DIFABS with MODE = TRANSFER
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
to move the correction onto Fo before transforming indices, sorting and merging the data. 
) def
Write
/left leftmargin def 
/instr (\\DIFABS  ACTION= MODE= INPUT=) def Instruction                                                                                                                                                                                                                                                     
/left leftmargin indent add indent add def
/instr (INPUT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Indicates which reflection list to use. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      6      Default) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      7      Alternative reflection list) def Literal                                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add indent add def
/instr (ACTION=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls the action on LIST 6 \(reflections, section LIST06 \), and has three values: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      TEST   -   Computes the correction, but does not apply it) def Literal                                                                                                                                                                                                                               
/litstring 
(      UPDATE -   Tries to update LIST 6) def Literal                                                                                                                                                                                                                                                       
/litstring 
(      NEW    -   DEFAULT. Creates new LIST 6) def Literal                                                                                                                                                                                                                                                  
LitBlank
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
If UPDATE is specified, the stored values of Fo are over written. If NEW is specified, a new
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
LIST 6 is written to disc. The disc will be extended sufficiently to accommodate the new list. 
) def
Write
/left leftmargin indent add indent add def
/instr (MODE=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls the mode of application of the correction, and has three values: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      FO        - Applies the correction to Fo) def Literal                                                                                                                                                                                                                                                
/litstring 
(      FC        - Applies the correction to Fc) def Literal                                                                                                                                                                                                                                                
/litstring 
(      TRANSFER  - Applies the inverse of the Fc correction to Fo) def Literal                                                                                                                                                                                                                              
LitBlank
/left leftmargin indent add def 
/instr (CORRECTION THETA=) def Instruction                                                                                                                                                                                                                                                                  
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Controls whether a theta-dependent correction is to be applied. - NOT RECOMMENDED. 
) def
Write
/left leftmargin indent add indent add def
/instr (THETA=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO - Default value) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add def 
/instr (DIFFRACTION GEOMETRY= MODE=) def Instruction                                                                                                                                                                                                                                                        
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Controls the geometry used for data collection to be input. 
) def
Write
/left leftmargin indent add indent add def
/instr (GEOMETRY=) def Instruction                                                                                                                                                                                                                                                                          
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The type of diffractometer used is specified: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      CAD4          - Default value) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      SYNTEX-P1) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      SYNTEX-P21) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      PICKER        - Picker FACS-I) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      PW1100        - Philips PW1100) def Literal                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin indent add indent add def
/instr (MODE=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The mode of data collection is given: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      BISECTING      - Default value) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      PARALLEL) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      GENERAL) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( This example assumes that there are no equivalent reflections.) def Literal                                                                                                                                                                                                                               
/litstring 
(      \\DIFABS) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      DIFFRACTION GEOMETRY=SYNTEX-P1) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( This example demonstrates a total re-processing of the data, including) def Literal                                                                                                                                                                                                                       
/litstring 
( converting atoms to isotropic if they have previously been refined) def Literal                                                                                                                                                                                                                           
/litstring 
( anisotropically. Note that a theta dependent correction from) def Literal                                                                                                                                                                                                                                 
/litstring 
( International Tables is applied during data reduction) def Literal                                                                                                                                                                                                                                        
/litstring 
( \(see also section   DATAREDUC \). The theta) def Literal                                                                                                                                                                                                                                                 
/litstring 
( dependant correction in DIFABS is ill-conditioned and unstable.) def Literal                                                                                                                                                                                                                              
Blank
/litstring 
(      \\ save the contents of the old dsc file) def Literal                                                                                                                                                                                                                                                
/litstring 
(      \\PURGE NEW) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\ Connect the reflection file to HKLI) def Literal                                                                                                                                                                                                                                                  
/litstring 
(      \\OPEN HKLI ZNCPD.HKL) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      \\ Use an \\HKLI command to apply the tabulated theta correction) def Literal                                                                                                                                                                                                                        
/litstring 
(      \\HKLI) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      READ NCOEF=12 FORMAT=FIXED UNIT=HKLI F'S=FSQ CHECK=NO) def Literal                                                                                                                                                                                                                                   
/litstring 
(      INPUT H K L \/FO\/ SIGMA\(\/FO\/\) JCODE SERIAL BATCH THETA PHI OMEGA KAPPA) def Literal                                                                                                                                                                                                             
/litstring 
(      FORMAT \(5X,3F4.0,F9.0,F7.0,F4.0,F9.0,F4.0,4F7.2\)) def Literal                                                                                                                                                                                                                                      
/litstring 
(      STORE NCOEF=6) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      OUTPUT INDICES \/FO\/ BATCH RATIO\/JCODE SIGMA\(\/FO\/\) CORRECTIONS SERIAL) def Literal                                                                                                                                                                                                             
/litstring 
(      ABSORPTION PHI=NO  THETA=YES PRINT=NONE) def Literal                                                                                                                                                                                                                                                 
/litstring 
(      THETA 16) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      THETAVALUES) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(      CONT 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75) def Literal                                                                                                                                                                                                                                     
/litstring 
(      THETACURVE) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      CONT 3.61  3.60  3.58  3.54  3.50  3.44  3.37  3.30) def Literal                                                                                                                                                                                                                                     
/litstring 
(      CONT 3.23  3.16  3.09  3.02  2.96  2.91  2.86  2.82) def Literal                                                                                                                                                                                                                                     
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\LP) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\SYSTEMATIC) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      \\ preserve the original indices) def Literal                                                                                                                                                                                                                                                        
/litstring 
(      STORE NEWINDICES=NO) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\SORT) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\ copy from workfile to disk) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      \\LIST 6) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      READ TYPE=COPY) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\ unit weights) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(      \\LIST 4) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\WEIGHT) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\EDIT) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      UEQUIV FIRST UNTIL LAST) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\LIST 28) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      MINIMA RATIO =  3.0) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
Newpage
/litstring 
(      \\SFLS) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      SCALE) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\ assume there are no H atoms) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      \\LIST 12) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      FULL FIRST\(U[ISO]\) UNTIL LAST) def Literal                                                                                                                                                                                                                                                         
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\SFLS) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      REFINE) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      REFINE) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      CALC) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\LIST 28) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      \\ remove all restrictions to get Fcs.) def Literal                                                                                                                                                                                                                                                  
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\DIFABS UPDATE FC) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\ Complete anisotropic refinement, produce publication tables etc) def Literal                                                                                                                                                                                                                      
/litstring 
(      \\LIST 12) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      FULL X'S U'S) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\LIST 28) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      MINIMA RATIO=3) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\SFLS) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      REFINE) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      .....) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      \\CIF) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\ reprocess data so that it can be merged for the final) def Literal                                                                                                                                                                                                                                
/litstring 
(      \\ difference map) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(      \\DIFABS UPDATE TRANSFER) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\SYST) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\MERGE) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\FOURIER) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      \\ etc etc etc ---) def Literal                                                                                                                                                                                                                                                                      
LitBlank
/secttext (Internal workings) def Section                                                                                                                                                                                                                                                                   
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
SOme understanding of the internal data management in CRYSTALS may help the user to sort out
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
unexplained failures. 
) def
Write
Blank
/left leftmargin def 
/instr (Refinement parameter map  -  LIST 22) def Instruction                                                                                                                                                                                                                                               
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
This list contains the refinement directives in internal format and it can only be generated by the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
computer. After the refinement directives have been read in, they are stored on the disc in binary format
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
ready for processing. Before the structure factor least squares routines can use the information in LIST 12,
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
it is necessary to convert them to a LIST 22. 
) def
Write
/left  128 def /ipflag    1 def /numspace   23 def
/textstring (
If the conversion fails, or the input of LIST 5 or LIST 12 is in error, LIST 22 will be marked as an error
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
list, and any job that attempts to reference LIST 22 will terminate in error. 
) def
Write
/left  128 def /ipflag    1 def /numspace   12 def
/textstring (
For complex LIST 12s, i.e. those containing EQUIVALENCE, LINK, RIDE, GROUP, WEIGHT or
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
COMBINE, the user is strongly advised to issue \\LIST 22 and then \\PRINT 22, and look at the LIST 22
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
generated. The ouput, which is set out like a LIST 5, shows the relationship between the physical and the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
least squares parameters. 
) def
Write
Blank
/left leftmargin def 
/instr (The least squares matrix  -  LIST 11) def Instruction                                                                                                                                                                                                                                               
/left  128 def /ipflag    1 def /numspace   19 def
/textstring (
The matrix that is produced by the structure factor least squares process is stored on the disc as a LIST
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
11. This list may be massive, so it is wise to purge the disk regularly with large structures. To recover the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
maximum space, delete the LIST 11 before purging. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\DISK) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DELETE 11) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\PURGE) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin def 
/instr (Printing the contents of LIST 11) def Instruction                                                                                                                                                                                                                                                   
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
LIST 11 is printed by : 
) def
Write
/left leftmargin indent add def 
/instr (\\PRINT 11) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin indent add def 
/instr (\\PRINT 11 A) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Prints those correlation coefficients greater than 0.3. 
) def
Write
/left leftmargin indent add def 
/instr (\\PRINT 11 B) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Prints the correlation matrix. 
) def
Write
/left leftmargin indent add def 
/instr (\\PRINT 11 C) def Instruction                                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Prints the inverse matrix. 
) def
Write
/left leftmargin def 
Newpage
/instr (Least squares shift list  -  LIST 24) def Instruction                                                                                                                                                                                                                                               
/left  128 def /ipflag    1 def /numspace   17 def
/textstring (
When the normal matrix produced by the least squares process has been inverted, a set of shifts is
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
calculated, suitably scaled if necessary, to apply to the atomic parameters. These shifts are output to the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
disc as a LIST 24, and then applied by the routines that compute the new parameters. List 24 can only be
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
generated in the machine. 
) def
Write
/left leftmargin def 
/instr (Restraints in internal format  -  LIST 26) def Instruction                                                                                                                                                                                                                                          
/left  128 def /ipflag    1 def /numspace   15 def
/textstring (
This list contains the restraints in internal format. Before the structure factor least squares routines can
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
use the information in LIST 16 and 17, it is necessary to convert it to an internal format held in LIST 26. 
) def
Write
/left  128 def /ipflag    1 def /numspace   21 def
/textstring (
If this operation fails, or the input of LIST 12 or LIST 16 goes wrong, LIST 26 will be marked as an
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
error list, and any job that attempts to reference LIST 26 will terminate in error. 
) def
Write
Blank
/title (               FOURIER ROUTINES) def                                                                                                                                                                                                                                                                
/banner (FOURIER ROUTINES) def                                                                                                                                                                                                                                                                              
Newpage
/chaptext (Fourier Routines) def                                                                                                                                                                                                                                                                            
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
Blank
/secttext (Scope of the Fourier section of the user guide) def Section                                                                                                                                                                                                                                      
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
In this section of the user guide, the lists and commands relating to the Fourier routines are described. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Input of the Fourier section limits                  -  \\LIST 14) def Literal                                                                                                                                                                                                                       
/litstring 
(      Compute Fourier linits from the symmetry operators   -  \\FLIMIT) def Literal                                                                                                                                                                                                                        
/litstring 
(      Fourier calculations                                 -  \\FOURIER) def Literal                                                                                                                                                                                                                       
/litstring 
(      Processing of the peaks list                         -   LIST 10) def Literal                                                                                                                                                                                                                        
/litstring 
(      Elimination of duplicated entries in LISTS 5 and 10  -  \\PEAKS) def Literal                                                                                                                                                                                                                         
/litstring 
(      Slant fourier calculations                           -  \\SLANT) def Literal                                                                                                                                                                                                                         
LitBlank
Blank
/secttext (Input of the Fourier section limits - LIST 14) def Section                                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 14) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( X-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def Literal                                                                                                                                                                                                                                                     
/litstring 
( Y-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def Literal                                                                                                                                                                                                                                                     
/litstring 
( Z-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def Literal                                                                                                                                                                                                                                                     
/litstring 
( X-PAT MINIMUM= STEP= MAXIMUM= DIVISION=) def Literal                                                                                                                                                                                                                                                      
/litstring 
( Y-PAT MINIMUM= STEP= MAXIMUM= DIVISION=) def Literal                                                                                                                                                                                                                                                      
/litstring 
( Z-PAT MINIMUM= STEP= MAXIMUM= DIVISION=) def Literal                                                                                                                                                                                                                                                      
/litstring 
( ORIENTATION DOWN= ACROSS= THROUGH=) def Literal                                                                                                                                                                                                                                                           
/litstring 
( SCALEFACTOR VALUE=) def Literal                                                                                                                                                                                                                                                                           
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 14) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( X-AXIS 0.0 0.0 0.5 0.0) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( Y-AXIS 0.0 0.0 0.9 0.0) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( Z-AXIS -2 2 32 60) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( ORIENTATION Z X Y) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( SCALE VALUE = 10) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   20 def
/textstring (
The Fourier routines will calculate a map with section edges parallel to any two of the cell axes \(a, b or
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
c\). The starting and stopping points must be given for each direction \(in crystal fractions\). The user should
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
choose the asymmetric unit to have one range as small as possible, and the other two approximately equal.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
Orientate the computation so that the sections are perpendicular to the short range direction. If the command
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
\\SPACEGROUP has been used to input the symmetry information, a LIST 14 will have been generated. This
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
will be a valid choice, but may not be optimal. 
) def
Write
Blank
/left leftmargin def 
/instr (\\LIST 14) def Instruction                                                                                                                                                                                                                                                                          
Blank
/left leftmargin indent add def 
/instr (X-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def Instruction                                                                                                                                                                                                                                           
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive specifies how the x-axis is to be divided. 
) def
Write
/left leftmargin indent add indent add def
/instr (MINIMUM=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This parameter gives the initial value along the x-direction. If it is omitted, a default value of 0.0 is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
assumed for MINIMUM. 
) def
Write
/left leftmargin indent add indent add def
/instr (STEP=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter, which has a default value of 0.3, gives the step along the x-direction. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAXIMUM=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter, which has a default value of 1.0, gives the final value along the x-direction. 
) def
Write
/left leftmargin indent add indent add def
/instr (DIVISION=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
If DIVISION is greater than zero, it defines the number of divisions into which the x-axis is to be
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
divided. In this case, the three remaining parameters are expressed in terms of DIVISION and give
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
the first point \( MIN \), the increment between successive points \( STEP \) and the final point to be
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
calculated \( MAX \). If the divisions of the unit cell along the x-axis are given in this way, the user
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
must ensure that sufficient map is calculated for the map scan, by adding one extra point beyond the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
asymmetric unit at both ends along the x-axis. If this is not done, peaks at the edge of the asymmetric
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
unit may be missed by the peak search. 
) def
Write
/left  148 def /ipflag    1 def /numspace   16 def
/textstring (
If DIVISION is equal to zero, which is its default value, the Fourier routines will calculate the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
number of divisions required along the x-axis. In this case, STEP is the interval between successive
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
points along the axis in angstrom. If this parameter is less than 0.05, a default value of 0.3 angstrom
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
is used. MINIMUM And MAXIMUM define the first and last points to be calculated and are given in
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
fractional coordinates. When the values of MIN and MAX are converted into unit cell divisions, an
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
extra point is added at each end to ensure that the peak search functions correctly. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Y-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def Instruction                                                                                                                                                                                                                                           
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Similar to X-AXIS above. 
) def
Write
Blank
/left leftmargin indent add def 
Newpage
/instr (Z-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def Instruction                                                                                                                                                                                                                                           
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Similar to X-AXIS above. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (X-PAT MINIMUM= STEP= MAXIMUM= DIVISION=) def Instruction                                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is similar to the X-AXIS directive, but refers to the Patterson asymmetric unit. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Y-PAT MINIMUM= STEP MAXIMUM= DIVISION=) def Instruction                                                                                                                                                                                                                                             
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Similar to X-PAT above. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (Z-PAT MINIMUM= STEP= MAXIMUM= DIVISION=) def Instruction                                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Similar to X-PAT above. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ORIENTATION DOWN= ACROSS= THROUGH=) def Instruction                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Controls the orientation parameters for the map calculation and printing. 
) def
Write
/left leftmargin indent add indent add def
/instr (DOWN=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      X  -  Default value) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      Y) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      Z) def Literal                                                                                                                                                                                                                                                                                       
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default value X indicates that the x coordinate goes down the printed page. 
) def
Write
/left leftmargin indent add indent add def
/instr (ACROSS=) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
As DOWN above, but with the default value Y indicating that the y coordinate goes across the page. 
) def
Write
/left leftmargin indent add indent add def
/instr (THROUGH=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
As DOWN above, but with the default value Z indicating that the z coordinate changes from section
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
to section. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SCALEFACTOR VALUE=) def Instruction                                                                                                                                                                                                                                                                 
/left leftmargin indent add indent add def
/instr (VALUE=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter specifies the value by which the electron density, on the scale of \/Fc\/, is multiplied
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
before it is printed. If this parameter is omitted, a default value of 10 is assumed. 
) def
Write
Blank
/secttext (Printing the contents of LIST 14) def Section                                                                                                                                                                                                                                                    
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The contents of LIST 14 can be listed to the line printer by issuing the command : 
) def
Write
Blank
/left leftmargin def 
/instr (\\PRINT 14) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
There is no command available for punching LIST 14. 
) def
Write
Blank
Blank
/secttext (Compute Fourier limits from the symmetry) def Section                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\FLIMIT LAUE=) def Literal                                                                                                                                                                                                                                                                               
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\FLIMIT) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
This command uses the same algorithms as \\SPACEGROUP to create a LIST 14. This will be a valid
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
choice, but may not be optimal. The parameter LAUE takes a value from this table: 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
Blank
/litstring 
(  Laue Group     Number      Nx  Ny  Nz         Comment) def Literal                                                                                                                                                                                                                                       
/litstring 
(     -1                   Default value     Compute from operators) def Literal                                                                                                                                                                                                                            
/litstring 
(      1             1         4   4   4     Triclinic) def Literal                                                                                                                                                                                                                                         
/litstring 
(     2\/m            2         8   8   8     Monoclinic) def Literal                                                                                                                                                                                                                                       
/litstring 
(     mmm            3         8   8   8     Orthorhombic  \(Fddd 16\)) def Literal                                                                                                                                                                                                                         
/litstring 
(     4\/m            4         8   8  16     Tetragonal) def Literal                                                                                                                                                                                                                                       
/litstring 
(     4\/mmm          5         8   8  16     Tetragonal) def Literal                                                                                                                                                                                                                                       
/litstring 
(     -3R            6         8   8   8     Rhombohedral) def Literal                                                                                                                                                                                                                                      
/litstring 
(     -3mR           7         8   8   8     Rhombohedral) def Literal                                                                                                                                                                                                                                      
/litstring 
(     -3             8        12  12  24     Hexagonal) def Literal                                                                                                                                                                                                                                         
/litstring 
(     -3m1           9        12  12  24     Hexagonal) def Literal                                                                                                                                                                                                                                         
/litstring 
(     -31m          10        12  12  24     Hexagonal) def Literal                                                                                                                                                                                                                                         
/litstring 
(     6\/m           11        12  12  24     Hexagonal) def Literal                                                                                                                                                                                                                                        
/litstring 
(     6\/mmm         12        12  12  24     Hexagonal) def Literal                                                                                                                                                                                                                                        
/litstring 
(     m3            13        16  16  16     Cubic) def Literal                                                                                                                                                                                                                                             
/litstring 
(     m3m           14        16  16  16     Cubic) def Literal                                                                                                                                                                                                                                             
/litstring 
(  The values for groups 8 and 9 are OK for the order X,Y,Z, if the 2) def Literal                                                                                                                                                                                                                          
/litstring 
(  other orders are searched NX and NY should be 24) def Literal                                                                                                                                                                                                                                            
LitBlank
Blank
/secttext (Fourier calculations  -  \\FOURIER) def Section                                                                                                                                                                                                                                                  
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\FOURIER INPUT=) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( MAP TYPE= NE= PRINT= SCAN= SCALE= ORIGIN= NMAP= MONITOR=) def Literal                                                                                                                                                                                                                                     
/litstring 
( REFLECTIONS WEIGHT= REJECT= F000= CALC=) def Literal                                                                                                                                                                                                                                                      
/litstring 
( LAYOUT NLINE= NCHARACTER= MARGIN= NSPACE= MIN-RHO= MAX-RHO=) def Literal                                                                                                                                                                                                                                  
/litstring 
( PEAKS HEIGHT= NPEAK= REJECT=) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( TAPES INPUT= OUTPUT=) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
Blank
/litstring 
( \\FOURIER) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( MAP TYPE=DIFF) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( PEAK HEIGHT = 3) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
Before a Fourier is computed, a LIST 14 must have been created or input. The routine will compute a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
map in any space group, the relevant symmetry being found in LIST 2 \(space group information, see section
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST02 \). 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
In the ouput listing, new peaks are labelled, with the following meanings 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      GOOD PEAK - The peak centre was determined by Least-Squares.) def Literal                                                                                                                                                                                                                            
/litstring 
(      POOR PEAK - The peak centre was determined by interpolation.) def Literal                                                                                                                                                                                                                            
/litstring 
(      DUBIUOS PEAK - The peak centre is only a local maximum.) def Literal                                                                                                                                                                                                                                 
/litstring 
(      MALFORMED PEAK - The peak centre is extrapolated to be out side) def Literal                                                                                                                                                                                                                         
/litstring 
(                 of the asymmetric unit - usually due to very poor phasing.) def Literal                                                                                                                                                                                                                   
LitBlank
Blank
/left leftmargin def 
/instr (\\FOURIER INPUT=) def Instruction                                                                                                                                                                                                                                                                   
/left leftmargin indent add indent add def
/instr (INPUT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Indicates which reflection list to use. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      6      Default) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      7      Alternative reflection list) def Literal                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (MAP TYPE= NE= PRINT= SCAN= SCALE= ORIGIN= NMAP= MONITOR=) def Instruction                                                                                                                                                                                                                           
Blank
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      F-OBS     -  Default value) def Literal                                                                                                                                                                                                                                                              
/litstring 
(      F-CALC) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DIFFERENCE) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      2F0-FC) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      OPTIMAL) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      FO-PATTERSON) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      FC-PATTERSON) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      EXTERNAL) def Literal                                                                                                                                                                                                                                                                                
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
The map type 'OPTIMAL' implements a suggestion of Peter Main. It is a form of weighted Fo map,
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
with coefficients w*Fo if the reflection is in a centro-symmtric class, otherwise \(2*w*Fo\)-Fc, where
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
w is the Simm weight. NOTE this is not the same as w\(2*Fo-Fc\), a Sim weighted 2Fo-Fc map. It has
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
the property that known and unknown atom peak heights are approximately the same, and should be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
usefull for Fourier refinement. 
) def
Write
/left leftmargin indent add indent add def
/instr (NE=) def Instruction                                                                                                                                                                                                                                                                                
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter indicates which solution should be used to compute the externally phased map, and
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
has a default value of 1. NE is only used in conjunction with TYPE = EXTERNAL. 
) def
Write
/left leftmargin indent add indent add def
/instr (PRINT=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls the printing pf the map. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin indent add indent add def
/instr (SCAN=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls automatic scanningof the map for peaks. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      YES  -  Default value) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/left leftmargin indent add indent add def
/instr (SCALE=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Controls the scaling of the electron density in the map. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(      AUTOMATIC  -  Default value) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If SCALE is YES, the program computes a scale factor rather than take one from LIST 14 \(Fourier
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
control - section LIST14 \). The scale factor is computed by summing the modulus of all the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
contributors to the map, and dividing this total into ORIGIN \(see the next parameter\). For a
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
Patterson, therefore, the origin is scaled to be ORIGIN, while for other maps a scale factor is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
computed which guarantees that every number is less than ORIGIN. 
) def
Write
/left  148 def /ipflag    1 def /numspace   19 def
/textstring (
If SCALE is NO, the scale factor is taken from LIST 14 for all types of Fourier maps. If SCALE
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
is AUTOMATIC, there is automatic scaling for an external or Patterson map, while other maps take
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
their scale factors from LIST 14. 
) def
Write
/left leftmargin indent add indent add def
/instr (ORIGIN=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
The default value for this parameter is 999, and is used when the program calculates a scale factor
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\(see SCALE above\). 
) def
Write
/left leftmargin indent add indent add def
/instr (NMAP) def Instruction                                                                                                                                                                                                                                                                               
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
Controls negation of the density values, with default NO. Use YES, in which case the density values
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
are negated, when looking for minima. This feature permits location of hydrogen in Neutron maps,
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
and the location of minima \(which become maxima\) generally. Set the Peak Height positive even
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
when searching for minina, since at the time of the search the minima are inverted. The out put
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
density values have the correct sign. Use \\COLLECT 10 5 rather than \\PEAKS on negated maps,
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
since PEAKS cannot handle minima. 
) def
Write
/left leftmargin indent add indent add def
/instr (MONITOR=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LOW) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      MEDIUM  -  Default value) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If MONITOR is MEDIUM the, the peak coordinates are printed as they are found. If HIGH, density
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
at known sites is also printed. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (REFLECTIONS WEIGHT= REJECT= F000= CALC=) def Instruction                                                                                                                                                                                                                                            
Blank
/left leftmargin indent add indent add def
/instr (WEIGHT=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SIM) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      NO     -  Default value) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(      LIST-6) def Literal                                                                                                                                                                                                                                                                                  
LitBlank
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
If WEIGHT is NO , its default value, then the map is not weighted. 
) def
Write
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
If WEIGHT is set equal to SIM , then SIM weights are computed. This option requires both LIST
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
29 \(atomic properties, section LIST29 and LIST 5. The occupation factors in LIST 5 are used to
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
determine how many atoms of each type are present, and LIST 29 indicates how many should be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
present. See the notes under 'TYPE', above. 
) def
Write
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
If WEIGHT is LIST-6 , then the map is weighted with the weight stored in LIST 6 \(section
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
LIST06 \). 
) def
Write
/left leftmargin indent add indent add def
/instr (REJECT=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NONE) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      SMALL  -  Default value) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(      QUARTER) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(      HALF) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
If REJECT is NONE, all the reflections in LIST 6 which are allowed by LIST 28 are included. In
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
this case, no check is made on the \/Fc\/ value. For an \/Fo\/, \/Fc\/ and difference Fourier, the program
) def
/last 0 def 
Write
Newpage
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
expects that there should be an \/Fc\/ value if the phase is to be defined. Accordingly, reflections where
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\/Fc\/ < 0.001 are normally rejected for such Fouriers, and this is the default option of SMALL. 
) def
Write
/left  148 def /ipflag    1 def /numspace   17 def
/textstring (
Some users like to omit reflections if Fc is smaller then a fraction of Fo. The options QUARTER
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
and HALF are available. 
) def
Write
/left leftmargin indent add indent add def
/instr (F000=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default value for this parameter is zero, and specifies the value of F\(000\) to be used. 
) def
Write
/left leftmargin indent add indent add def
/instr (CALC) def Instruction                                                                                                                                                                                                                                                                               
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
Value YES causes structure factors \(i.e. Fc and phase\) to be calculated immediately before the map
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
is computed. This option can only be activated if some previous task with the current DSC file has
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
computed phases via a \\SFLS command \(section SFLS \) and left a LIST 33 on the disk \(List 33 is the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
stored representation of the SFLS command, so that the program can rememeber how the last
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
refinement was carried out, see section SFLS \) 
) def
Write
Blank
/left leftmargin indent add def 
/instr (LAYOUT NLINE= NCHARACTER= MARGIN= NSPACE= MIN-RHO= MAX-RHO=) def Instruction                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive specifies how the map should be printed, if the value of the PRINT parameter on the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
MAP directive is YES. 
) def
Write
/left leftmargin indent add indent add def
/instr (NLINE=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter sets the number of lines per row of map, and has a default value of 2. 
) def
Write
/left leftmargin indent add indent add def
/instr (NCHARACTER=) def Instruction                                                                                                                                                                                                                                                                        
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter controls the number of characters for each grid point, and has a default value of 4. 
) def
Write
/left leftmargin indent add indent add def
/instr (MARGIN=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter, whose default value is 4, defines the number of characters per division number
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
down each side of the map. 
) def
Write
/left leftmargin indent add indent add def
/instr (NSPACE=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter has a default value of 2, and defines the number of spaces between the division
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
number and the grid number down each side of the map. The minimum value for NSPACE is 2. 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN-RHO=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter has a default value of -1000000, and points less than MIN-RHO are left blank when
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the map is printed. 
) def
Write
/left leftmargin indent add indent add def
/instr (MAX-RHO=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter has a default value of 1000000, and points greater than MAX-RHO are left blank
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
when the map is printed. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PEAKS HEIGHT= NPEAK= REJECT=) def Instruction                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
Controls the search for peaks when the map is searched, i.e. if the value of the SCAN parameter on the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
MAP directive is YES. 
) def
Write
/left leftmargin indent add indent add def
/instr (HEIGHT=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter sets the search of the map for all peaks with an electron density greater than
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
HEIGHT. If this parameter is omitted, a default value of 50 is assumed for an external or Patterson
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
map. For all other maps, the map is scanned for peaks greater than 1.5*SCALE, where SCALE is the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
map scale factor, either taken from LIST 14 \(Fourier control - section LIST14 \) or computed using
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SCALE = YES above. 
) def
Write
/left leftmargin indent add indent add def
/instr (NPEAK=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter, whose default value is 0, determines the number of peaks to be retained after they
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
have been ranked by peak height. If NPEAK is zero or negative, the number of peaks saved is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
computed from 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NPEAK = \(Cell volume\) \/ \(18 * Space Group multiplicity\)) def Literal                                                                                                                                                                                                                            
Blank
/litstring 
(                               18 is an average atomic volume.) def Literal                                                                                                                                                                                                                                
LitBlank
/left leftmargin indent add indent add def
/instr (REJECT=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter, with a default value of 0.01, specifies that peaks within a distance of REJECT
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
angstrom of a peak already ranked on peak height, will be rejected from the list. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TAPES INPUT= OUTPUT=) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   23 def
/textstring (
This directive is used if a map is to be read off magnetic tape, or a computed map is to be written to a
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
magnetic tape. Remember that CRYSTALS will use scratch files unless given named files. To assign a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
named output file, issue 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\OPEN MT1 filename) def Literal                                                                                                                                                                                                                                                                     
LitBlank
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The tape is unformatted. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( Record 1: 'INFO  DOWN ACROSS SECTION') def Literal                                                                                                                                                                                                                                                        
/litstring 
( Record 2: 'TRAN'       9 elements of a transformation matrix) def Literal                                                                                                                                                                                                                                 
/litstring 
( Record 3: 'CELL'       Cell parameters, angles in radians) def Literal                                                                                                                                                                                                                                    
/litstring 
( Record 4: 'L14 '       List 14 information) def Literal                                                                                                                                                                                                                                                   
/litstring 
( Record 5: 'SIZE'       number of points down, across, and number of sections) def Literal                                                                                                                                                                                                                 
/litstring 
( Record 6:  number of values,  values for a section) def Literal                                                                                                                                                                                                                                           
/litstring 
(           Record 6 is repeated for every section.) def Literal                                                                                                                                                                                                                                            
/litstring 
( Record n:  number of atoms, number of items per atom) def Literal                                                                                                                                                                                                                                         
/litstring 
( Record n+1: Items for an atom, repeated for all atoms) def Literal                                                                                                                                                                                                                                        
LitBlank
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
Record 4 contains 6 integers, \(No of points down and across the page, number of sections, and the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
index of these directions, 1 = x\). Subsequent records contain a whole section line by line, prefixed by
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the total number of points in the section. 
) def
Write
/left leftmargin indent add indent add def
/instr (INPUT=) def Instruction                                                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
If INPUT is YES, a map will be read in from the 'input magnetic tape', and the resulting map will be
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
the minimum of each point of the calculated and input maps. The input map sections must be on
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
device 'MT2' 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
*** THIS FACILITY IS NOT CURRENTLY IMPLEMENTED *** 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (OUTPUT=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If OUTPUT is YES, the map produced is written to the 'output magnetic tape'. You may need to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
OPEN a permanent file on device 'MT1'. 
) def
Write
Blank
/secttext (Calculation of superposition minimum functions) def Section                                                                                                                                                                                                                                      
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
\(Issue 7 - implementation incomplete, 1984\) 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
\(Issue 9 - implementation still incomplete, 1993 - no one seems to want it anyway!- use SHELXS if you
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
need to\). 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
\(Issue 10 - still no change, 1996\) 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
The Fourier routine provides a way of calculating superposition minimum functions. For each map that is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
produced, it is possible to specify that another map should be read in from magnetic tape at the same time
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
\(the TAPES directive\). Each point of the resulting map is taken as the minimum of the newly computed map
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
and that read off the magnetic tape. This output map may be written to a second magnetic tape, also by use
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
of the TAPES directive. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
When the input map and the calculated map are superposed, the first point calculated and the first point
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
read off the tape are compared, the second point calculated and the second point input are compared, and so
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
on. This implies that the first point on each map must represent the same point in real space for the output
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
map, and that each map must contain the same number of points. The origin of each map that is to be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
calculated is altered by changing LIST 14 \(Fourier limits - section LIST14 \). For example, if a 2x, 2y, 2z
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
vector has been identified at 0.36, 0.14 and 0.28, and the 2x, 1\/2-2y, 0 vector resulting from a two-fold axis
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
has been found at 0.36, 0.36, 0, then the two LIST 14's for the superposition function might appear as : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\LIST 14) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( X-AXIS 14 4 122 400) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( Y-AXIS 5 2 59 100) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( Z-AXIS 12 2 66 100) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( ORIENT X Y Z) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SCALE 10) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
(      and) def Literal                                                                                                                                                                                                                                                                                     
Blank
/litstring 
( \\LIST 14) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( X-AXIS 14 4 122 400) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( Y-AXIS 16 2 70 100) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( Z-AXIS -2 2 52 100) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( ORIENT X Y Z) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SCALE 10) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   22 def
/textstring (
For the first map, the origin of real space is at 0.18, 0.07 and 0.14 in vector space. This point is moved so
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
that it is one grid point in along each axial direction, to allow for the map scan. For the second peak, the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
origin in real space is at 0.18, 0.18 and 0.0. The second LIST 14 places this point one grid point in along
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
each of the axial directions so that the real space origin of the two maps coincides. To convert the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
coordinates that result from the second map scan to real space coordinates, it is necessary to subtract 0.18
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
from x and 0.18 from y, since the coordinates are printed in Patterson space for all the maps calculated. 
) def
Write
Blank
Newpage
/secttext (Processing of the peaks list  -  LIST 10) def Section                                                                                                                                                                                                                                            
Blank
/left leftmargin indent add def 
/instr (\\LIST 10) def Instruction                                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
LIST 10 cannot be input bythe user. When the map scan has been completed, the resulting peaks are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
output to the disc as a LIST 10. Except for an external or Patterson map, the atoms already in LIST 5
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
are placed at the beginning of the LIST 10. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
A LIST 10 is usually converted to a LIST 5 by one of the following commands : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\EDIT 10 5                \\PEAKS 10 5) def Literal                                                                                                                                                                                                                                                      
/litstring 
( \\COLLECT 10 5             \\REGROUP  10 5) def Literal                                                                                                                                                                                                                                                   
LitBlank
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
\\PEAKS is the normal choice, since duplicate peaks related by symmetry, or peaks corresponding to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
known atoms can be eliminated. It is described below; EDIT, COLLECT and REGROUP are in the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
section on Atomic and Structural Parameters. 
) def
Write
Blank
/secttext (Printing the contents of LIST 10) def Section                                                                                                                                                                                                                                                    
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The contents of LIST 10 can be listed with: 
) def
Write
Blank
/left leftmargin def 
/instr (\\PRINT 10) def Instruction                                                                                                                                                                                                                                                                         
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
There is no command available for punching LIST 10 out to a file. 
) def
Write
Blank
/secttext (Elimination of duplicated entries in LISTS 5 and 10  -  \\PEAKS) def Section                                                                                                                                                                                                                     
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\PEAKS INPUTLIST= OUTPUTLIST=) def Literal                                                                                                                                                                                                                                                               
/litstring 
( SELECT REJECT= KEEP= MONI= SEQ= TYPE= REGROUP= MOVE= SYMM= TRANS=) def Literal                                                                                                                                                                                                                            
/litstring 
( REFINE DISTANCE= MULTIPLIER=) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\PEAKS) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( SELECT REJECT=0.0001) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( REFINE DISTANCE=.5) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
This routine eliminates atoms or peaks which duplicate other entries in an atomic parameter list. When
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
using this routine, a set of distances is calculated about each atom or peak in turn. Atoms or peaks further
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
down the list than the current pivot are then eliminated if they have a contact distance less than a user
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
specified maximum \(the REJECT parameter\). Thus, when peaks have been added to a LIST 5, the peaks
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
corresponding to the atoms can be eliminated. 
) def
Write
Blank
/left leftmargin def 
/instr (\\PEAKS INPUTLIST= OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                     
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
INPUTLIST and OUTPUTLIST specify where the atoms are to be taken from, and where they will be
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
put. 
) def
Write
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(      10  -  Default value) def Literal                                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add indent add def
/instr (OUTPUTLIST=) def Instruction                                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      10) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (SELECT REJECT= KEEP= MONI= SEQ= TYPE= REGROUP= MOVE= SYMM= TRANS=) def Instruction                                                                                                                                                                                                                  
/left leftmargin indent add indent add def
/instr (REJECT=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
REJECT is the distance above which connected atoms or peaks are assumed to be distinct. If a
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
contact is found which is less than REJECT the second atom or peak of the pair in the list is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
eliminated, and defaults to 0.5. 
) def
Write
/left leftmargin indent add indent add def
/instr (KEEP=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter indicates how many entries are to be kept in the output list. The default value of
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
1000000 is the maximum possible. 
) def
Write
/left leftmargin indent add indent add def
/instr (MONITOR=) def Instruction                                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      LOW) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      HIGH  -  Default value) def Literal                                                                                                                                                                                                                                                                  
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If MONITOR is given as LOW only the atoms or peaks that are deleted because of the REJECT
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
limit are listed. If MONITOR is HIGH, all the atoms deleted because of both KEEP and REJECT are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
listed. 
) def
Write
/left leftmargin indent add indent add def
/instr (SEQUENCE=) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO  -  Default value) def Literal                                                                                                                                                                                                                                                                    
Newpage
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If SEQUENCE is YES, then the program will give sequential serial numbers to the atoms and peaks
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
in the final output list . 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      PEAK  -  Default value) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      ALL) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      AVERAGE) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If TYPE is PEAK, then the program will only delete PEAKS which are within REJECT of an
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
existing atom. It TYPE is ALL, atoms are also deleted. 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If TYPE is AVERAGE, coincident atoms or peaks are averaged. The radius for coincidence is taken
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
from the DISTANCE keyword on the REFINE directive. The default radius is .5 Angstrom. 
) def
Write
/left leftmargin indent add indent add def
/instr (REGROUP=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has two allowed values : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO  -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If REGROUP is YES, then the program will reorganise LIST 5 so that bonded atoms and peaks are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
adjacent. 
) def
Write
/left leftmargin indent add indent add def
/instr (MOVE=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The value of this parameter is the maximum separation for 'bonded' atoms. The default is 2.0 A. 
) def
Write
/left leftmargin indent add indent add def
/instr (SYMMETRY=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter controls the use of symmetry information in the calculation of contacts, and can take
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
three values. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SPACEGROUP  -  Default value. The full spacegroup symmetry is used in) def Literal                                                                                                                                                                                                                   
/litstring 
(                                    all computations) def Literal                                                                                                                                                                                                                                          
/litstring 
(      PATTERSON.     A centre of symmetry in introduced, and the translational) def Literal                                                                                                                                                                                                                
/litstring 
(                     parts of the symmetry operators are dropped.) def Literal                                                                                                                                                                                                                             
/litstring 
(      NONE.          Only the identity operator is used.) def Literal                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add indent add def
/instr (TRANSLATION=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter controls the application of cell translations in the calculation of contacts, and can
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
take the values YES or NO 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (REFINE DISTANCE= MULTIPLIER=) def Instruction                                                                                                                                                                                                                                                       
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Controls action of Fourier refinement. 
) def
Write
/left leftmargin indent add indent add def
/instr (DISTANCE=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter has a default value of zero, and is the distance below which atoms and peaks are
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
considered to be coincident. The coordinates of an existing atom are replaced by those of a
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
coincident peak. Refinement takes precedence over deletion of peaks. 
) def
Write
/left leftmargin indent add indent add def
/instr (MULTIPLIER=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This parameter has a default value to give automatic refinement. It is set to 1 for a centric space
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
group and is set to 2 for a non-centric space group. It can be set to 0.0 to preserve original
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
coordinates but be given new peak heights. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      X\(new\) = x\(atom\) + mult\(x\(peak\) - x\(atom\)\).) def Literal                                                                                                                                                                                                                                   
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ reject atoms or peaks with contact distances less than 0.7) def Literal                                                                                                                                                                                                                                
/litstring 
( \\ keep 30 entries in the output list) def Literal                                                                                                                                                                                                                                                        
/litstring 
( \\ list the atoms and peaks rejected because of both 'KEEP') def Literal                                                                                                                                                                                                                                  
/litstring 
( \\ and 'REJECT') def Literal                                                                                                                                                                                                                                                                              
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\PEAKS 10 5) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( SELECT REJECT=0.7,KEEP=30,MONITOR=HIGH) def Literal                                                                                                                                                                                                                                                       
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/secttext (Slant fourier calculations  -  \\SLANT) def Section                                                                                                                                                                                                                                              
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\SLANT INPUT=) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( MAP TYPE= MIN-RHO= SCALE= WEIGHT=) def Literal                                                                                                                                                                                                                                                            
/litstring 
( SAVED MATRIX=) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( CENTROID XO= YO= ZO=) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( MATRIX R\(11\)= R\(12\)= R\(13\)= R\(21\)=  .  .  . R\(33\)=) def Literal                                                                                                                                                                                                                                 
/litstring 
( DOWN MINIMUM= NUMBER= STEP=) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( ACROSS MINIMUM= NUMBER= STEP=) def Literal                                                                                                                                                                                                                                                                
/litstring 
( SECTION MINIMUM= NUMBER= STEP=) def Literal                                                                                                                                                                                                                                                               
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
LitBlank
/left  118 def /ipflag    1 def /numspace   20 def
/textstring (
A Slant Fourier is one that is calculated through any general plane of the unit cell. For such a Fourier, the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
normal Beevers-Lipson expansion of the summation cannot be used, so that it will take many orders of
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
magnitude longer than a conventional one. The algorithm adopted here is as follows : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( X    A general vector expressed in fractions of the) def Literal                                                                                                                                                                                                                                          
/litstring 
(     unit cell edges \(i.e. x\/a, y\/b and z\/c\)) def Literal                                                                                                                                                                                                                                             
/litstring 
( XO   The centroid of the required general fourier section,) def Literal                                                                                                                                                                                                                                   
/litstring 
(     also expressed in crystal fractions.) def Literal                                                                                                                                                                                                                                                     
/litstring 
( XP   The coordinates of the point 'X' when expressed) def Literal                                                                                                                                                                                                                                         
/litstring 
(     in the coordinate system used to define the) def Literal                                                                                                                                                                                                                                              
/litstring 
(     plane of the general section.) def Literal                                                                                                                                                                                                                                                            
/litstring 
( 'X' and 'XP' are related by the expression :  XP = R.\(X-XO\)) def Literal                                                                                                                                                                                                                                
/litstring 
( R    'R' is the matrix that describes the transformation) def Literal                                                                                                                                                                                                                                     
/litstring 
(     of a set of coordinates in the crystal system to) def Literal                                                                                                                                                                                                                                         
/litstring 
(     a set of coordinates in the required plane.) def Literal                                                                                                                                                                                                                                              
/litstring 
( therefore :  X = S.XP + XO) def Literal                                                                                                                                                                                                                                                                   
Blank
/litstring 
(     'S' is the inverse matrix of 'R'.) def Literal                                                                                                                                                                                                                                                        
Blank
/litstring 
( The required expression in the fourier is :) def Literal                                                                                                                                                                                                                                                  
Blank
/litstring 
(     H'.X = H'.S.XP + H'XO) def Literal                                                                                                                                                                                                                                                                    
Blank
/litstring 
( H    H is a vector containing the Miller indices of) def Literal                                                                                                                                                                                                                                          
/litstring 
(     a reflection and H' is the transpose of H.) def Literal                                                                                                                                                                                                                                               
/litstring 
( This may be re-expressed as :) def Literal                                                                                                                                                                                                                                                                
Blank
/litstring 
(     H'.X = H'.S.DXP + H'.\(S.XPS + XO\)) def Literal                                                                                                                                                                                                                                                      
Blank
/litstring 
( DXP  'DXP' represents the increment in going from the) def Literal                                                                                                                                                                                                                                        
/litstring 
(     first point on the section to be calculated.) def Literal                                                                                                                                                                                                                                             
/litstring 
( XPS  'XPS' is the coordinate of the first point on the) def Literal                                                                                                                                                                                                                                       
/litstring 
(     section to be calculated.) def Literal                                                                                                                                                                                                                                                                
/litstring 
(     obviously :  XP = XPS + DXP.) def Literal                                                                                                                                                                                                                                                             
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
When the Fourier is calculated, the term H'.\(S.XPS + XO\) is constant for each section to be calculated.
) def
/last 0 def 
WriteCalc
/textstring (When the Fourier is calculated, the term ) def WritePart
/textstring (H'.\(S.XPS ) def
WriteItalic
/textstring (+ ) def
WriteItalic
/textstring (XO\) ) def
WriteItalic
/textstring (is constant for each section to be calculated.) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
The term H'.S , which may be regarded as the transformed indices, is also constant for each reflection, so
) def
/last 0 def 
WriteCalc
/textstring (The term ) def WritePart
/textstring (H'.S ) def
WriteItalic
/textstring (, which may be regarded as the transformed indices, is also constant for each reflection, so) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
that a two dimensional recurrence relation may be used to change DXP and thus Cos\(2*PI*H.X - ALPHA\)'
) def
/last 0 def 
WriteCalc
/textstring (that a two dimensional recurrence relation may be used to change ) def WritePart
/textstring (DXP ) def
WriteItalic
/textstring (and thus ) def WritePart
/textstring (Cos\(2*PI*H.X ) def
WriteItalic
/textstring (- ) def
WriteItalic
/textstring (ALPHA\)' ) def
WriteItalic
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
over the required section for each reflection. \( ALPHA is the phase angle for the current reflection\). 
) def
WriteCalc
/textstring (over the required section for each reflection. \( ) def WritePart
/textstring (ALPHA ) def
WriteItalic
/textstring (is the phase angle for the current reflection\). ) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
The input for the slant Fourier thus must include the rotation matrix R, the centroid XO, and the steps and
) def
/last 0 def 
WriteCalc
/textstring (The input for the slant Fourier thus must include the rotation matrix ) def WritePart
/textstring (R, ) def
WriteItalic
/textstring (the centroid ) def WritePart
/textstring (XO, ) def
WriteItalic
/textstring (and the steps and) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
divisions in the required plane. 
) def
Write
Blank
/left leftmargin def 
/instr (\\SLANT INPUT=) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This is the command which initiates the slant fourier routines. 
) def
Write
/left leftmargin indent add indent add def
/instr (INPUT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Indicates which reflection list to use. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      6      Default) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      7      Alternative reflection list) def Literal                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (MAP TYPE= MIN-RHO= SCALE= WEIGHT=) def Instruction                                                                                                                                                                                                                                                  
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      F-OBS) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      F-CALC) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      DIFFERENCE) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      FO-PATTERSON) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(      FC-PATTERSON) def Literal                                                                                                                                                                                                                                                                            
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
There is no default value for this parameter 
) def
Write
/left leftmargin indent add indent add def
/instr (MIN-RHO=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
This parameter has a default value of zero, and is the value below which all numbers on the map are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
replaced by MIN-RHO. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALE=) def Instruction                                                                                                                                                                                                                                                                             
Newpage
/left  138 def /ipflag    0 def /numspace   21 def
/textstring (
The terms used in the Fourier are put on the same scale as Fc, and then before the map is printed the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
numbers are multiplied by SCALE . \(i.e. SCALE is the map scale factor\). The default is 10. 
) def
Write
/left leftmargin indent add indent add def
/instr (WEIGHT=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  148 def /ipflag    1 def /numspace   15 def
/textstring (
If WEIGHT = YES, the observed and calculated structure factors are multiplied by the weights in
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
LIST 6 \(usually SQRT\(w\)\). The user should be aware that this might have a major effect on the scale
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
if the map density, and that SCALE may need adjusting. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SAVED MATRIX=) def Instruction                                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive, which excludes CENTRIOD and MATRIX, uses the matrix and centroid stored in LIST
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
20 by a previous GEOMETRY, MOLAX or ANISO command \(see section LIST20 \). 
) def
Write
/left leftmargin indent add indent add def
/instr (MATRIX=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      MOLAX) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      TLS) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      AXES) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
Blank
/left leftmargin indent add def 
/instr (CENTROID XO= YO= ZO=) def Instruction                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This specifies the slant Fourier map centroid, in crystal fractions, and excludes SAVED. 
) def
Write
/left leftmargin indent add indent add def
/instr (XO=) def Instruction                                                                                                                                                                                                                                                                                
/left leftmargin indent add indent add def
/instr (YO=) def Instruction                                                                                                                                                                                                                                                                                
/left leftmargin indent add indent add def
/instr (ZO=) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The defaults value for XO,YO,ZO, the coordinates of the centroid, are 0.0. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (MATRIX R\(11\)= R\(12\)= R\(13\)= R\(21\)=  .  .  . R\(33\)=) def Instruction                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This gives the elements of the rotation matrix R, and excludes SAVED. The trnsformation generally
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
used is from crystal fractions to orthogonal Angstroms. 
) def
Write
/left leftmargin indent add indent add def
/instr (R\(11\)= R\(12\)= R\(13=\) R\(21\)=  .  .  . R\(33\)=) def Instruction                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
There are no default values for any of these parameters. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (DOWN MINIMUM= NUMBER= STEP=) def Instruction                                                                                                                                                                                                                                                        
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive defines the printing of the map down the page. 
) def
Write
/left leftmargin indent add indent add def
/instr (MINIMUM=) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
There is no default value for this parameter, the first point, in Angstrom, down the page of the plane
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
to be calculated. 
) def
Write
/left leftmargin indent add indent add def
/instr (NUMBER=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
There is no default value for this parameter, the number of points of the plane to be printed down the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
page 
) def
Write
/left leftmargin indent add indent add def
/instr (STEP=) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
There is no default value for this parameter, the interval in Angstrom between successive points
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
down the page. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ACROSS MINIMUM= NUMBER= STEP=) def Instruction                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive defines the printing of the map across the page. The parameters have similar meanings to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
those for 'DOWN'. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SECTION MINIMUM= NUMBER= STEP=) def Instruction                                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive defines the printing of the map sections. The parameters have similar meanings to those
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
for 'DOWN'. 
) def
Write
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
The units of MINIMUM and STEP are based on the coordinate system used to describe the plane,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
with the new 'x' axis going down the page and 'y' across. In general the most convenient axial system
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
for the plane is one expressed in Angstrom, so that the initial points and the steps are all expressed in
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Angstrom. \(The least squares best plane program prints out the centroid in crystal fractions and the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
rotation matrix from crystal fractions to best plane coordinates in Angstrom, which are the numbers
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
required, and may be saved for use in SLANT by the directive 'SAVE'\). 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\ the map will be a difference map) def Literal                                                                                                                                                                                                                                                          
/litstring 
( \\ we wish to compute the section 0.3 anstrom above the plane) def Literal                                                                                                                                                                                                                                
/litstring 
( \\ numbers less than zero will be printed as zero) def Literal                                                                                                                                                                                                                                            
/litstring 
( \\ the molecule lies at a centre of symmetry) def Literal                                                                                                                                                                                                                                                 
/litstring 
( \\ so that the centroid in crystal fractions is 0, 0, 0) def Literal                                                                                                                                                                                                                                      
/litstring 
( \\ the plane coordinates are in angstrom) def Literal                                                                                                                                                                                                                                                     
/litstring 
( \\ for printing the plane both across and down the page,) def Literal                                                                                                                                                                                                                                     
/litstring 
( \\ we will start 4 angstrom from the centroid,) def Literal                                                                                                                                                                                                                                               
/litstring 
( \\ and go 4 angstrom the other side of the centroid,) def Literal                                                                                                                                                                                                                                         
/litstring 
( \\ making a grid 8 angstrom by 8 angstrom) def Literal                                                                                                                                                                                                                                                    
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( MAP DIFFERENCE 0.3 0) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( CENTROID 0 0 0) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( MATRIX 3.4076 10.0498 6.1794) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( CONT   5.0606  8.287 -9.5483) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( CONT  -6.9181 11.0121 1.546) def Literal                                                                                                                                                                                                                                                                  
/litstring 
( DOWN -4 33 0.25) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( ACROSS -4 33 0.25) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/title (               ANALYSIS OF RESULTS) def                                                                                                                                                                                                                                                             
/banner (ANALYSIS OF RESULTS) def                                                                                                                                                                                                                                                                           
Newpage
/chaptext (Analysis Of Results) def                                                                                                                                                                                                                                                                         
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
Blank
/secttext (Scope of this section of the user guide) def Section                                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Analysis of residuals                          ANALYSE) def Literal                                                                                                                                                                                                                                       
/litstring 
( Distance and angles calculations               DISTANCES) def Literal                                                                                                                                                                                                                                     
/litstring 
( Void search                                    VOIDS) def Literal                                                                                                                                                                                                                                         
/litstring 
( Global Geometry \(planes,lines & libration\)     GEOMETRY) def Literal                                                                                                                                                                                                                                    
/litstring 
( Torsion angles                                 TORSION) def Literal                                                                                                                                                                                                                                       
/litstring 
( Absolute Configuration                         TON) def Literal                                                                                                                                                                                                                                           
/litstring 
( Publication listing of the atomic parameters   PARAMETERS) def Literal                                                                                                                                                                                                                                    
/litstring 
( Publication listing of the reflections         REFLECTIONS) def Literal                                                                                                                                                                                                                                   
/litstring 
( Summary of data lists                          SUMMARY) def Literal                                                                                                                                                                                                                                       
/litstring 
( CIF files                                      CIF) def Literal                                                                                                                                                                                                                                           
/litstring 
( Graphics                                       CAMERON) def Literal                                                                                                                                                                                                                                       
LitBlank
Blank
/secttext (Analysis of residuals - \\ANALYSE) def Section                                                                                                                                                                                                                                                   
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
This analyses the residual, Fo-Fc, for systematic trends, which might either indiacate an incomplete
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
model, or an unsatisfactory weighting scheme. It is described in the chapter Structure Factors and Least
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Squares. 
) def
Write
Blank
Blank
/secttext (Distance angles calculations  -  \\DISTANCES) def Section                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\DISTANCES INPUTLIST=) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( OUTPUT MONITOR=  LIST= PUNCH= HESD=) def Literal                                                                                                                                                                                                                                                          
/litstring 
( SELECT ALLDIST= COORD= SORTED= TYPE= RANGE= SYMM= TRANS=) def Literal                                                                                                                                                                                                                                     
/litstring 
( LIMITS DMINIMUM= DMAXIMUM= AMINIMUM= AMAXIMUM=) def Literal                                                                                                                                                                                                                                               
/litstring 
( E.S.D.S COMPUTE= CELL=) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( INCLUDE atoms) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( EXCLUDE atoms) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( ONLY atoms) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( PIVOT atoms) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( BONDED atoms) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\DIST) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( E.S.D YES) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The distance angles routine is completely general with respect to crystal and lattice symmetry. For
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
distances, the user may either use elemental radii specified in LIST 29 \(see section LIST29 for input details\),
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
or specify minimum and maximum limits, and the program then calculates all possible contacts within these
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
limits. All symmetry operations and unit cell translations are automatically generated. For the angles, LIST
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
29 or a separate set of distance limits may be used. At a given atom, angles are then calculated between all
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the atoms which bond to the central atom within the given limits. 
) def
Write
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
The distance-angles routines can calculate the estimated standard deviations of the distances and angles
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
that they produce. These e.s.d.'s are based upon the matrix stored in LIST 11 \(see section LIST11 \), and as
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
many variance and covariance terms as are present are used. \(For a full matrix, therefore, the full
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
variance-covariance matrix is used\). For this reason, the calculation of e.s.d.'s takes at least ten times as long
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
as a simple distance angles calculation. 
) def
Write
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
When a set of e.s.d.'s are calculated, the variance-covariance matrix for the cell parameters \(LIST 31,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
section LIST31 \) may also be used. 
) def
Write
Blank
/left leftmargin def 
/instr (\\DISTANCES INPUTLIST=) def Instruction                                                                                                                                                                                                                                                             
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      10) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default is to use the normal atom coordinate list. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (OUTPUT MONITOR= LIST= PUNCH= HESD=) def Instruction                                                                                                                                                                                                                                                 
/left leftmargin indent add indent add def
/instr (MONITOR=) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This controls the monitoring information. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OFF         -  no output) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      DISTANCES   -  only monitors distances. \(Default\)) def Literal                                                                                                                                                                                                                                     
/litstring 
(      ANGLES      -  only monitors angles.) def Literal                                                                                                                                                                                                                                                    
/litstring 
(      ALL         -  monitors distances and angles.) def Literal                                                                                                                                                                                                                                           
LitBlank
/left leftmargin indent add indent add def
Newpage
/instr (LIST=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This controls the format of the listing. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      OFF) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      LOW   -  Default) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(      HIGH) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If LIST is LOW , the default, then the listing is in a compressed format, without symmetry
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
information. If LIST is OFF, no output is sent to the listing file unless PUNCH is PUBLISH, when a
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
copy of the publication listing appears in the listing file. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (PUNCH=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This controls the output sent to the 'punch' file. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
PUBLISH - Produce a listing suitable for publication. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
HTML - Produce an HTML format listing 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
CIF - Produce a listing in CIF format. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
H-CIF - Produce a listing of the H-bonds in CIF format. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SCRIPT - Lists bonds in a easily machine readable format. 
) def
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
RESTRAIN - Produce a proforma LIST 16 \(restraints - LIST16 \). Use the RA LIMIT, TYPE
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
INCLUDE and EXCLUDE parameters to restrict the restraints produced 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
DELU - Proforma LIST 16 for delta U restraints 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SIMU - Proforma LIST 16 for U-similarity restraints 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NONBONDED - Proforma LIST 16 with anti-bumping restraints 
) def
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
H-RESTRAIN - Produces a list of H-C,N and O distance and angle restraints in the PUNCH file,
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
and a list of the referenced H atoms in the SCRIPTQUEUE file. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
H-CIF - Puts hydrogen bond donor and acceptors into the cif file. 
) def
Write
Blank
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If hydrogen atom restraints are being generated, the following target values are used: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(No.H  No.H   U mult     dist) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(C-H) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(>4            1.5      .96 disorder) def Literal                                                                                                                                                                                                                                                           
/litstring 
(1      1      1.2      .93 C C-H \(acetylene\)) def Literal                                                                                                                                                                                                                                                
/litstring 
(1      2      1.2      .93 C-C\(H\)-C) def Literal                                                                                                                                                                                                                                                         
/litstring 
(1      3      1.2      .98 \(C\)3-C-H) def Literal                                                                                                                                                                                                                                                         
/litstring 
(2      1      1.2      .93 C=C-H\(2\)) def Literal                                                                                                                                                                                                                                                         
/litstring 
(2      2      1.2      .97 \(C\)2-C-\(H\)2) def Literal                                                                                                                                                                                                                                                    
/litstring 
(3      1      1.5      .96 C-C-\(H\)3) def Literal                                                                                                                                                                                                                                                         
/litstring 
(N-H) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(>4            1.5      .89 NH4 or disorder) def Literal                                                                                                                                                                                                                                                    
/litstring 
(1      1      1.2      .86 N-N\/H) def Literal                                                                                                                                                                                                                                                             
/litstring 
(1      2      1.2      .86 \(C\)2-N-H) def Literal                                                                                                                                                                                                                                                         
/litstring 
(1      3      1.2      .89 \(C\)3-N-H) def Literal                                                                                                                                                                                                                                                         
/litstring 
(2      1      1.2      .86 C-N-\(H\)2) def Literal                                                                                                                                                                                                                                                         
/litstring 
(2      2      1.2      .89 \(C\)2-N-\(H\)2) def Literal                                                                                                                                                                                                                                                    
/litstring 
(3      1      1.2      .89 C-H-\(H\)3) def Literal                                                                                                                                                                                                                                                         
/litstring 
(O-H) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(1      1      1.5      .82 O-H) def Literal                                                                                                                                                                                                                                                                
Blank
/litstring 
(Dist      esd = 0.02) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(Vib       esd = 0.002) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(Angle     esd = 2.0) def Literal                                                                                                                                                                                                                                                                           
Blank
LitBlank
Blank
/left leftmargin indent add indent add def
/instr (HESD=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This controls the output of ESDs to the CIF file. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      ALL      - \(Default\) Output all bond length and angle standard) def Literal                                                                                                                                                                                                                        
/litstring 
(                 uncertainties \(if requested\) to the CIF \(if requested\),) def Literal                                                                                                                                                                                                                  
/litstring 
(                 including those of bonds to fixed atoms \(i.e. to atoms on) def Literal                                                                                                                                                                                                                   
/litstring 
(                 special positions, or to atoms that are not refined\).) def Literal                                                                                                                                                                                                                       
/litstring 
(      NONFIXED - Exclude standard uncertainties of bond distances and angles) def Literal                                                                                                                                                                                                                  
/litstring 
(                 to Hydrogen atoms that have not been refined. \(as) def Literal                                                                                                                                                                                                                           
/litstring 
(                 required by Acta's notes for authors\).) def Literal                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add def 
/instr (SELECT ALLDIST= COORD= SORTED= TYPE= RANGE= SYMMETRY= TRANS=) def Instruction                                                                                                                                                                                                                       
/left leftmargin indent add indent add def
/instr (ALLDISTANCES=) def Instruction                                                                                                                                                                                                                                                                      
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
Blank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If ALLDISTANCES is NO, the distances calculated about each atom will only be those to atoms
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
that occur after the central atom in LIST 5. \(i.e. each distance is only printed once\). 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If ALLDISTANCES is YES , then the distances from each atom to all the other atoms are calculated
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
for all the atoms. \(In this case, each distance will appear twice in the list\). 
) def
Write
/left leftmargin indent add indent add def
/instr (COORDINATES=) def Instruction                                                                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
If COORDINATES is YES, the transformed coordinates of each atom in a distance calculation are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
printed. If COORDINATES is NO, the transformed coordinates are not printed. 
) def
Write
/left leftmargin indent add indent add def
/instr (SORTED=) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
If SORTED is NO, the distances from the central atom are in the order in which the other atoms
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
occur in LIST 5. If SORTED is YES , the distances are printed in order of increasing magnitude. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE=) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter indicates the type of distances which will be calculated. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      ALL   -  Default value) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      INTRA) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(      INTER) def Literal                                                                                                                                                                                                                                                                                   
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If TYPE is ALL, then all distances are printed; if TYPE is INTRA then only intramolecular
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
distances are printed, and if TYPE is INTER then the intermolecular distances are printed \(Note that
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the whole asymmetric unit is regarded as a 'molecule'. 
) def
Write
/left leftmargin indent add indent add def
/instr (RANGE=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter defines how the range is to be selected. Except when RANGE = LIMITS \(when the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
lowest acceptable distance is user-specified\) contacts of zero angstrom are suppressed. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      COVALENT      Use 'covalent' radii from LIST 29.) def Literal                                                                                                                                                                                                                                        
/litstring 
(      VANDERWAALS.  Use 'VanderWaals' radii from LIST 29, but angles are) def Literal                                                                                                                                                                                                                      
/litstring 
(                    suppressed.) def Literal                                                                                                                                                                                                                                                               
/litstring 
(      IONIC.        Use 'ionic' radii from LIST 29.) def Literal                                                                                                                                                                                                                                           
/litstring 
(      LIMITS.       Use specified or default ranges set by the LIMIT directive.) def Literal                                                                                                                                                                                                               
LitBlank
/left leftmargin indent add indent add def
/instr (SYMMETRY=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter controls the use of symmetry information in the calculation of contacts, and can take
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
three values. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      SPACEGROUP  -  Default value. The full spacegroup symmetry is used in) def Literal                                                                                                                                                                                                                   
/litstring 
(                                    all computations) def Literal                                                                                                                                                                                                                                          
/litstring 
(      PATTERSON.     A centre of symmetry in introduced, and the translational) def Literal                                                                                                                                                                                                                
/litstring 
(                     parts of the symmetry operators are dropped.) def Literal                                                                                                                                                                                                                             
/litstring 
(      NONE.          Only the identity operator is used.) def Literal                                                                                                                                                                                                                                      
LitBlank
/left leftmargin indent add indent add def
/instr (TRANSLATION=) def Instruction                                                                                                                                                                                                                                                                       
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter controls the application of cell translations in the calculation of contacts, and can
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
take the values YES or NO 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (LIMITS DMINIMUM= DMAXIMUM= AMINIMUM= AMAXIMUM=) def Instruction                                                                                                                                                                                                                                     
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive specifies the limits for the distance angles calculations, and may only be given if
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
RANGE = LIMITS has been specified on a preceding SELECT directive. 
) def
Write
/left leftmargin indent add indent add def
/instr (DMINIMUM) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This defines the distance below which distances are not calculated or printed. The default is zero. 
) def
Write
/left leftmargin indent add indent add def
/instr (DMAXIMUM) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
This parameter defines the maximum distance above which distances are not calculated or printed.
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   13 def
/textstring (
Use \\COMMANDS DISTANCES to find the default value for DMAXIMUM. All the distances that
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
are to be calculated and printed must lie between DMINIMUM and DMAXIMUM. 
) def
Write
/left leftmargin indent add indent add def
/instr (AMINIMUM) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
For a given central atom, other atoms which make contacts that are less than AMINIMUM will not
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
be considered when the angles at the central atom are computed. The default is zero. 
) def
Write
/left leftmargin indent add indent add def
/instr (AMAXIMUM) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
For a given central atom, other atoms which make contacts that are greater than AMAXIMUM will
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
not be considered when angles at the central atom are computed. The default value for AMAXIMUM
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
is set in the COMMAND file. AMAXIMUM And AMINIMUM define a shell about each pivot atom
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
outside of which angles are not computed. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
Newpage
/instr (E.S.D.S COMPUTE= CELL=) def Instruction                                                                                                                                                                                                                                                             
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
This directive determines whether estimated standard deviations of the distances and angles are
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
calculated. 
) def
Write
/left leftmargin indent add indent add def
/instr (COMPUTE) def Instruction                                                                                                                                                                                                                                                                            
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
If this parameter is NO, standard deviations are not computed. Note that if e.s.d.'s are to be
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
calculated, i.e. COMPUTE is set equal to YES , then a suitable least squares matrix \(LIST 11, see
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
section LIST11 \) must be available. 
) def
Write
/left leftmargin indent add indent add def
/instr (CELL=) def Instruction                                                                                                                                                                                                                                                                              
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  Default value) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      YES) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
If this parameter is NO, the variance-covariance matrix for the cell parameters is not included when
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the e.s.d.'s are calculated. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (INCLUDE atoms) def Instruction                                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive determines which atoms are included as pivot atoms in the calculation. The arguments
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
may be either a type of atom , or an atom specification of the 'type\(serial\)' or 'type\(serial\) UNTIL
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
type\(serial\)' kind described elsewhere in the manual. Only INCLUDEd atoms are used as pivots, but
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
distances and angles are computed to all other atoms in the current LIST 5 within the ranges specified
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
on the SELECT directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ONLY atoms) def Instruction                                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Similar to INCLUDE, except that specified atoms may be pivot or bonded. The arguments may be
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
either a type of atom , or an atom specification of the 'type\(serial\)' or 'type\(serial\) UNTIL type\(serial\)'
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
kind described elsewhere in the manual. Distances and angles are computed only to specified atoms in
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the current LIST 5 within the ranges specified on the SELECT directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PIVOT atoms) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Similar to INCLUDE, except that atoms excluded with an EXCLUDE directive can still be used to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
bond to. The arguments may be either a type of atom , or an atom specification of the 'type\(serial\)' or
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
'type\(serial\) UNTIL type\(serial\)' kind described elsewhere in the manual. Distances and angles are
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
computed only to specified atoms in the current LIST 5 within the ranges specified on the SELECT
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (BONDED atoms) def Instruction                                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
Similar to INCLUDE, except that non-included atoms can still be used as pivots. The arguments may
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
be either a type of atom , or an atom specification of the 'type\(serial\)' or 'type\(serial\) UNTIL
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
type\(serial\)' kind described elsewhere in the manual. Distances and angles are computed only to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
specified atoms in the current LIST 5 within the ranges specified on the SELECT directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (EXCLUDE atoms) def Instruction                                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive determines which atoms are excluded as pivots in the calculation. The arguments may be
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
either a type of atom , or an atom specification of the 'type\(serial\)' or 'type\(serial\) UNTIL type\(serial\)'
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
kind described elsewhere in the manual. If EXCLUDE directives alone are used, all atoms except those
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
EXCLUDEd either explicitly or by type, are used as pivot atoms in the calculation. However, if both
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
INCLUDE and EXCLUDE are used, the only atoms used in the calculation will be those INCLUDEd
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and not EXCLUDEd. 
) def
Write
Blank
Blank
/secttext (Distance-angles symmetry operations) def Section                                                                                                                                                                                                                                                 
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
Accompanying each atom in a distance or angle calculation with LIST equal to HIGH are the symmetry
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
operators that are necessary to bring the atom into the correct position in the cell to make a contact with the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
central atom. These symmetry operations are divided into six parts, which are indicated by five flags. These
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
are explained in the section on Atomic and Structural Parameters. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\ distances from 0 to 2.5) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( \\ angles from 0 to 2.0) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( \\ the e.s.d.'s of the distances and angles are calculated) def Literal                                                                                                                                                                                                                                   
/litstring 
( \\ distances from each atom to all other atoms are printed) def Literal                                                                                                                                                                                                                                   
/litstring 
( \\ transformed coordinates are printed) def Literal                                                                                                                                                                                                                                                       
/litstring 
( \\ the distances are sorted in order of increasing magnitude) def Literal                                                                                                                                                                                                                                 
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\DISTANCES) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( SELECT ALL=YES,COORD=YES,SORT=YES,RANGE=LIMITS) def Literal                                                                                                                                                                                                                                               
/litstring 
( LIMITS DMAX=2.5, AMAX=2.0) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( E.S.D. YES) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\DIST) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
( EXCLUDE ALL) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( ONLY C\(1\) C\(3\) C\(4\)) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
Blank
/secttext (Void Location  -  \\VOIDS) def Section                                                                                                                                                                                                                                                           
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\VOIDS INPUTLIST=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( DISTANCE) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( TOLERANCE) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( CONTACTS) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( RESOLUTION) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\VOIDS) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( DISTANCE 2.2) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
This utility searches for the asymmetric unit for points which lie outside the known atoms. The 'radii' of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
the known atoms is independent of type, and in an input value. A pseudo atom in inserted at every point on a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
search grid outside the known atoms. The pseudo atoms are given a 'TYPE' dependant upon the number of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
neighbouring pseudo atoms. Atoms of type R are at the core of large voids, type L are intermediate, and M at
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the surface. 
) def
Write
Blank
/left leftmargin def 
/instr (\\VOIDS INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                 
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      10) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default is to use the normal atom coordinate list. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (DISTANCE value) def Instruction                                                                                                                                                                                                                                                                     
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This sets the radii of the known atoms, default 2.5A. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (RESOLUTION value) def Instruction                                                                                                                                                                                                                                                                   
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This sets the sampling interval for the search grid, default 0.8 A. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (CONTACT value1 value2) def Instruction                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This sets the number of pseudo-atom contacts required for the core and intermediate pseudo atoms.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The defaults are 27 \(R type atoms\), 15 \(L type atoms\). All other atoms are of type M. 
) def
Write
/left  138 def /ipflag    1 def /numspace   13 def
/textstring (
\\COLLECT and \\REGROUP can be used to re-group the pseudo-atoms, and the augmented structure
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
can be viewed in CAMERON. 
) def
Write
Blank
Blank
/secttext (TLS analysis, best planes and lines  -  \\GEOMETRY) def Section                                                                                                                                                                                                                                  
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\GEOMETRY INPUTLIST=) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(  ATOMS  W\(1\)  SPECIFICATION\(1\)  W\(2\)  SPECIFICATION\(2\) .) def Literal                                                                                                                                                                                                                             
/litstring 
(  PLANE) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(  LINE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(  AXES) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(  TLS) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
(  EXECUTE) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(  EVALUATE  ATOM SPECIFICATIONS . . . .) def Literal                                                                                                                                                                                                                                                       
/litstring 
(  REPLACE ATOM SPECIFICATIONS . . .) def Literal                                                                                                                                                                                                                                                           
/litstring 
(  PUNCH) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(  SAVE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(  DIHEDRAL  NP\(1\)  AND  NP\(2\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
(  QUIT) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(  CENTRE   X=, Y=, Z=) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(  REJECT   NV=) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(  LIMITS   VALUE=   RATIO=) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(  MODL L\(11\), L\(22\) L\(33\) L\(23\) L\(13\) L\(12\)) def Literal                                                                                                                                                                                                                                       
/litstring 
(  MODT T\(11\), T\(22\) T\(33\) T\(23\) T\(13\) T\(12\)) def Literal                                                                                                                                                                                                                                       
/litstring 
(  ZEROS) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(  DISTANCES  DL=   AL=) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(  ANGLES  AL=) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(  PLOT) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(  END) def Literal                                                                                                                                                                                                                                                                                         
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\GEOMETRY) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( ATOMS FIRST UNTIL LAST) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( PLANE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( EXECUTE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( SAVE) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( ATOMS FIRST UNTIL LAST) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( TLS) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( EXECUTE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( ANGLE 1 AND 2) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( EXECUTE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( DISTANCES) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
GEOMETRY is used for computing the following global derived parameters: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Centroid \(centre of gravity\)) def Literal                                                                                                                                                                                                                                                          
/litstring 
(      Inertial Tensor) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(      Best Plane) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(      Best Line) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      Shape Indices) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      Principal Axes of adps) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      Librational and Translational Thermal Tensors) def Literal                                                                                                                                                                                                                                           
/litstring 
(      Dihedral Angles) def Literal                                                                                                                                                                                                                                                                         
LitBlank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
It replaces the old \\MOLAX, \\AXES and \\ANISO commands 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
PLANE & LINE are used for computing the principal axes of inertia through groups of atoms using the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
routines described in Computing Methods in Crystallography, edited by J. S. Rollett, Pergamon Press, 1965,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
p67-68. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
The best plane for a series of N atoms whose positions have varying reliability, such that they can be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
assigned weights, w\(1\), w\(2\), . . . w\(n\), is defined as that for which the sum of the squares of the distances
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
\(in angstroms\) of the atoms from the plane, multiplied by the weights, w\(i\), of the atomic positions, is a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
minimum. Note that the normal to the 'worst plane' is the 'best line', and if masses are used for weights,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
then the calculation gives the principal inertial axes. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The atomic positions are taken from LIST 5, possibly modified by symmetry information, to compute
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
inertial axes & deviations of atoms from the planes or lines. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
Each time a line or plane is computed, the direction cosines of the relevent axis are stored as AXIS
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
number 'n'. The dihedral angles between these axes can be computed. Three geometry indices are also
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
computed. The geometry is best described by the index closest to unity. \(Mingos,D.P.M & Rohl,A.L.,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
J.Chwm.Soc. Dalton Trans \(1991\) pp 3419 - 3425\) 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
TLS. This routine calculates the overall rigid-body motion tensors T, L, S \(Shoemaker and Trueblood,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
Acta Cryst. B24, 63, 1968\) by a least-squares fit to the individual anisotropic temperature factor
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
components, together with librational corrections to bond lengths and angles. 
) def
Write
/left  118 def /ipflag    1 def /numspace   12 def
/textstring (
Shoemaker and Trueblood's conventions and reductions are followed throughout; in particular, the trace
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
of S, which is indeterminant, is set to zero. The program therefore determines 20 overall tensor components -
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
the upper triangles of T and L together with the whole of S apart from S\(33\). \(See also: Johnson in
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Crystallographic Computing, ed R.Ahmed, Munksgaard, 1970, pp 207-219\) 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
Even when the trace-of-S singularity has been removed, however, the nature of the rigid body problem is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
such that ill-conditioned and singular normal matrices are much more common than in structure refinement
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
and the program therefore proceeds via the eigenvalues and eigenvectors of the normal matrix. In most cases
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
the largest and smallest eigenvalues are output for inspection, but if the ratio of these quantities is less than
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
the LIMITing RATIO, a full eigenvalue\/vector listing is produced. Further, if any eigenvalue is itself less
) def
/last 0 def 
Write
Newpage
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
than the LIMITing VALUE, the corresponding parameter combination is set to zero, thus removing the near-
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
singularity. These actions can be modified by the use of the LIMIT and REJECT directives described below.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
If the TLS calcuation cannot be stabilised by means of these filters, the user can modify either T, L or S
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
directly before applying the REPLACE or PUNCH commands. Though here is some danger in this,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
especially if the supposed rigid group is infact flexible, it may be preferable to using a model yielding
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
negative vibrational or librational amplitudes. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The direction cosines of the principal axis of L are stored for use in inter-axis angle comutations. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Immediate execution of a directive can be forced by issuing an EXECUTE directive. 
) def
Write
Blank
/left leftmargin def 
/instr (\\GEOMETRY INPUTLIST=) def Instruction                                                                                                                                                                                                                                                              
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      10) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (ATOMS  W\(1\)  SPECIFICATION\(1\)  W\(2\)  SPECIFICATION\(2\) .) def Instruction                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This specifies atoms to be used in the calculation of the best plane. W\(1\) Is the weight assigned to the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
atoms contained in the first atom specification, W\(2\) is the weight assigned to the second group of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   22 def
/textstring (
atoms, and so on. If W\(1\) is omitted, a default value of 1 is used, but any other W\(I\) term applies to all
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
the atoms following it, until another W is found or the end of the directive is encountered. At least one
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
ATOM directive must precede each PLANE, LINE, TLS, AXES or PLOT directive. An ATOM
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
directive will over-rule an immediately preceding ATOM directive. If an input line is not long enough
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
for the full atom list, use CONTINUE. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PLANE) def Instruction                                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive, \(or LINE, TLS, AXES, PLOT\) must follow immediately after an ATOM directive and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
causes the calculation of a least squares best plane. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (LINE) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This directive, \(or PLANE, TLS, AXES, PLOT\) must follow immediately after an ATOM directive
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
and causes the calculation of a least squares best line. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (AXES) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive \(like \\AXES\) computes the principal axis lengths and directions for the atoms specified
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
on a preceding ATOM directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TLS ) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This causes the TLS calculation to be initiated. It MUST have been preceded by an ATOM directive. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (EXECUTE) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This forces the execution of preceding directives. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (EVALUATE  ATOM SPECIFICATIONS . . . .) def Instruction                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
If present, this directive must appear after a PLANE, LINE, TLS or PLOT directive, and causes the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
co-ordinates or adps of the atoms specified to be calculated and printed with respect to the current axial
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
system. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REPLACE ATOM SPECIFICATIONS . . .) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
if present, this directive must appear after a PLANE, LINE, TLS or PLOT directive, and causes the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
co-ordinates or adps of the atoms specified to be modified so that they conform to the most recent
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
geometry calculation. The LIST 5 in core is immediately updated, so that the new coordinates will be
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
used for any subsequent computation. A LIST 5 is only written to the disc on a satisfactory exit from
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
GEOMETRY. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PUNCH) def Instruction                                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive causes the orthogonal coordinates of the atoms of any plane or line computed or
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
EVALUATED in subsequent tasks to be output to the 'punch' file. For a TLS calculation, it causes a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
restraint list to be output to TLSREST.DAT 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SAVE) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive is optional. 
) def
Write
/left  138 def /ipflag    1 def /numspace   17 def
/textstring (
If it follows a PLANE, LINE or TLS directive, it causes the latest rotation matrix and CENTRE to
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
be stored in the appropriate position in LIST 20. 
) def
Write
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
If it follows an AXES directive, the direction cosines and centre if the ellipse FOR THE LAST
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
ATOM are stored in LIST 20. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
A LIST 20 is only written to the disc on a satisfactory exit from ANISO. 
) def
Write
/left leftmargin indent add def 
Newpage
/instr (DIHEDRAL  NP\(1\)  AND  NP\(2\)) def Instruction                                                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
If present, thus directive must follow at least two PLANE, LINE or TLS computations. It causes the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
program to calculate the angle between the axes with serial numbers NP\(1\) and NP\(2\) . The AND must
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
be present. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (QUIT) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive abandons the calculation without modifying the disc LISTs. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (CENTRE   X=, Y=, Z=) def Instruction                                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive specifies the centre of libration, in crystal fractions, to be used in the original derivation
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
of the overall motion tensors. The program derives and uses a unique origin at a later stage in the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
calculations. This directive is optional, the default centre being \(0,0,0\). If a centre of \(0,0,0\) is given or
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
set by default, the program computes and uses the mean position of the given atoms, INCLUDING any
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
which are isotropic, even though these are not used to compute TLS. The stored CENTRE is updated
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
during TLS, and a second TLS computation may be performed using this new value as CENTRE. This
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
may help stabilise certain forms of ill-conditioning. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REJECT   NV=) def Instruction                                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
Overrides normal action and sets the parameter combination corresponding to eigenvector number nv
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
to zero. Eigenvectors are numbered in ascending order of their eigenvalues, so that nv is in the range 1
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
to 20 inclusive and will usually have been obtained from a full eigenvalue\/vector listing produced in a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
previous run. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (LIMITS   VALUE=   RATIO= ) def Instruction                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
If an eigenvalue is less than VALUE or its size is less than RATIO * \(the next bigger\), it is eliminated
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
from the analysis. VALUE is currently .000001 and RATIO .01 . 
) def
Write
Blank
/left leftmargin indent add def 
/instr (MODL L\(11\), L\(22\) L\(33\) L\(23\) L\(13\) L\(12\)) def Instruction                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive enables the user to change the values of the L tensor before EVALUATING or
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
REPLACING the Uij. The L tensor changed is that with respect to the inertial axes and the input centre
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
of libration. It does not depend upon S. All six values must be given. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (MODT T\(11\), T\(22\) T\(33\) T\(23\) T\(13\) T\(12\)) def Instruction                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive enables the user to change the values of the T tensor before EVALUATING or
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
REPLACING the Uij. The T tensor changed is that with respect to the inertial axes and the input centre
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
of libration, NOT the final tensor, since this involves an interaction with S and L. All six values must be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
given. 
) def
Write
Blank
Blank
/left leftmargin indent add def 
/instr (ZEROS) def Instruction                                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
#PThis directive enables the user to set the S tensor to zero before EVALUATING or REPLACING
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the Uij. It decouples T from L. 
) def
Write
/left leftmargin indent add def 
/instr (DISTANCES  DL=   AL=) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
This directive calculates all interatomic distances less than DL angstroms with librational corrections.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
If this directive is omitted, no distances are calculated; if DL is absent, a default value of 1.8 is inserted.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
If AL is present, angles between atoms separated by less than AL angstroms are computed. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ANGLES  AL=) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive calculates angles between all bonds less than AL angstroms. If this directive is omitted,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
no angles are calculated; if AL is absent, a default value of 1.8 is inserted. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
*********************** WARNING ************************* 
) def
WriteCalc
/textstring (*********************** ) def
WriteItalic
/textstring (WARNING ************************* ) def WritePart
/ypos ypos linegap sub def
Blank
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The directive DISTANCE may only be followed by ATOM, EXECUTE, or END. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PLOT) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This obsolete directive produces a join-the-dots diagram on the monitor or printer. It \(or PLANE,
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
LINE, TLS, AXES\) must follow immediately after an ATOM directive and causes the calculation of
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
inertial axes. Details of the computation are suppressed on the Monitor, but a line drawing projected
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
onto the best plane is produced. MOLAX Can thus be used as a means of displaying some or all of the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
atoms in a structure. 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\ these instructions compute a plane) def Literal                                                                                                                                                                                                                                                        
/litstring 
( \\ involving n\(1\),n\(2\),n\(3\) and c\(1\), and) def Literal                                                                                                                                                                                                                                            
/litstring 
( \\ prints the co-ordinates of all the atoms with) def Literal                                                                                                                                                                                                                                             
/litstring 
( \\ respect to this plane.  The positions of the) def Literal                                                                                                                                                                                                                                              
Newpage
/litstring 
( \\ nitrogen atoms have double weight) def Literal                                                                                                                                                                                                                                                         
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\GEOMETRY) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
( ATOMS 2 N\(1\) UNTIL N\(3\)  1 C\(1\) C\(2\)) def Literal                                                                                                                                                                                                                                                 
/litstring 
( PLANE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( EVALUATE ALL) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\ these instructions calculate another plane,) def Literal                                                                                                                                                                                                                                               
/litstring 
( \\ printing only the co-ordinates of c\(5\) with respect to) def Literal                                                                                                                                                                                                                                  
/litstring 
( \\ the second plane.  The angle between the two planes) def Literal                                                                                                                                                                                                                                       
/litstring 
( \\ is then calculated) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( ATOMS C\(1\) S\(1\) N\(1\)) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( PLANE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( EVALUATE C\(5\)) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( DIHEDRAL 1 AND 2) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
Blank
/secttext (Torsion angles  -  \\TORSION) def Section                                                                                                                                                                                                                                                        
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\TORSION INPUTLIST=) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( ATOMS  SPECIFICATIONS) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( PUBLICATION  PRINT=) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\TORSION) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( ATOM C\(1\) C\(2\) C\(3\) C\(4\)) def Literal                                                                                                                                                                                                                                                             
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
The routines described in this section calculate torsion angles which are defined as follows. The torsion
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   22 def
/textstring (
angle about the bond j-k is the angle the bond k-l is rotated from the ijk plane. It is positive when, on looking
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
from ij to kl, the rotation is clockwise. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
The program uses atomic positions taken from LIST 5. These can be modified by the space group
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
symmetry operators stored in LIST 2 \(space group information, see section LIST02 \) 
) def
Write
Blank
/left leftmargin def 
/instr (\\TORSION INPUTLIST=) def Instruction                                                                                                                                                                                                                                                               
/left leftmargin indent add indent add def
/instr (INPUTLIST) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      10) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (ATOMS  SPECIFICATIONS) def Instruction                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive specifies atoms that are to be used in the calculation of the torsion angle. More than one
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
ATOMS directive can be given. Each directive must define at least four atoms, the torsion angle being
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
computed with respect to the first three atoms and each of the subsequent ones. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PUBLICATION  PRINT=) def Instruction                                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The parameter PRINT controls the publication listing, which is sent to the file open on the CRYSTALS
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
PUNCH unit. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO   -  DEFAULT.  There is no publication listing) def Literal                                                                                                                                                                                                                                       
/litstring 
(      YES    There is a publication listing sent to the PUNCH file) def Literal                                                                                                                                                                                                                            
/litstring 
(      CIF    The listing is in CIF format) def Literal                                                                                                                                                                                                                                                     
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Example.) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( \\ the torsion angle about C\(3\)-C\(4\) is calculated) def Literal                                                                                                                                                                                                                                       
/litstring 
( \\ two torsion angles about C\(4\)-C\(5\) are calculated) def Literal                                                                                                                                                                                                                                     
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\TORSION) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( ATOMS N\(2\) C\(3\) C\(4\) C\(5\)) def Literal                                                                                                                                                                                                                                                            
/litstring 
( ATOMS C\(3\) C\(4\) C\(5\) C\(6\) O\(1\)) def Literal                                                                                                                                                                                                                                                     
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
/secttext (Absolute Configuration  -  \\TON) def Section                                                                                                                                                                                                                                                    
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\TON) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
LitBlank
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Compute the Hooft-Straver-Spek parameter for comparisonm with the Flack parameter 
) def
Write
Blank
/left leftmargin def 
/instr (\\TON) def Instruction                                                                                                                                                                                                                                                                              
Blank
/left  128 def /ipflag    1 def /numspace   18 def
/textstring (
This instruction evaluates a function of \(Fo+h - Fo-h\) and \(Fo+h - Fo-h\) for all Friedel pairs. It uses
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
LIST 7, which must be sorted to that Friedel pairs are adjacent and with the same index signs, and with a
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
flag to indicate if the sign has been changed in 'phase'. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
The data is most conveniently prepared useing the SCRIPT TON towards the end of a refinement. 
) def
Write
Blank
Blank
Blank
/secttext (Publication listing of the atomic parameters  -  \\PARAMETERS) def Section                                                                                                                                                                                                                       
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\PARAMETERS) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( LAYOUT INSET= ATOM= DOUBLE= CHOOSE= FLOAT= NCHAR= NLINE= LISTAXES= ESD=) def Literal                                                                                                                                                                                                                      
/litstring 
( COORDINATES NCHAR= NDECIMAL= SELECT= TYPE= DISPLAY= PRINT= PUNCH=) def Literal                                                                                                                                                                                                                            
/litstring 
( U'S NCHAR= NDEC= SELECT= TYPE= DISPLAY= PRINT= PUNCH=) def Literal                                                                                                                                                                                                                                        
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\PARAMETERS) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( LAYOUT ATOM-NAME=6,DOUBLE=YES) def Literal                                                                                                                                                                                                                                                                
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
This routine sends the atomic parameters to the PUNCH file in a suitable format for publication or
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
binding into a thesis. As well as the current atomic parameters in LIST 5, the estimated standard deviations
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
derived from the least squares normal matrix are also printed. THIS ROUTINE WILL NOT WORK if LIST
) def
/last 0 def 
WriteCalc
/textstring (derived from the least squares normal matrix are also printed. ) def WritePart
/textstring (THIS ) def
WriteBold
/textstring (ROUTINE ) def
WriteBold
/textstring (WILL ) def
WriteBold
/textstring (NOT ) def
WriteBold
/textstring (WORK ) def
WriteBold
/textstring (if LIST) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
5 is modified in any way since the last round of refinement. If any changes, including renaming, are made, a
) def
/last 0 def 
WriteCalc
/textstring (5 is modified ) def WritePart
/textstring (in ) def
WriteItalic
/textstring (any ) def
WriteItalic
/textstring (way ) def
WriteItalic
/textstring (since the last round of refinement. If any changes, including renaming, are made, a) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
further round of refinement must be done. If you wish to preserve parameter values, and create a valid matrix
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
without changing the parameter values, compute a refinement cycle but set all the shifts to zero. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\SFLS) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      REFINE) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(      SHIFT GENERAL = 0.0) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
The output is in two halves, the first containing the positional coordinates and any isotropic temperature
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
factors, and the second containing all the anisotropic temperature parameters. 
) def
Write
/left  118 def /ipflag    1 def /numspace   23 def
/textstring (
For the first part, a page is split into 6 separate fields. The first field is blank, and is an offset so that the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
information is centred on the page. The remaining fields contain the atom type and serial number, the three
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
positional parameters, and a temperature factor. This will be the value of U\(iso\) with its e.s.d for isotropic
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
atoms, otherwise U\(equiv\), without an e.s.d, for anisotropic atoms. U\(equiv\) is not simply related to the
) def
/last 0 def 
WriteCalc
/textstring (atoms, otherwise U\(equiv\), without an e.s.d, for anisotropic atoms. U\(equiv\) ) def WritePart
/textstring (is ) def
WriteBold
/textstring (not ) def
WriteBold
/textstring (simply related to the) def WritePart
/ypos ypos linegap sub def
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
diagonal elements of U\(aniso\), and may be computed as either the arithmetic or geometric mean of the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
principal axes of the ellipsoid. See \\SET UEQUIV in the chapter on IMMEDIATE commands. The width of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
each type of field may be altered by the user, using respectively the INSET , ATOM-NAME , and
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
NCHARACTER parameters. The default length of a page of this type of output is that required for A4 paper. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
The second part contains the anisotropic temperature factors, and each page is split into eight fields. As
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
for the atomic coordinates, the first field is blank and represents an offset. The second field contains the atom
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
type and serial number, and the remaining six fields contain the components of the anisotropic temperature
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
factors. The width of each type of field may be adjusted by the user, using respectively the INSET ,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   12 def
/textstring (
ATOM-NAME and NCHARACTER parameters. If a different value for INSET or ATOM-NAME is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
required in the first and second parts of the output, the job must be run twice. Depending upon the width
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
across the page, the second part of the output occupies one sheet of A4 paper either across the page or down
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the page. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
For both types of output, the user can select double spacing down the page with the DOUBLE parameter.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
Similarly for each of the numeric fields, the user can choose the number of decimal places to be printed \(the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
NDECIMAL parameter\), and whether the numbers are printed as integers or in floating point with a decimal
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
point. \(The FLOATING parameter\). The e.s.d.'s are printed to the same accuracy as the atomic parameters,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   23 def
/textstring (
so that if the chosen field is too small and an e.s.d. appears to be zero, it will be omitted in exactly the same
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
way as for a parameter that has not been refined. A parameter printed with 4 decimal places might thus
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
appear as : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( 0.0123\(4\)) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( OR) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(    123\(4\)) def Literal                                                                                                                                                                                                                                                                                  
LitBlank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Depending upon the format. In either case, the numbers are right justified in their field. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
As an alternative to the user selecting the number of decimal places that should be printed, it is possible
) def
/last 0 def 
Write
Newpage
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
to get the program to choose the number of decimal places required for each parameter automatically. \(The
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
CHOOSE parameter\). If the parameters are to be printed in floating point, the number of decimal places is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
chosen so that the e.s.d. Can be represented as a one digit number in the last decimal place. For numbers that
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
are to be printed as integers, the field used is never less than that given by the NDECIMAL parameter. If the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
required field is larger than that defined by these s, a decimal point is inserted and the required number of
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
extra digits is output. For example, if the number of decimal places required is four, but the e.s.d. is too
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
small, it would appear as : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( 0.12345\(6\)) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( OR) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(  1234.5\(6\)) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
Depending upon whether floating point or integer output was required. For either type, if the parameter has
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
not been refined, the number of decimal places is that given by the NDECIMAL instruction. 
) def
Write
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
Since this routine prints the e.s.d.'s, it is vital that the least squares matrix \(LIST 11, see section LIST11 \)
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
belongs to the current LIST 5 \(the model parameters\). If LIST 5 has been modified in any way since the last
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Least Squares, this routine will abort. 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
When anisotropic atoms are present in LIST 5, U[EQUIV] is calculated according to the current setting of
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
\\SET UEQUIV. 
) def
Write
Blank
Blank
/left leftmargin def 
/instr (\\PARAMETERS) def Instruction                                                                                                                                                                                                                                                                       
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
This command initiates the routines for printing of the atomic parameters in a suitable format for
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
publication. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (LAYOUT= INSET= ATOM= DOUBLE= CHOOSE= FLOAT= NCHAR= NLINE= LISTAXES= ESD=) def Instruction                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This directive defines how the atomic parameters, both positional and thermal, are to be laid out on the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
page. 
) def
Write
/left leftmargin indent add indent add def
/instr (INSET) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter sets the number of blank spaces on each line before the atom type and serial number.
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If this parameter is omitted a default value of 1 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (ATOM-NAME) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter sets the width of the field that contains the atom type and serial number. The
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
characters are left justified in the field, and the format is as follows : 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
TYPE\(SERIAL\) 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
The serial number is printed as an integer, and the unoccupied spaces are filled with blanks. If this
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter is omitted, a default value of 6 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (DOUBLE) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has two possible values : 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NO - DEFAULT VALUE 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
YES 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If DOUBLE is YES each line of parameters is double spaced. The default option if this parameter is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
omitted is single spacing, with no interleaving blank lines. 
) def
Write
/left leftmargin indent add indent add def
/instr (CHOOSE) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has two possible values : 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NO 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
YES - DEFAULT VALUE 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If CHOOSE is YES the program chooses the number of decimal places that need to be printed for
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
each parameter, depending upon its e.s.d.. The format of the output depends upon whether a decimal
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
point is being used, as explained above. 
) def
Write
/left leftmargin indent add indent add def
/instr (FLOATING) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has two possible values : 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
YES - DEFAULT VALUE 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NO 
) def
Write
Blank
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
If FLOATING is NO , the parameters are printed as integers, with an accuracy given either by the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   11 def
/textstring (
NDECIMAL parameters to the directives COORDINATES and "U'S, or by the 'CHOOSE'
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter. parameter. 
) def
Write
/left leftmargin indent add indent add def
/instr (NCHARACTER) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter indicates the total number of printing positions on the output device. If this
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter is omitted, a default value of 118 is assumed. 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (NLINE) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
This parameter indicates the total number of lines on the on the output media. Set a very lartge value
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
\(1000\) to get continuous output. 
) def
Write
/left leftmargin indent add indent add def
/instr (LISTAXES) def Instruction                                                                                                                                                                                                                                                                           
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter can have two values 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
YES 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NO - DEFAULT VALUE 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
If the value is YES the principal axes of the temperature factors are printed. 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (ESDS) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter can take 3 values 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NO 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
YES - DEFAULT VALUE 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
EXCLRH 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
EXCLRH inhibits printing the e.s.ds for riding hydrogen atoms 
) def
Write
Blank
/left leftmargin indent add def 
/instr (COORDINATES NCHAR= NDECIMAL= SELECT= TYPE= DISPLAY= PRINT= PUNCH=) def Instruction                                                                                                                                                                                                                  
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive defines how the positional coordinates are to be set out on the page. 
) def
Write
/left leftmargin indent add indent add def
/instr (NCHARACTER) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter sets the width of the field that contains the positional coordinates. The characters are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
right justified in the field, and if this parameter is omitted, a default value of 14 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (NDECIMAL) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter sets the number of decimal places to be printed for the positional parameters. It may
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
be partially or completely overriden by the CHOOSE parameter, depending upon the format of the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
output. If this parameter is omitted, a default value of 4 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (SELECT) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter selects the kinds of data to be printed, and can have five values. 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
ALL - Default. All atoms are printed. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NONE - No atoms are printed. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
ONLY - Only atoms with TYPEs given on a TYPE directive are printed. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
EXCLUDE - Atoms with TYPEs given on a TYPE directive are not printed. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SEPARATE- Atoms with TYPEs given on a TYPE directive are printed separately 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (TYPE) def Instruction                                                                                                                                                                                                                                                                               
Blank
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
Used in conjunction with SELECT to determine which atom types to INCLUDE,EXCLUDE or
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SEPARATE. TYPE is ignored if SELECT is ALL or NONE. Its default value is 'H'. 
) def
Write
/left leftmargin indent add indent add def
/instr (DISPLAY) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has two possible values 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( NO   No output is displayed on the terminal.) def Literal                                                                                                                                                                                                                                                 
/litstring 
( YES  Output is displayed on the terminal.) def Literal                                                                                                                                                                                                                                                    
LitBlank
/left leftmargin indent add indent add def
/instr (PRINT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has two possible values 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( NO       No output is sent to the listing file) def Literal                                                                                                                                                                                                                                               
/litstring 
( YES      Output is sent to the listing file) def Literal                                                                                                                                                                                                                                                  
LitBlank
/left leftmargin indent add indent add def
/instr (PUNCH) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has three possible values 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( NO       No output is sent to the punch file) def Literal                                                                                                                                                                                                                                                 
/litstring 
( YES      Output is sent to the punch file) def Literal                                                                                                                                                                                                                                                    
/litstring 
( CIF      Output is in CIF format) def Literal                                                                                                                                                                                                                                                             
LitBlank
Blank
/left leftmargin indent add def 
/instr (U'S NCHAR= NDEC= SELECT= TYPE= DISPLAY= PRINT= PUNCH=) def Instruction                                                                                                                                                                                                                              
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive defines how the thermal parameter are to be set out on the page. 
) def
Write
/left leftmargin indent add indent add def
/instr (NCHARACTER) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
This parameter sets the width of the field that contains the thermal parameters. The characters are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
right justified in the field, and if this parameter is omitted, a default value of 11 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (NDECIMAL) def Instruction                                                                                                                                                                                                                                                                           
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter sets the number of decimal places to be printed for the thermal parameters. If this
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter is omitted, a default value of 4 is assumed. 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (SELECT) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter selects the kinds of data to be printed, and can have five values. 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
ALL - Default. All atoms are printed. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
NONE - No atoms are printed. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
ONLY - Only atoms with TYPEs given on a TYPE directive are printed. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
EXCLUDE - Atoms with TYPEs given on a TYPE directive are not printed. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SEPARATE- Atoms with TYPEs given on a TYPE directive are printed separately 
) def
Write
Blank
/left leftmargin indent add indent add def
/instr (TYPE) def Instruction                                                                                                                                                                                                                                                                               
Blank
/left  138 def /ipflag    0 def /numspace   12 def
/textstring (
Used in conjunction with SELECT to determine which atom types to INCLUDE,EXCLUDE or
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
SEPARATE. TYPE is ignored if SELECT is ALL or NONE. Its default value is 'H'. 
) def
Write
/left leftmargin indent add indent add def
/instr (MONITOR) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has two possible values 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( OFF   No output is displayed on the terminal.) def Literal                                                                                                                                                                                                                                                
/litstring 
( HIGH  Output is displayed on the terminal.) def Literal                                                                                                                                                                                                                                                   
LitBlank
/left leftmargin indent add indent add def
/instr (PRINT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has two possible values 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( NO       No output is sent to the listing file) def Literal                                                                                                                                                                                                                                               
/litstring 
( YES      Output is sent to the listing file) def Literal                                                                                                                                                                                                                                                  
LitBlank
/left leftmargin indent add indent add def
/instr (PUNCH) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter has three possible values 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( NO       No output is sent to the punch file) def Literal                                                                                                                                                                                                                                                 
/litstring 
( YES      Output is sent to the punch file) def Literal                                                                                                                                                                                                                                                    
/litstring 
( CIF      Output is in CIF format) def Literal                                                                                                                                                                                                                                                             
LitBlank
/secttext (Publication listing of reflection data  - \\REFLECTIONS) def Section                                                                                                                                                                                                                             
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\REFLECTIONS INPUT=) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(LAYOUT NCOLUMNS= NLINES= INSET= NSPACE= SCALE= NCHARACTER=) def Literal                                                                                                                                                                                                                                    
/litstring 
(OUTPUT PRINT= PUNCH= LIST28=) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
This routine prints the reflection data in LIST 6 \(section LIST06 \) in a suitable format for publication or
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
binding into a thesis. The information printed falls into one or more columns, each of which contains h, k, l,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
\/Fo\/, \/Fc\/, and the phase angle in degrees. Each column is 18 characters wide. Although the user has no
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
control over the contents of each column, it is possible to vary the number of blank spaces at the start of each
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
line, the number of columns across the page, the number of spaces between successive columns, and the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
number of lines per page. \(The INSET , NCOLUMNS , NSPACE and NLINES parameters, respectively\).
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   22 def
/textstring (
\/Fo\/ and \/Fc\/ are both put on the same scale of \/Fc\/, using the scale factor in LIST 5, and both these two
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
numbers may be modified by a scaling constant before they are printed. \(The SCALE parameter\). However,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
all the values of both \/Fo\/ and \/Fc\/ must be less than 10000 when they are printed. 
) def
Write
/left  118 def /ipflag    1 def /numspace   20 def
/textstring (
LIST 28 is used for checking whether or not to print a reflection. Remember that if LIST 28 was used to
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   12 def
/textstring (
reject some reflections when structure factors were last calculated, removing these restrictions before
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
printing LIST 6 will mean that some reflections will have incorrect values of Fc and phase. 
) def
Write
/left leftmargin def 
/instr (\\REFLECTIONS INPUT=) def Instruction                                                                                                                                                                                                                                                               
/left leftmargin indent add indent add def
/instr (INPUT) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Indicates which reflection list to use. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      6      Default) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      7      Alternative reflection list) def Literal                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (LAYOUT NCOLUMNS= NLINES= INSET= NSPACE= SCALE= NCHARACTER=) def Instruction                                                                                                                                                                                                                         
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive defines how the reflection data is to be printed. 
) def
Write
/left leftmargin indent add indent add def
/instr (NCOLUMNS=) def Instruction                                                                                                                                                                                                                                                                          
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter indicates the number of columns of reflection data to be printed across the page. If
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
this parameter is omitted, a default value of 3 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (NLINES=) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter indicates how many lines should be on each page of output. If this parameter is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
omitted a default value of 52 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (INSET=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter indicates how many blank spaces should be inset at the beginning of each line. If this
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter is omitted a default value of 30 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (NSPACE=) def Instruction                                                                                                                                                                                                                                                                            
Newpage
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter indicates the number of spaces separating successive columns across the page. If this
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
parameter is omitted a default value of 3 is assumed, which means that each column occupies 21
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
characters across the page. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALE=) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter indicates the scaling constant by which \/Fo\/ and \/Fc\/ should be multiplied before
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
they are printed, after they have been put on the same scale \(the scale of \/Fc\/\). If this parameter is
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
omitted, a default value of 10 is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (NCHARACTER=) def Instruction                                                                                                                                                                                                                                                                        
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
This parameter indicates the total number of printing positions on the output device. If this
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
parameter is omitted, a default value of 120 is assumed. 
) def
Write
/left leftmargin indent add def 
/instr (OUTPUT PRINT PUNCH LIST28) def Instruction                                                                                                                                                                                                                                                          
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive defines where the reflection data is to be printed. 
) def
Write
/left leftmargin indent add indent add def
/instr (PRINT=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This has two allowed values :- 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( NO       No output is sent to the listing file) def Literal                                                                                                                                                                                                                                               
/litstring 
( YES      Output is sent to the listing file) def Literal                                                                                                                                                                                                                                                  
LitBlank
/left leftmargin indent add indent add def
/instr (PUNCH=) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This has two allowed values :- 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      NO       No output is sent to the punch file) def Literal                                                                                                                                                                                                                                            
/litstring 
(      YES      Output is sent to the punch file) def Literal                                                                                                                                                                                                                                               
LitBlank
Blank
/secttext (Summary of data lists - \\SUMMARY) def Section                                                                                                                                                                                                                                                   
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\SUMMARY OF= TYPE= LEVEL=) def Literal                                                                                                                                                                                                                                                                   
Blank
/litstring 
( \\SUMMARY LIST 5 HIGH) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( \\SUMMARY EVERYTHING) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   19 def
/textstring (
This command produces a summary on the terminal of the contents of a list. Use \\PRINT if you need full
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
details. 
) def
Write
Blank
/left leftmargin def 
/instr (\\SUMMARY OF= TYPE= LEVEL=) def Instruction                                                                                                                                                                                                                                                         
/left leftmargin indent add indent add def
/instr (OF) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
LIST Default, also requires TYPE to be set EVERYTHING 
) def
Write
Blank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The value EVERYTHING generates a summary of all LISTS. 
) def
Write
/left leftmargin indent add indent add def
/instr (TYPE) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This parameter requires a list type number if the previous parameter was 'LIST" 
) def
Write
/left leftmargin indent add indent add def
/instr (LEVEL) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Some lists may be listed in more or less detail. 
) def
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
OFF LOW MEDIUM Default HIGH 
) def
Write
Blank
/left leftmargin indent add def 
/instr (\\SUMMARY 6) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
Unlike all the other SUMMARIES, which only generate readable output, SUMMARY 6 computes the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
conventional R on the basis of the current Fo, Fc and LIST 28 \(section LIST28\), and updates the value
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
stored in LIST 6 \(section LIST06 \) and LIST30 \(section LIST30 \). The weighted R is not affected. 
) def
Write
Blank
Blank
/secttext (CIF lists - \\CIF) def Section                                                                                                                                                                                                                                                                   
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
Data can be produced in CIF format for direct deposition at CCDC or submission to journals. The required
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
information is taken from several lists, including LIST 30 \(see section LIST30 \). F000, Mu etc are also
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
computed and inserted in LIST 30. 
) def
Write
Blank
/left leftmargin def 
/instr (\\CIF) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
There are no qualifiers. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
See \\PARAMETERS and \\REFLECTIONS for the CIF printing of parameters and reflections . 
) def
Write
Blank
/left leftmargin indent add def 
/instr (CheckCIF) def Instruction                                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
CheckCIF and other validators are continuously updated to meet the changing needs of the community.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
It is unlikely that a CRYSTALS .cif will pass all checks first time, and edits may be necessary to
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
accommodate special situations. Some of these have been foreseen, and the .cif contains possible
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
alternative texts as 'comments'. These can be found by searching for the text 'choose'. 
) def
Write
/left leftmargin indent add def 
/instr (References) def Instruction                                                                                                                                                                                                                                                                         
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The SCRIPT directory contains two text files that contain information copied into the cif file. The user
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
may edit them. 
) def
Write
/left leftmargin indent add indent add def
/instr (Refcif.dat) def Instruction                                                                                                                                                                                                                                                                         
/left  138 def /ipflag    0 def /numspace   23 def
/textstring (
This file is copied in its entirety to the head of the cif file. If it is edited, care must be taken to follow
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
the rules about text delimiters. 
) def
Write
/left leftmargin indent add indent add def
/instr (Reftab) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
This is a loosely formatted file containing the references to be transcribed into the cif. 
) def
Write
/left  148 def /ipflag    1 def /numspace   21 def
/textstring (
Every reference is composed of 2 parts - a short text used as a data item in the cif, and the full
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
reference. The two parts must be kept together, be separated from each other by a blank line, and be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
separated from any other item by a blank line. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      n  a four-digit number giving the number of references to follow.) def Literal                                                                                                                                                                                                                       
/litstring 
(         Other text on the line is ignored.) def Literal                                                                                                                                                                                                                                                   
/litstring 
(Next items repeated 'n' times:) def Literal                                                                                                                                                                                                                                                                
/litstring 
(      m  a three digit number preceded by a 'hash' symbol used as an) def Literal                                                                                                                                                                                                                          
/litstring 
(         identifier for the reference. The numbers must be unique, not) def Literal                                                                                                                                                                                                                        
/litstring 
(         necessarily in any order, with the largest one equal to 'n') def Literal                                                                                                                                                                                                                          
Blank
/litstring 
(      The full reference. References are put in the file in alphabetic) def Literal                                                                                                                                                                                                                        
/litstring 
(      order.) def Literal                                                                                                                                                                                                                                                                                  
LitBlank
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
Items 001 to 004 are associated with the keywords 'unknown' for the corresponding items in LIST
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
30 \(see section LIST30 \), and thus enable the user to insert their own references. Don't forget to
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
move them to their correct alphabetical place. 
) def
Write
/left leftmargin indent add def 
/instr (e.s.d.s) def Instruction                                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
The esds output in CIF files try to follow the 'Rule of 19', as requested by Acta Cryst. Syd Hall, former
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Editor for Acta C, summarised the rule as follows: 
) def
Write
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
'This method of handling the su \(esd\) values has been in force with Acta since about 1984
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
apparently. In my time it came up for discussion about two years ago \(1996\) and after much to-ing and
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
fro-ing it was readopted as the preferred level of precision for su's. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
What it means is as follows.... 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\(1\) if one adopts esd values to one digit precision \(rule of 9\) the values) def Literal                                                                                                                                                                                                                
Blank
/litstring 
(      5.548\(1\)      1.453\(2\)  3.921\(3\)  1.2287\(8\)  are acceptable.) def Literal                                                                                                                                                                                                                    
Blank
/litstring 
(\(2\) if one permits two digits precision with a limit of 19 \(rule of 19\)...) def Literal                                                                                                                                                                                                                
Blank
/litstring 
(      5.5483\(9\)     1.4532\(16\)  3.921\(3\)  1.2287\(8\)  are acceptable.) def Literal                                                                                                                                                                                                                  
Blank
/litstring 
(\(3\) if one permits two digits precision with a limit of 29 \(rule of 29\)...) def Literal                                                                                                                                                                                                                
Blank
/litstring 
(      5.5483\(9\)     1.4532\(16\)  3.9214\(28\)  1.2287\(8\)  are acceptable.) def Literal                                                                                                                                                                                                                
Blank
LitBlank
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
The object of this approach is to provide a more consistent distribution of precision across all values.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
These particular matters are not really my responsibility but we try to conform to recommendation of
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
the nomenclature people. This is one such occasion.' 
) def
Write
Blank
/secttext (Graphics - CAMERON) def Section                                                                                                                                                                                                                                                                  
Blank
/left leftmargin def 
/instr (CAMERON) def Instruction                                                                                                                                                                                                                                                                            
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
The graphics module CAMERON is part of the graphical user interface, and can only be started from the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
GUI. Like CRYSTALS, a sub-set of the possible commands are packaged up into menus, but the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
advanced full potential is still available from the command line. There is a separate guide for CAMERON 
) def
Write
/left  128 def /ipflag    1 def /numspace   17 def
/textstring (
On exit from CAMERON the current image of the structure is padded back to CRYSTALS in the file
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
CAMERON.L5. This contains all and only the atoms last displayed by CAMERON. Be careful - it could
) def
/last 0 def 
WriteCalc
/textstring (CAMERON.L5. This contains ) def WritePart
/textstring (all ) def
WriteBold
/textstring (and ) def WritePart
/textstring (only ) def
WriteBold
/textstring (the atoms last displayed by CAMERON. Be careful - it could) def WritePart
/ypos ypos linegap sub def
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
be a packing diagram! 
) def
Write
Blank
Blank
Blank
/title (               TWINNED CRYSTALS) def                                                                                                                                                                                                                                                                
/banner (TWINNED CRYSTALS) def                                                                                                                                                                                                                                                                              
Newpage
/chaptext (Twinned Crystals) def                                                                                                                                                                                                                                                                            
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
/secttext (Twinning - introduction) def Section                                                                                                                                                                                                                                                             
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The terminology in articles on twinning is complicated and sometimes contradictory, with the same term
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
being used in different contexts by different authors. We shall use the following terms, based upon
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
observations made from the whole reciprocal lattice. 
) def
WriteCalc
/textstring (observations made from the ) def WritePart
/textstring (whole ) def
WriteBold
/textstring (reciprocal lattice. ) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
It is assumed that sufficient reflections are measured to give a complete coverage of the asymmetric part
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
of the r.l. for at least one \(called the major\) component of the twinned crystal. 
) def
Write
/left leftmargin def 
/instr (TLQS twins) def Instruction                                                                                                                                                                                                                                                                         
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
Some, but possibly not all, of the reflections from the major component contain contributions from other
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   12 def
/textstring (
twin components. Overlap is controlled by accidental relationships between cell parameters. If the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
relationship is very exact, so that all reflections are overlapped, the sample is a pseudo TLS twin. 
) def
WriteCalc
/textstring (relationship is very exact, so that all reflections are overlapped, the sample is a ) def WritePart
/textstring (pseudo ) def
WriteBold
/textstring (TLS ) def
WriteBold
/textstring (twin. ) def WritePart
/ypos ypos linegap sub def
/left leftmargin def 
/instr (TLS twins) def Instruction                                                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   12 def
/textstring (
Every reflection from the major component contains a constant fractional contribution from other
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
components. The overlap is controlled by the crystal class rather than accidental relationships between cell
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
parameters. 
) def
Write
/left leftmargin indent add def 
/instr (TLS twins - Class I) def Instruction                                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
Except for the effect of anomalous dispersion, the Laue symmetry of the diffracion pattern is the same
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
as that of an un-twinned crystal. 
) def
Write
/left leftmargin indent add def 
/instr (TLS twins - Class II) def Instruction                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
The Laue symmetry of the diffracion pattern is not the same as that of an un-twinned crystal. 
) def
WriteCalc
/textstring (The Laue symmetry of the diffracion pattern is ) def WritePart
/textstring (not ) def
WriteBold
/textstring (the same as that of an un-twinned crystal. ) def WritePart
/ypos ypos linegap sub def
Blank
/secttext (Twinning Problems) def Section                                                                                                                                                                                                                                                                   
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
The analysis of twinned structures is complicated by several issues. 
) def
Write
Blank
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
1. Identification that the crystal is indeed twinned. 
) def
Write
Blank
/left leftmargin def 
/instr (Twinning - Initial clues) def Instruction                                                                                                                                                                                                                                                           
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
These may include may include: 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
a. Evident interpenetrating reciprocal lattices. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
b. Split reflections, with a varying intensity ratio. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
c. Systematic absences not conforming to any space group. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
d. The ratio of intensties of equivalent reflections from different samples is not constant. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Other clues are: 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
a. Failure to solve the structure from apparently good data. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
b. Irreducible R factor from seemingly good quality data. 
) def
Write
Blank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
c. Inexplicable strong residual peaks in the difference density map. 
) def
Write
Blank
/left leftmargin def 
/instr (Twinning - Data collection and processing) def Instruction                                                                                                                                                                                                                                          
Blank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
a. 
) def
Write
Blank
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
There is usually no difficulty in collecting data for TLS twins. For TLQS twins, each observation needs to
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
be tagged to indicate which twin components \(elements\) contribute to the observation. This may be simply
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
computed from the indices if the different lattices have a more-or-less exact relationship between them, of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
may need to be assigned more carefully if the twin obliquity causes only partial overlapping of some
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
reflections. For doublet spots, it is important that either the whole doublet is integrated \(tag '12'\), or the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
principal component is separated out \(tag '1'\). 
) def
Write
Blank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
b. 
) def
Write
Blank
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
There may be serious difficulties in determining the space group. Trial and error may be the only
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
procedure available. 
) def
Write
Blank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
c. 
) def
Write
Blank
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
The space group used for data reduction \(section DATAREDUC \) and merging may not be that of the
) def
/last 0 def 
Write
Newpage
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
major component. A Space group showing the symmetry of the twinned diffraction data should be used
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
initially. The correct space group should be used once data reduction is complete. 
) def
Write
Blank
/left leftmargin def 
/instr (Twinning - Structure solution) def Instruction                                                                                                                                                                                                                                                      
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
In general, structure solution is the major difficulty in working with twinned crystals. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
a. 
) def
Write
Blank
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
For TLQS structures, if a substantial number of reflections are from the major component only, the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
structure may solve by traditional methods. 
) def
Write
Blank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
b. 
) def
Write
Blank
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
For Class I TLS structures, structure solution is usually straight forward, the components of the twin
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
differing only by the effects of anomalous scattering. Such twins \(merohedral twins, or twinning by
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
inversion\) can be processed without further reference to this part of the manual. All that needs to be
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
refined is the Flack enantiopole parameter. See the main chapter on refinement. 
) def
Write
Blank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
c. 
) def
Write
Blank
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
For Class II TLS structures, if the twin ratio is far from 50:50, the structure may solve by traditional
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
methods. 
) def
Write
Blank
/left leftmargin def 
/instr (Twinning - Structure Refinement) def Instruction                                                                                                                                                                                                                                                    
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
If the space group, trial structure, twin law and reflection components are known, this is straight forward.
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
The sum of the twin fractions must be 1.0 
) def
Write
Blank
/left leftmargin def 
/instr (Twin Data stored by CRYSTALS) def Instruction                                                                                                                                                                                                                                                       
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
For a twinned crystal the following equation holds. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      Fsq\(obs\) = v1.Fsq\(1\) + v2.Fsq\(2\) ....) def Literal                                                                                                                                                                                                                                             
LitBlank
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
and similarly for F\(calc\). The v\(i\) are the volume fractions of the components contributing to the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
observation. A Fourier synthesis using \/Fobs\/ as coefficient is meaningless, since the phase alpha\(calc\)
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
will belong to only one of the components. The terms needed for Fourier and other calculations are
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Fcalc\(1\), alpha\(1\) Fobs.vol-fract\(1\), i.e. only that contribution to Fo due to the principal element. 
) def
Write
/left  128 def /ipflag    1 def /numspace   14 def
/textstring (
For a twin with two components, each observation may contain a contribution from each component,
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
or from both. The reflections have to be 'tagged' to indicate which components are contributing, the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
ELEMENT coefficient in LIST 6 \(section LIST06 \) 
) def
Write
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
For a TLS twin, every observation contains a contribution from both components \(though if it is a
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
systematic absence for one component, the contribution will be zero\). Since the tagging is the same for
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
every reflection, it can be inserted automatically by CRYSTALS 
) def
Write
/left  128 def /ipflag    1 def /numspace   14 def
/textstring (
For a TLQS twin, some observations will contain a contribution from the principal component, and
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
some from both components, giving ELEMENT tags of '1' and '12' respectively. If additional
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
observations have been made based on the reciprocal lattice of component 2, and are indexed with respect
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
to lattice 2, they are given the tag '2'. If any of these also contain a contribution from component 1, the tag
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
will be '21'. 
) def
Write
/left  128 def /ipflag    1 def /numspace   18 def
/textstring (
Example 1. An orthorhombic space group with a~b, twinned by interchange of 'a' and 'b'. If 'a' is very
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
similar to 'b', every observation 'hkl' will overlap with twin component 'khl', and the ELEMENT tag will
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
be '12', the default. If a systematic absence from element 1 falls on element 2, the reflection should not be
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
eliminated during data reduction, and will have the tag '12', even though the contrinbution from 1 is zero. 
) def
Write
/left  128 def /ipflag    1 def /numspace   16 def
/textstring (
Example 2. A monoclinic crystal with 2cCos\(beta\)\/a about 1\/3. Twinning by a 2 fold rotation about 'a'
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
gives a twin law 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(        1   0   0) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(        0  -1   0) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(      -1\/3  0  -1) def Literal                                                                                                                                                                                                                                                                            
LitBlank
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
Overlap of reflections from both components will only occur when 'h' = 3n, giving the ELEMENT tag
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
'12'. If the lattice is only sampled at r.l. points corresponding to the principal indexing, reflections with
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
'h' # 3n will have the tag '1'. 
) def
Write
Blank
/left leftmargin def 
/instr (Twinning - LISTS affected) def Instruction                                                                                                                                                                                                                                                          
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(LIST 5  - Parameters: the number of twin elements and their values must be set.) def Literal                                                                                                                                                                                                               
/litstring 
(LIST 6  - Reflections: the observed twinned data must be stored as \/FOT\/, and th) def Literal                                                                                                                                                                                                            
/litstring 
(          twin element tags be set.) def Literal                                                                                                                                                                                                                                                           
/litstring 
(LIST 12 - Constraint matrix: the twin elements must be refined, and possibly con) def Literal                                                                                                                                                                                                              
/litstring 
(LIST 13 - Experimental info: the key CRYSTAL TWIN=YES must be set.) def Literal                                                                                                                                                                                                                            
/litstring 
(LIST 16 - Restraints: the twin elements may be restrained.) def Literal                                                                                                                                                                                                                                    
/litstring 
(LIST 25 - This contains the twin laws themselves.) def Literal                                                                                                                                                                                                                                             
LitBlank
/left leftmargin def 
Newpage
/instr (Twin List 5) def Instruction                                                                                                                                                                                                                                                                        
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
The number of twin elements and their values must be given. Currently, the number of elements and their
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
starting values cannot be input in \\EDIT \(though values can be changed later\). Punch LIST 5, edit it, and
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
re-input it, or use the SCRIPT EDLIST5. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\LIST 5) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(READ NATOM=  NELEMENT=) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(ELEMENT value\(1\) value\(2\) ...) def Literal                                                                                                                                                                                                                                                             
/litstring 
(ATOM ..........) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(......) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
/left leftmargin def 
/instr (Twin List 6) def Instruction                                                                                                                                                                                                                                                                        
Blank
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
For TLQS twins, the element tags \(section LIST06 \) really depend upon exact experimental conditions,
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
and should be computed by the data collection software. If a reflection is entered without a twin element
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
tag \(eg a SHELX HKL 4 file\), CRYSTALS tries to compute the tag from the twin laws as follows: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      h      the index with respect to LIST 1 \(cell\) and LIST 2 \(space group\)) def Literal                                                                                                                                                                                                             
/litstring 
(             \(this is the index in LIST 6\)) def Literal                                                                                                                                                                                                                                                  
/litstring 
(      T      The twin law matrix.) def Literal                                                                                                                                                                                                                                                             
/litstring 
(      n      the nominal index for the twinned reflection.) def Literal                                                                                                                                                                                                                                    
/litstring 
(             n = T.h) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      d      the difference between an exact lattice point and the) def Literal                                                                                                                                                                                                                            
/litstring 
(             generated point.) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(             n-nint\(n\)) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(      s      The length**2 of the difference vector, in A-2.) def Literal                                                                                                                                                                                                                                  
Blank
LitBlank
/left  128 def /ipflag    1 def /numspace   15 def
/textstring (
If 's' is less than the TWINTOLERANCE given on the LIST 6 MATRIX directive, the twinned
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
reflection is regarded as falling upon a primary element reflection, and the element tag is updated to
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
indicate this. This method is only an approximation, but may help to make otherwise useless data useable.
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
LIST 13 \(section LIST13 \) will be automatically updated to indicate that twinned data are being refined. 
) def
Write
Blank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
a\)Analysis was started as untwinned, and the user wishes to convert to a twinned refinement 
) def
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
The twin laws must be entered and CRYSTALS instructed to convert the reflection list to a twinned list. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\LIST 25) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      READ NELEMENT=2) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(      MATRIX 1 0 0  0 1 0  0 0 1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(      MATRIX 0 1 0  1 0 0  0 0 1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\LIST 6) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      READ TYPE=TWIN) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(      MATRIX TWINTOL=.001) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
Blank
LitBlank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
b\)Crystal identified as twinned, and data reduction, sorting and merging done outside of CRYSTALS 
) def
Write
Blank
/left  128 def /ipflag    1 def /numspace   19 def
/textstring (
If the reflection data has been preprocessed so that it is a full, unique, set for the corret space group,
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
then the correct space group should be entered, and the reflections input as FOT directly. This tells
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
CRYSTALS that the data is twinned. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      \\LIST 25) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(      READ NELEMENT=2) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(      MATRIX 1 0 0  0 1 0  0 0 1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(      MATRIX 0 1 0  1 0 0  0 0 1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(      \\OPEN HKLI TWINREF.HKL) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(      \\LIST 6) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(      READ   F'S=FSQ  NCOEF = 5  TYPE = FIXED CHECK = NO) def Literal                                                                                                                                                                                                                                      
/litstring 
(      INPUT H K L \/FOT\/ SIGMA\(\/FO\/\)) def Literal                                                                                                                                                                                                                                                     
/litstring 
(      FORMAT \(3F4.0,2F8.0\)) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(      STORE NCOEF=9) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(      OUTPUT   INDICES \/FO\/ SIGMA\(\/FO\/\) \/FOT\/ \/FC\/ SQRTW ELEMENT) def Literal                                                                                                                                                                                                                    
/litstring 
(      CONTINUE RATIO\/JCODE CORRECT) def Literal                                                                                                                                                                                                                                                           
/litstring 
(      MATRIX TWINTOL=.001) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(      END) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
Blank
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
c\)Data reduction, sorting and merging to be done in CRYSTALS 
) def
Write
Blank
/left  128 def /ipflag    1 def /numspace   15 def
/textstring (
During initial data reduction \(section DATAREDUC \) the crystal must be given as untwinned in LIST
) def
/last 0 def 
WriteCalc
/textstring (During initial data reduction \(section DATAREDUC \) the crystal must be given as ) def WritePart
/textstring (untwinned ) def
WriteBold
/textstring (in LIST) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
13 \(section LIST13 \), and the 'space group' should be that of the Laue Class of the intensity data, so that
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
the symmetry of the data is preserved. In general, systematic absences should be preserved, unless
) def
/last 0 def 
Write
Newpage
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
centring of the cell matches for all twin components. Twin elelemt tags may be provided by an external
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
program, or computed by CRYSTALS. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
If there are special ELEMENT tags, use something like the following: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\OPEN HKLI twin.hkl) def Literal                                                                                                                                                                                                                                                                          
/litstring 
(\\LIST 6) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(READ   F'S=FSQ  NCOEF = 6  TYPE = FIXED CHECK = NO) def Literal                                                                                                                                                                                                                                            
/litstring 
(INPUT H K L \/FO\/ SIGMA\(\/FO\/\) ELEMENTS) def Literal                                                                                                                                                                                                                                                   
/litstring 
(FORMAT \(3F4.0, 2F8.0, F3.0\)) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(STORE NCOEF=7) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(OUTPUT INDICES \/FO\/ SIGMA\(\/FO\/\) ELEMENTS RATIO\/JCODE CORRECTIONS SERIAL) def Literal                                                                                                                                                                                                                
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
After initial processing, LIST 13 \(section LIST13 \) should be changed to twinned, the correct space group
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
entered, and the value of the observed structure factor stored as FOT, the Total or Twinned structure
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
factor. This is done by a special call to the LIST 6 instruction \(which also sets the TWIN flag in LIST 13\). 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\LIST 6) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(READ TYPE=TWIN) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(MATRIX TWINTOL=.001) def Literal                                                                                                                                                                                                                                                                           
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
Blank
/left leftmargin def 
/instr (TWIN LIST 13) def Instruction                                                                                                                                                                                                                                                                       
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
The keyword TWINNED must be set to YES for structure factor calculations. Because different
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
components of a twin will probably have different extinction corrections, refinement of extinction is
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
deprocated for twins. CRYSTALS prints a warning, then lets you continue at your own risk. The special
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
use on the LIST 6 command \(above\) will update LIST 13 automatically. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\LIST 13) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(....) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
(CRYSTALS FRIEDEL=NO  TWIN=YES  EXTINCTION=NO) def Literal                                                                                                                                                                                                                                                  
LitBlank
/left leftmargin def 
/instr (Twin List 12) def Instruction                                                                                                                                                                                                                                                                       
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
If all the element scale factors are refined simultaneously with the overall scale factor, the calculation will
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
be singular. In general, the sum of the element scale factors is held at unity. For only two twin
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
componenets, this can be done in LIST 12 as a constraint. For more, it can be done in LIST 16 as a
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
restraint. The sum of the elements in input to LIST 5 should be unity. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\LIST 12) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(FULL ........) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(EQUIVALENCE ELEMENT\(1\) ELEMENT\(2\)) def Literal                                                                                                                                                                                                                                                         
/litstring 
(WEIGHT -1 ELEMENT\(2\)) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
/left leftmargin def 
/instr (Twin List 16) def Instruction                                                                                                                                                                                                                                                                       
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
The sum of the element scale factors can be restrained to unity in LIST 16. In this case, they must all be
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
freely refined in LIST 12. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\LIST12) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(FULL ........) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(CONTINUE ELEMENT SCALES) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(\\LIST 16) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(SUM .0001 ELEMENT SCALES) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
/secttext (SORTING TWINNED STRUCTURE DATA  -  \\REORDER) def Section                                                                                                                                                                                                                                        
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
For a twinned structure, after the data have been merged, it is advisable to re-sort the reflections, placing
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
observations that contain contributions from elements with the same indices adjacent in the new LIST 6. 
) def
Write
/left leftmargin def 
/instr (\\REORDER) def Instruction                                                                                                                                                                                                                                                                          
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
This directive initiates the re-sorting of reflections for a twinned structure. It is IMPERATIVE that the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
previous command has put the reflections on the disc. This is automatic if input is via a \\LIST 6 command
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
\(section LIST06 \) or you can use the \\LIST 6 READ TYPE=TWIN command. 
) def
Write
/left leftmargin indent add def 
/instr (STORE MEDIUM=) def Instruction                                                                                                                                                                                                                                                                      
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive determines the output medium of the new LIST 6. 
) def
Write
/left leftmargin indent add indent add def
/instr (MEDIUM) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   16 def
/textstring (
This parameter selects the output medium of the new LIST 6. The allowed values for this parameter
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
are : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      M\/T) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(      DISC   -  DEFAULT VALUE.) def Literal                                                                                                                                                                                                                                                                
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default output medium is usually to disk. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Newpage
/litstring 
(\/REORDER) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
/left leftmargin def 
/instr (Twins - backward compatability) def Instruction                                                                                                                                                                                                                                                     
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(Note that the key \/FOT\/ can be given in the initial data reduction if the) def Literal                                                                                                                                                                                                                   
/litstring 
(crystal is also marked as twinned in LIST 13 \(section   LIST13 \), and) def Literal                                                                                                                                                                                                                       
/litstring 
(the observed intensity) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(input as \/FOT\/. This is preserved for backwards compatibility.) def Literal                                                                                                                                                                                                                              
LitBlank
/left leftmargin def 
/instr (Twins - Worked Example) def Instruction                                                                                                                                                                                                                                                             
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
The data were provided by Simon Parsons, for a TLQS twin, where the bulk of the data is from only one
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
component. For reciprocal lattice layers with h=3n, there is overlap from the second twin component. The
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
'elelent keys' are thus '12' for reflections with h=3n, otherwise '1'. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
Sections of reflection file 'example.hkl' 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(  -6   0   0    2.16    1.08  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -6   0  -1   -0.47    0.93  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -6   0  -2   24.98    1.63  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(......) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(  -6  -2   0    1.64    0.95  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -6  -2  -1    8.40    1.06  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -6  -2  -2    3.33    1.18  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -5   5   1   10.61    1.22   1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -5   5   2    0.75    0.96   1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(........) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(  -4   0   3   -0.45    0.63   1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -4   0   4    4.73    0.82   1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -4   0   5   -0.78    0.71   1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -4   0   6   48.40    1.69   1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -4   0   7    0.12    0.68   1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -4   0   8   -0.35    0.83   1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -3  -7   0    7.68    1.24  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -3  -7  -1   13.11    1.45  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(  -3  -7  -2   13.89    1.36  12) def Literal                                                                                                                                                                                                                                                              
/litstring 
(.......) def Literal                                                                                                                                                                                                                                                                                       
LitBlank
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
The data can be processed in the true space group. LIST 6 \(reflection\) input includes the 'element keys'.
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
After data reduction, the data is stored as 'TWINNED' by the call to LIST 6 which saves the data in the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
.DSC file. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(\\  Input the cell parameters) def Literal                                                                                                                                                                                                                                                                 
/litstring 
(\\LIST 1) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(REAL 7.2847 9.74 15.231 90 94.386 90) def Literal                                                                                                                                                                                                                                                          
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Input the space group) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(\\SPACEGROUP) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(SYMBOL p 21\/n) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Input the experimental data) def Literal                                                                                                                                                                                                                                                               
/litstring 
(\\list 13) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(crystal  friedel = no twinned=no) def Literal                                                                                                                                                                                                                                                              
/litstring 
(cond wave=1.5418) def Literal                                                                                                                                                                                                                                                                              
/litstring 
(end) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Input the twin laws, including the identity matrix) def Literal                                                                                                                                                                                                                                        
/litstring 
(\\  which corresponds to the first component of the) def Literal                                                                                                                                                                                                                                           
/litstring 
(\\  twin, i.e. the one it was indexed on.) def Literal                                                                                                                                                                                                                                                     
/litstring 
(\\list 25) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(read nele=2) def Literal                                                                                                                                                                                                                                                                                   
/litstring 
(matrix 1 0 0 0 1 0 0 0 1) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(matrix 1 0 0 0 -1 0 -.33333 0 -1) def Literal                                                                                                                                                                                                                                                              
/litstring 
(end) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Input scattering factors \(list 3\) and cell contents) def Literal                                                                                                                                                                                                                                     
/litstring 
(\\  \(list 29\) using the composition command:) def Literal                                                                                                                                                                                                                                                
/litstring 
(\\COMPOSITION) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(CONTENTS c  48  h  44  s  4  o  4  n  4) def Literal                                                                                                                                                                                                                                                       
/litstring 
(SCATT  CRSCP:SCATT) def Literal                                                                                                                                                                                                                                                                            
/litstring 
(PROPER CRSCP:PROPERTIES) def Literal                                                                                                                                                                                                                                                                       
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Specify how the SFLS calculations should be done:) def Literal                                                                                                                                                                                                                                         
/litstring 
(\\LIST 23) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(MINIMISE  F-SQ=no) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(modify  anomalous=yes) def Literal                                                                                                                                                                                                                                                                         
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
Blank
Newpage
/litstring 
(\\  Input a whole model: scale parameter, twin element scales and) def Literal                                                                                                                                                                                                                             
/litstring 
(\\  the atom parameters.) def Literal                                                                                                                                                                                                                                                                      
/litstring 
(\\list 5) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(read natom = 5 nelem=2) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(overal scale=.2) def Literal                                                                                                                                                                                                                                                                               
/litstring 
(elem .5 .5) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
(atom s    1         1.0000    0.0398    0.9390    0.3740    0.3888) def Literal                                                                                                                                                                                                                            
/litstring 
(atom n    2         1.0000    0.0617    0.6708    0.1939    0.3428) def Literal                                                                                                                                                                                                                            
/litstring 
(atom o    3         1.0000    0.0460    0.6967    0.4265    0.5265) def Literal                                                                                                                                                                                                                            
/litstring 
(atom c    4         1.0000    0.0416    0.9097    0.0426    0.2936) def Literal                                                                                                                                                                                                                            
/litstring 
(atom c    5         1.0000    0.0317    0.7467    0.2938    0.3989) def Literal                                                                                                                                                                                                                            
/litstring 
(end) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Open a file on the device called 'HKLI') def Literal                                                                                                                                                                                                                                                   
/litstring 
(\\CLOSE HKLI) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
(\\OPEN HKLI example.hkl) def Literal                                                                                                                                                                                                                                                                       
Blank
/litstring 
(\\  Read data from that device into LIST 6 in the) def Literal                                                                                                                                                                                                                                             
/litstring 
(\\  specified format and leave space for the specified) def Literal                                                                                                                                                                                                                                        
/litstring 
(\\  keys.) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(\\list 6) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(READ   F'S=FSQ  NCOEF = 6  TYPE = FIXED CHECK = NO) def Literal                                                                                                                                                                                                                                            
/litstring 
(INPUT H K L \/FO\/ SIGMA\(\/FO\/\) ELEMENT) def Literal                                                                                                                                                                                                                                                    
/litstring 
(FORMAT \(3F4.0, 2F8.0,f4.0\)) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(STORE NCOEF=7) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
(OUTPUT INDICES \/FO\/ SIGMA\(\/FO\/\) RATIO\/JCODE CORRECTIONS SERIAL ELEMENT) def Literal                                                                                                                                                                                                                 
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Remove systematic absences and move hkl indices by symmetry so that) def Literal                                                                                                                                                                                                                       
/litstring 
(\\  they fall into a unique volume of reciprocal space:) def Literal                                                                                                                                                                                                                                       
/litstring 
(\\SYST) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(\\  Sort the reflections:) def Literal                                                                                                                                                                                                                                                                     
/litstring 
(\\SORT) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(\\  Merge adjacent reflections with the same indices:) def Literal                                                                                                                                                                                                                                         
/litstring 
(\\MERGE) def Literal                                                                                                                                                                                                                                                                                       
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Store the reflections and at the same time, guess the element) def Literal                                                                                                                                                                                                                             
/litstring 
(\\  key using the twin laws in L25 to predict if overlap is likely.) def Literal                                                                                                                                                                                                                           
/litstring 
(\\List 6) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
(read type=twin) def Literal                                                                                                                                                                                                                                                                                
/litstring 
(end) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Compute the scale factor) def Literal                                                                                                                                                                                                                                                                  
/litstring 
(\\SFLS) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(SCALE) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Set up the matrix of constraint \(aka the refinement) def Literal                                                                                                                                                                                                                                      
/litstring 
(\\  directives\):) def Literal                                                                                                                                                                                                                                                                             
/litstring 
(\\LIST 12) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
(FULL FIRST\(X'S, U[ISO]\) UNTIL C\(15\)) def Literal                                                                                                                                                                                                                                                       
/litstring 
(equivalence element\(1\) element\(2\)) def Literal                                                                                                                                                                                                                                                         
/litstring 
(weight -1 element\(2\)) def Literal                                                                                                                                                                                                                                                                        
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
Blank
/litstring 
(\\  Carry out one cycle of least squares refinement:) def Literal                                                                                                                                                                                                                                          
/litstring 
(\\SFLS) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
(REF) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
(END) def Literal                                                                                                                                                                                                                                                                                           
LitBlank
/left leftmargin def 
/instr (Twinning - Mathematical aspects) def Instruction                                                                                                                                                                                                                                                    
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
In a twinned crystal, two or more separate components or ELEMENTS contribute to the diffraction
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   14 def
/textstring (
pattern, and the observed intensities may contain contributions from any one of the possible twin
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
component In addition, the amount of each twin component present in a specified unit of volume is not
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
restricted, and in general will vary between different samples of the same material. 
) def
Write
/ipflag    1 def /left  128 def
/last 1 def 
/textstring (
The expression for an observed intensity in such a case is given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( It = v1*I1 + v2*I2 + . . + vn*In) def Literal                                                                                                                                                                                                                                                             
LitBlank
/left  118 def /ipflag    0 def /numspace   16 def
/textstring (
Where It is the total observed intensity to which N components contribute, Ii is the intensity of
) def
/last 0 def 
WriteCalc
/textstring (Where ) def WritePart
/textstring (It ) def
WriteItalic
/textstring (is the total observed intensity to which ) def WritePart
/textstring (N ) def
WriteItalic
/textstring (components contribute, ) def WritePart
/textstring (Ii ) def
WriteItalic
/textstring (is the intensity of) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    0 def /numspace   21 def
/textstring (
component i , and vi is the amount of component i present in a given volume. The vi are known as the
) def
/last 0 def 
WriteCalc
/textstring (component ) def WritePart
/textstring (i ) def
WriteItalic
/textstring (, and ) def WritePart
/textstring (vi ) def
WriteItalic
/textstring (is the amount of component ) def WritePart
/textstring (i ) def
WriteItalic
/textstring (present in a given volume. The ) def WritePart
/textstring (vi ) def
WriteItalic
/textstring (are known as the) def WritePart
/ypos ypos linegap sub def
/left  118 def /ipflag    0 def /numspace   15 def
/textstring (
'component scale factors', and are conventionally taken to be the amount of the given component present
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
in a unit volume of the crystal, so that : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( SUM\(vi\) = 1      over all the components.) def Literal                                                                                                                                                                                                                                                  
LitBlank
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
When a set of reflection data is handled for a twinned crystal, it is thus necessary to know which of the
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
possible components contribute to the current reflection, and to be able to generate the indices of each of
) def
/last 0 def 
Write
Newpage
/left  118 def /ipflag    0 def /numspace   18 def
/textstring (
the components from a set of indices given in a standard reference system. If the indices of an component
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
in its own reference system are given by the vector Hc and those in the standard system by H , the
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
necessary interconversion is given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Hc = R.H) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
R is a rotation matrix that describes the transformation of the indices. \(The generation of the various sets
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   19 def
/textstring (
of indices can be thought of as a rotation centred on the origin\). The indices Hc are of necessity integers,
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
but the components of H may in general take any value. 
) def
Write
/left  128 def /ipflag    1 def /numspace   13 def
/textstring (
The interconversion of atomic coordinates between the various reference systems in a twinned crystal
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
can also be expressed in terms of R : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Hc[T].Xc = H[T].X      for any component.) def Literal                                                                                                                                                                                                                                                    
LitBlank
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
Where X is the coordinate vector for any atom in the standard reference system, Xc is the coordinate
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
vector for the same atom in the reference system for one of the components and H[T] indicates H
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
transposed. The above expression may be rewritten as : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( H[T].R[T].Q.X = H[T].X) def Literal                                                                                                                                                                                                                                                                       
LitBlank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Where Q is the matrix that converts the atomic coordinates. Therefore : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( R[T].Q = I) def Literal                                                                                                                                                                                                                                                                                   
LitBlank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Where I is the unit matrix. The matrix Q is thus given by: 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Q = R[TI]) def Literal                                                                                                                                                                                                                                                                                    
LitBlank
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
Where R[TI] indicates R transposed and inverted. The coordinates therefore transform as : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( Xc = R[TI].X) def Literal                                                                                                                                                                                                                                                                                 
LitBlank
/left  128 def /ipflag    1 def /numspace   17 def
/textstring (
Before any reflections can be processed, the matrices R must be provided. These are given in LIST 25,
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   17 def
/textstring (
which must contain one matrix for each possible component. \(If the standard system is chosen as that of
) def
/last 0 def 
Write
/left  118 def /ipflag    0 def /numspace   20 def
/textstring (
component 1, for example, the first R matrix will be the unit matrix, which must be given as it is not
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
assumed\). 
) def
Write
Blank
Blank
/title (               Matrix Calculations) def                                                                                                                                                                                                                                                             
/banner (Matrix Calculations) def                                                                                                                                                                                                                                                                           
Newpage
/chaptext (Matrix Calculations) def                                                                                                                                                                                                                                                                         
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
/secttext (The Basic Matrix Calculator \\MATRIX) def Section                                                                                                                                                                                                                                                
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\MATRIX) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( A) def Literal                                                                                                                                                                                                                                                                                            
/litstring 
( B) def Literal                                                                                                                                                                                                                                                                                            
/litstring 
( MM) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( TM) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( MT) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( TT) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( TRANS) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( INV) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( EIG) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( ACC2A) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( ACC2B) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( EXECUTE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
( \\MATRIX) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( A 1 2 3 4 5 6 7 8 9) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( B 4 5 6 7 8 9 10 11 12) def Literal                                                                                                                                                                                                                                                                       
/litstring 
( MM) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
LitBlank
/left  118 def /ipflag    1 def /numspace   15 def
/textstring (
CRYSTALS contains a simple calculator for processing 3x3 matrices. Two matrices, A and B, can be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
input and operated on. The result is output to the screen and left in an accumulator. It can be transfered to A
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
or B for further operations. There is currently no interface to any stored crystallographic information. 
) def
Write
Blank
/left leftmargin def 
/instr (\\MATRIX) def Instruction                                                                                                                                                                                                                                                                           
Blank
Blank
/left leftmargin indent add def 
/instr (A) def Instruction                                                                                                                                                                                                                                                                                  
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Followed by the nine values for the matrix A by rows 
) def
Write
Blank
/left leftmargin indent add def 
/instr (B) def Instruction                                                                                                                                                                                                                                                                                  
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Followed by the nine values for the matrix B by rows 
) def
Write
Blank
/left leftmargin indent add def 
/instr (MM) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Accumulator = AxB 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TM) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Accumulator = A'xB 
) def
Write
Blank
/left leftmargin indent add def 
/instr (MT) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Accumulator = AxB' 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TT) def Instruction                                                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Accumulator = A'xB' 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TRANS) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Accumulator = A' 
) def
Write
Blank
/left leftmargin indent add def 
/instr (INV) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Accumulator = A-1 
) def
Write
Blank
/left leftmargin indent add def 
/instr (EIG) def Instruction                                                                                                                                                                                                                                                                                
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Accumulator = Eigenvectors of A 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ACC2A) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Matrix A = Accumulator 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ACC2B) def Instruction                                                                                                                                                                                                                                                                              
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Matrix B = Accumulator 
) def
Write
Blank
/left leftmargin indent add def 
/instr (EXECUTE) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
Forces execution of the last directive 
) def
Write
Blank
/title (               OBSOLETE COMMANDS) def                                                                                                                                                                                                                                                               
/banner (OBSOLETE COMMANDS) def                                                                                                                                                                                                                                                                             
Newpage
/chaptext (Obsolete Commands) def                                                                                                                                                                                                                                                                           
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
/secttext (Obsolete Commands) def Section                                                                                                                                                                                                                                                                   
/left  118 def /ipflag    1 def /numspace   13 def
/textstring (
The following Commands were available in earlier versions of CRYSTALS. They are retained for
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
compatibility reasons, but have been suppressed or superceeded by new commands. 
) def
Write
Blank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Blank
/litstring 
( Least squares best planes                      MOLAX) def Literal                                                                                                                                                                                                                                         
/litstring 
( Thermal displacement parameter analysis        ANISO) def Literal                                                                                                                                                                                                                                         
/litstring 
( Principal atomic displacement directions       AXES) def Literal                                                                                                                                                                                                                                          
/litstring 
( Structure factors for a group of trial models  TRIAL) def Literal                                                                                                                                                                                                                                         
Blank
LitBlank
/secttext (Least squares best planes and lines  -  \\MOLAX) def Section                                                                                                                                                                                                                                     
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\MOLAX INPUTLIST=) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( EXECUTE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( PUNCH) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( ATOMS  W\(1\)  SPECIFICATION\(1\)  W\(2\)  SPECIFICATION\(2\) .) def Literal                                                                                                                                                                                                                              
/litstring 
( PLOT) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( PLANE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( LINE) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( ANGLE  NP\(1\)  AND  NP\(2\)) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( EVALUATE  ATOM SPECIFICATIONS . . . .) def Literal                                                                                                                                                                                                                                                        
/litstring 
( REPLACE ATOM SPECIFICATIONS . . .) def Literal                                                                                                                                                                                                                                                            
/litstring 
( SAVE) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( QUIT) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\MOLAX) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( ATOM FIRST UNTIL LAST) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( PLANE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( SAVE) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
MOLAX is used for computing the principal axes of inertia through groups of atoms using the routines
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
described in Computing Methods in Crystallography, edited by J. S. Rollett, Pergamon Press, 1965, p67-68.
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
It can be used to compute best lines and planes, and produce simple line printer plots of the atoms. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
The best plane for a series of N atoms whose positions have varying reliability, such that they can be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
assigned weights, w\(1\), w\(2\), . . . w\(n\), is defined as that for which the sum of the squares of the distances
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
\(in angstroms\) of the atoms from the plane, multiplied by the weights, w\(i\), of the atomic positions, is a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
minimum. Note that the normal to the 'worst plane' is the 'best line', and if masses are used for weights,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
then the calculation gives the principal inertial axes. 
) def
Write
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
The atomic positions are taken from LIST 5, possibly modified by symmetry information, to compute
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
inertial axes, deviations of atoms from the planes or lines, and the angles between normals to these planes or
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
axes. Shape indices \(Mingos M.P. and Rohl A.L. J Chem Soc Dalton Trans \(1991\) 3419\) are computed. 
) def
Write
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
Each time a line or plane is computed, the direction cosines of the relevent axis are stored as AXIS
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
number 'n'. The angles between these axes can be computed. Three geometry indices are also computed.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
The geometry is best described by the index closest to unity. \(Mingos,D.P.M & Rohl,A.L., J.Chwm.Soc.
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
Dalton Trans \(1991\) pp 3419 - 3425\) 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
Immediate execution of a directive can be forced by issuing an EXECUTE directive. 
) def
Write
Blank
/left leftmargin def 
/instr (\\MOLAX INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                 
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      10) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (EXECUTE) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This forces the execution of preceding directives. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PUNCH) def Instruction                                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive causes the orthogonal coordinates of the atoms of any plane or line computed in
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
following tasks to be output to the 'punch' file. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ATOMS  W\(1\)  SPECIFICATION\(1\)  W\(2\)  SPECIFICATION\(2\) .) def Instruction                                                                                                                                                                                                                    
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This specifies atoms to be used in the calculation of the best plane. W\(1\) Is the weight assigned to the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
atoms contained in the first atom specification, W\(2\) is the weight assigned to the second group of
) def
/last 0 def 
Write
Newpage
/left  128 def /ipflag    0 def /numspace   22 def
/textstring (
atoms, and so on. If W\(1\) is omitted, a default value of 1 is used, but any other W\(I\) term applies to all
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
the atoms following it, until another W is found or the end of the directive is encountered. At least one
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
ATOM directive must precede each PLANE or PLOT directive. An ATOM directive will over-rule an
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
immediately preceding ATOM directive. If an input line is not long enough for the full atom list, use
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
CONTINUE. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PUNCH) def Instruction                                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive causes the orthogonal coordinates of the atoms of any plane or line computed or
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
EVALUATED in the current task to be output to the 'punch' file. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PLOT) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive, \(or PLANE or LINE\) must follow immediately after an ATOM directive and causes the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
calculation of inertial axes. Details of the computation are suppressed on the Monitor, but a line
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
drawing projected onto the best plane is produced. MOLAX Can thus be used as a means of displaying
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
some or all of the atoms in a structure. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (PLANE) def Instruction                                                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive, \(or LINE or PLOT\) must follow immediately after an ATOM directive and causes the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
calculation of a least squares best plane. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (LINE) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive, \(or PLANE or PLOT\) must follow immediately after an ATOM directive and causes the
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
calculation of a least squares best line. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ANGLE  NP\(1\)  AND  NP\(2\)) def Instruction                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   11 def
/textstring (
If present, thus directive must follow at least two ATOMS\/PLANE \(ATOMS\/LINE, ATOMS\/PLOT\)
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
directive sequences. It causes the program to calculate the angle between the axes with serial numbers
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
NP\(1\) and NP\(2\) . The AND must be present. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (EVALUATE  ATOM SPECIFICATIONS . . . .) def Instruction                                                                                                                                                                                                                                              
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
If present, this directive must appear after a PLANE, LINE or PLOT directive, and causes the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
co-ordinates of the atoms specified to be calculated and printed with respect to the least squares axial
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
system. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REPLACE ATOM SPECIFICATIONS . . .) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
if present, this directive must appear after a PLANE, LINE or PLOT directive, and causes the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
co-ordinates of the atoms specified to be modified so that they lie on the previously defined plane. The
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
LIST 5 in core is immediately updated, so that the new coordinates will be used for any subsequent
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
computation. A LIST 5 is only written to the disc on a satisfactory exit from MOLAX. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SAVE) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This directive causes the latest plane defining matrix and vector to be stored in LIST 20. A LIST 20 is
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
only written to the disc on a satisfactory exit from MOLAX. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (QUIT) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive abandons the calculation without modifying the disc LISTs. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\ these instructions define a plane) def Literal                                                                                                                                                                                                                                                         
/litstring 
( \\ involving n\(1\),n\(2\),c\(1\),c\(2\) and n\(3\) and) def Literal                                                                                                                                                                                                                                      
/litstring 
( \\ prints the co-ordinates of all the atoms with) def Literal                                                                                                                                                                                                                                             
/litstring 
( \\ respect to this plane.  the positions of the) def Literal                                                                                                                                                                                                                                              
/litstring 
( \\ nitrogen atoms have double weight) def Literal                                                                                                                                                                                                                                                         
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\MOLAX) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( ATOMS 2 N\(1\) UNTIL N\(3\)  1 C\(1\) C\(2\)) def Literal                                                                                                                                                                                                                                                 
/litstring 
( PLANE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( EVALUATE ALL) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( \\ this set of directives also calculates another plane,) def Literal                                                                                                                                                                                                                                     
/litstring 
( \\ printing only the co-ordinates of c\(5\) with respect to) def Literal                                                                                                                                                                                                                                  
/litstring 
( \\ the second plane.  the angle between the two planes) def Literal                                                                                                                                                                                                                                       
/litstring 
( \\ is then calculated) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( \\) def Literal                                                                                                                                                                                                                                                                                           
/litstring 
( ATOMS C\(1\) S\(1\) N\(1\)) def Literal                                                                                                                                                                                                                                                                   
/litstring 
( PLANE) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( EVALUATE C\(5\)) def Literal                                                                                                                                                                                                                                                                              
/litstring 
( ANGLE 1 AND 2) def Literal                                                                                                                                                                                                                                                                                
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
Newpage
/secttext (Thermal displacement parameter analysis  -  \\ANISO) def Section                                                                                                                                                                                                                                 
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ANISO INPUTLIST) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( EXECUTE) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( ATOMS   WEIGHT ATOM SPECIFICATIONS) def Literal                                                                                                                                                                                                                                                           
/litstring 
( CENTRE   X=, Y=, Z=) def Literal                                                                                                                                                                                                                                                                          
/litstring 
( REJECT   NV=) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( LIMITS   VALUE=   RATIO=) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( TLS) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( EVALUATE ATOM SPECIFICATIONS) def Literal                                                                                                                                                                                                                                                                 
/litstring 
( REPLACE ATOM SPECIFICATIONS . . .) def Literal                                                                                                                                                                                                                                                            
/litstring 
( SAVE) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( QUIT) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( AXES) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( DISTANCES  DL=   AL=) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( ANGLES  AL=) def Literal                                                                                                                                                                                                                                                                                  
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ANISO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( ATOM C\(1\) UNTIL C\(6\)) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( TLS) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( SAVE) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
This routine calculates the overall rigid-body motion tensors T, L, S \(Shoemaker and Trueblood, Acta
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
Cryst. B24, 63, 1968\) by a least-squares fit to the individual anisotropic temperature factor components,
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
together with librational corrections to bond lengths and angles. 
) def
Write
/left  118 def /ipflag    1 def /numspace   12 def
/textstring (
Shoemaker and Trueblood's conventions and reductions are followed throughout; in particular, the trace
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
of S, which is indeterminant, is set to zero. The program therefore determines 20 overall tensor components -
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the upper triangles of T and L together with the whole of S apart from S\(33\). 
) def
Write
/left  118 def /ipflag    1 def /numspace   16 def
/textstring (
Even when the trace-of-S singularity has been removed, however, the nature of the rigid body problem is
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
such that ill-conditioned and singular normal matrices are much more common than in structure refinement
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
and the program therefore proceeds via the eigenvalues and eigenvectors of the normal matrix. In most cases
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
the largest and smallest eigenvalues are output for inspection, but if the ratio of these quantities is less than
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
the LIMITing RATIO, a full eigenvalue\/vector listing is produced. Further, if any eigenvalue is itself less
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
than the LIMITing VALUE, the corresponding parameter combination is set to zero, thus removing the near-
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
singularity. These actions can be modified by the use of the LIMIT and REJECT directives described below. 
) def
Write
Blank
/left leftmargin def 
/instr (\\ANISO INPUTLIST) def Instruction                                                                                                                                                                                                                                                                  
/left leftmargin indent add indent add def
/instr (INPUTLIST) def Instruction                                                                                                                                                                                                                                                                          
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      10) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
Blank
/left leftmargin indent add def 
/instr (EXECUTE) def Instruction                                                                                                                                                                                                                                                                            
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
This causes immediate execution of the previous directive, otherwise directives are executed on input
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
of a new directive \(or END\). 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ATOMS   WEIGHT ATOM SPECIFICATIONS) def Instruction                                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This parameter specifies the set of atoms to be used for the following calculation. 
) def
Write
/left  138 def /ipflag    1 def /numspace   16 def
/textstring (
WEIGHT. The default weight of 1.0 is used for all atoms except those following a WEIGHT value.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
Any decimal number on the ATOM directive is taken as a weight and applied to any following atoms.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
A subsequent atom directive over rules all previous atom directives. If the full atom specification
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
cannot be got on one directive, use CONTINUE. The atom specifications are in the usual form with
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
symmetry operators and UNTIL sequences permitted. An ATOM directive resets the CENTRE its
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
default value, 0,0,0. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (CENTRE   X=, Y=, Z=) def Instruction                                                                                                                                                                                                                                                                
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive specifies the centre of libration, in crystal fractions, to be used in the original derivation
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
of the overall motion tensors. The program derives and uses a unique origin at a later stage in the
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
calculations. This directive is optional, the default centre being \(0,0,0\). If a centre of \(0,0,0\) is given or
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
set by default, the program computes and uses the mean position of the given atoms, INCLUDING any
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
which are isotropic, even though these are not used to compute TLS. The stored CENTRE is updated
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
during TLS, and a second TLS computation may be performed using this new value as CENTRE. This
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
may help stabilise certain forms of ill-conditioning. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REJECT   NV=) def Instruction                                                                                                                                                                                                                                                                       
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
Overrides normal action and sets the parameter combination corresponding to eigenvector number nv
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
to zero. Eigenvectors are numbered in ascending order of their eigenvalues, so that nv is in the range 1
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
to 20 inclusive and will usually have been obtained from a full eigenvalue\/vector listing produced in a
) def
/last 0 def 
Write
Newpage
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
previous run. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (LIMITS   VALUE=   RATIO= ) def Instruction                                                                                                                                                                                                                                                          
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
If an eigenvalue is less than VALUE or its size is less than RATIO * \(the next bigger\), it is eliminated
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
from the analysis. VALUE is currently .000001 and RATIO .01 . 
) def
Write
Blank
/left leftmargin indent add def 
/instr (TLS ) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This causes the TLS calculation to be initiated. It MUST have been preceded by an ATOM directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (EVALUATE ATOM SPECIFICATIONS ) def Instruction                                                                                                                                                                                                                                                      
/left  128 def /ipflag    0 def /numspace   17 def
/textstring (
This may be used after a successfull TLS calculation to list Ucalcs for the specified atoms. The atom
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
list is not modified. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (REPLACE ATOM SPECIFICATIONS . . .) def Instruction                                                                                                                                                                                                                                                  
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
If present, his directive must appear after a TLS directive, and causes the co-ordinates of the atoms
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
specified to be modified so that they have U's defined by the current T, L, and S matrices. The LIST 5
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
in core is immediately updated, so that the new coordinates will be used for any subsequent
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
computation if a new ATOM directive is issued. The updated LIST 5 is only written to the disc on a
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
satisfactory exit from ANISO. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (SAVE) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
This directive is optional. If it follows a TLS directive, it causes the latest L matrix and CENTRE to be
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
stored in LIST 20. If it follows an AXES directive, the direction cosines and centre if the ellipse FOR
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   20 def
/textstring (
THE LAST ATOM are stored in LIST 20. A LIST 20 is only written to the disc on a satisfactory exit
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
from ANISO. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (QUIT) def Instruction                                                                                                                                                                                                                                                                               
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive abandons the calculation without modifying the disc LISTs. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (AXES) def Instruction                                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   14 def
/textstring (
This directive \(like \\AXES\) computes the principal axis lengths and directions for the atoms specified
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
on a preceding ATOM directive. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (DISTANCES  DL=   AL=) def Instruction                                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   12 def
/textstring (
This directive calculates all interatomic distances less than DL angstroms with librational corrections.
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   19 def
/textstring (
If this directive is omitted, no distances are calculated; if DL is absent, a default value of 1.8 is inserted.
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
If AL is present, angles between atoms separated by less than AL angstroms are computed. 
) def
Write
Blank
/left leftmargin indent add def 
/instr (ANGLES  AL=) def Instruction                                                                                                                                                                                                                                                                        
/left  128 def /ipflag    0 def /numspace   15 def
/textstring (
This directive calculates angles between all bonds less than AL angstroms. If this directive is omitted,
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
no angles are calculated; if AL is absent, a default value of 1.8 is inserted. 
) def
Write
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
*********************** WARNING ************************* 
) def
WriteCalc
/textstring (*********************** ) def
WriteItalic
/textstring (WARNING ************************* ) def WritePart
/ypos ypos linegap sub def
Blank
/ipflag    1 def /left  138 def
/last 1 def 
/textstring (
The directive DISTANCE may only be followed by ATOM, EXECUTE, or END. 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\ANISO) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( ATOMS O\(12\) UNTIL LAST) def Literal                                                                                                                                                                                                                                                                     
/litstring 
( AXES) def Literal                                                                                                                                                                                                                                                                                         
/litstring 
( TLS) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
( DISTANCES) def Literal                                                                                                                                                                                                                                                                                    
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
Blank
Blank
/secttext (Principal atomic displacement directions  -  \\AXES) def Section                                                                                                                                                                                                                                 
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
( \\AXES INPUTLIST=) def Literal                                                                                                                                                                                                                                                                            
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
Blank
/litstring 
(\\AXES) def Literal                                                                                                                                                                                                                                                                                        
/litstring 
( END) def Literal                                                                                                                                                                                                                                                                                          
LitBlank
/left  118 def /ipflag    1 def /numspace   14 def
/textstring (
This routine calculates the magnitudes and directions of the principal axes of the atomic dispacement
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
ellipsoid of an anisotropic atom. Atoms which are isotropic are ignored. Atoms with a negative principal axis
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
generate a warning. The output gives the mean square displacement in angstroms squared along each of the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
principal axes, together with the direction cosines with respect to the orthogonalized axes and with respect to
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
the real cell axes. 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
This routine can also be called from \\ANISO to get the axes of specified atoms only. 
) def
Write
Blank
/left leftmargin def 
/instr (\\AXES INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                  
Newpage
/left  118 def /ipflag    0 def /numspace   13 def
/textstring (
This command initiates the routine for calculating the principal atomic vibration directions, and requires
) def
/last 0 def 
Write
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
no other directives. 
) def
Write
/left leftmargin indent add indent add def
/instr (INPUTLIST=) def Instruction                                                                                                                                                                                                                                                                         
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      5   -  Default value) def Literal                                                                                                                                                                                                                                                                    
/litstring 
(      10) def Literal                                                                                                                                                                                                                                                                                      
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The default value is 5. 
) def
Write
Blank
Blank
/secttext (Structure factors for a group of trial models  -  \\TRIAL) def Section                                                                                                                                                                                                                           
/left  118 def /ipflag    1 def /numspace   18 def
/textstring (
This procedure is currently unsupported. It is kept in the code because it offers an opportunity for a new
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
programmer to experiment with improved 'COST' functions. 
) def
Write
/left  118 def /ipflag    1 def /numspace   17 def
/textstring (
At some stage during a structure determination, the orientation of a group of atoms may be known, but
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
not their position in the unit cell. The routine described in this section provides a rapid method of calculating
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   22 def
/textstring (
structure factors for a group of atoms at a series of points that fall on a grid in the unit cell. The algorithm
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
used is similar to that employed in the slant fourier, \(see the section of the user guide on 'Fourier routines'\)
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
and is as follows : 
) def
Write
/ipflag    1 def /left  118 def
/last 1 def 
/textstring (
The A part of the structure factor for the reflection with indices given by the vector H may be written as : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       A\(H\) = SUM[ G.SUM[ COS2PI\(H'.S.X + H'.T\) ] ]) def Literal                                                                                                                                                                                                                                       
LitBlank
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
With a similar expression for the B part. \( G Is the required form factor, modified by the temperature factor
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
expression\). Conventionally, the inner sum runs over the various symmetry operators that define the space
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   18 def
/textstring (
group, and the outer sum runs over the number of atoms in the asymmetric unit. However, if the summation
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
order is changed, it is possible to accumulate sums for all the atoms for each symmetry position : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       P\(H,S\) = SUM[ G.COS2PI\(H'.S.X + H'.T\) ]) def Literal                                                                                                                                                                                                                                            
LitBlank
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
With a similar expression for Q\(H,S\) for the B part. It is now possible to use a recurrence relationship for P
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
and Q to give : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       P\(H,S,2\) = P\(H,S,1\)*2*COS2PI\(H'.S.DX\) - P\(H,S,0\)) def Literal                                                                                                                                                                                                                               
/litstring 
( and) def Literal                                                                                                                                                                                                                                                                                          
/litstring 
(       Q\(H,S,2\) = Q\(H,S,1\)*2*COS2PI\(H'.S.DX\) - Q\(H,S,0\)) def Literal                                                                                                                                                                                                                               
LitBlank
/left  108 def /ipflag    0 def /numspace   21 def
/textstring (
P\(H,S,0\) Is the original value of P for the symmetry position S for the reflection given by H . P\(H,S,1\) Is the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
corresponding value of P after a vector DX has been added to each set of coordinates, and P\(H,S,2\) is the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
corresponding term after a vector 2*DX has been added. Similar relationships hold for the Q terms. After the
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
initial eight cosine and sine terms have been calculated, it is possible to calculate structure factors very
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
rapidly as the group of atoms is moved about the unit cell, using the relationships given above. 
) def
Write
/left  118 def /ipflag    1 def /numspace   20 def
/textstring (
Apart from an array to hold each section through the unit cell, it is necessary to store the eight cosine and
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   15 def
/textstring (
sine terms, together with the three step vector cosines, for each reflection for each symmetry position.
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
Because this imposes certain storage limitations, it is necessary to restrict the number of reflections that are
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   20 def
/textstring (
used. In practice it is only the large reflections that must agree, and so the user is required to input a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   17 def
/textstring (
minimum Fo value, below which reflections are not used. The function that is displayed for each grid point
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
is given by : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(       SCALE*SUM[ Fo*Fc ]) def Literal                                                                                                                                                                                                                                                                     
LitBlank
/left  108 def /ipflag    0 def /numspace   14 def
/textstring (
Accordingly, the largest value printed represents the most likely solution. The SCALE term may be
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
calculated by the program to give numbers in a reasonable range, or input by the user. The time for each
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
calculation is proportional to the number of reflections used, the number of symmetry operators in LIST 2,
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   19 def
/textstring (
and the number of grid points calculated. \(A calculation in a non-centro space group takes twice as long as a
) def
/last 0 def 
Write
/left  108 def /ipflag    0 def /numspace   16 def
/textstring (
calculation in the corresponding centro space group\). The atoms to be moved around are taken directly from
) def
/last 0 def 
Write
/ipflag    0 def /left  108 def
/last 1 def 
/textstring (
LIST 5. 
) def
Write
/left leftmargin def 
/instr (\\TRIAL) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  118 def
/last 1 def 
/textstring (
This is the command which initiates the routine to calculate structure factors for a group of trial models. 
) def
Write
/left leftmargin indent add def 
/instr (MAP Fo-MIN SCALE MIN-RHO) def Instruction                                                                                                                                                                                                                                                           
/left  128 def /ipflag    0 def /numspace   16 def
/textstring (
This directive determines which reflections will be used in the calculations and how the map will be
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
printed. 
) def
Write
/left leftmargin indent add indent add def
/instr (Fo-MIN) def Instruction                                                                                                                                                                                                                                                                             
/left  138 def /ipflag    0 def /numspace   20 def
/textstring (
This parameter is the minimum value of Fo that a reflection must have if it is to be used \(this number
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
must be on the scale of Fo\). If this parameter is omitted, a value of zero is assumed. 
) def
Write
/left leftmargin indent add indent add def
/instr (SCALE) def Instruction                                                                                                                                                                                                                                                                              
/left  138 def /ipflag    0 def /numspace   19 def
/textstring (
If SCALE is equal to zero, its default value, the program will choose a scale factor that places all the
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   18 def
/textstring (
numbers on a reasonable scale for printing. If this parameter is greater than zero, the sum of Fo*Fc is
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   15 def
/textstring (
multiplied by SCALE before it is printed. \(The scale factor computed by the program is dependent
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
upon the origin chosen for the group of atoms, so that successive maps with different origins will be
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
on different scales, unless this parameter is specified for all the maps after the first\). 
) def
Write
/left leftmargin indent add indent add def
Newpage
/instr (MIN-RHO) def Instruction                                                                                                                                                                                                                                                                            
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
This parameter is a cut-off value, such that all numbers less than MIN-RHO are printed as zero. If
) def
/last 0 def 
Write
/left  138 def /ipflag    0 def /numspace   17 def
/textstring (
this parameter is absent, a default value of zero is assumed, which means that all the points are
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
printed. 
) def
Write
/left leftmargin indent add def 
/instr (DISPLACEMENT DELTA-X DELTA-Y DELTA-Z) def Instruction                                                                                                                                                                                                                                               
/left  128 def /ipflag    0 def /numspace   18 def
/textstring (
This directive defines a vector which is added to each set of coordinates in LIST 5 before the structure
) def
/last 0 def 
Write
/left  128 def /ipflag    0 def /numspace   13 def
/textstring (
factor calculation starts. DELTA-X , DELTA-Y And DELTA-Z thus correspond to an initial origin
) def
/last 0 def 
Write
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
shift for the group in LIST 5. 
) def
Write
/left leftmargin indent add indent add def
/instr (DELTA-X) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The shift along the x-direction. 
) def
Write
/left leftmargin indent add indent add def
/instr (DELTA-Y) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The shift along the y-direction. 
) def
Write
/left leftmargin indent add indent add def
/instr (DELTA-Z) def Instruction                                                                                                                                                                                                                                                                            
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The shift along the z-direction. 
) def
Write
/left  148 def /ipflag    1 def /numspace   14 def
/textstring (
The default values for these parameters are zero, indicating no initial origin shift before the
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
structure factor calculation. 
) def
Write
/left leftmargin indent add def 
/instr (DOWN NUMBER X-COMPONENT Y-COMPONENT Z-COMPONENT) def Instruction                                                                                                                                                                                                                                    
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
This directive specifies the printing down the page. 
) def
Write
/left leftmargin indent add indent add def
/instr (NUMBER) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of points to be printed down the page, for which there is no default value. 
) def
Write
/left leftmargin indent add indent add def
/instr (X-COMPONENT Y-COMPONENT Z-COMPONENT) def Instruction                                                                                                                                                                                                                                                
/left  138 def /ipflag    0 def /numspace   14 def
/textstring (
There are no default values for these parameters, which specify the fractional coordinate shift vector.
) def
/last 0 def 
Write
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The vector moves the group so that : 
) def
Write
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
/litstring 
(      X1 = X0 + X-COMPONENT) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      Y1 = Y0 + Y-COMPONENT) def Literal                                                                                                                                                                                                                                                                   
/litstring 
(      Z1 = Z0 + Z-COMPONENT) def Literal                                                                                                                                                                                                                                                                   
LitBlank
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
Where 1 and 0 define successive points down the page. 
) def
Write
/left leftmargin indent add def 
/instr (ACROSS NUMBER X-COMPONENT Y-COMPONENT Z-COMPONENT) def Instruction                                                                                                                                                                                                                                  
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
These are the corresponding values across the page. 
) def
Write
/left leftmargin indent add indent add def
/instr (NUMBER) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of points to be printed across the page, for which there is no default value. 
) def
Write
/left leftmargin indent add indent add def
/instr (X-COMPONENT Y-COMPONENT Z-COMPONENT) def Instruction                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
There are no default values for these parameters, which specify the fractional coordinate shift vector. 
) def
Write
/left leftmargin indent add def 
/instr (THROUGH NUMBER X-COMPONENT Y-COMPONENT Z-COMPONENT) def Instruction                                                                                                                                                                                                                                 
/ipflag    0 def /left  128 def
/last 1 def 
/textstring (
These are the values that define the change from section to section. 
) def
Write
/left leftmargin indent add indent add def
/instr (NUMBER) def Instruction                                                                                                                                                                                                                                                                             
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
The number of sections to be printed, for which there is no default value. 
) def
Write
/left leftmargin indent add indent add def
/instr (X-COMPONENT Y-COMPONENT Z-COMPONENT) def Instruction                                                                                                                                                                                                                                                
/ipflag    0 def /left  138 def
/last 1 def 
/textstring (
There are no default values for these parameters, which specify the fractional coordinate shift vector. 
) def
Write
/ipflag    1 def /left  148 def
/last 1 def 
/textstring (
These shift vectors allow any change of position for the group to be plotted out. 
) def
Write
Newpage
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
/litstring 
( \\TITLE MOVE 2 SULPHURS AROUND) def Literal                                                                                                                                                                                                                                                               
/litstring 
( \\LIST 5) def Literal                                                                                                                                                                                                                                                                                     
/litstring 
( READ NATOM=2) def Literal                                                                                                                                                                                                                                                                                 
/litstring 
( ATOM S 1 X=0.00 0.15 0.37) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( ATOM S 2 X=0.13 0.05 0.24) def Literal                                                                                                                                                                                                                                                                    
/litstring 
( \\ call '\\trial' with a min. fO of 250) def Literal                                                                                                                                                                                                                                                      
/litstring 
( \\TRIAL) def Literal                                                                                                                                                                                                                                                                                      
/litstring 
( MAP Fo-MIN=250) def Literal                                                                                                                                                                                                                                                                               
/litstring 
( \\ initial origin shift) def Literal                                                                                                                                                                                                                                                                      
/litstring 
( DISPLACEMENT 0 0 -0.3) def Literal                                                                                                                                                                                                                                                                        
/litstring 
( \\ plot half of y down the page) def Literal                                                                                                                                                                                                                                                              
/litstring 
( DOWN 26 0 0.02 0) def Literal                                                                                                                                                                                                                                                                             
/litstring 
( \\ plot half of x across the page) def Literal                                                                                                                                                                                                                                                            
/litstring 
( ACROSS 26 0.02 0 0) def Literal                                                                                                                                                                                                                                                                           
/litstring 
( \\ plot half of z up the page negatively) def Literal                                                                                                                                                                                                                                                     
/litstring 
( THROUGH 51 0 0 -0.01) def Literal                                                                                                                                                                                                                                                                         
/litstring 
( \\FINISH) def Literal                                                                                                                                                                                                                                                                                     
LitBlank
Blank
Blank
/title (               CRYSTALS Manual) def                                                                                                                                                                                                                                                                 
/banner (CRYSTALS Manual) def                                                                                                                                                                                                                                                                               
Newpage
/chaptext (Crystals Manual) def                                                                                                                                                                                                                                                                             
/ichap 1 def                                                                                                                                                                                                                                                                                                
Chapter 
/left leftmargin def 
/left leftmargin def 
/litpoint     8 def 
/litgap     8 def 
LitBlank
Blank
LitBlank
Blank
ypos top ne {showpage} if
Doindex
/Indexpage   15 def
/Indextext () def
Index
/Indexpage   70 def
/Indextext ( - Comparing two structures) def
Index
/Indexpage   73 def
/Indextext ( Method of calculation) def
Index
/Indexpage    5 def
/Indextext ($      'shell command') def
Blank
Index
/Indexpage   69 def
/Indextext (1 - Extending a fragment to a complete m) def
Blank
Index
/Indexpage   70 def
/Indextext (2 - Forcing a regular shape on a group o) def
Blank
Index
/Indexpage   70 def
/Indextext (3 - Checking for an additional symmetry ) def
Blank
Index
/Indexpage   70 def
/Indextext (4 - Renaming a group of atoms) def
Blank
Index
/Indexpage   70 def
/Indextext (5 - Viewing matched molecules in CAMERON) def
Blank
Index
/Indexpage    5 def
/Indextext (? text) def
Blank
Index
/Indexpage  142 def
/Indextext (A) def
Blank
Index
/Indexpage   19 def
/Indextext (A*=, B*=, C*=) def
Index
/Indexpage   18 def
/Indextext (A=, B=, C=) def
Index
/Indexpage   54 def
/Indextext (ABSOLUTE=) def
Index
/Indexpage   30 def
/Indextext (ABSORPTION ANALMIN= ANALMAX= THETAMIN= T) def
Index
/Indexpage   40 def
/Indextext (ABSORPTION PRINT= PHI= THETA= TUBE= PLAT) def
Index
/Indexpage   30 def
/Indextext (ABSORPTION \(continued\) DIFABSMIN= DIFA) def
Index
/Indexpage   30 def
/Indextext (ABSTYPE=) def
Index
/Indexpage  142 def
/Indextext (ACC2A) def
Index
/Indexpage  142 def
/Indextext (ACC2B) def
Index
/Indexpage  118 def
/Indextext (ACROSS MINIMUM= NUMBER= STEP=) def
Index
/Indexpage  148 def
/Indextext (ACROSS NUMBER X-COMPONENT Y-COMPONENT Z-) def
Index
/Indexpage  110 def
/Indextext (ACROSS=) def
Index
/Indexpage   84 def
/Indextext (ACTION) def
Index
/Indexpage   66 def
/Indextext (ACTION    MODE) def
Index
/Indexpage   11 def
/Indextext (ACTION=) def
Index
/Indexpage   12 def
/Indextext (ACTION=) def
Index
/Indexpage  105 def
/Indextext (ACTION=) def
Index
/Indexpage   59 def
/Indextext (ADD  VALUE  PARAMETERS  ...) def
Index
/Indexpage   64 def
/Indextext (AFTER   TYPE\(SERIAL\)) def
Index
/Indexpage   58 def
/Indextext (AFTER  ATOM-SPECIFICATION  ...) def
Index
/Indexpage   49 def
/Indextext (ALL) def
Index
/Indexpage   82 def
/Indextext (ALLCYCLES MIN-R= MAX-R= *-WR= *-SUMSQ= *) def
Index
/Indexpage  121 def
/Indextext (ALLDISTANCES=) def
Index
/Indexpage   19 def
/Indextext (ALPHA*=, BETA*=, GAMMA*=) def
Index
/Indexpage   18 def
/Indextext (ALPHA=, BETA=, GAMMA=) def
Index
/Indexpage  122 def
/Indextext (AMAXIMUM) def
Index
/Indexpage  122 def
/Indextext (AMINIMUM) def
Index
/Indexpage   19 def
/Indextext (AMULT VALUE=) def
Index
/Indexpage   30 def
/Indextext (ANALMIN= ANALMAX=) def
Index
/Indexpage  104 def
/Indextext (ANALYSE) def
Index
/Indexpage   31 def
/Indextext (ANALYSE-CUT=) def
Index
/Indexpage   31 def
/Indextext (ANALYSE-NREF=) def
Index
/Indexpage   31 def
/Indextext (ANALYSE-R=) def
Index
/Indexpage   31 def
/Indextext (ANALYSE-RW=) def
Index
/Indexpage  144 def
/Indextext (ANGLE  NP\(1\)  AND  NP\(2\)) def
Index
/Indexpage  127 def
/Indextext (ANGLES  AL=) def
Index
/Indexpage  146 def
/Indextext (ANGLES  AL=) def
Index
/Indexpage   88 def
/Indextext (ANGLES VALUE, E.S.D. = ANGLE1, ANGLE2, .) def
Index
/Indexpage   88 def
/Indextext (ANGLES VALUE, E.S.D. = DIFFERENCE ANGLE1) def
Index
/Indexpage   88 def
/Indextext (ANGLES VALUE, E.S.D. = MEAN ANGLE1, ANGL) def
Index
/Indexpage   60 def
/Indextext (ANISO  ATOM SPECIFICATIONS  .  .) def
Index
/Indexpage   81 def
/Indextext (ANOMALOUS=) def
Index
/Indexpage   36 def
/Indextext (APPEND=) def
Index
/Indexpage   39 def
/Indextext (APPEND=) def
Index
/Indexpage  104 def
/Indextext (APPLY=) def
Index
/Indexpage   91 def
/Indextext (ARRAY VARIABLES) def
Index
/Indexpage   69 def
/Indextext (ATOM    x    y    z) def
Index
/Indexpage   48 def
/Indextext (ATOM SPECIFICATION) def
Index
/Indexpage   57 def
/Indextext (ATOM TYPE SERIAL OCC FLAG X Y Z U11 ..) def
Index
/Indexpage   53 def
/Indextext (ATOM TYPE= SERIAL= OCC= FLAG= X= Y= Z= U) def
Index
/Indexpage  130 def
/Indextext (ATOM-NAME) def
Index
/Indexpage   91 def
/Indextext (ATOMIC COORDINATES) def
Index
/Indexpage   50 def
/Indextext (ATOMIC PARAMETER SPECIFICATION) def
Index
/Indexpage  145 def
/Indextext (ATOMS   WEIGHT ATOM SPECIFICATIONS) def
Index
/Indexpage  128 def
/Indextext (ATOMS  SPECIFICATIONS) def
Index
/Indexpage  126 def
/Indextext (ATOMS  W\(1\)  SPECIFICATION\(1\)  W\(2 ) def
Index
/Indexpage  143 def
/Indextext (ATOMS  W\(1\)  SPECIFICATION\(1\)  W\(2 ) def
Index
/Indexpage  101 def
/Indextext (AUGFACT) def
Index
/Indexpage   68 def
/Indextext (AUGMENT) def
Index
/Indexpage   89 def
/Indextext (AVERAGE E.S.D. FOR 'PARAMETER SPECIFICAT) def
Index
/Indexpage  126 def
/Indextext (AXES) def
Index
/Indexpage  146 def
/Indextext (AXES) def
Index
/Indexpage   27 def
/Indextext (AXIS H= K= L=) def
Index
/Indexpage   20 def
/Indextext (AXIS UNIQUE=) def
Index
/Indexpage  104 def
/Indextext (AXIS=) def
Index
/Indexpage   41 def
/Indextext (A[MAX]) def
Index
/Indexpage   24 def
/Indextext (A\(1\)= B\(1=\) A\(2=\) B\(2\)= A\(3\)= ) def
Index
/Indexpage   17 def
/Indextext (Abbreviated startup command  -  QUICKSTA) def
Index
/Indexpage  128 def
/Indextext (Absolute Configuration  -  \TON) def
Index
/Indexpage    2 def
/Indextext (Accessing 'Special shapes') def
Index
/Indexpage   34 def
/Indextext (Advanced input of F or Fsq data - LIST 6) def
Index
/Indexpage  120 def
/Indextext (Analysis Of Results) def
Index
/Indexpage  103 def
/Indextext (Analysis of residuals -  \ANALYSE) def
Index
/Indexpage  120 def
/Indextext (Analysis of residuals - \ANALYSE) def
Index
/Indexpage   50 def
/Indextext (Anisotropic Temperature Factor) def
Index
/Indexpage   15 def
/Indextext (Atom names) def
Index
/Indexpage   48 def
/Indextext (Atomic And Structural Parameters) def
Index
/Indexpage   79 def
/Indextext (Atomic parameter refinement) def
Index
/Indexpage  142 def
/Indextext (B) def
Blank
Index
/Indexpage   54 def
/Indextext (BATCH SCALE=) def
Index
/Indexpage   81 def
/Indextext (BATCHSCALES=) def
Index
/Indexpage   84 def
/Indextext (BLOCK  PARAMETERS) def
Index
/Indexpage  123 def
/Indextext (BONDED atoms) def
Index
/Indexpage   74 def
/Indextext (BONDTYPE=) def
Index
/Indexpage   74 def
/Indextext (BREAK TYPE= SERIAL= S= L= TX= TY= TZ= TY) def
Index
/Indexpage   74 def
/Indextext (Bonding information - \BONDING) def
Index
/Indexpage   73 def
/Indextext (Bonding information - \LIST 40) def
Index
/Indexpage  113 def
/Indextext (CALC) def
Blank
Index
/Indexpage  100 def
/Indextext (CALCULATE LIST= MAP= \/Fo\/= THRESHOLD=) def
Index
/Indexpage   69 def
/Indextext (CAMERON) def
Index
/Indexpage  134 def
/Indextext (CAMERON) def
Index
/Indexpage   78 def
/Indextext (CAUTION) def
Index
/Indexpage   18 def
/Indextext (CELL  A= B= C= ALPHA= BETA= GAMMA=) def
Index
/Indexpage   21 def
/Indextext (CELL NSYMMETRIES=  LATTICE=  CENTRIC=) def
Index
/Indexpage  123 def
/Indextext (CELL=) def
Index
/Indexpage  127 def
/Indextext (CENTRE   X=, Y=, Z=) def
Index
/Indexpage  145 def
/Indextext (CENTRE   X=, Y=, Z=) def
Index
/Indexpage   21 def
/Indextext (CENTRIC=) def
Index
/Indexpage  118 def
/Indextext (CENTROID XO= YO= ZO=) def
Index
/Indexpage   57 def
/Indextext (CENTROID Z ATOM-SPECIFICATION ...) def
Index
/Indexpage   59 def
/Indextext (CHANGE  ARG\(1\)  ARG\(2\)  ARG\(3\)  .) def
Index
/Indexpage   12 def
/Indextext (CHECK) def
Index
/Indexpage   35 def
/Indextext (CHECK) def
Index
/Indexpage  130 def
/Indextext (CHOOSE) def
Index
/Indexpage  133 def
/Indextext (CIF lists - \CIF) def
Index
/Indexpage   31 def
/Indextext (CIFEXTRA) def
Index
/Indexpage   22 def
/Indextext (CLASS NAME=) def
Index
/Indexpage   30 def
/Indextext (COEFFICIENT=) def
Index
/Indexpage   97 def
/Indextext (COEFFICIENT=  VALUE) def
Index
/Indexpage   35 def
/Indextext (COEFFICIENT\(1\)= COEFFICIENT\(2\)=) def
Index
/Indexpage   28 def
/Indextext (COLOUR) def
Index
/Indexpage   31 def
/Indextext (COLOUR) def
Index
/Indexpage   85 def
/Indextext (COMBINE PARAMETERS_1 AND PARAMETERS_2) def
Index
/Indexpage   68 def
/Indextext (COMPARE) def
Index
/Indexpage   92 def
/Indextext (COMPILER) def
Index
/Indexpage   27 def
/Indextext (COMPONENT\(1\)= COMPONENT\(2\)= COMPONEN) def
Index
/Indexpage   82 def
/Indextext (COMPOSITE=) def
Index
/Indexpage  123 def
/Indextext (COMPUTE) def
Index
/Indexpage   98 def
/Indextext (CONDITION P= Q= R= S= T= TYPE=) def
Index
/Indexpage   29 def
/Indextext (CONDITIONS MINSIZE= MEDSIZE= MAXSIZE= NO) def
Index
/Indexpage   25 def
/Indextext (CONDITIONS WAVELENGTH= THETA\(1\)= THETA) def
Index
/Indexpage   29 def
/Indextext (CONDITIONS \(continued\) INTERVAL= COUNT) def
Index
/Indexpage   29 def
/Indextext (CONDITIONS \(continued\) TEMPERATURE= ST) def
Index
/Indexpage   26 def
/Indextext (CONSTANT\(1\)= CONSTANT\(2\)= CONSTANT\() def
Index
/Indexpage  124 def
/Indextext (CONTACT value1 value2) def
Index
/Indexpage   17 def
/Indextext (CONTENTS FORMULA=) def
Index
/Indexpage   23 def
/Indextext (CONTENTS FORMULA=) def
Index
/Indexpage  131 def
/Indextext (COORDINATES NCHAR= NDECIMAL= SELECT= TYP) def
Index
/Indexpage  122 def
/Indextext (COORDINATES=) def
Index
/Indexpage  105 def
/Indextext (CORRECTION THETA=) def
Index
/Indexpage   39 def
/Indextext (CORRECTIONS NSCALE= NFACTOR=) def
Index
/Indexpage   29 def
/Indextext (COUNT=) def
Index
/Indexpage   28 def
/Indextext (COVALENT=) def
Index
/Indexpage   69 def
/Indextext (CP-RING X) def
Index
/Indexpage   57 def
/Indextext (CREATE Z ATOM-SPECIFICATION  ...) def
Index
/Indexpage   63 def
/Indextext (CROSSTERMS=) def
Index
/Indexpage   25 def
/Indextext (CRYSTAL FRIEDELPAIRS= TWINNED= SPREAD=) def
Index
/Indexpage   72 def
/Indextext (Calculation of interatomic bonds - \BOND) def
Index
/Indexpage  114 def
/Indextext (Calculation of superposition minimum fun) def
Index
/Indexpage    9 def
/Indextext (Catastrophic Errors.) def
Index
/Indexpage   96 def
/Indextext (Chebychev weighting schemes 10, 11) def
Index
/Indexpage  133 def
/Indextext (CheckCIF) def
Index
/Indexpage   48 def
/Indextext (Checking of serial numbers) def
Index
/Indexpage   93 def
/Indextext (Checking restraints - CHECK) def
Index
/Indexpage    5 def
/Indextext (Commands) def
Index
/Indexpage    5 def
/Indextext (Comments) def
Index
/Indexpage   71 def
/Indextext (Comparing lots of Z'=2 structures) def
Index
/Indexpage   38 def
/Indextext (Compressed reflection data) def
Index
/Indexpage  110 def
/Indextext (Compute Fourier limits from the symmetry) def
Index
/Indexpage    5 def
/Indextext (Continuation Lines) def
Index
/Indexpage   78 def
/Indextext (Conventional R-value) def
Index
/Indexpage   63 def
/Indextext (Conversion of temperature factors - \CON) def
Index
/Indexpage   77 def
/Indextext (Correlations in Refinement) def
Index
/Indexpage   86 def
/Indextext (Creating a null LIST 12) def
Index
/Indexpage   92 def
/Indextext (Creating a null LIST 16) def
Index
/Indexpage   93 def
/Indextext (Creating a null LIST 17) def
Index
/Indexpage   98 def
/Indextext (Creating a null LIST 28) def
Index
/Indexpage   75 def
/Indextext (Creating a null LIST 40) def
Index
/Indexpage   33 def
/Indextext (Creation of LIST 7 from LIST 6 - COPY 6 ) def
Index
/Indexpage  150 def
/Indextext (Crystals Manual) def
Index
/Indexpage   10 def
/Indextext (Current List Index) def
Index
/Indexpage   18 def
/Indextext (DATA WAVELENGTH= REFLECTIONS= RATIO=) def
Blank
Index
/Indexpage   29 def
/Indextext (DATRED NREFMES= NREFMERG= RMERGE= NREFFR) def
Index
/Indexpage   29 def
/Indextext (DECAY=) def
Index
/Indexpage   73 def
/Indextext (DEFAULTS TOLTYPE= TOLERANCE= MAXBONDS= N) def
Index
/Indexpage   92 def
/Indextext (DEFINE NAME = TEXT) def
Index
/Indexpage   57 def
/Indextext (DELETE  ATOM SPECIFICATIONS  .  .) def
Index
/Indexpage   12 def
/Indextext (DELETE LIST= SERIAL= RELATIVE= ACTION=) def
Index
/Indexpage   30 def
/Indextext (DELRHOMAX=) def
Index
/Indexpage   30 def
/Indextext (DELRHOMIN=) def
Index
/Indexpage  148 def
/Indextext (DELTA-X) def
Index
/Indexpage  148 def
/Indextext (DELTA-Y) def
Index
/Indexpage  148 def
/Indextext (DELTA-Z) def
Index
/Indexpage   90 def
/Indextext (DELU ADP-ESD  FOR GROUP-1 \(AND GROUP-2 ) def
Index
/Indexpage   59 def
/Indextext (DEORTHOGINAL  ATOM SPECIFICATION . .) def
Index
/Indexpage   85 def
/Indextext (DIAGONAL  PARAMETERS) def
Index
/Indexpage   30 def
/Indextext (DIFABSMIN= DIFABSMAX=) def
Index
/Indexpage  106 def
/Indextext (DIFFRACTION GEOMETRY= MODE=) def
Index
/Indexpage   25 def
/Indextext (DIFFRACTION GEOMETRY= RADIATION=) def
Index
/Indexpage  127 def
/Indextext (DIHEDRAL  NP\(1\)  AND  NP\(2\)) def
Index
/Indexpage  102 def
/Indextext (DISCRIMINATOR) def
Index
/Indexpage  148 def
/Indextext (DISPLACEMENT DELTA-X DELTA-Y DELTA-Z) def
Index
/Indexpage  131 def
/Indextext (DISPLAY) def
Index
/Indexpage   64 def
/Indextext (DISTANCE  D) def
Index
/Indexpage   66 def
/Indextext (DISTANCE  D) def
Index
/Indexpage  124 def
/Indextext (DISTANCE value) def
Index
/Indexpage  116 def
/Indextext (DISTANCE=) def
Index
/Indexpage  127 def
/Indextext (DISTANCES  DL=   AL=) def
Index
/Indexpage  146 def
/Indextext (DISTANCES  DL=   AL=) def
Index
/Indexpage   88 def
/Indextext (DISTANCES  VALUE, E.S.D. = BOND1, BOND2,) def
Index
/Indexpage   88 def
/Indextext (DISTANCES VALUE, E.S.D. = DIFFERENCE BON) def
Index
/Indexpage   88 def
/Indextext (DISTANCES VALUE, E.S.D. = MEAN BOND1, BO) def
Index
/Indexpage   59 def
/Indextext (DIVIDE  VALUE  PARAMETERS  ...) def
Index
/Indexpage  109 def
/Indextext (DIVISION=) def
Index
/Indexpage  122 def
/Indextext (DMAXIMUM) def
Index
/Indexpage  122 def
/Indextext (DMINIMUM) def
Index
/Indexpage   30 def
/Indextext (DOBS= DCALC=) def
Index
/Indexpage  130 def
/Indextext (DOUBLE) def
Index
/Indexpage  118 def
/Indextext (DOWN MINIMUM= NUMBER= STEP=) def
Index
/Indexpage  148 def
/Indextext (DOWN NUMBER X-COMPONENT Y-COMPONENT Z-CO) def
Index
/Indexpage  110 def
/Indextext (DOWN=) def
Index
/Indexpage   58 def
/Indextext (DSORT KEYWORD) def
Index
/Indexpage   58 def
/Indextext (DSORT TYPE1 TYPE2 ...) def
Index
/Indexpage   52 def
/Indextext (DU[ISO]) def
Index
/Indexpage   53 def
/Indextext (DU[ISO]=) def
Index
/Indexpage   42 def
/Indextext (Data Reduction - Lp) def
Index
/Indexpage   92 def
/Indextext (Debugging restraints) def
Index
/Indexpage   85 def
/Indextext (Defining the least squares matrix) def
Index
/Indexpage   99 def
/Indextext (Definitions) def
Index
/Indexpage    4 def
/Indextext (Definitions And Conventions) def
Index
/Indexpage    6 def
/Indextext (Device names) def
Index
/Indexpage   10 def
/Indextext (Disk Index) def
Index
/Indexpage  120 def
/Indextext (Distance angles calculations  -  \DISTAN) def
Index
/Indexpage  123 def
/Indextext (Distance-angles symmetry operations) def
Index
/Indexpage   95 def
/Indextext (Dunitz Seiler weighting - scheme 13) def
Index
/Indexpage  123 def
/Indextext (E.S.D.S COMPUTE= CELL=) def
Blank
Index
/Indexpage  142 def
/Indextext (EIG) def
Index
/Indexpage   27 def
/Indextext (ELEMENT TYPE= COVALENT=  VANDERWAALS= IO) def
Index
/Indexpage   73 def
/Indextext (ELEMENT TYPE= RADIUS= MAXBONDS=) def
Index
/Indexpage   54 def
/Indextext (ELEMENTS SCALE=) def
Index
/Indexpage   30 def
/Indextext (EMPMIN= EMPMAX=) def
Index
/Indexpage   52 def
/Indextext (ENANTIO) def
Index
/Indexpage   53 def
/Indextext (ENANTIO=) def
Index
/Indexpage   81 def
/Indextext (ENANTIO=) def
Index
/Indexpage   56 def
/Indextext (END) def
Index
/Indexpage   71 def
/Indextext (EQUALATOM) def
Index
/Indexpage   84 def
/Indextext (EQUIVALENCE  PARAMETERS) def
Index
/Indexpage   31 def
/Indextext (ESD=) def
Index
/Indexpage  131 def
/Indextext (ESDS) def
Index
/Indexpage  126 def
/Indextext (EVALUATE  ATOM SPECIFICATIONS . . . .) def
Index
/Indexpage  144 def
/Indextext (EVALUATE  ATOM SPECIFICATIONS . . . .) def
Index
/Indexpage  146 def
/Indextext (EVALUATE ATOM SPECIFICATIONS) def
Index
/Indexpage  123 def
/Indextext (EXCLUDE atoms) def
Index
/Indexpage   56 def
/Indextext (EXECUTE) def
Index
/Indexpage  126 def
/Indextext (EXECUTE) def
Index
/Indexpage  142 def
/Indextext (EXECUTE) def
Index
/Indexpage  143 def
/Indextext (EXECUTE) def
Index
/Indexpage  145 def
/Indextext (EXECUTE) def
Index
/Indexpage   92 def
/Indextext (EXECUTION) def
Index
/Indexpage   18 def
/Indextext (EXPRESSION=) def
Index
/Indexpage   20 def
/Indextext (EXPRESSION=) def
Index
/Indexpage   36 def
/Indextext (EXPRESSION=) def
Index
/Indexpage   39 def
/Indextext (EXPRESSION=) def
Index
/Indexpage   12 def
/Indextext (EXTEND RECORDS= FREE= TRIES= SIZE=) def
Index
/Indexpage   81 def
/Indextext (EXTINCTION=) def
Index
/Indexpage   52 def
/Indextext (EXTPARAM) def
Index
/Indexpage   53 def
/Indextext (EXTPARAM=) def
Index
/Indexpage    3 def
/Indextext (Easier handling of twins) def
Index
/Indexpage   55 def
/Indextext (Editing structural parameters -  \EDIT) def
Index
/Indexpage   15 def
/Indextext (Element Names) def
Index
/Indexpage   15 def
/Indextext (Element and Atom names) def
Index
/Indexpage   14 def
/Indextext (Elimination of Old Versions of LISTS  - ) def
Index
/Indexpage  115 def
/Indextext (Elimination of duplicated entries in LIS) def
Index
/Indexpage    9 def
/Indextext (Errors) def
Index
/Indexpage    9 def
/Indextext (Errors Detected During the Creation of a) def
Index
/Indexpage    8 def
/Indextext (Errors and Warnings) def
Index
/Indexpage   13 def
/Indextext (Errors in the DISK file.) def
Index
/Indexpage   78 def
/Indextext (F or Fsq refinement?) def
Blank
Index
/Indexpage   32 def
/Indextext (F or Fsq?) def
Index
/Indexpage   24 def
/Indextext (F'= F''=) def
Index
/Indexpage   33 def
/Indextext (F'S=) def
Index
/Indexpage   35 def
/Indextext (F'S=) def
Index
/Indexpage   42 def
/Indextext (F'S=) def
Index
/Indexpage   43 def
/Indextext (F'S=) def
Index
/Indexpage   46 def
/Indextext (F'S=) def
Index
/Indexpage   81 def
/Indextext (F-SQUARED=) def
Index
/Indexpage   30 def
/Indextext (F000=) def
Index
/Indexpage  113 def
/Indextext (F000=) def
Index
/Indexpage   96 def
/Indextext (FACTOR) def
Index
/Indexpage   39 def
/Indextext (FACTORS COEFFICIENT\(1\)= COEFFICIENT\(2) def
Index
/Indexpage   18 def
/Indextext (FILE NAME=) def
Index
/Indexpage   14 def
/Indextext (FILE=) def
Index
/Indexpage  102 def
/Indextext (FILTER) def
Index
/Indexpage   49 def
/Indextext (FIRST   AND   LAST) def
Index
/Indexpage   84 def
/Indextext (FIX  PARAMETERS) def
Index
/Indexpage   30 def
/Indextext (FLACK=) def
Index
/Indexpage    2 def
/Indextext (FLAG interpretation) def
Index
/Indexpage   51 def
/Indextext (FLAG interpretation) def
Index
/Indexpage   12 def
/Indextext (FLAG=) def
Index
/Indexpage   53 def
/Indextext (FLAG=) def
Index
/Indexpage  130 def
/Indextext (FLOATING) def
Index
/Indexpage   30 def
/Indextext (FMINFUNC=) def
Index
/Indexpage  103 def
/Indextext (FO INTERVAL= TYPE= SCALE=) def
Index
/Indexpage  102 def
/Indextext (FORCE  KEY = VALUE  KEY = VALUE .  .  . ) def
Index
/Indexpage   18 def
/Indextext (FORMAT EXPRESSION=) def
Index
/Indexpage   36 def
/Indextext (FORMAT EXPRESSION=) def
Index
/Indexpage   39 def
/Indextext (FORMAT EXPRESSION=) def
Index
/Indexpage   17 def
/Indextext (FORMULA=) def
Index
/Indexpage   23 def
/Indextext (FORMULA=) def
Index
/Indexpage   12 def
/Indextext (FREE=) def
Index
/Indexpage   43 def
/Indextext (FRIEDEL=) def
Index
/Indexpage   25 def
/Indextext (FRIEDELPAIRS=) def
Index
/Indexpage   85 def
/Indextext (FULL  PARAMETERS) def
Index
/Indexpage    8 def
/Indextext (Files) def
Index
/Indexpage  101 def
/Indextext (Fo) def
Index
/Indexpage  102 def
/Indextext (Fo) def
Index
/Indexpage  147 def
/Indextext (Fo-MIN) def
Index
/Indexpage   16 def
/Indextext (Foreign Program Links) def
Index
/Indexpage    4 def
/Indextext (Format of Commands) def
Index
/Indexpage   32 def
/Indextext (Format of reflection data) def
Index
/Indexpage  109 def
/Indextext (Fourier Routines) def
Index
/Indexpage  111 def
/Indextext (Fourier calculations  -  \FOURIER) def
Index
/Indexpage   78 def
/Indextext (Free refinement) def
Index
/Indexpage   54 def
/Indextext (Further examples of parameter input) def
Index
/Indexpage   30 def
/Indextext (GENERAL DOBS= DCALC= F000= MU= MOLWT= FL) def
Blank
Index
/Indexpage   30 def
/Indextext (GENERAL \(continue\)  ANALYSE-R= ANALYSE) def
Index
/Indexpage   30 def
/Indextext (GENERAL \(continued\) ANALYSE-CUT= ANALY) def
Index
/Indexpage   25 def
/Indextext (GEOMETRY=) def
Index
/Indexpage  106 def
/Indextext (GEOMETRY=) def
Index
/Indexpage   30 def
/Indextext (GOF=) def
Index
/Indexpage   62 def
/Indextext (GROUP) def
Index
/Indexpage   85 def
/Indextext (GROUP  ATOM SPECIFICATIONS) def
Index
/Indexpage   68 def
/Indextext (GROUP NUMBER) def
Index
/Indexpage   82 def
/Indextext (GROUPS=) def
Index
/Indexpage   10 def
/Indextext (General List-control Directives  -  \DIS) def
Index
/Indexpage   91 def
/Indextext (General restraints) def
Index
/Indexpage   92 def
/Indextext (General restraints) def
Index
/Indexpage   78 def
/Indextext (Geometric re-placement) def
Index
/Indexpage  134 def
/Indextext (Graphics - CAMERON) def
Index
/Indexpage   27 def
/Indextext (H K L THETA OMEGA CHI PHI KAPPA PSI) def
Blank
Index
/Indexpage   65 def
/Indextext (H11  X  R) def
Index
/Indexpage   65 def
/Indextext (H12  X R\(1\) R\(2\)) def
Index
/Indexpage   64 def
/Indextext (H13  X R\(1\) R\(2\) R\(3\)) def
Index
/Indexpage   64 def
/Indextext (H22  X R\(1\) R\(2\)) def
Index
/Indexpage   64 def
/Indextext (H23  X R\(1\) R\(2\)) def
Index
/Indexpage   64 def
/Indextext (H33  X R\(1\) R\(2\)) def
Index
/Indexpage   26 def
/Indextext (H= K= L=) def
Index
/Indexpage   27 def
/Indextext (H= K= L=) def
Index
/Indexpage   97 def
/Indextext (H= K= L=) def
Index
/Indexpage   26 def
/Indextext (H= K= L= THETA= OMEGA= CHI= PHI= KAPPA= ) def
Index
/Indexpage   27 def
/Indextext (H= K= L= THETA= OMEGA= CHI= PHI= KAPPA= ) def
Index
/Indexpage   65 def
/Indextext (HBOND X  R) def
Index
/Indexpage  113 def
/Indextext (HEIGHT=) def
Index
/Indexpage  121 def
/Indextext (HESD=) def
Index
/Indexpage   69 def
/Indextext (HEXAGON X) def
Index
/Indexpage   30 def
/Indextext (HMIN= HMAX= KMIN= KMAX= LMIN= LMAX=) def
Index
/Indexpage   78 def
/Indextext (Hydrogen Atom Refinement) def
Index
/Indexpage   63 def
/Indextext (Hydrogen placing - \HYDROGENS) def
Index
/Indexpage   66 def
/Indextext (Hydrogen re-numbering - \HNAME) def
Index
/Indexpage   68 def
/Indextext (IDEAL Atom Specifications) def
Blank
Index
/Indexpage  123 def
/Indextext (INCLUDE atoms) def
Index
/Indexpage   54 def
/Indextext (INDEX P= Q= R= S= ABSOLUTE=) def
Index
/Indexpage   11 def
/Indextext (INDEX=) def
Index
/Indexpage   30 def
/Indextext (INDEXRANGE HMIN= HMAX= KMIN= KMAX= LMIN=) def
Index
/Indexpage   14 def
/Indextext (INITIALSIZE=) def
Index
/Indexpage   96 def
/Indextext (INPUT) def
Index
/Indexpage  100 def
/Indextext (INPUT) def
Index
/Indexpage  103 def
/Indextext (INPUT) def
Index
/Indexpage  105 def
/Indextext (INPUT) def
Index
/Indexpage  111 def
/Indextext (INPUT) def
Index
/Indexpage  117 def
/Indextext (INPUT) def
Index
/Indexpage  132 def
/Indextext (INPUT) def
Index
/Indexpage   35 def
/Indextext (INPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)) def
Index
/Indexpage   39 def
/Indextext (INPUT COEFFICIENT\(1\)= COEFFICIENT\(2\)) def
Index
/Indexpage   45 def
/Indextext (INPUT=) def
Index
/Indexpage  114 def
/Indextext (INPUT=) def
Index
/Indexpage   56 def
/Indextext (INPUTLIST) def
Index
/Indexpage  128 def
/Indextext (INPUTLIST) def
Index
/Indexpage  145 def
/Indextext (INPUTLIST) def
Index
/Indexpage   43 def
/Indextext (INPUTLIST=) def
Index
/Indexpage   61 def
/Indextext (INPUTLIST=) def
Index
/Indexpage   62 def
/Indextext (INPUTLIST=) def
Index
/Indexpage   63 def
/Indextext (INPUTLIST=) def
Index
/Indexpage   64 def
/Indextext (INPUTLIST=) def
Index
/Indexpage   65 def
/Indextext (INPUTLIST=) def
Index
/Indexpage  115 def
/Indextext (INPUTLIST=) def
Index
/Indexpage  120 def
/Indextext (INPUTLIST=) def
Index
/Indexpage  124 def
/Indextext (INPUTLIST=) def
Index
/Indexpage  126 def
/Indextext (INPUTLIST=) def
Index
/Indexpage  143 def
/Indextext (INPUTLIST=) def
Index
/Indexpage  147 def
/Indextext (INPUTLIST=) def
Index
/Indexpage   60 def
/Indextext (INSERT IDENTIFIER=NAME) def
Index
/Indexpage  130 def
/Indextext (INSET) def
Index
/Indexpage  132 def
/Indextext (INSET=) def
Index
/Indexpage   29 def
/Indextext (INSTRUMENT) def
Index
/Indexpage   83 def
/Indextext (INTERCYCLE MIN-DR= MAX-DR= *-DWR= *-DSHI) def
Index
/Indexpage   29 def
/Indextext (INTERVAL=) def
Index
/Indexpage  103 def
/Indextext (INTERVAL=) def
Index
/Indexpage  104 def
/Indextext (INTERVAL=) def
Index
/Indexpage  142 def
/Indextext (INV) def
Index
/Indexpage  101 def
/Indextext (INVERTOR) def
Index
/Indexpage   28 def
/Indextext (IONIC=) def
Index
/Indexpage    5 def
/Indextext (Immediate Commands) def
Index
/Indexpage    5 def
/Indextext (Immediate commands) def
Index
/Indexpage   17 def
/Indextext (Initial Data Input) def
Index
/Indexpage   67 def
/Indextext (Input for REGULARISE) def
Index
/Indexpage   28 def
/Indextext (Input of General Crystallographic Data -) def
Index
/Indexpage   52 def
/Indextext (Input of atoms and other parameters  -  ) def
Index
/Indexpage   23 def
/Indextext (Input of molecular composition \COMPOSIT) def
Index
/Indexpage  109 def
/Indextext (Input of the Fourier section limits - LI) def
Index
/Indexpage   23 def
/Indextext (Input of the atomic scattering factors  ) def
Index
/Indexpage   18 def
/Indextext (Input of the cell parameters  -  LIST 1) def
Index
/Indexpage   27 def
/Indextext (Input of the contents of the asymmetric ) def
Index
/Indexpage   24 def
/Indextext (Input of the crystal and data collection) def
Index
/Indexpage   21 def
/Indextext (Input of the symmetry data  -  LIST 2) def
Index
/Indexpage   19 def
/Indextext (Input of the unit cell parameter errors ) def
Index
/Indexpage   38 def
/Indextext (Intensity Data - HKLI) def
Index
/Indexpage   41 def
/Indextext (Intensity Decay Curves  \LIST 27) def
Index
/Indexpage  107 def
/Indextext (Internal workings) def
Index
/Indexpage    1 def
/Indextext (Introduction To The System) def
Index
/Indexpage   50 def
/Indextext (Isotropic temperature factor) def
Index
/Indexpage   46 def
/Indextext (JCODE NUMBER= VALUE=) def
Blank
Index
/Indexpage   68 def
/Indextext (KEEP  Z) def
Blank
Index
/Indexpage   57 def
/Indextext (KEEP  Z ATOM-SPECIFICATIONS ...) def
Index
/Indexpage   61 def
/Indextext (KEEP=) def
Index
/Indexpage  115 def
/Indextext (KEEP=) def
Index
/Indexpage   79 def
/Indextext (KEY[1] . . . KEY[K]) def
Index
/Indexpage    5 def
/Indextext (Keyed Commands) def
Index
/Indexpage    4 def
/Indextext (Keyed LISTS) def
Index
/Indexpage   16 def
/Indextext (L) def
Blank
Index
/Indexpage   48 def
/Indextext (L) def
Index
/Indexpage   74 def
/Indextext (L= L2=) def
Index
/Indexpage   21 def
/Indextext (LATTICE=) def
Index
/Indexpage   80 def
/Indextext (LAYER SCALES, BATCH SCALES   OR   ELEMEN) def
Index
/Indexpage   54 def
/Indextext (LAYERS SCALE=) def
Index
/Indexpage  104 def
/Indextext (LAYERSCALE AXIS= APPLY= ANALYSE=) def
Index
/Indexpage   81 def
/Indextext (LAYERSCALES=) def
Index
/Indexpage   80 def
/Indextext (LAYER\(M\), BATCH\(M\)   OR   ELEMENT\(M) def
Index
/Indexpage   80 def
/Indextext (LAYER\(P\) UNTIL LAYER\(Q\)   OR   BATCH) def
Index
/Indexpage  132 def
/Indextext (LAYOUT NCOLUMNS= NLINES= INSET= NSPACE= ) def
Index
/Indexpage  113 def
/Indextext (LAYOUT NLINE= NCHARACTER= MARGIN= NSPACE) def
Index
/Indexpage  130 def
/Indextext (LAYOUT= INSET= ATOM= DOUBLE= CHOOSE= FLO) def
Index
/Indexpage   55 def
/Indextext (LEVEL) def
Index
/Indexpage  133 def
/Indextext (LEVEL) def
Index
/Indexpage   15 def
/Indextext (LEVEL=) def
Index
/Indexpage   46 def
/Indextext (LEVEL=) def
Index
/Indexpage   93 def
/Indextext (LEVEL=) def
Index
/Indexpage  104 def
/Indextext (LEVEL=) def
Index
/Indexpage   89 def
/Indextext (LIMIT E.S.D. FOR 'PARAMETER SPECIFICATIO) def
Index
/Indexpage  127 def
/Indextext (LIMITS   VALUE=   RATIO=) def
Index
/Indexpage  146 def
/Indextext (LIMITS   VALUE=   RATIO=) def
Index
/Indexpage  122 def
/Indextext (LIMITS DMINIMUM= DMAXIMUM= AMINIMUM= AMA) def
Index
/Indexpage  126 def
/Indextext (LINE) def
Index
/Indexpage  144 def
/Indextext (LINE) def
Index
/Indexpage   60 def
/Indextext (LINE NEWSERIAL ATOMLIST) def
Index
/Indexpage    3 def
/Indextext (LINE newserial atomlist) def
Index
/Indexpage   84 def
/Indextext (LINK PARAMETER_LIST AND PARAMETER_LIST  ) def
Index
/Indexpage  100 def
/Indextext (LIST) def
Index
/Indexpage  101 def
/Indextext (LIST) def
Index
/Indexpage   14 def
/Indextext (LIST = n) def
Index
/Indexpage   57 def
/Indextext (LIST LEVEL) def
Index
/Indexpage  104 def
/Indextext (LIST LEVEL=) def
Index
/Indexpage   11 def
/Indextext (LIST=) def
Index
/Indexpage   12 def
/Indextext (LIST=) def
Index
/Indexpage   46 def
/Indextext (LIST=) def
Index
/Indexpage  121 def
/Indextext (LIST=) def
Index
/Indexpage   11 def
/Indextext (LIST=n) def
Index
/Indexpage   12 def
/Indextext (LIST=n) def
Index
/Indexpage  131 def
/Indextext (LISTAXES) def
Index
/Indexpage   14 def
/Indextext (LISTS in Current use) def
Index
/Indexpage   14 def
/Indextext (LOG=) def
Index
/Indexpage    1 def
/Indextext (Layout of this manual) def
Index
/Indexpage  104 def
/Indextext (Least squares absorption correction  -  ) def
Index
/Indexpage  143 def
/Indextext (Least squares best planes and lines  -  ) def
Index
/Indexpage  108 def
/Indextext (Least squares shift list  -  LIST 24) def
Index
/Indexpage    5 def
/Indextext (Lexical Commands) def
Index
/Indexpage    4 def
/Indextext (Lexical LISTS) def
Index
/Indexpage    4 def
/Indextext (Lists) def
Index
/Indexpage    1 def
/Indextext (MAJOR CHANGES for WINDOWS) def
Blank
Index
/Indexpage   74 def
/Indextext (MAKE TYPE= SERIAL= S= L= TX= TY= TZ= TYP) def
Index
/Indexpage   71 def
/Indextext (MAP) def
Index
/Indexpage  100 def
/Indextext (MAP) def
Index
/Indexpage  101 def
/Indextext (MAP) def
Index
/Indexpage  102 def
/Indextext (MAP) def
Index
/Indexpage   69 def
/Indextext (MAP  Atom Specifications) def
Index
/Indexpage  147 def
/Indextext (MAP Fo-MIN SCALE MIN-RHO) def
Index
/Indexpage  117 def
/Indextext (MAP TYPE= MIN-RHO= SCALE= WEIGHT=) def
Index
/Indexpage  111 def
/Indextext (MAP TYPE= NE= PRINT= SCAN= SCALE= ORIGIN) def
Index
/Indexpage  113 def
/Indextext (MARGIN=) def
Index
/Indexpage   11 def
/Indextext (MARKERROR LIST= SERIAL= RELATIVE= ACTION) def
Index
/Indexpage  101 def
/Indextext (MATRIX) def
Index
/Indexpage  102 def
/Indextext (MATRIX) def
Index
/Indexpage   36 def
/Indextext (MATRIX M11= M12= ...M33= TOLER= TWINTOLE) def
Index
/Indexpage  118 def
/Indextext (MATRIX R\(11\)= R\(12\)= R\(13\)= R\(21 ) def
Index
/Indexpage   26 def
/Indextext (MATRIX R\(1\)= R\(2\)= R\(3\)= . . . R\() def
Index
/Indexpage   19 def
/Indextext (MATRIX V\(11\)= V\(12\)= . . V\(16\)= V ) def
Index
/Indexpage  118 def
/Indextext (MATRIX=) def
Index
/Indexpage  113 def
/Indextext (MAX-RHO=) def
Index
/Indexpage   74 def
/Indextext (MAX=) def
Index
/Indexpage   73 def
/Indextext (MAXBONDS=) def
Index
/Indexpage   97 def
/Indextext (MAXIMA COEFFICIENT\(1\) COEFFICIENT\(2\)) def
Index
/Indexpage  102 def
/Indextext (MAXIMUM  KEY = VALUE  KEY = VALUE .  .  ) def
Index
/Indexpage   94 def
/Indextext (MAXIMUM=) def
Index
/Indexpage  109 def
/Indextext (MAXIMUM=) def
Index
/Indexpage   29 def
/Indextext (MAXSIZE=) def
Index
/Indexpage   35 def
/Indextext (MEDIUM) def
Index
/Indexpage  138 def
/Indextext (MEDIUM) def
Index
/Indexpage   39 def
/Indextext (MEDIUM=) def
Index
/Indexpage   42 def
/Indextext (MEDIUM=) def
Index
/Indexpage   43 def
/Indextext (MEDIUM=) def
Index
/Indexpage   45 def
/Indextext (MEDIUM=) def
Index
/Indexpage   29 def
/Indextext (MEDSIZE=) def
Index
/Indexpage   45 def
/Indextext (MERGE=) def
Index
/Indexpage   71 def
/Indextext (METHOD) def
Index
/Indexpage   68 def
/Indextext (METHOD NUMBER) def
Index
/Indexpage   83 def
/Indextext (MIN-DMINFUNC MAX-DMINFUNC) def
Index
/Indexpage   83 def
/Indextext (MIN-DR= MAX-DR=) def
Index
/Indexpage   83 def
/Indextext (MIN-DSUMSQ MAX-DSUMSQ) def
Index
/Indexpage   83 def
/Indextext (MIN-DWR MAX-DWR) def
Index
/Indexpage   82 def
/Indextext (MIN-R=, MAX-R=) def
Index
/Indexpage  148 def
/Indextext (MIN-RHO) def
Index
/Indexpage  113 def
/Indextext (MIN-RHO=) def
Index
/Indexpage  117 def
/Indextext (MIN-RHO=) def
Index
/Indexpage   83 def
/Indextext (MIN-SUMSQ=, MAX-SHUMSQ=) def
Index
/Indexpage   83 def
/Indextext (MIN-WR MAX-WR) def
Index
/Indexpage   74 def
/Indextext (MIN=) def
Index
/Indexpage   97 def
/Indextext (MINIMA COEFFICIENT\(1\)= COEFFICIENT\(2 ) def
Index
/Indexpage   81 def
/Indextext (MINIMISE= NSINGULARITY= F-SQUARED= REFLE) def
Index
/Indexpage  109 def
/Indextext (MINIMUM=) def
Index
/Indexpage  118 def
/Indextext (MINIMUM=) def
Index
/Indexpage   29 def
/Indextext (MINSIZE=) def
Index
/Indexpage  142 def
/Indextext (MM) def
Index
/Indexpage   66 def
/Indextext (MODE) def
Index
/Indexpage   68 def
/Indextext (MODE) def
Index
/Indexpage   16 def
/Indextext (MODE=) def
Index
/Indexpage  105 def
/Indextext (MODE=) def
Index
/Indexpage  106 def
/Indextext (MODE=) def
Index
/Indexpage   81 def
/Indextext (MODIFY ANOM= EXTINCT= LAYERSCALE= BATCHS) def
Index
/Indexpage  127 def
/Indextext (MODL L\(11\), L\(22\) L\(33\) L\(23\) L ) def
Index
/Indexpage  127 def
/Indextext (MODT T\(11\), T\(22\) T\(33\) T\(23\) T ) def
Index
/Indexpage   30 def
/Indextext (MOLWT=) def
Index
/Indexpage  101 def
/Indextext (MONITOR) def
Index
/Indexpage  102 def
/Indextext (MONITOR) def
Index
/Indexpage  132 def
/Indextext (MONITOR) def
Index
/Indexpage   56 def
/Indextext (MONITOR LEVEL) def
Index
/Indexpage   61 def
/Indextext (MONITOR=) def
Index
/Indexpage   62 def
/Indextext (MONITOR=) def
Index
/Indexpage  112 def
/Indextext (MONITOR=) def
Index
/Indexpage  115 def
/Indextext (MONITOR=) def
Index
/Indexpage  120 def
/Indextext (MONITOR=) def
Index
/Indexpage   58 def
/Indextext (MOVE Z ATOM-SPECIFICATION  ...) def
Index
/Indexpage   61 def
/Indextext (MOVE=) def
Index
/Indexpage  116 def
/Indextext (MOVE=) def
Index
/Indexpage  142 def
/Indextext (MT) def
Index
/Indexpage   30 def
/Indextext (MU=) def
Index
/Indexpage   41 def
/Indextext (MU=) def
Index
/Indexpage   28 def
/Indextext (MUA=) def
Index
/Indexpage  116 def
/Indextext (MULTIPLIER=) def
Index
/Indexpage   36 def
/Indextext (MULTIPLIERS VALUE=) def
Index
/Indexpage   59 def
/Indextext (MULTIPLY  VALUE  PARAMETERS  ...) def
Index
/Indexpage   71 def
/Indextext (Map two atomic groups together - \MATCH) def
Index
/Indexpage  142 def
/Indextext (Matrix Calculations) def
Index
/Indexpage   32 def
/Indextext (Merged or unmerged data?) def
Index
/Indexpage   44 def
/Indextext (Merging equivalent reflections  -  \MERG) def
Index
/Indexpage   67 def
/Indextext (Method of calculation) def
Index
/Indexpage   36 def
/Indextext (Mij=) def
Index
/Indexpage   79 def
/Indextext (Minimisation function) def
Index
/Indexpage   99 def
/Indextext (Minimisation function) def
Index
/Indexpage   99 def
/Indextext (Minimisation funtion for Fsq) def
Index
/Indexpage   99 def
/Indextext (Minmisation function for Fo) def
Index
/Indexpage   18 def
/Indextext (NAME=) def
Blank
Index
/Indexpage   53 def
/Indextext (NATOM=) def
Index
/Indexpage   53 def
/Indextext (NBATCH=) def
Index
/Indexpage  130 def
/Indextext (NCHARACTER) def
Index
/Indexpage  131 def
/Indextext (NCHARACTER) def
Index
/Indexpage  113 def
/Indextext (NCHARACTER=) def
Index
/Indexpage  133 def
/Indextext (NCHARACTER=) def
Index
/Indexpage   34 def
/Indextext (NCOEFFICIENT=) def
Index
/Indexpage   35 def
/Indextext (NCOEFFICIENT=) def
Index
/Indexpage   39 def
/Indextext (NCOEFFICIENT=) def
Index
/Indexpage  132 def
/Indextext (NCOLUMNS=) def
Index
/Indexpage   97 def
/Indextext (NCONDITION) def
Index
/Indexpage   46 def
/Indextext (NCYCLE=) def
Index
/Indexpage  131 def
/Indextext (NDECIMAL) def
Index
/Indexpage  111 def
/Indextext (NE=) def
Index
/Indexpage   27 def
/Indextext (NELEMENT) def
Index
/Indexpage   53 def
/Indextext (NELEMENT=) def
Index
/Indexpage   43 def
/Indextext (NEWINDICES=) def
Index
/Indexpage   39 def
/Indextext (NFACTOR=) def
Index
/Indexpage   35 def
/Indextext (NGROUP=) def
Index
/Indexpage   46 def
/Indextext (NJCODE=) def
Index
/Indexpage   53 def
/Indextext (NLAYER=) def
Index
/Indexpage  131 def
/Indextext (NLINE) def
Index
/Indexpage  113 def
/Indextext (NLINE=) def
Index
/Indexpage  132 def
/Indextext (NLINES=) def
Index
/Indexpage  112 def
/Indextext (NMAP) def
Index
/Indexpage   97 def
/Indextext (NOMISSIONS) def
Index
/Indexpage   88 def
/Indextext (NONBONDED  VALUE, POWERFACTOR =, BOND1, ) def
Index
/Indexpage   29 def
/Indextext (NORIENT=) def
Index
/Indexpage   73 def
/Indextext (NOSYMMETRY=) def
Index
/Indexpage   87 def
/Indextext (NOTE) def
Index
/Indexpage   29 def
/Indextext (NPARAM=) def
Index
/Indexpage   46 def
/Indextext (NPARAMETERS=) def
Index
/Indexpage   94 def
/Indextext (NPARAMETERS=) def
Index
/Indexpage  113 def
/Indextext (NPEAK=) def
Index
/Indexpage   40 def
/Indextext (NPHICURVES=) def
Index
/Indexpage   40 def
/Indextext (NPHIVALUES=) def
Index
/Indexpage   29 def
/Indextext (NREFFRIED=) def
Index
/Indexpage   29 def
/Indextext (NREFMERG=) def
Index
/Indexpage   29 def
/Indextext (NREFMES=) def
Index
/Indexpage   30 def
/Indextext (NREFUSED=) def
Index
/Indexpage   39 def
/Indextext (NSCALE=) def
Index
/Indexpage   41 def
/Indextext (NSCALE=) def
Index
/Indexpage   24 def
/Indextext (NSCATTERERS=) def
Index
/Indexpage   81 def
/Indextext (NSINGULARITY=) def
Index
/Indexpage   97 def
/Indextext (NSLICES) def
Index
/Indexpage  113 def
/Indextext (NSPACE=) def
Index
/Indexpage  132 def
/Indextext (NSPACE=) def
Index
/Indexpage   21 def
/Indextext (NSYMMETRIES=) def
Index
/Indexpage   40 def
/Indextext (NTHETAVALUES=) def
Index
/Indexpage   69 def
/Indextext (NUMBER) def
Index
/Indexpage  148 def
/Indextext (NUMBER) def
Index
/Indexpage   28 def
/Indextext (NUMBER=) def
Index
/Indexpage   46 def
/Indextext (NUMBER=) def
Index
/Indexpage   94 def
/Indextext (NUMBER=) def
Index
/Indexpage  118 def
/Indextext (NUMBER=) def
Index
/Indexpage    1 def
/Indextext (New .DSC File) def
Index
/Indexpage    2 def
/Indextext (New Temperature Factor \(ADP\) handling) def
Index
/Indexpage    3 def
/Indextext (New Weighting for Fsq refinement) def
Index
/Indexpage    3 def
/Indextext (New items stored in LIST 30) def
Index
/Indexpage   53 def
/Indextext (OCC=) def
Blank
Index
/Indexpage   69 def
/Indextext (OCTAHEDRON X Y Z) def
Index
/Indexpage  133 def
/Indextext (OF) def
Index
/Indexpage   15 def
/Indextext (OF=) def
Index
/Indexpage   69 def
/Indextext (OFFSET) def
Index
/Indexpage   41 def
/Indextext (OMEGA= CHI= PHI= KAPPA=) def
Index
/Indexpage   97 def
/Indextext (OMIT H= K= L=) def
Index
/Indexpage  123 def
/Indextext (ONLY atoms) def
Index
/Indexpage   71 def
/Indextext (ONTO) def
Index
/Indexpage   69 def
/Indextext (ONTO  Atom Specifications) def
Index
/Indexpage   91 def
/Indextext (OPERATORS) def
Index
/Indexpage  110 def
/Indextext (ORIENTATION DOWN= ACROSS= THROUGH=) def
Index
/Indexpage   69 def
/Indextext (ORIGIN) def
Index
/Indexpage   89 def
/Indextext (ORIGIN E.S.D. FOR 'PARAMETER SPECIFICATI) def
Index
/Indexpage  112 def
/Indextext (ORIGIN=) def
Index
/Indexpage   36 def
/Indextext (OUTPUT COEFFICIENT\(1\)= COEFFICIENT\(2 ) def
Index
/Indexpage   39 def
/Indextext (OUTPUT COEFFICIENT\(1\)= COEFFICIENT\(2 ) def
Index
/Indexpage   71 def
/Indextext (OUTPUT LIST= PUNCH=) def
Index
/Indexpage  120 def
/Indextext (OUTPUT MONITOR= LIST= PUNCH= HESD=) def
Index
/Indexpage  133 def
/Indextext (OUTPUT PRINT PUNCH LIST28) def
Index
/Indexpage  114 def
/Indextext (OUTPUT=) def
Index
/Indexpage   56 def
/Indextext (OUTPUTLIST) def
Index
/Indexpage   65 def
/Indextext (OUTPUTLIST) def
Index
/Indexpage   61 def
/Indextext (OUTPUTLIST=) def
Index
/Indexpage   62 def
/Indextext (OUTPUTLIST=) def
Index
/Indexpage   63 def
/Indextext (OUTPUTLIST=) def
Index
/Indexpage   64 def
/Indextext (OUTPUTLIST=) def
Index
/Indexpage  115 def
/Indextext (OUTPUTLIST=) def
Index
/Indexpage   52 def
/Indextext (OU[ISO]) def
Index
/Indexpage   53 def
/Indextext (OU[ISO]=) def
Index
/Indexpage   52 def
/Indextext (OVERALL PARAMETER SPECIFICATION) def
Index
/Indexpage   91 def
/Indextext (OVERALL PARAMETERS) def
Index
/Indexpage   53 def
/Indextext (OVERALL SCALE= DU[ISO]= OU[ISO]= POLARIT) def
Index
/Indexpage  143 def
/Indextext (Obsolete Commands) def
Index
/Indexpage   85 def
/Indextext (Obsolete Refinement directives) def
Index
/Indexpage   72 def
/Indextext (Output from MATCH) def
Index
/Indexpage   67 def
/Indextext (Output from REGULARISE) def
Index
/Indexpage   80 def
/Indextext (Overall parameter refinement) def
Index
/Indexpage   47 def
/Indextext (P=) def
Blank
Index
/Indexpage   95 def
/Indextext (P=) def
Index
/Indexpage   54 def
/Indextext (P= Q= R=) def
Index
/Indexpage   97 def
/Indextext (P= Q= R= S= T=) def
Index
/Indexpage   98 def
/Indextext (P= Q= R= S= T=) def
Index
/Indexpage   73 def
/Indextext (PAIR TYPE1= TYPE2= MIN= MAX= BONDTYPE=) def
Index
/Indexpage   46 def
/Indextext (PARAMETERS P .....) def
Index
/Indexpage   95 def
/Indextext (PARAMETERS P=) def
Index
/Indexpage   50 def
/Indextext (PART) def
Index
/Indexpage   81 def
/Indextext (PARTIAL=) def
Index
/Indexpage  113 def
/Indextext (PEAKS HEIGHT= NPEAK= REJECT=) def
Index
/Indexpage   59 def
/Indextext (PERTURB VALUE PARAMETERS ...) def
Index
/Indexpage   69 def
/Indextext (PHENYL) def
Index
/Indexpage   64 def
/Indextext (PHENYL  X R\(1\) R\(2\) R\(3\) R\(4\) R ) def
Index
/Indexpage   40 def
/Indextext (PHI NPHIVALUES= NPHICURVES=) def
Index
/Indexpage   40 def
/Indextext (PHI=) def
Index
/Indexpage   40 def
/Indextext (PHICURVE I= .....) def
Index
/Indexpage   40 def
/Indextext (PHIHKLI H= K= L= I[MAX]=) def
Index
/Indexpage   40 def
/Indextext (PHIVALUES PHI= .....) def
Index
/Indexpage  123 def
/Indextext (PIVOT atoms) def
Index
/Indexpage   89 def
/Indextext (PLANAR E.S.D. FOR 'ATOM SPECIFICATIONS') def
Index
/Indexpage  126 def
/Indextext (PLANE) def
Index
/Indexpage  144 def
/Indextext (PLANE) def
Index
/Indexpage   41 def
/Indextext (PLATE NOTHING OMEGA= CHI= PHI= KAPPA= MU) def
Index
/Indexpage   40 def
/Indextext (PLATE=) def
Index
/Indexpage  127 def
/Indextext (PLOT) def
Index
/Indexpage  144 def
/Indextext (PLOT) def
Index
/Indexpage   85 def
/Indextext (PLUS  PARAMETERS) def
Index
/Indexpage   52 def
/Indextext (POLARITY) def
Index
/Indexpage   53 def
/Indextext (POLARITY=) def
Index
/Indexpage  131 def
/Indextext (PRINT) def
Index
/Indexpage  132 def
/Indextext (PRINT) def
Index
/Indexpage   11 def
/Indextext (PRINT INDEX=) def
Index
/Indexpage   40 def
/Indextext (PRINT=) def
Index
/Indexpage  112 def
/Indextext (PRINT=) def
Index
/Indexpage  133 def
/Indextext (PRINT=) def
Index
/Indexpage   16 def
/Indextext (PROGRAM=) def
Index
/Indexpage   23 def
/Indextext (PROPERTIES FILE=) def
Index
/Indexpage  128 def
/Indextext (PUBLICATION  PRINT=) def
Index
/Indexpage  101 def
/Indextext (PUNCH) def
Index
/Indexpage  102 def
/Indextext (PUNCH) def
Index
/Indexpage  126 def
/Indextext (PUNCH) def
Index
/Indexpage  131 def
/Indextext (PUNCH) def
Index
/Indexpage  132 def
/Indextext (PUNCH) def
Index
/Indexpage  143 def
/Indextext (PUNCH) def
Index
/Indexpage  144 def
/Indextext (PUNCH) def
Index
/Indexpage   11 def
/Indextext (PUNCH=) def
Index
/Indexpage  121 def
/Indextext (PUNCH=) def
Index
/Indexpage  133 def
/Indextext (PUNCH=) def
Index
/Indexpage   50 def
/Indextext (Parameter NAMES) def
Index
/Indexpage   87 def
/Indextext (Parameter, atom, bond and angle specific) def
Index
/Indexpage   65 def
/Indextext (Perhydrogenation - \PERHYDRO) def
Index
/Indexpage  146 def
/Indextext (Principal atomic displacement directions) def
Index
/Indexpage   15 def
/Indextext (Printed Summary of Data lists) def
Index
/Indexpage   96 def
/Indextext (Printing LIST 4) def
Index
/Indexpage   33 def
/Indextext (Printing LIST 6) def
Index
/Indexpage   93 def
/Indextext (Printing and punching LIST 17) def
Index
/Indexpage   54 def
/Indextext (Printing and punching list 5) def
Index
/Indexpage   86 def
/Indextext (Printing of LIST 12) def
Index
/Indexpage   74 def
/Indextext (Printing of LIST 40) def
Index
/Indexpage   75 def
/Indextext (Printing of LIST 41) def
Index
/Indexpage   83 def
/Indextext (Printing the SLFS control list) def
Index
/Indexpage   19 def
/Indextext (Printing the cell parameters) def
Index
/Indexpage   19 def
/Indextext (Printing the cell variance-covariance ma) def
Index
/Indexpage  115 def
/Indextext (Printing the contents of LIST 10) def
Index
/Indexpage  107 def
/Indextext (Printing the contents of LIST 11) def
Index
/Indexpage  110 def
/Indextext (Printing the contents of LIST 14) def
Index
/Indexpage   92 def
/Indextext (Printing the contents of LIST 16) def
Index
/Indexpage   98 def
/Indextext (Printing the contents of LIST 28) def
Index
/Indexpage   28 def
/Indextext (Printing the contents of the asymmetric ) def
Index
/Indexpage   42 def
/Indextext (Printing the decay curve) def
Index
/Indexpage   27 def
/Indextext (Printing the experimental conditions, LI) def
Index
/Indexpage   31 def
/Indextext (Printing the general information, LIST 3) def
Index
/Indexpage   24 def
/Indextext (Printing the scattering factors) def
Index
/Indexpage   84 def
/Indextext (Printing the special position informatio) def
Index
/Indexpage   22 def
/Indextext (Printing the symmetry information) def
Index
/Indexpage   86 def
/Indextext (Processing of LIST 12) def
Index
/Indexpage  115 def
/Indextext (Processing of the peaks list  -  LIST 10) def
Index
/Indexpage  102 def
/Indextext (Processing of the refinement directives) def
Index
/Indexpage    9 def
/Indextext (Programming Errors) def
Index
/Indexpage  132 def
/Indextext (Publication listing of reflection data  ) def
Index
/Indexpage  129 def
/Indextext (Publication listing of the atomic parame) def
Index
/Indexpage   34 def
/Indextext (Punching LIST 6) def
Index
/Indexpage   56 def
/Indextext (QUIT) def
Blank
Index
/Indexpage  127 def
/Indextext (QUIT) def
Index
/Indexpage  144 def
/Indextext (QUIT) def
Index
/Indexpage  146 def
/Indextext (QUIT) def
Index
/Indexpage   78 def
/Indextext (R-Factor and minimisation function defin) def
Blank
Index
/Indexpage   99 def
/Indextext (R-Factor, Hamilton weighted) def
Index
/Indexpage   99 def
/Indextext (R-factor for Fo) def
Index
/Indexpage   29 def
/Indextext (R=) def
Index
/Indexpage   25 def
/Indextext (RADIATION=) def
Index
/Indexpage   73 def
/Indextext (RADIUS=) def
Index
/Indexpage  122 def
/Indextext (RANGE=) def
Index
/Indexpage   18 def
/Indextext (RATIO=) def
Index
/Indexpage   46 def
/Indextext (RATIO=) def
Index
/Indexpage   41 def
/Indextext (RAWSCALE=) def
Index
/Indexpage   27 def
/Indextext (READ  NELEMENT=) def
Index
/Indexpage   24 def
/Indextext (READ  NSCATTERERS=) def
Index
/Indexpage   33 def
/Indextext (READ F'S=) def
Index
/Indexpage   53 def
/Indextext (READ NATOM= NLAYER= NELEMENT= NBATCH=) def
Index
/Indexpage   34 def
/Indextext (READ NCOEFFICIENT= TYPE= F'S= NGROUP= UN) def
Index
/Indexpage   39 def
/Indextext (READ NCOEFFICIENT= TYPE= F'S= NGROUP= UN) def
Index
/Indexpage   73 def
/Indextext (READ NELEMENTS= NPAIRS= NMAKE= NBREAK=) def
Index
/Indexpage   41 def
/Indextext (READ NSCALE=) def
Index
/Indexpage   97 def
/Indextext (READ NSLICES= NOMISSION= NCONDITION=) def
Index
/Indexpage   18 def
/Indextext (REAL A= B= C= ALPHA= BETA= GAMMA=) def
Index
/Indexpage   26 def
/Indextext (REAL COMPONENTS= H= K= L= ANGLES=) def
Index
/Indexpage   18 def
/Indextext (RECIPROCAL A*= B*= C*= ALPHA*= BETA*= GA) def
Index
/Indexpage   27 def
/Indextext (RECIPROCAL COMPONENTS= H= K= L= ANGLES=) def
Index
/Indexpage   12 def
/Indextext (RECORDS=) def
Index
/Indexpage   82 def
/Indextext (REFINE  SPECIAL= UPDATE= TOLERANCE=) def
Index
/Indexpage  116 def
/Indextext (REFINE DISTANCE= MULTIPLIER=) def
Index
/Indexpage  101 def
/Indextext (REFINE LIST= MAP= \/Fo\/= PUNCH= MATRIX=) def
Index
/Indexpage   29 def
/Indextext (REFINE \(cont\) NREFUSED= FMINFUNC= REST) def
Index
/Indexpage   29 def
/Indextext (REFINEMENT R= RW= NPARAM= SIGMACUT= GOF=) def
Index
/Indexpage   46 def
/Indextext (REFLECTIONS NJCODE= LIST= LEVEL= F'S=) def
Index
/Indexpage  112 def
/Indextext (REFLECTIONS WEIGHT= REJECT= F000= CALC=) def
Index
/Indexpage   18 def
/Indextext (REFLECTIONS=) def
Index
/Indexpage   82 def
/Indextext (REFLECTIONS=) def
Index
/Indexpage    3 def
/Indextext (REFORMAT) def
Index
/Indexpage   60 def
/Indextext (REFORMAT) def
Index
/Indexpage  116 def
/Indextext (REGROUP=) def
Index
/Indexpage  127 def
/Indextext (REJECT   NV=) def
Index
/Indexpage  145 def
/Indextext (REJECT   NV=) def
Index
/Indexpage   46 def
/Indextext (REJECT RATIO= SIGMA=) def
Index
/Indexpage  112 def
/Indextext (REJECT=) def
Index
/Indexpage  113 def
/Indextext (REJECT=) def
Index
/Indexpage  115 def
/Indextext (REJECT=) def
Index
/Indexpage   12 def
/Indextext (RELATIVE=) def
Index
/Indexpage   11 def
/Indextext (RELATIVE=n) def
Index
/Indexpage   71 def
/Indextext (RENAME  n) def
Index
/Indexpage   58 def
/Indextext (RENAME ATOM1  ATOM2  \(, ATOM1  ATOM2\) ) def
Index
/Indexpage   69 def
/Indextext (RENAME offset number) def
Index
/Indexpage   68 def
/Indextext (REPLACE) def
Index
/Indexpage  126 def
/Indextext (REPLACE ATOM SPECIFICATIONS . . .) def
Index
/Indexpage  144 def
/Indextext (REPLACE ATOM SPECIFICATIONS . . .) def
Index
/Indexpage  146 def
/Indextext (REPLACE ATOM SPECIFICATIONS . . .) def
Index
/Indexpage   12 def
/Indextext (RESET LIST= SERIAL= RELATIVE=) def
Index
/Indexpage   59 def
/Indextext (RESET PARAMETER-NAME  VALUE ATOM LIST) def
Index
/Indexpage   49 def
/Indextext (RESIDUE) def
Index
/Indexpage  124 def
/Indextext (RESOLUTION value) def
Index
/Indexpage   30 def
/Indextext (RESTMINFUNC=) def
Index
/Indexpage   92 def
/Indextext (RESTRAIN VALUE, E.S.D. = TEXT) def
Index
/Indexpage   82 def
/Indextext (RESTRAIN=) def
Index
/Indexpage   11 def
/Indextext (RETAIN LIST= SERIAL= RELATIVE= ACTION=) def
Index
/Indexpage   82 def
/Indextext (REWEIGHT=) def
Index
/Indexpage   84 def
/Indextext (RIDE  ATOM_PARAMETER SPECIFICATIONS) def
Index
/Indexpage   60 def
/Indextext (RING NEWSERIAL ATOMLIST) def
Index
/Indexpage    2 def
/Indextext (RING newserial atomlist) def
Index
/Indexpage   29 def
/Indextext (RMERGE=) def
Index
/Indexpage   29 def
/Indextext (RMERGFRIED=) def
Index
/Indexpage   30 def
/Indextext (RMSSHIFT=) def
Index
/Indexpage   60 def
/Indextext (ROTATE) def
Index
/Indexpage   29 def
/Indextext (RW=) def
Index
/Indexpage  118 def
/Indextext (R\(11\)= R\(12\)= R\(13=\) R\(21\)=  .  ) def
Index
/Indexpage   26 def
/Indextext (R\(1\)= R\(2\)= R\(3\)= . . . R\(9\)=) def
Index
/Indexpage   96 def
/Indextext (Re-weighting the reflections - REWEIGHT) def
Index
/Indexpage   37 def
/Indextext (Recognised reflection coefficients) def
Index
/Indexpage  134 def
/Indextext (Refcif.dat) def
Index
/Indexpage  133 def
/Indextext (References) def
Index
/Indexpage   76 def
/Indextext (Refinement) def
Index
/Indexpage   84 def
/Indextext (Refinement directives  -  LIST 12) def
Index
/Indexpage  107 def
/Indextext (Refinement parameter map  -  LIST 22) def
Index
/Indexpage   37 def
/Indextext (Refinement using a partial model) def
Index
/Indexpage   32 def
/Indextext (Reflection Data) def
Index
/Indexpage   32 def
/Indextext (Reflection Data Input) def
Index
/Indexpage   36 def
/Indextext (Reflection Parameter Coefficients) def
Index
/Indexpage   96 def
/Indextext (Reflection restriction list  -  LIST 28) def
Index
/Indexpage  134 def
/Indextext (Reftab) def
Index
/Indexpage   66 def
/Indextext (Regularisation of atomic groups - \REGUL) def
Index
/Indexpage   61 def
/Indextext (Reorganisation of lists 5 and 10  -  \RE) def
Index
/Indexpage   62 def
/Indextext (Repositioning of atoms  -  \COLLECT) def
Index
/Indexpage   79 def
/Indextext (Residual) def
Index
/Indexpage   78 def
/Indextext (Restrained hydrogens) def
Index
/Indexpage   86 def
/Indextext (Restraints  -  LIST 16) def
Index
/Indexpage  108 def
/Indextext (Restraints in internal format  -  LIST 2) def
Index
/Indexpage   78 def
/Indextext (Riding hydrogens) def
Index
/Indexpage   96 def
/Indextext (Robust-resistant weighting schemes 14, 1) def
Index
/Indexpage   16 def
/Indextext (S) def
Blank
Index
/Indexpage   48 def
/Indextext (S) def
Index
/Indexpage   54 def
/Indextext (S=) def
Index
/Indexpage   74 def
/Indextext (S= S2=) def
Index
/Indexpage   89 def
/Indextext (SAME BOND-ESD ANGLE-ESD FOR GROUP-1 AND ) def
Index
/Indexpage   56 def
/Indextext (SAVE) def
Index
/Indexpage  126 def
/Indextext (SAVE) def
Index
/Indexpage  144 def
/Indextext (SAVE) def
Index
/Indexpage  146 def
/Indextext (SAVE) def
Index
/Indexpage  118 def
/Indextext (SAVED MATRIX=) def
Index
/Indexpage   52 def
/Indextext (SCALE) def
Index
/Indexpage  104 def
/Indextext (SCALE) def
Index
/Indexpage  147 def
/Indextext (SCALE) def
Index
/Indexpage  101 def
/Indextext (SCALE LIST= MAP= \/Fo\/=) def
Index
/Indexpage   41 def
/Indextext (SCALE SCALENUMBER= RAWSCALE= SMOOTHSCALE) def
Index
/Indexpage   53 def
/Indextext (SCALE=) def
Index
/Indexpage   54 def
/Indextext (SCALE=) def
Index
/Indexpage  112 def
/Indextext (SCALE=) def
Index
/Indexpage  117 def
/Indextext (SCALE=) def
Index
/Indexpage  133 def
/Indextext (SCALE=) def
Index
/Indexpage  110 def
/Indextext (SCALEFACTOR VALUE=) def
Index
/Indexpage   41 def
/Indextext (SCALENUMBER=) def
Index
/Indexpage  112 def
/Indextext (SCAN=) def
Index
/Indexpage   29 def
/Indextext (SCANMODE=) def
Index
/Indexpage   23 def
/Indextext (SCATTERING FILE=) def
Index
/Indexpage   24 def
/Indextext (SCATTERING TYPE= F'= F''= A\(1\)= B\(1\)) def
Index
/Indexpage   46 def
/Indextext (SCHEME=) def
Index
/Indexpage   94 def
/Indextext (SCHEME= NUMBER= NPARAMETERS= TYPE= WEIGH) def
Index
/Indexpage  118 def
/Indextext (SECTION MINIMUM= NUMBER= STEP=) def
Index
/Indexpage  131 def
/Indextext (SELECT) def
Index
/Indexpage  132 def
/Indextext (SELECT) def
Index
/Indexpage  121 def
/Indextext (SELECT ALLDIST= COORD= SORTED= TYPE= RAN) def
Index
/Indexpage   58 def
/Indextext (SELECT ATOM-PARAMETER  OPERATOR  VALUE, ) def
Index
/Indexpage   62 def
/Indextext (SELECT MONITOR= TOLERANCE= TYPE= SYMMETR) def
Index
/Indexpage   61 def
/Indextext (SELECT MOVE= KEEP= MONITOR= SEQUENCE= SY) def
Index
/Indexpage  115 def
/Indextext (SELECT REJECT= KEEP= MONI= SEQ= TYPE= RE) def
Index
/Indexpage   62 def
/Indextext (SEQUENCE) def
Index
/Indexpage  115 def
/Indextext (SEQUENCE=) def
Index
/Indexpage   48 def
/Indextext (SERIAL) def
Index
/Indexpage   64 def
/Indextext (SERIAL  N) def
Index
/Indexpage   66 def
/Indextext (SERIAL  N) def
Index
/Indexpage   12 def
/Indextext (SERIAL=) def
Index
/Indexpage   53 def
/Indextext (SERIAL=) def
Index
/Indexpage   74 def
/Indextext (SERIAL= SERIAL2=) def
Index
/Indexpage   11 def
/Indextext (SERIAL=n) def
Index
/Indexpage   41 def
/Indextext (SERIALNUMBER=) def
Index
/Indexpage  100 def
/Indextext (SFLS INPUT=) def
Index
/Indexpage   31 def
/Indextext (SHAPE) def
Index
/Indexpage  102 def
/Indextext (SHIFT  KEY = VALUE  KEY = VALUE .  .  . ) def
Index
/Indexpage   59 def
/Indextext (SHIFT  V1, V2, V3   ATOM-SPECIFICATION .) def
Index
/Indexpage   73 def
/Indextext (SIGCHANGE=) def
Index
/Indexpage   46 def
/Indextext (SIGMA=) def
Index
/Indexpage   30 def
/Indextext (SIGMACUT=) def
Index
/Indexpage   90 def
/Indextext (SIMU ADP-ESD  FOR GROUP-1 \(AND GROUP-2 ) def
Index
/Indexpage   12 def
/Indextext (SIZE=) def
Index
/Indexpage   98 def
/Indextext (SKIP STEP=) def
Index
/Indexpage   97 def
/Indextext (SLICE P= Q= R= S= T= TYPE=) def
Index
/Indexpage   41 def
/Indextext (SMOOTHSCALE=) def
Index
/Indexpage   31 def
/Indextext (SOLUTION=) def
Index
/Indexpage   58 def
/Indextext (SORT KEYWORD) def
Index
/Indexpage   58 def
/Indextext (SORT TYPE1 TYPE2 ...) def
Index
/Indexpage  122 def
/Indextext (SORTED=) def
Index
/Indexpage  138 def
/Indextext (SORTING TWINNED STRUCTURE DATA  -  \REOR) def
Index
/Indexpage   22 def
/Indextext (SPACEGROUP LATTICE= A-AXIS= B-AXIS= C-AX) def
Index
/Indexpage   17 def
/Indextext (SPACEGROUP SYMBOL=) def
Index
/Indexpage   82 def
/Indextext (SPECIAL=) def
Index
/Indexpage   60 def
/Indextext (SPHERE NEWSERIAL ATOMLIST) def
Index
/Indexpage    2 def
/Indextext (SPHERE newserial atomlist) def
Index
/Indexpage   57 def
/Indextext (SPLIT Z ATOM-SPECIFICATION ...) def
Index
/Indexpage   25 def
/Indextext (SPREAD=) def
Index
/Indexpage   69 def
/Indextext (SQP X Y Z) def
Index
/Indexpage   69 def
/Indextext (SQUARE X Y) def
Index
/Indexpage   29 def
/Indextext (STANDARDS=) def
Index
/Indexpage   98 def
/Indextext (STEP=) def
Index
/Indexpage  109 def
/Indextext (STEP=) def
Index
/Indexpage  118 def
/Indextext (STEP=) def
Index
/Indexpage   43 def
/Indextext (STORE MEDIUM) def
Index
/Indexpage   45 def
/Indextext (STORE MEDIUM=) def
Index
/Indexpage  138 def
/Indextext (STORE MEDIUM=) def
Index
/Indexpage   42 def
/Indextext (STORE MEDIUM= F'S=) def
Index
/Indexpage   43 def
/Indextext (STORE MEDIUM= F'S= NEWINDICES=) def
Index
/Indexpage   35 def
/Indextext (STORE NCOEFFICIENT= MEDIUM= APPEND=) def
Index
/Indexpage   39 def
/Indextext (STORE NCOEFFICIENT= MEDIUM= APPEND=) def
Index
/Indexpage   59 def
/Indextext (SUBTRACT  VALUE  PARAMETERS  ...) def
Index
/Indexpage   89 def
/Indextext (SUM E.S.D. FOR 'PARAMETER SPECIFICATIONS) def
Index
/Indexpage   20 def
/Indextext (SYMBOL EXPRESSION=) def
Index
/Indexpage   17 def
/Indextext (SYMBOL=) def
Index
/Indexpage   22 def
/Indextext (SYMMETRY  X=  Y=  Z=) def
Index
/Indexpage   62 def
/Indextext (SYMMETRY=) def
Index
/Indexpage  116 def
/Indextext (SYMMETRY=) def
Index
/Indexpage  122 def
/Indextext (SYMMETRY=) def
Index
/Indexpage   68 def
/Indextext (SYSTEM a b c alpha beta gamma) def
Index
/Indexpage   43 def
/Indextext (SYSTEMATIC INPUTLIST=) def
Index
/Indexpage   80 def
/Indextext (Scale factor definitions) def
Index
/Indexpage  109 def
/Indextext (Scope of the Fourier section of the user) def
Index
/Indexpage   17 def
/Indextext (Scope of the Initial Data Input section.) def
Index
/Indexpage   32 def
/Indextext (Scope of the Reflection Data Input secti) def
Index
/Indexpage   48 def
/Indextext (Scope of the atomic and structural param) def
Index
/Indexpage   76 def
/Indextext (Scope of the structure factors and least) def
Index
/Indexpage  120 def
/Indextext (Scope of this section of the user guide) def
Index
/Indexpage    9 def
/Indextext (Severe Errors) def
Index
/Indexpage   33 def
/Indextext (Simple input of F or Fsq data - LIST 6) def
Index
/Indexpage  116 def
/Indextext (Slant fourier calculations  -  \SLANT) def
Index
/Indexpage   99 def
/Indextext (Sorting of LIST 6 for structure factor c) def
Index
/Indexpage   43 def
/Indextext (Sorting of the reflection data  -  \SORT) def
Index
/Indexpage   19 def
/Indextext (Space Group input - \SPACEGROUP) def
Index
/Indexpage    2 def
/Indextext (Special AZIMUTH) def
Index
/Indexpage   52 def
/Indextext (Special AZIMUTH) def
Index
/Indexpage   54 def
/Indextext (Special AZIMUTH) def
Index
/Indexpage    2 def
/Indextext (Special DECLINAT) def
Index
/Indexpage   52 def
/Indextext (Special DECLINAT) def
Index
/Indexpage   54 def
/Indextext (Special DECLINAT) def
Index
/Indexpage   37 def
/Indextext (Special Reflection storage) def
Index
/Indexpage    2 def
/Indextext (Special SIZE) def
Index
/Indexpage   51 def
/Indextext (Special SIZE) def
Index
/Indexpage   54 def
/Indextext (Special SIZE) def
Index
/Indexpage    2 def
/Indextext (Special U[iso]) def
Index
/Indexpage   51 def
/Indextext (Special U[iso]) def
Index
/Indexpage   54 def
/Indextext (Special U[iso]) def
Index
/Indexpage   83 def
/Indextext (Special position constraints - \SPECIAL) def
Index
/Indexpage   79 def
/Indextext (Special positions) def
Index
/Indexpage   48 def
/Indextext (Specifications of atoms and other parame) def
Index
/Indexpage   45 def
/Indextext (Standard deviations produced by the merg) def
Index
/Indexpage   96 def
/Indextext (Statistical Weights, 16) def
Index
/Indexpage    1 def
/Indextext (Status) def
Index
/Indexpage   37 def
/Indextext (Storage of reflection data) def
Index
/Indexpage   98 def
/Indextext (Structure Factor Least Squares Calculati) def
Index
/Indexpage   76 def
/Indextext (Structure Factors And Least Squares) def
Index
/Indexpage   80 def
/Indextext (Structure factor calculation control lis) def
Index
/Indexpage  147 def
/Indextext (Structure factors for a group of trial m) def
Index
/Indexpage   55 def
/Indextext (Summary display of LIST 5 - \\DISPLAY) def
Index
/Indexpage  133 def
/Indextext (Summary of data lists - \SUMMARY) def
Index
/Indexpage   16 def
/Indextext (Symmetry equivalent atoms) def
Index
/Indexpage    4 def
/Indextext (Syntax of Commands) def
Index
/Indexpage    4 def
/Indextext (Syntax of the manual) def
Index
/Indexpage   42 def
/Indextext (Systematic absence removal - \SYSTEMATIC) def
Index
/Indexpage  113 def
/Indextext (TAPES INPUT= OUTPUT=) def
Blank
Index
/Indexpage   68 def
/Indextext (TARGET Atom Specifications) def
Index
/Indexpage   69 def
/Indextext (TBP X Z) def
Index
/Indexpage   29 def
/Indextext (TEMPERATURE=) def
Index
/Indexpage   69 def
/Indextext (TETRAHEDRON X) def
Index
/Indexpage  104 def
/Indextext (THETA INTERVAL=) def
Index
/Indexpage   40 def
/Indextext (THETA NTHETAVALUES=) def
Index
/Indexpage   47 def
/Indextext (THETA NTHETAVALUES=) def
Index
/Indexpage   40 def
/Indextext (THETA=) def
Index
/Indexpage  106 def
/Indextext (THETA=) def
Index
/Indexpage   26 def
/Indextext (THETA= OMEGA= CHI= PHI= KAPPA= PSI=) def
Index
/Indexpage   40 def
/Indextext (THETACURVE CORRECTION= ......) def
Index
/Indexpage   47 def
/Indextext (THETACURVE CORRECTION= ......) def
Index
/Indexpage   30 def
/Indextext (THETAMIN= THETAMAX=) def
Index
/Indexpage   40 def
/Indextext (THETAVALUES THETA= .....) def
Index
/Indexpage   47 def
/Indextext (THETAVALUES THETA= .....) def
Index
/Indexpage   26 def
/Indextext (THETA\(1\)=) def
Index
/Indexpage   26 def
/Indextext (THETA\(2\)=) def
Index
/Indexpage   29 def
/Indextext (THORIENTMAX=) def
Index
/Indexpage   29 def
/Indextext (THORIENTMIN=) def
Index
/Indexpage   26 def
/Indextext (THREE H= K= L= THETA= OMEGA= CHI= PHI= K) def
Index
/Indexpage  101 def
/Indextext (THRESHOLD) def
Index
/Indexpage  148 def
/Indextext (THROUGH NUMBER X-COMPONENT Y-COMPONENT Z) def
Index
/Indexpage  110 def
/Indextext (THROUGH=) def
Index
/Indexpage  135 def
/Indextext (TLQS twins) def
Index
/Indexpage  126 def
/Indextext (TLS) def
Index
/Indexpage  146 def
/Indextext (TLS) def
Index
/Indexpage  124 def
/Indextext (TLS analysis, best planes and lines  -  ) def
Index
/Indexpage  135 def
/Indextext (TLS twins) def
Index
/Indexpage  135 def
/Indextext (TLS twins - Class I) def
Index
/Indexpage  135 def
/Indextext (TLS twins - Class II) def
Index
/Indexpage  142 def
/Indextext (TM) def
Index
/Indexpage   36 def
/Indextext (TOLER=) def
Index
/Indexpage   84 def
/Indextext (TOLERANCE) def
Index
/Indexpage   62 def
/Indextext (TOLERANCE=) def
Index
/Indexpage   73 def
/Indextext (TOLERANCE=) def
Index
/Indexpage   82 def
/Indextext (TOLERANCE=) def
Index
/Indexpage   73 def
/Indextext (TOLTYPE=) def
Index
/Indexpage   30 def
/Indextext (TOTALMINFUNC=) def
Index
/Indexpage  142 def
/Indextext (TRANS) def
Index
/Indexpage   59 def
/Indextext (TRANSFORM  R11, R21, R31, . . . R33  ATO) def
Index
/Indexpage   62 def
/Indextext (TRANSLATION=) def
Index
/Indexpage   63 def
/Indextext (TRANSLATION=) def
Index
/Indexpage  116 def
/Indextext (TRANSLATION=) def
Index
/Indexpage  122 def
/Indextext (TRANSLATION=) def
Index
/Indexpage   12 def
/Indextext (TRIES=) def
Index
/Indexpage  142 def
/Indextext (TT) def
Index
/Indexpage   40 def
/Indextext (TUBE NOTHING OMEGA= CHI= PHI= KAPPA= MU ) def
Index
/Indexpage   40 def
/Indextext (TUBE=) def
Index
/Indexpage  138 def
/Indextext (TWIN LIST 13) def
Index
/Indexpage   25 def
/Indextext (TWINNED=) def
Index
/Indexpage   45 def
/Indextext (TWINNED=) def
Index
/Indexpage   36 def
/Indextext (TWINTOLER=) def
Index
/Indexpage   26 def
/Indextext (TWO H= K= L= THETA= OMEGA= CHI= PHI= KAP) def
Index
/Indexpage   48 def
/Indextext (TX,TY,TZ) def
Index
/Indexpage   74 def
/Indextext (TX= TY= TZ= TX2= TY2= TZ2=) def
Index
/Indexpage   48 def
/Indextext (TYPE) def
Index
/Indexpage   94 def
/Indextext (TYPE) def
Index
/Indexpage  103 def
/Indextext (TYPE) def
Index
/Indexpage  131 def
/Indextext (TYPE) def
Index
/Indexpage  132 def
/Indextext (TYPE) def
Index
/Indexpage  133 def
/Indextext (TYPE) def
Index
/Indexpage   66 def
/Indextext (TYPE    MODE) def
Index
/Indexpage   73 def
/Indextext (TYPE1=) def
Index
/Indexpage   79 def
/Indextext (TYPE1\(SERIAL1,KEY[1], . ,KEY[K]\)  UNTI) def
Index
/Indexpage   74 def
/Indextext (TYPE2=) def
Index
/Indexpage   15 def
/Indextext (TYPE=) def
Index
/Indexpage   24 def
/Indextext (TYPE=) def
Index
/Indexpage   27 def
/Indextext (TYPE=) def
Index
/Indexpage   34 def
/Indextext (TYPE=) def
Index
/Indexpage   53 def
/Indextext (TYPE=) def
Index
/Indexpage   62 def
/Indextext (TYPE=) def
Index
/Indexpage   73 def
/Indextext (TYPE=) def
Index
/Indexpage   97 def
/Indextext (TYPE=) def
Index
/Indexpage   98 def
/Indextext (TYPE=) def
Index
/Indexpage  111 def
/Indextext (TYPE=) def
Index
/Indexpage  116 def
/Indextext (TYPE=) def
Index
/Indexpage  117 def
/Indextext (TYPE=) def
Index
/Indexpage  122 def
/Indextext (TYPE=) def
Index
/Indexpage   74 def
/Indextext (TYPE= TYPE2=) def
Index
/Indexpage   58 def
/Indextext (TYPECHANGE KEYWORD OPERATOR VALUE NEW-AT) def
Index
/Indexpage   79 def
/Indextext (TYPE\(SERIAL,KEY[1], . . ,KEY[K]\)) def
Index
/Indexpage   48 def
/Indextext (TYPE\(SERIAL,S,L,TX,TY,TZ\)) def
Index
/Indexpage   50 def
/Indextext (Temperature factor definitions) def
Index
/Indexpage   32 def
/Indextext (Termination of reflection data) def
Index
/Indexpage  142 def
/Indextext (The Basic Matrix Calculator \MATRIX) def
Index
/Indexpage   10 def
/Indextext (The Crystals Database) def
Index
/Indexpage   51 def
/Indextext (The Special Shapes) def
Index
/Indexpage  107 def
/Indextext (The least squares matrix  -  LIST 11) def
Index
/Indexpage    8 def
/Indextext (The listing file:) def
Index
/Indexpage    8 def
/Indextext (The log file:) def
Index
/Indexpage    8 def
/Indextext (The monitor file:) def
Index
/Indexpage    8 def
/Indextext (The punch file:) def
Index
/Indexpage   93 def
/Indextext (The special restraints  -  LIST 17) def
Index
/Indexpage  145 def
/Indextext (Thermal displacement parameter analysis ) def
Index
/Indexpage   47 def
/Indextext (Theta-dependent Absorption Correction  -) def
Index
/Indexpage  128 def
/Indextext (Torsion angles  -  \TORSION) def
Index
/Indexpage  136 def
/Indextext (Twin Data stored by CRYSTALS) def
Index
/Indexpage  138 def
/Indextext (Twin List 12) def
Index
/Indexpage  138 def
/Indextext (Twin List 16) def
Index
/Indexpage  137 def
/Indextext (Twin List 5) def
Index
/Indexpage  137 def
/Indextext (Twin List 6) def
Index
/Indexpage  135 def
/Indextext (Twinned Crystals) def
Index
/Indexpage   37 def
/Indextext (Twinned structures) def
Index
/Indexpage  135 def
/Indextext (Twinning - Data collection and processin) def
Index
/Indexpage  135 def
/Indextext (Twinning - Initial clues) def
Index
/Indexpage  136 def
/Indextext (Twinning - LISTS affected) def
Index
/Indexpage  140 def
/Indextext (Twinning - Mathematical aspects) def
Index
/Indexpage  136 def
/Indextext (Twinning - Structure Refinement) def
Index
/Indexpage  136 def
/Indextext (Twinning - Structure solution) def
Index
/Indexpage  135 def
/Indextext (Twinning - introduction) def
Index
/Indexpage  135 def
/Indextext (Twinning Problems) def
Index
/Indexpage  139 def
/Indextext (Twins - Worked Example) def
Index
/Indexpage  139 def
/Indextext (Twins - backward compatability) def
Index
/Indexpage   16 def
/Indextext (Tx,Ty,Yz) def
Index
/Indexpage    4 def
/Indextext (Types of Commands:) def
Index
/Indexpage  131 def
/Indextext (U'S NCHAR= NDEC= SELECT= TYPE= DISPLAY= ) def
Blank
Index
/Indexpage   59 def
/Indextext (UEQUIV  ATOM SPECIFICATIONS  .  .) def
Index
/Indexpage   20 def
/Indextext (UNIQUE=) def
Index
/Indexpage   35 def
/Indextext (UNIT=) def
Index
/Indexpage   49 def
/Indextext (UNTIL sequences) def
Index
/Indexpage   84 def
/Indextext (UPDATE) def
Index
/Indexpage   81 def
/Indextext (UPDATE=) def
Index
/Indexpage   82 def
/Indextext (UPDATE=) def
Index
/Indexpage   12 def
/Indextext (USAGE LIST= SERIAL= RELATIVE= FLAG=) def
Index
/Indexpage   53 def
/Indextext (U[11]= U[22]= U[33]= U[23]= U[13]= U[12]) def
Index
/Indexpage   64 def
/Indextext (U[ISO]    NEXT   MULT) def
Index
/Indexpage   66 def
/Indextext (U[ISO]    NEXT   MULT) def
Index
/Indexpage   64 def
/Indextext (U[ISO]    U) def
Index
/Indexpage   66 def
/Indextext (U[ISO]    U) def
Index
/Indexpage   83 def
/Indextext (U[MIN]=) def
Index
/Indexpage   89 def
/Indextext (U\(IJ\)'S VALUE, E.S.D. =, BOND1, BOND2,) def
Index
/Indexpage   51 def
/Indextext (Uequiv) def
Index
/Indexpage   99 def
/Indextext (Unstable refinements) def
Index
/Indexpage   69 def
/Indextext (Uses of \\REGULARISE) def
Index
/Indexpage   19 def
/Indextext (VALUE=) def
Blank
Index
/Indexpage   36 def
/Indextext (VALUE=) def
Index
/Indexpage   46 def
/Indextext (VALUE=) def
Index
/Indexpage  110 def
/Indextext (VALUE=) def
Index
/Indexpage   28 def
/Indextext (VANDERWAALS=) def
Index
/Indexpage   91 def
/Indextext (VARIABLES) def
Index
/Indexpage  102 def
/Indextext (VECTOR MONITOR MAP Fo PUNCH MATRIX) def
Index
/Indexpage   88 def
/Indextext (VIBRATIONS VALUE, E.S.D. = BOND1, BOND2,) def
Index
/Indexpage   19 def
/Indextext (V\(11\)= V\(12\)= . . V\(16\)= V\(22\)= ) def
Index
/Indexpage  124 def
/Indextext (Void Location  -  \VOIDS) def
Index
/Indexpage   67 def
/Indextext (WARNING) def
Blank
Index
/Indexpage  105 def
/Indextext (WARNING) def
Index
/Indexpage   18 def
/Indextext (WAVELENGTH=) def
Index
/Indexpage   26 def
/Indextext (WAVELENGTH=) def
Index
/Indexpage   28 def
/Indextext (WEIGHT) def
Index
/Indexpage   46 def
/Indextext (WEIGHT SCHEME= NPARAMETERS= NCYCLE=) def
Index
/Indexpage   85 def
/Indextext (WEIGHT w1 PARAMETERS w2 PARAMETERS . .) def
Index
/Indexpage   94 def
/Indextext (WEIGHT=) def
Index
/Indexpage  112 def
/Indextext (WEIGHT=) def
Index
/Indexpage  118 def
/Indextext (WEIGHT=) def
Index
/Indexpage   44 def
/Indextext (WEIGHTING SCHEMES FOR THE DATA MERGE) def
Index
/Indexpage    9 def
/Indextext (Warnings) def
Index
/Indexpage   78 def
/Indextext (Weighted R-value) def
Index
/Indexpage   94 def
/Indextext (Weighting for refinement against Fo) def
Index
/Indexpage   94 def
/Indextext (Weighting for refinement against Fsq) def
Index
/Indexpage   95 def
/Indextext (Weighting schemes) def
Index
/Indexpage   93 def
/Indextext (Weighting schemes for refinement-  LIST ) def
Index
/Indexpage   96 def
/Indextext (Weighting the reflections - WEIGHT) def
Index
/Indexpage   95 def
/Indextext (Weights stored in LIST 6) def
Index
/Indexpage  109 def
/Indextext (X-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def
Blank
Index
/Indexpage  148 def
/Indextext (X-COMPONENT Y-COMPONENT Z-COMPONENT) def
Index
/Indexpage  110 def
/Indextext (X-PAT MINIMUM= STEP= MAXIMUM= DIVISION=) def
Index
/Indexpage   53 def
/Indextext (X= Y= Z=) def
Index
/Indexpage  118 def
/Indextext (XO=) def
Index
/Indexpage  109 def
/Indextext (Y-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def
Blank
Index
/Indexpage  110 def
/Indextext (Y-PAT MINIMUM= STEP MAXIMUM= DIVISION=) def
Index
/Indexpage  118 def
/Indextext (YO=) def
Index
/Indexpage  110 def
/Indextext (Z-AXIS MINIMUM= STEP= MAXIMUM= DIVISION=) def
Blank
Index
/Indexpage  110 def
/Indextext (Z-PAT MINIMUM= STEP= MAXIMUM= DIVISION=) def
Index
/Indexpage  127 def
/Indextext (ZEROS) def
Index
/Indexpage  118 def
/Indextext (ZO=) def
Index
/Indexpage  100 def
/Indextext (\/Fo\/) def
Blank
Index
/Indexpage    5 def
/Indextext (\\ ..... COMMENTS ....) def
Index
/Indexpage  103 def
/Indextext (\\ANALYSE INPUT=) def
Index
/Indexpage  145 def
/Indextext (\\ANISO INPUTLIST) def
Index
/Indexpage    6 def
/Indextext (\\APPEND devicename filename) def
Index
/Indexpage  146 def
/Indextext (\\AXES INPUTLIST=) def
Index
/Indexpage    7 def
/Indextext (\\BENCH nparam nref) def
Index
/Indexpage   93 def
/Indextext (\\CHECK LEVEL=) def
Index
/Indexpage  133 def
/Indextext (\\CIF) def
Index
/Indexpage   86 def
/Indextext (\\CLEAR 12) def
Index
/Indexpage   92 def
/Indextext (\\CLEAR 16) def
Index
/Indexpage   93 def
/Indextext (\\CLEAR 17) def
Index
/Indexpage    6 def
/Indextext (\\CLOSE devicename) def
Index
/Indexpage   62 def
/Indextext (\\COLLECT INPUTLIST= OUTPUTLIST=) def
Index
/Indexpage    5 def
/Indextext (\\COMMANDS   command) def
Index
/Indexpage   23 def
/Indextext (\\COMPOSITION) def
Index
/Indexpage   63 def
/Indextext (\\CONVERT INPUTLIST= OUTPUTLIST= CROSSTE) def
Index
/Indexpage  105 def
/Indextext (\\DIFABS  ACTION= MODE= INPUT=) def
Index
/Indexpage   11 def
/Indextext (\\DISK) def
Index
/Indexpage   55 def
/Indextext (\\DISPLAY    LEVEL=) def
Index
/Indexpage  120 def
/Indextext (\\DISTANCES INPUTLIST=) def
Index
/Indexpage   56 def
/Indextext (\\EDIT INPUTLIST OUTPUTLIST) def
Index
/Indexpage    5 def
/Indextext (\\FINISH) def
Index
/Indexpage   16 def
/Indextext (\\FOREIGN) def
Index
/Indexpage  111 def
/Indextext (\\FOURIER INPUT=) def
Index
/Indexpage  126 def
/Indextext (\\GEOMETRY INPUTLIST=) def
Index
/Indexpage    6 def
/Indextext (\\HELP   'topic') def
Index
/Indexpage   39 def
/Indextext (\\HKLI) def
Index
/Indexpage   64 def
/Indextext (\\HYDROGENS INPUTLIST= OUTPUTLIST=) def
Index
/Indexpage   18 def
/Indextext (\\LIST 1) def
Index
/Indexpage  115 def
/Indextext (\\LIST 10) def
Index
/Indexpage   84 def
/Indextext (\\LIST 12) def
Index
/Indexpage   25 def
/Indextext (\\LIST 13) def
Index
/Indexpage  109 def
/Indextext (\\LIST 14) def
Index
/Indexpage   88 def
/Indextext (\\LIST 16) def
Index
/Indexpage   93 def
/Indextext (\\LIST 17) def
Index
/Indexpage   21 def
/Indextext (\\LIST 2) def
Index
/Indexpage   86 def
/Indextext (\\LIST 22) def
Index
/Indexpage   80 def
/Indextext (\\LIST 23) def
Index
/Indexpage   41 def
/Indextext (\\LIST 27) def
Index
/Indexpage   97 def
/Indextext (\\LIST 28) def
Index
/Indexpage   27 def
/Indextext (\\LIST 29) def
Index
/Indexpage   24 def
/Indextext (\\LIST 3) def
Index
/Indexpage   28 def
/Indextext (\\LIST 30) def
Index
/Indexpage   19 def
/Indextext (\\LIST 31) def
Index
/Indexpage   94 def
/Indextext (\\LIST 4) def
Index
/Indexpage   53 def
/Indextext (\\LIST 5) def
Index
/Indexpage   42 def
/Indextext (\\LP) def
Index
/Indexpage    6 def
/Indextext (\\MANUAL  'name') def
Index
/Indexpage  142 def
/Indextext (\\MATRIX) def
Index
/Indexpage   45 def
/Indextext (\\MERGE) def
Index
/Indexpage  143 def
/Indextext (\\MOLAX INPUTLIST=) def
Index
/Indexpage    6 def
/Indextext (\\OPEN devicename filename) def
Index
/Indexpage  130 def
/Indextext (\\PARAMETERS) def
Index
/Indexpage    7 def
/Indextext (\\PAUSE interval) def
Index
/Indexpage  115 def
/Indextext (\\PEAKS INPUTLIST= OUTPUTLIST=) def
Index
/Indexpage   65 def
/Indextext (\\PERHYDRO INPUTLIST= OUTPUTLIST=) def
Index
/Indexpage   19 def
/Indextext (\\PRINT 1) def
Index
/Indexpage  115 def
/Indextext (\\PRINT 10) def
Index
/Indexpage  107 def
/Indextext (\\PRINT 11) def
Index
/Indexpage  107 def
/Indextext (\\PRINT 11 A) def
Index
/Indexpage  107 def
/Indextext (\\PRINT 11 B) def
Index
/Indexpage  107 def
/Indextext (\\PRINT 11 C) def
Index
/Indexpage   86 def
/Indextext (\\PRINT 12) def
Index
/Indexpage   27 def
/Indextext (\\PRINT 13) def
Index
/Indexpage  110 def
/Indextext (\\PRINT 14) def
Index
/Indexpage   92 def
/Indextext (\\PRINT 16) def
Index
/Indexpage   93 def
/Indextext (\\PRINT 17) def
Index
/Indexpage   22 def
/Indextext (\\PRINT 2) def
Index
/Indexpage   83 def
/Indextext (\\PRINT 23) def
Index
/Indexpage   42 def
/Indextext (\\PRINT 27) def
Index
/Indexpage   98 def
/Indextext (\\PRINT 28) def
Index
/Indexpage   28 def
/Indextext (\\PRINT 29) def
Index
/Indexpage   24 def
/Indextext (\\PRINT 3) def
Index
/Indexpage   31 def
/Indextext (\\PRINT 30) def
Index
/Indexpage   19 def
/Indextext (\\PRINT 31) def
Index
/Indexpage   96 def
/Indextext (\\PRINT 4) def
Index
/Indexpage   74 def
/Indextext (\\PRINT 40) def
Index
/Indexpage   75 def
/Indextext (\\PRINT 41) def
Index
/Indexpage   54 def
/Indextext (\\PRINT 5) def
Index
/Indexpage   33 def
/Indextext (\\PRINT 6 mode) def
Index
/Indexpage   86 def
/Indextext (\\PUNCH 12) def
Index
/Indexpage   92 def
/Indextext (\\PUNCH 16) def
Index
/Indexpage   93 def
/Indextext (\\PUNCH 17) def
Index
/Indexpage   75 def
/Indextext (\\PUNCH 40) def
Index
/Indexpage   75 def
/Indextext (\\PUNCH 40 B) def
Index
/Indexpage   54 def
/Indextext (\\PUNCH 5 mode) def
Index
/Indexpage   34 def
/Indextext (\\PUNCH 6 mode) def
Index
/Indexpage   14 def
/Indextext (\\PURGE) def
Index
/Indexpage   17 def
/Indextext (\\QUICKSTART) def
Index
/Indexpage  132 def
/Indextext (\\REFLECTIONS INPUT=) def
Index
/Indexpage   61 def
/Indextext (\\REGROUP INPUTLIST= OUTPUTLIST=) def
Index
/Indexpage   68 def
/Indextext (\\REGULARISE    MODE) def
Index
/Indexpage    6 def
/Indextext (\\RELEASE  devicename filename) def
Index
/Indexpage  138 def
/Indextext (\\REORDER) def
Index
/Indexpage   96 def
/Indextext (\\REWEIGHT INPUT= FACTOR=) def
Index
/Indexpage    5 def
/Indextext (\\SCRIPT filename) def
Index
/Indexpage    8 def
/Indextext (\\SET COMMUNICATION speed) def
Index
/Indexpage    7 def
/Indextext (\\SET EXPORT state) def
Index
/Indexpage    7 def
/Indextext (\\SET FILE type) def
Index
/Indexpage    7 def
/Indextext (\\SET GENERATE state) def
Index
/Indexpage    7 def
/Indextext (\\SET LIST   state) def
Index
/Indexpage    7 def
/Indextext (\\SET LOG state) def
Index
/Indexpage    8 def
/Indextext (\\SET MESSAGE state) def
Index
/Indexpage    7 def
/Indextext (\\SET MONITOR state) def
Index
/Indexpage    8 def
/Indextext (\\SET OPENMESSAGE state) def
Index
/Indexpage    7 def
/Indextext (\\SET PAGE length) def
Index
/Indexpage    7 def
/Indextext (\\SET PAUSE value) def
Index
/Indexpage    8 def
/Indextext (\\SET PRINTER state) def
Index
/Indexpage    8 def
/Indextext (\\SET SRQ state) def
Index
/Indexpage    8 def
/Indextext (\\SET TERMINAL device) def
Index
/Indexpage    8 def
/Indextext (\\SET TIME state) def
Index
/Indexpage    7 def
/Indextext (\\SET UEQUIV state) def
Index
/Indexpage    7 def
/Indextext (\\SET WATCH number) def
Index
/Indexpage  100 def
/Indextext (\\SFLS) def
Index
/Indexpage  117 def
/Indextext (\\SLANT INPUT=) def
Index
/Indexpage   43 def
/Indextext (\\SORT) def
Index
/Indexpage   20 def
/Indextext (\\SPACEGROUP) def
Index
/Indexpage    5 def
/Indextext (\\SPAWN      'shell command') def
Index
/Indexpage   84 def
/Indextext (\\SPECIAL  ACTION= UPDATE= TOLERANCE=) def
Index
/Indexpage   86 def
/Indextext (\\SUMMARY 12) def
Index
/Indexpage   75 def
/Indextext (\\SUMMARY 40) def
Index
/Indexpage   75 def
/Indextext (\\SUMMARY 41) def
Index
/Indexpage  133 def
/Indextext (\\SUMMARY 6) def
Index
/Indexpage   92 def
/Indextext (\\SUMMARY LIST 16) def
Index
/Indexpage   93 def
/Indextext (\\SUMMARY LIST 17) def
Index
/Indexpage   15 def
/Indextext (\\SUMMARY OF= TYPE= LEVEL=) def
Index
/Indexpage  133 def
/Indextext (\\SUMMARY OF= TYPE= LEVEL=) def
Index
/Indexpage   43 def
/Indextext (\\SYSTEMATIC) def
Index
/Indexpage    5 def
/Indextext (\\TITLE ..... A title to be printed ....) def
Index
/Indexpage  129 def
/Indextext (\\TON) def
Index
/Indexpage  128 def
/Indextext (\\TORSION INPUTLIST=) def
Index
/Indexpage  147 def
/Indextext (\\TRIAL) def
Index
/Indexpage    5 def
/Indextext (\\TYPE  'filename') def
Index
/Indexpage    5 def
/Indextext (\\USE source) def
Index
/Indexpage  124 def
/Indextext (\\VOIDS INPUTLIST=) def
Index
/Indexpage   96 def
/Indextext (\\WEIGHT INPUT=) def
Index
/Indexpage  103 def
/Indextext (e.s.d.s) def
Blank
Index
/Indexpage  134 def
/Indextext (e.s.d.s) def
Index
Banner
Docontents
/Indexpage    1 def
/chapno    1 def
/Indextext (Introduction To The System                                  ) def
Indexchapter
/Indexpage    1 def
/Indextext (Layout of this manual                                       ) def
Indexsection
/Indexpage    1 def
/Indextext (Status                                                      ) def
Indexsection
/Indexpage    1 def
/Indextext (MAJOR CHANGES for WINDOWS                                   ) def
Indexsection
/Indexpage    4 def
/chapno    2 def
/Indextext (Definitions And Conventions                                 ) def
Indexchapter
/Indexpage    4 def
/Indextext (Syntax of Commands                                          ) def
Indexsection
/Indexpage    4 def
/Indextext (Syntax of the manual                                        ) def
Indexsection
/Indexpage    4 def
/Indextext (Types of Commands:                                          ) def
Indexsection
/Indexpage    5 def
/Indextext (Immediate commands                                          ) def
Indexsection
/Indexpage    8 def
/Indextext (Files                                                       ) def
Indexsection
/Indexpage    8 def
/Indextext (Errors and Warnings                                         ) def
Indexsection
/Indexpage   10 def
/chapno    3 def
/Indextext (The Crystals Database                                       ) def
Indexchapter
/Indexpage   10 def
/Indextext (General List-control Directives  -  \DISK                   ) def
Indexsection
/Indexpage   14 def
/Indextext (Elimination of Old Versions of LISTS  -  \PURGE             ) def
Indexsection
/Indexpage   14 def
/Indextext (LISTS in Current use                                        ) def
Indexsection
/Indexpage   15 def
/Indextext (Printed Summary of Data lists                               ) def
Indexsection
/Indexpage   15 def
/Indextext (Element and Atom names                                      ) def
Indexsection
/Indexpage   16 def
/Indextext (Foreign Program Links                                       ) def
Indexsection
/Indexpage   17 def
/chapno    4 def
/Indextext (Initial Data Input                                          ) def
Indexchapter
/Indexpage   17 def
/Indextext (Scope of the Initial Data Input section.                    ) def
Indexsection
/Indexpage   17 def
/Indextext (Abbreviated startup command  -  QUICKSTART                  ) def
Indexsection
/Indexpage   18 def
/Indextext (Input of the cell parameters  -  LIST 1                     ) def
Indexsection
/Indexpage   19 def
/Indextext (Printing the cell parameters                                ) def
Indexsection
/Indexpage   19 def
/Indextext (Input of the unit cell parameter errors  -  LIST 31         ) def
Indexsection
/Indexpage   19 def
/Indextext (Printing the cell variance-covariance matrix                ) def
Indexsection
/Indexpage   19 def
/Indextext (Space Group input - \SPACEGROUP                             ) def
Indexsection
/Indexpage   21 def
/Indextext (Input of the symmetry data  -  LIST 2                       ) def
Indexsection
/Indexpage   22 def
/Indextext (Printing the symmetry information                           ) def
Indexsection
/Indexpage   23 def
/Indextext (Input of molecular composition \COMPOSITION                 ) def
Indexsection
/Indexpage   23 def
/Indextext (Input of the atomic scattering factors  -  \LIST 3          ) def
Indexsection
/Indexpage   24 def
/Indextext (Printing the scattering factors                             ) def
Indexsection
/Indexpage   24 def
/Indextext (Input of the crystal and data collection details  -  LIST 13) def
Indexsection
/Indexpage   27 def
/Indextext (Printing the experimental conditions, LIST 13               ) def
Indexsection
/Indexpage   27 def
/Indextext (Input of the contents of the asymmetric unit  -  LIST 29    ) def
Indexsection
/Indexpage   28 def
/Indextext (Printing the contents of the asymmetric unit, LIST 29       ) def
Indexsection
/Indexpage   28 def
/Indextext (Input of General Crystallographic Data - LIST 30            ) def
Indexsection
/Indexpage   31 def
/Indextext (Printing the general information, LIST 30                   ) def
Indexsection
/Indexpage   32 def
/chapno    5 def
/Indextext (Reflection Data Input                                       ) def
Indexchapter
/Indexpage   32 def
/Indextext (Scope of the Reflection Data Input section of the Reference ) def
Indexsection
/Indexpage   32 def
/Indextext (Reflection Data                                             ) def
Indexsection
/Indexpage   33 def
/Indextext (Simple input of F or Fsq data - LIST 6                      ) def
Indexsection
/Indexpage   33 def
/Indextext (Creation of LIST 7 from LIST 6 - COPY 6 7                   ) def
Indexsection
/Indexpage   33 def
/Indextext (Printing LIST 6                                             ) def
Indexsection
/Indexpage   34 def
/Indextext (Punching LIST 6                                             ) def
Indexsection
/Indexpage   34 def
/Indextext (Advanced input of F or Fsq data - LIST 6                    ) def
Indexsection
/Indexpage   36 def
/Indextext (Reflection Parameter Coefficients                           ) def
Indexsection
/Indexpage   37 def
/Indextext (Storage of reflection data                                  ) def
Indexsection
/Indexpage   38 def
/Indextext (Compressed reflection data                                  ) def
Indexsection
/Indexpage   38 def
/Indextext (Intensity Data - HKLI                                       ) def
Indexsection
/Indexpage   41 def
/Indextext (Intensity Decay Curves  \LIST 27                            ) def
Indexsection
/Indexpage   42 def
/Indextext (Printing the decay curve                                    ) def
Indexsection
/Indexpage   42 def
/Indextext (Data Reduction - Lp                                         ) def
Indexsection
/Indexpage   42 def
/Indextext (Systematic absence removal - \SYSTEMATIC                    ) def
Indexsection
/Indexpage   43 def
/Indextext (Sorting of the reflection data  -  \SORT                    ) def
Indexsection
/Indexpage   44 def
/Indextext (Merging equivalent reflections  -  \MERGE                   ) def
Indexsection
/Indexpage   47 def
/Indextext (Theta-dependent Absorption Correction  -  \THETABS          ) def
Indexsection
/Indexpage   48 def
/chapno    6 def
/Indextext (Atomic And Structural Parameters                            ) def
Indexchapter
/Indexpage   48 def
/Indextext (Scope of the atomic and structural parameters Section       ) def
Indexsection
/Indexpage   48 def
/Indextext (Specifications of atoms and other parameters                ) def
Indexsection
/Indexpage   52 def
/Indextext (Input of atoms and other parameters  -  LIST 5              ) def
Indexsection
/Indexpage   54 def
/Indextext (Printing and punching list 5                                ) def
Indexsection
/Indexpage   55 def
/Indextext (Editing structural parameters -  \EDIT                      ) def
Indexsection
/Indexpage   61 def
/Indextext (Reorganisation of lists 5 and 10  -  \REGROUP               ) def
Indexsection
/Indexpage   62 def
/Indextext (Repositioning of atoms  -  \COLLECT                         ) def
Indexsection
/Indexpage   63 def
/Indextext (Conversion of temperature factors - \CONVERT                ) def
Indexsection
/Indexpage   63 def
/Indextext (Hydrogen placing - \HYDROGENS                               ) def
Indexsection
/Indexpage   65 def
/Indextext (Perhydrogenation - \PERHYDRO                                ) def
Indexsection
/Indexpage   66 def
/Indextext (Hydrogen re-numbering - \HNAME                              ) def
Indexsection
/Indexpage   66 def
/Indextext (Regularisation of atomic groups - \REGULARISE               ) def
Indexsection
/Indexpage   71 def
/Indextext (Map two atomic groups together - \MATCH                     ) def
Indexsection
/Indexpage   72 def
/Indextext (Calculation of interatomic bonds - \BONDCALC                ) def
Indexsection
/Indexpage   73 def
/Indextext (Bonding information - \LIST 40                              ) def
Indexsection
/Indexpage   74 def
/Indextext (Bonding information - \BONDING                              ) def
Indexsection
/Indexpage   74 def
/Indextext (Printing of LIST 40                                         ) def
Indexsection
/Indexpage   75 def
/Indextext (Creating a null LIST 40                                     ) def
Indexsection
/Indexpage   75 def
/Indextext (Printing of LIST 41                                         ) def
Indexsection
/Indexpage   76 def
/chapno    7 def
/Indextext (Structure Factors And Least Squares                         ) def
Indexchapter
/Indexpage   76 def
/Indextext (Scope of the structure factors and least squares section    ) def
Indexsection
/Indexpage   76 def
/Indextext (Refinement                                                  ) def
Indexsection
/Indexpage   79 def
/Indextext (Special positions                                           ) def
Indexsection
/Indexpage   79 def
/Indextext (Atomic parameter refinement                                 ) def
Indexsection
/Indexpage   80 def
/Indextext (Overall parameter refinement                                ) def
Indexsection
/Indexpage   80 def
/Indextext (Scale factor definitions                                    ) def
Indexsection
/Indexpage   80 def
/Indextext (Structure factor calculation control list  -  LIST 23       ) def
Indexsection
/Indexpage   83 def
/Indextext (Printing the SLFS control list                              ) def
Indexsection
/Indexpage   83 def
/Indextext (Special position constraints - \SPECIAL                     ) def
Indexsection
/Indexpage   84 def
/Indextext (Printing the special position information                   ) def
Indexsection
/Indexpage   84 def
/Indextext (Refinement directives  -  LIST 12                           ) def
Indexsection
/Indexpage   85 def
/Indextext (Obsolete Refinement directives                              ) def
Indexsection
/Indexpage   85 def
/Indextext (Defining the least squares matrix                           ) def
Indexsection
/Indexpage   86 def
/Indextext (Printing of LIST 12                                         ) def
Indexsection
/Indexpage   86 def
/Indextext (Creating a null LIST 12                                     ) def
Indexsection
/Indexpage   86 def
/Indextext (Processing of LIST 12                                       ) def
Indexsection
/Indexpage   86 def
/Indextext (Restraints  -  LIST 16                                      ) def
Indexsection
/Indexpage   87 def
/Indextext (Parameter, atom, bond and angle specifications              ) def
Indexsection
/Indexpage   91 def
/Indextext (General restraints                                          ) def
Indexsection
/Indexpage   92 def
/Indextext (General restraints                                          ) def
Indexsection
/Indexpage   92 def
/Indextext (Debugging restraints                                        ) def
Indexsection
/Indexpage   92 def
/Indextext (Printing the contents of LIST 16                            ) def
Indexsection
/Indexpage   92 def
/Indextext (Creating a null LIST 16                                     ) def
Indexsection
/Indexpage   93 def
/Indextext (The special restraints  -  LIST 17                          ) def
Indexsection
/Indexpage   93 def
/Indextext (Printing and punching LIST 17                               ) def
Indexsection
/Indexpage   93 def
/Indextext (Creating a null LIST 17                                     ) def
Indexsection
/Indexpage   93 def
/Indextext (Checking restraints - CHECK                                 ) def
Indexsection
/Indexpage   93 def
/Indextext (Weighting schemes for refinement-  LIST 4                   ) def
Indexsection
/Indexpage   94 def
/Indextext (Weighting for refinement against Fo                         ) def
Indexsection
/Indexpage   94 def
/Indextext (Weighting for refinement against Fsq                        ) def
Indexsection
/Indexpage   95 def
/Indextext (Weights stored in LIST 6                                    ) def
Indexsection
/Indexpage   95 def
/Indextext (Weighting schemes                                           ) def
Indexsection
/Indexpage   95 def
/Indextext (Dunitz Seiler weighting - scheme 13                         ) def
Indexsection
/Indexpage   96 def
/Indextext (Chebychev weighting schemes 10, 11                          ) def
Indexsection
/Indexpage   96 def
/Indextext (Robust-resistant weighting schemes 14, 15                   ) def
Indexsection
/Indexpage   96 def
/Indextext (Statistical Weights, 16                                     ) def
Indexsection
/Indexpage   96 def
/Indextext (Printing LIST 4                                             ) def
Indexsection
/Indexpage   96 def
/Indextext (Weighting the reflections - WEIGHT                          ) def
Indexsection
/Indexpage   96 def
/Indextext (Re-weighting the reflections - REWEIGHT                     ) def
Indexsection
/Indexpage   96 def
/Indextext (Reflection restriction list  -  LIST 28                     ) def
Indexsection
/Indexpage   98 def
/Indextext (Creating a null LIST 28                                     ) def
Indexsection
/Indexpage   98 def
/Indextext (Printing the contents of LIST 28                            ) def
Indexsection
/Indexpage   98 def
/Indextext (Structure Factor Least Squares Calculations  -  \SFLS       ) def
Indexsection
/Indexpage   99 def
/Indextext (Definitions                                                 ) def
Indexsection
/Indexpage   99 def
/Indextext (Unstable refinements                                        ) def
Indexsection
/Indexpage   99 def
/Indextext (Sorting of LIST 6 for structure factor calculations         ) def
Indexsection
/Indexpage  102 def
/Indextext (Processing of the refinement directives                     ) def
Indexsection
/Indexpage  103 def
/Indextext (Analysis of residuals -  \ANALYSE                           ) def
Indexsection
/Indexpage  104 def
/Indextext (Least squares absorption correction  - \DIFABS              ) def
Indexsection
/Indexpage  107 def
/Indextext (Internal workings                                           ) def
Indexsection
/Indexpage  109 def
/chapno    8 def
/Indextext (Fourier Routines                                            ) def
Indexchapter
/Indexpage  109 def
/Indextext (Scope of the Fourier section of the user guide              ) def
Indexsection
/Indexpage  109 def
/Indextext (Input of the Fourier section limits - LIST 14               ) def
Indexsection
/Indexpage  110 def
/Indextext (Printing the contents of LIST 14                            ) def
Indexsection
/Indexpage  110 def
/Indextext (Compute Fourier limits from the symmetry                    ) def
Indexsection
/Indexpage  111 def
/Indextext (Fourier calculations  -  \FOURIER                           ) def
Indexsection
/Indexpage  114 def
/Indextext (Calculation of superposition minimum functions              ) def
Indexsection
/Indexpage  115 def
/Indextext (Processing of the peaks list  -  LIST 10                    ) def
Indexsection
/Indexpage  115 def
/Indextext (Printing the contents of LIST 10                            ) def
Indexsection
/Indexpage  115 def
/Indextext (Elimination of duplicated entries in LISTS 5 and 10  -  \PEA) def
Indexsection
/Indexpage  116 def
/Indextext (Slant fourier calculations  -  \SLANT                       ) def
Indexsection
/Indexpage  120 def
/chapno    9 def
/Indextext (Analysis Of Results                                         ) def
Indexchapter
/Indexpage  120 def
/Indextext (Scope of this section of the user guide                     ) def
Indexsection
/Indexpage  120 def
/Indextext (Analysis of residuals - \ANALYSE                            ) def
Indexsection
/Indexpage  120 def
/Indextext (Distance angles calculations  -  \DISTANCES                 ) def
Indexsection
/Indexpage  123 def
/Indextext (Distance-angles symmetry operations                         ) def
Indexsection
/Indexpage  124 def
/Indextext (Void Location  -  \VOIDS                                    ) def
Indexsection
/Indexpage  124 def
/Indextext (TLS analysis, best planes and lines  -  \GEOMETRY           ) def
Indexsection
/Indexpage  128 def
/Indextext (Torsion angles  -  \TORSION                                 ) def
Indexsection
/Indexpage  128 def
/Indextext (Absolute Configuration  -  \TON                             ) def
Indexsection
/Indexpage  129 def
/Indextext (Publication listing of the atomic parameters  -  \PARAMETERS) def
Indexsection
/Indexpage  132 def
/Indextext (Publication listing of reflection data  - \REFLECTIONS      ) def
Indexsection
/Indexpage  133 def
/Indextext (Summary of data lists - \SUMMARY                            ) def
Indexsection
/Indexpage  133 def
/Indextext (CIF lists - \CIF                                            ) def
Indexsection
/Indexpage  134 def
/Indextext (Graphics - CAMERON                                          ) def
Indexsection
/Indexpage  135 def
/chapno   10 def
/Indextext (Twinned Crystals                                            ) def
Indexchapter
/Indexpage  135 def
/Indextext (Twinning - introduction                                     ) def
Indexsection
/Indexpage  135 def
/Indextext (Twinning Problems                                           ) def
Indexsection
/Indexpage  138 def
/Indextext (SORTING TWINNED STRUCTURE DATA  -  \REORDER                 ) def
Indexsection
/Indexpage  142 def
/chapno   11 def
/Indextext (Matrix Calculations                                         ) def
Indexchapter
/Indexpage  142 def
/Indextext (The Basic Matrix Calculator \MATRIX                         ) def
Indexsection
/Indexpage  143 def
/chapno   12 def
/Indextext (Obsolete Commands                                           ) def
Indexchapter
/Indexpage  143 def
/Indextext (Obsolete Commands                                           ) def
Indexsection
/Indexpage  143 def
/Indextext (Least squares best planes and lines  -  \MOLAX              ) def
Indexsection
/Indexpage  145 def
/Indextext (Thermal displacement parameter analysis  -  \ANISO          ) def
Indexsection
/Indexpage  146 def
/Indextext (Principal atomic displacement directions  -  \AXES          ) def
Indexsection
/Indexpage  147 def
/Indextext (Structure factors for a group of trial models  -  \TRIAL    ) def
Indexsection
/Indexpage  150 def
/chapno   13 def
/Indextext (Crystals Manual                                             ) def
Indexchapter
Endcontents
