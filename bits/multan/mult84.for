C     * * * * * * * * * * * * * * * MULTAN * * * * * * * * * * * * * * *
C     PROGRAM  FOR  THE AUTOMATIC  SOLUTION OF CRYSTAL  STRUCTURES  FROM
C     X-RAY DIFFRACTION DATA BY MULTIPLE  STARTING POINT TANGENT FORMULA
C     VERSION JUNE 1984           PETER MAIN          UNIVERSITY OF YORK
C     * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * *
      COMMON /LOCAL/ ISPACE(15600)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24),
     1  ITL(12)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NK,NGP,KGP,SIGP2,SIGN2,
     1  SIGQ3,IROOM(26)
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN,NPC,LISTE
      COMMON /RC/ RHOMAX,TH,BT,SC,MG
      COMMON /LASPM/ IMK,IPUB,ISKIP,IHVY,IALL,WTFOM(3),MAPS
      COMMON /FFTPM/ LEVEL,IT4,XLIM(3),FACTOR
      COMMON /SERPM/ ANGMIN,ANGMAX,DMIN,DMAX,DMUT,NPROJ,NPEAK,
     1  NOJOIN,METAL
C     LOGICAL NUMBERS FOR INPUT/OUTPUT CHANNELS
      LC1 = 1
      LC2 = 2
      LC3 = 3
      LC4 = 4
C     KUSER1 = MAX NO OF INDEPENDENT REFLEXIONS FOR PHASE DETERMINATION
C            = DIMENSION OF IH1, IH2, E, MKANG, IPALF, IZ ETC.
      KUSER1 = 800
C     OTHER PARAMETERS FOR ARRAY SIZES ARE SET IN FIRST, SIGMA2, CONVEG,
C           LAST, EXFFT AND SEARCH
C     INPUT PROGRAM PARAMETERS
      CALL CLOPEN(1)
      CALL TRANSL(LTA,SDEV)
C     OBTAIN E'S FROM FOBS AND CALCULATE STRUCTURE FACTORS
      CALL CLOPEN(KUSER1)
      CALL NORMAL(LTA,KUSER1,SDEV,NAT)
      IF (IPATH .GT. 1 .AND. IPATH .LT. 6) CALL CLOPEN(3)
C     SET UP PHASE RELATIONSHIPS AND FIND STARTING REFLEXIONS
      IF (IPATH .GT. 1 .AND. IPATH .LT. 5) CALL FIRST
C     DETERMINE PHASES
      IF (IPATH .GT. 2 .AND. IPATH .LT. 5) CALL LAST
      IF (IPATH .LE. 3) GO TO 1020
C     CALCULATE AND EXAMINE ELECTRON-DENSITY MAPS
      DO 1000 IMP=1,MAPS
      IF (IPATH .LT. 6) CALL EXFFT(IPATH,IMP)
      CALL SEARCH(NAT,IPATH)
 1000 CONTINUE
      IF (IPATH .EQ. 6) GO TO 1020
C     COPY PEAKS TO OUTPUT FILE
      CALL CLOPEN(6)
      CALL PEKOUT(MAPS,IPATH)
 1020 CALL CLOPEN(7)
      STOP
      END
C     OPEN, DEFINE, NAME AND CLOSE ALL FILES
      SUBROUTINE CLOPEN(I1)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH
      COMMON /USER/ IPATH
      COMMON /LASPM/ IMK,IPUB,ISKIP
      IF (I1 .GT. 10) GO TO 1020
      GO TO (1000,1020,1040,1080,1100,1120,1140), I1
C     MULTAN PARAMETER INPUT FILE
 1000 OPEN(UNIT=LC2, NAME='MULTAN.CDR', TYPE='OLD', ACCESS='SEQUENTIAL')
C     LINEPRINTER OUTPUT FILE
      OPEN(UNIT=LC1, NAME='MULTAN.LPT', ACCESS='SEQUENTIAL')
C     PHASE INPUT FILE TO SWTR (NOT ALWAYS NEEDED)
      OPEN(UNIT=LC3, NAME='MULT0.TMP', ACCESS='SEQUENTIAL', FORM=
     1  'UNFORMATTED')
      RETURN
C     FILES FOR NORMAL
 1020 CLOSE(UNIT=LC2, DISPOSE='SAVE')
      IF (IPATH .EQ. 6) RETURN
      IF (IMK+IPUB .EQ. 0) CLOSE(UNIT=LC3, DISPOSE='DELETE')
      IF (IMK+IPUB .GT. 0) CLOSE(UNIT=LC3, DISPOSE='SAVE')
C     STRUCTURE FACTOR INFORMATION FOR ORIENTED ATOMIC GROUPS
      IF (NPATH .EQ. 1) OPEN(UNIT=LC3,NAME='MULT2.TMP',ACCESS='DIRECT',
     1  RECORDSIZE=25, MAXREC=I1+1)
C     PHASE INPUT TO SWTR FOR KARLE RECYCLING
      IF (NPATH .EQ. 2) OPEN(UNIT=LC3, NAME='MULT0.TMP', ACCESS=
     1  'SEQUENTIAL', FORM='UNFORMATTED')
C     OUTPUT FILE FOR WEIGHTED OR DIFFERENCE FOURIER
      IF (NPATH .GE. 3) OPEN(UNIT=LC3, NAME='MULFOR.DAT', ACCESS=
     1  'SEQUENTIAL', FORM='UNFORMATTED')
C     SCRATCH FILE FOR REFLEXION DATA (USED FOR SIGMA2 RELS. LATER)
      OPEN(UNIT=LC2, NAME='MULT1.TMP', ACCESS='SEQUENTIAL', FORM=
     1  'UNFORMATTED')
C     INPUT FILE FOR REFLEXION DATA
      OPEN(UNIT=LC4, NAME='MULTAN.RFL', TYPE='OLD', ACCESS='SEQUENTIAL')
      RETURN
C     FILES TO SET UP PHASE RELATIONSHIPS
 1040 CLOSE(UNIT=LC4, DISPOSE='SAVE')
      IF (NPATH .EQ. 2) CLOSE(UNIT=LC3, DISPOSE='SAVE')
C     FILE FOR PSI(ZERO) RELATIONSHIPS
      OPEN(UNIT=LC4, NAME='MULT3.TMP', ACCESS='SEQUENTIAL', FORM=
     1  'UNFORMATTED')
      RETURN
C     FILES FOR CONVERGENCE
 1080 IF (NPATH .EQ. 1) CLOSE(UNIT=LC3, DISPOSE='DELETE')
C     FILE TO CONTAIN CONVERGENCE MAP
      OPEN(UNIT=LC3, NAME='MULT5.TMP', ACCESS='SEQUENTIAL', FORM=
     1  'UNFORMATTED')
      RETURN
C     FILES FOR LAST AND EXFFT
 1100 CLOSE(UNIT=LC3, DISPOSE='DELETE')
      CLOSE(UNIT=LC4, DISPOSE='DELETE')
C     OUTPUT FILE FOR PHASE SETS
      IF (ISKIP .EQ. 0) OPEN(UNIT=LC3, NAME='MULFOR.DAT', ACCESS=
     1  'SEQUENTIAL', FORM='UNFORMATTED')
C     PHASE SET FILE FROM PREVIOUS RUN OF PROGRAM
      IF (ISKIP .NE. 0) OPEN(UNIT=LC3, NAME='MULFOR.DAT', TYPE='OLD',
     1  ACCESS='SEQUENTIAL', FORM='UNFORMATTED')
C     USER INPUT OF PHASES, SET NUMBERS OR KARLE RECYCLING PHASES
      IF (IMK+IPUB.GT.0.OR.NPATH.EQ.2) OPEN(UNIT=LC4, NAME='MULT0.TMP',
     1  TYPE='OLD', ACCESS='SEQUENTIAL', FORM='UNFORMATTED')
      IF (IMK+IPUB.EQ.0.AND.NPATH.NE.2) OPEN(UNIT=LC4, NAME='MULT0.TMP',
     1  ACCESS='SEQUENTIAL', FORM='UNFORMATTED')
      RETURN
C     OUTPUT FILE FOR PEAK COORDINATES
 1120 CLOSE(UNIT=LC4, DISPOSE='DELETE')
      OPEN(UNIT=LC4, NAME='SEARCH.PKS', ACCESS='SEQUENTIAL')
      RETURN
C     CLOSE FILES AT END OF NORMAL, FIRST, LAST OR SEARCH
 1140 CLOSE(UNIT=LC1, DISPOSE='SAVE')
      IF (IPATH .NE. 6) CLOSE(UNIT=LC2, DISPOSE='DELETE')
      CLOSE(UNIT=LC3, DISPOSE='DELETE')
      IF (IPATH.EQ.2 .OR. IPATH.EQ.3) CLOSE(UNIT=LC4, DISPOSE='DELETE')
      IF (IPATH.EQ.1 .OR. IPATH.EQ.4 .OR. IPATH.EQ.5) CLOSE(UNIT=LC4,
     1  DISPOSE='SAVE')
      RETURN
      END
C     * * * * * * * * * * * * * * * NORMAL * * * * * * * * * * * * * * *
C                     ***  ESTIMATION OF NORMALISED STRUCTURE AMPLITUDES
C     ZEROTH SECTION  ***  CONTRIBUTION OF KNOWN STRUCTURE TO PHASE RELS
C                     ***  STRUCTURE FACTOR CALC. FOR PARTIAL STRUCTURES
C     * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * *
      SUBROUTINE NORMAL(LTA,KUSER1,SDEV,NAT)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),
     1  DCV(60),IX1(1400),IX2(1400),EX(1400)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NK,NGP,KGP,SIGP2,SIGN2,
     1  SIGQ3
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN,NPC,LISTE
      COMMON /LASPM/ IMK,IPUB,ISKIP,IHVY
      DIMENSION SIG3(10),P(6)
C     EXTRACT ATOMIC SCATTERING FACTOR CONSTANTS FROM TABLES
      CALL ATREC(NK)
C     PRELIMINARY CALCULATIONS
      CALL PRELIM(LTA,KUSER1,PKARL,SIG3,IHVY,NAT,P)
      IF (NPATH .EQ. 5) RETURN
C     READ REFLEXION DATA
      CALL INPUT(NPATH,NPC,NREF,NK,NGP,P)
C     DETERMINE OVERALL SCALE FACTORS AND PLOT WILSON AND DEBYE CURVES
      CALL WILSON(NPATH,NREF,DEL)
C     PREPARE FILE FOR WEIGHTED OR DIFFERENCE FOURIER
      IF (NPATH .GE. 3) CALL FFTOUT(NPATH)
      IF (NPATH .GE. 3) RETURN
C     CALCULATE E'S AND ACCUMULATE INTENSITY STATISTICS
      CALL ECAL(KSYS,NUMB,IZRO,NC,DEL)
C     OUTPUT INTENSITY STATISTICS AND PRINT MULTAN REFLEXIONS
      CALL STATS(KSYS,MS,LISTE,NC)
C     CALCULATE TRANSFORMS OF ORIENTED AND POSITIONED GROUPS
      IF (NPATH .EQ. 1) CALL FORM(SIG3,NUMB,NGP,SDEV,P)
C     CALCULATE PHASES FOR KARLE RECYCLING
      IF (NPATH .EQ. 2) CALL RECYC(NUMB,IMK,PKARL)
C     SAVE INDICES OF MULTAN REFLEXIONS FOR LATER USE
      WRITE (LC2) NUMB,(IX1(I),IX2(I),I=1,NUMB),(EX(I),I=1,NUMB)
      WRITE (LC2) IZRO,(IX1(I),IX2(I),I=MS,NC)
      RETURN
      END
C     INPUT PROGRAM PARAMETERS IN FREE FORMAT
      SUBROUTINE TRANSL(LTA,SDEV)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),AL(8),AS(8),
     1  BL(8),BS(8),CL(8),GIS(60),GIW(60),IFORM(80),IP(200),X(250),
     2  Y(250),Z(250),NW(8),POP(10),NA(8),CR(6,10),N1(250),N2(250),
     3  N3(9),N4(9),N(80),BB(20),IUSE(800)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NK,NGP
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN,NPC,LISTE
      COMMON /LASPM/ IMK,IPUB,ISKIP,IHVY,IALL,WTFOM(3),MAPS
      COMMON /RC/ RHOMAX,TH,BT,SC,MG
      COMMON /FFTPM/ LEVEL,IT4,XLIM(3),FACTOR
      COMMON /SERPM/ ANGMIN,ANGMAX,DMIN,DMAX,DMUT,NPROJ,NPEAK,
     1  NOJOIN,METAL
      DIMENSION LETT(27),KX(10),LTC(7),KWORD(55)
      DATA LETT/1HA,1HB,1HC,1HD,1HE,1HF,1HG,1HH,1HI,1HJ,1HK,1HL,1HM,
     1 1HN,1HO,1HP,1HQ,1HR,1HS,1HT,1HU,1HV,1HW,1HX,1HY,1HZ,1H(/
      DATA KX/1H0,1H1,1H2,1H3,1H4,1H5,1H6,1H7,1H8,1H9/,KB/1H)/,KAP/1H'/
      DATA LTC/1HP,1HA,1HB,1HC,1HI,1HF,1HR/,KSP/1H /,KM/1H-/,KD/1H./
      DATA KWORD/10850,2864,13068,5688,10849,16244,14049,14869,
     1  9948,20895,3795,14775,12342,13145,13398,16455,2862,3164,5433,
     2  17863,5868,6855,11089,13062,4869,3770,11754,10299,17585,6464,
     3  1345,17439,1272,979,14979,16369,3154,14641,17270,11746,
     4  14949,10972,6849,1993,22891,23791,14551,13060,14955,4071,3999,
     5  3991,1299,1291,11870/
      READ (LC2,10) ITLE
   10 FORMAT(40A2)
      WRITE (LC1,20) ITLE
   20 FORMAT(15H0MULTAN  PART 0,25X,40HESTIMATE NORMALISED STRUCTURE AMP
     1LITUDES,21X,19HVERSION  JUNE  1984//20X,40A2)
C     SET INITIAL AND DEFAULT VALUES
      DTOR = ATAN(1.0)/45.0
C     IPATH=1 NORMAL ONLY: =2 NORMAL+FIRST: =3 UP TO LAST: =4 WHOLE PGM:
C          =5 WTD. OR DIFF. FOURIER: =6 PLOT PEAKS
      IPATH = 4
C     NPATH=1 ORIENTED GP: =2 KARLE RECYC: =3 WTD FOURIER: =4 DIFF MAP:
C          =5 PLOT PEAKS
      NPATH = 0
C     PARAMETERS SET IN NORMAL
      SDEV = 0.2
      TH=1.0
      MG = 0
      NUMB = 0
      IZRO = 100
      NGP=0
      NDET = 0
      LISTE = 30
      LATT = 1
      LTA = LTC(1)
      ICENT = 0
C     PARAMETERS USED IN FIRST
      KMIN = 60
      LIST = 0
      NSREQ = 0
      NSPEC = 0
      NGEN = 0
      NANY = 0
C     PARAMETERS USED IN LAST
      IMK = 0
      KRAN = 0
      IPUB = 0
      ISKIP = 0
      IALL = 0
      WTFOM(1) = 0.6
      WTFOM(2) = 1.2
      WTFOM(3) = 1.2
      MAPS = 1
C     PARAMETERS USED IN EXFFT
      IT4 = 0
      LEVEL = 100
      XLIM(1) = 1.0
      XLIM(2) = 1.0
      XLIM(3) = 1.0
      FACTOR = 0.35
C     PARAMETERS USED IN SEARCH
      ANGMIN = 85.0
      ANGMAX = 145.0
      DMIN = 1.10
      DMAX = 1.95
      DMUT = 2.40
      NPROJ = -1
      NPEAK = 0
      NOJOIN = 0
      METAL = 0
C     INITIALISE OTHER VARIABLES
      NTOT = 0
      DO 60 J=1,10
      CR(1,J) = 0.0
   60 CONTINUE
      KOM = 0
      KS = 81
  100 IKW = 0
      KEY = 0
      INU = 0
      IC = 0
      IF (KS .GT. 80) GO TO 210
C     JMK=0, NO NUMBER;  =1, NUMBER FOUND
C     INU=0, LOOKING FOR KEYWORD;  =1, KEYWORD FOUND;  =-1, -VE NUMBER
  110 DO 200 I=KS,80
C     TEST FOR COMMENT IN INPUT FILE AND SET FLAG
      IF (N(I) .EQ. KAP) KOM = MOD(KOM+1, 2)
      IF (KOM .GT. 0 .OR. N(I) .EQ. KAP) GO TO 200
      DO 120 K=1,27
      IF (N(I) .EQ. LETT(K)) GO TO 180
  120 CONTINUE
      IF (IKW .EQ. 0) GO TO 200
      IF (INU .EQ. 0) INU = 1
      IF (N(I) .EQ. KSP) GO TO 190
      DO 130 K=1,10
      IF (N(I) .EQ. KX(K)) GO TO 150
  130 CONTINUE
      IF (N(I) .NE. KD) GO TO 140
      A = 1.0
      IF (JMK) 460,160,200
  140 IF (N(I) .NE. KM) GO TO 460
      INU = -1
      GO TO 200
  150 IF (JMK .NE. 0) GO TO 170
      A = 10.0
  160 IF (IC .GE. 20) GO TO 200
      IC = IC + 1
      BB(IC) = 0.0
      B = 1.0
      JMK = 1
      IF (N(I) .EQ. KD) GO TO 200
  170 IF (A .LT. 5.0) B = 0.1*B
      BB(IC) = A*ABS(BB(IC)) + B*FLOAT(K-1)
      IF (INU .LT. 0) BB(IC) = -BB(IC)
      GO TO 200
  180 IF (INU .NE. 0) GO TO 400
      IKW = IKW + 1
      IF (IKW .LE. 3) KEY = 30*KEY + K
  190 JMK = 0
      INU = IABS(INU)
  200 CONTINUE
C     END OF INPUT FILE (END)
      IF (KEY .NE. 4924) GO TO 210
      IF (IMK .LE. 0) RETURN
C     FLAG END OF INPUT PHASES
      IUSE(1) = -1000
      WRITE (LC3) (IUSE(I),I=1,IMK)
      RETURN
  210 KS = 1
      READ (LC2,220) N
  220 FORMAT(80A1)
      GO TO 110
  400 KS = I
      IF (IKW .GE. 3) IND = 1
C     PREVIOUSLY IDENTIFIED KEYWORD - INTERPRET DATA
      GO TO (420,1240,1540,1580), IND
C     IDENTIFY KEYWORD
  420 DO 440 I=1,55
      IF (KEY .EQ. KWORD(I)) GO TO 500
  440 CONTINUE
  460 WRITE (LC1,480) N
  480 FORMAT(31H0ERROR IN THIS OR PREVIOUS LINE,5X,80A1)
      STOP
  500 GO TO (600,1000,1020,1040,1050,1100,1120,1140,1160,1180,1200,
     1 1210,1230,1300,1320,1360,1480,1520,1560,1640,1660,1690,1700,1720,
     2 1740,1800,2000,2050,2200,2300,2400,2500,2520,2550,2600,2620,
     3 2800,2820,2900,2940,3000,3040,3060,3080,3100,3120,3200,3220,3240,
     4 3260,3280,3320,3320,3340,3360), I
C     LATTICE (LAT)
  600 DO 620 I=1,7
      IF (N(KS) .EQ. LTC(I)) GO TO 640
  620 CONTINUE
      GO TO 460
  640 LATT = I
      LTA = LTC(I)
      KS = KS + 1
      GO TO 100
C     CENTROSYMMETRIC (CEN)
 1000 ICENT = 1
      GO TO 100
C     RUN NORMAL ONLY (NOR)
 1020 IPATH = 1
      GO TO 100
C     RUN NORMAL AND FIRST ONLY (FIR)
 1040 IF (IPATH .LE. 4) IPATH = 2
      GO TO 100
C     RUN TO END OF LAST (LAS)
 1050 IF (IPATH .LE. 4) IPATH = 3
      GO TO 100
C     RANDOMLY ORIENTED AND POSITIONED ATOMIC GROUP OR RUN RANTAN (RAN)
 1100 IF (IC .LE. 0) GO TO 1110
      KRAN = BB(1) + 0.5
      GO TO 100
 1110 JMK = 2
      GO TO 1220
C     ORIENTED BUT RANDOMLY POSITIONED GROUP (ORI)
 1120 JMK = 3
      GO TO 1150
C     CORRECTLY POSITIONED ATOMS (POS)
 1140 JMK = 4
 1150 IF (IC .GT. 0) SDEV = BB(1)
      GO TO 1220
C     ATOMS USED IN KARLE RECYCLING (KAR)
 1160 JMK = 5
      GO TO 1220
C     WEIGHTED FOURIER (WFO)
 1180 JMK = 6
      GO TO 1220
C     DIFFERENCE FOURIER (DFO)
 1200 JMK = 7
      GO TO 1220
C     PLOT PEAKS (PLO)
 1210 JMK = 8
 1220 NGP = NGP + 1
      NINF(NGP) = JMK
      NAG(NGP) = 0
      POP(NGP) = 0.0
      IF (JMK .GT. 3) NPATH = JMK - 3
      IF (JMK .EQ. 3) NPATH = 1
      IF (NPATH .GE. 3.AND. IPATH .NE. 1)  IPATH = 5
      IF (JMK .EQ. 8) IPATH = 6
      IND = 2
      GO TO 100
C     MULTIPLICITY (MUL)
 1230 POP(NGP) = BB(1)
      IND = 2
      GO TO 100
C     INPUT OF ATOMIC COORDINATES
 1240 DO 1260 I=1,NK
      IF (KEY .EQ. NW(I)) GO TO 1280
 1260 CONTINUE
      IF (IPATH .NE. 6) GO TO 460
 1280 NTOT = NTOT + 1
      NAG(NGP) = NAG(NGP) + 1
      N1(NTOT) = N3(I)
      N2(NTOT) = N4(I)
      IXYZ(4,NTOT) = I
      DO 1290 I=1,3
      IXYZ(I,NTOT) = 0
      IF (IC .GE. I) IXYZ(I,NTOT) = 10000.0*BB(I) + 0.5
 1290 CONTINUE
      SOF(NTOT) = 1.0
      IF (IC .GE. 4 .AND. BB(4) .LE. 1.0) SOF(NTOT) = BB(4)
      GO TO 100
C     NUMBER OF STRONG RELEXIONS TO BE USED IN MULTAN (NRE)
 1300 NUMB = BB(1) + 0.5
      GO TO 100
C     NUMBER OF WEAK REFLEXIONS FOR PSI(ZERO) (NZR)
 1320 IZRO = BB(1) + 0.5
      GO TO 100
C     MAXIMUM VALUE OF (SIN(THETA)/LAMBDA)**2 (RHO)
 1360 TH = BB(1)
      GO TO 100
C     UNIT CELL DIMENSIONS (CEL)
 1480 IF (IC .LT. 6) GO TO 460
      DO 1500 I=1,6
      IF (NGP .EQ. 0) CX(I) = BB(I)
      IF (NGP .GT. 0) CR(I,NGP) = BB(I)
 1500 CONTINUE
      IF (NGP .GT. 0) IND = 2
      GO TO 100
C     UNIT CELL CONTENTS (CON)
 1520 NK = 0
      N3(1) = N(KS)
      N4(1) = N(KS+1)
      IND = 3
      GO TO 100
C     INPUT OF UNIT CELL CONTENTS
 1540 NK = NK + 1
      N3(NK+1) = N(KS)
      N4(NK+1) = N(KS+1)
      NW(NK) = KEY
      NA(NK) = BB(1) + 0.5
      GO TO 100
C     SCATTERING FACTOR CONSTANTS (FAC)
 1560 IND = 4
      GO TO 100
C     INPUT SCATTERING FACTOR CONSTANTS
 1580 DO 1600 I=1,NK
      IF (KEY .EQ. NW(I)) GO TO 1620
 1600 CONTINUE
      GO TO 460
 1620 IF (IC .LT. 5) GO TO 460
      AL(I) = BB(1)
      AS(I) = BB(2)
      BL(I) = BB(3)
      BS(I) = BB(4)
      CL(I) = BB(5)
      GO TO 100
C     SYMMETRY (SYM)
 1640 CALL INSYM(KS,N,IUSE)
      GO TO 100
C     FORMAT FOR REFLEXION DATA (FOR)
 1660 NPC = BB(1) + 0.5
      DO 1680 I=KS,80
      IFORM(I-KS+1) = N(I)
      IF (N(I) .EQ. KB) K = I
 1680 CONTINUE
      KS = K + 1
      GO TO 100
C     INDEX GROUPS (GRO)
 1690 CALL INGRO(IC,BB(1),KS,N,IP)
      GO TO 100
C     FULL LIST OF CONVERGENCE MAP (LIS)
 1700 LIST = 1
      GO TO 100
C     NO LIST OF CONVERGENCE MAP (NOL)
 1720 LIST = -1
      GOTO 100
C     LIST ALL E'S USED FOR PHASE DETERMINATION AND PSI(ZERO) (ELI)
 1740 LISTE = 0
      GO TO 100
C     NUMBER OF PHASES TO BE DETERMINED (DET)
 1800 NDET = BB(1) + 0.5
      GOTO 100
C     MAXIMUM NUMBER OF PHASE SETS (MAX)
 2000 NSREQ = BB(1) + 0.5
      GOTO 100
C     MINIMUM VALUE OF KAPPA (KMI)
 2050 KMIN = 100.0*BB(1) + 0.5
      GOTO 100
C     NUMBER OF SPECIALS IN STARTING SET (SPE)
 2200 NSPEC = BB(1) + 0.5
      GOTO 100
C     NUMBER OF GENERALS IN STARTING SET (GEN)
 2300 NGEN = BB(1) + 0.5
      GOTO 100
C     NUMBER OF ANY TYPE IN STARTING SET (ANY)
 2400 NANY = BB(1) + 0.5
      GOTO 100
C     NUMBER OF SETS ON OUTPUT TAPE TO BE SKIPPED (SKI)
 2500 ISKIP = BB(1) + 0.5
      GOTO 100
C     CALCULATE ALL PHASE SETS - DO NOT STOP ON FOMS (ALL)
 2520 IALL = 1
      GO TO 100
C     ABSFOM WEIGHT (ABS)
 2550 WTFOM(1) = BB(1)
      GOTO 100
C     PSIZERO WEIGHT (PSI)
 2600 WTFOM(2) = BB(1)
      GOTO 100
C     RESIDUAL WEIGHT (RES)
 2620 WTFOM(3) = BB(1)
      GOTO 100
C     CODES OF STARTING PHASES (COD)
 2800 IMK = IC
C     STARTING PHASES INPUT BY USER (PHA)
 2820 DO 2840 I=1,IMK
      IUSE(I) = BB(I) + 0.5
 2840 CONTINUE
      WRITE (LC3) (IUSE(I),I=1,IMK)
      GO TO 100
C     PHASE SET NUMBERS INPUT BY USER (SET)
 2900 IF (IC .GT. 12) IC = 12
      IPUB = IC
      DO 2920 I=1,IC
      IUSE(I) = BB(I) + 0.5
 2920 CONTINUE
      WRITE (LC3) (IUSE(I),I=1,IPUB)
      GO TO 100
C     NUMBER OF BEST MAPS TO BE EXAMINED
 2940 MAPS = BB(1) + 0.5
      GO TO 100
C     OUTPUT MAP ON LINEPRINTER (PRI)
 3000 IT4 = LC1
      GO TO 100
C     UNDERLINE GRID POINTS GREATER THAN LEVEL (LEV)
 3040 LEVEL = BB(1) + 0.5
      GO TO 100
C     GRID SPACING FOR MAP (GRI)
 3060 FACTOR = BB(1)
      GO TO 100
C     LIMIT OF X FOR PRINTING MAP (XMA)
 3080 XLIM(1) = BB(1)
      GO TO 100
C     LIMIT OF Y FOR PRINTING MAP (YMA)
 3100 XLIM(2) = BB(1)
      GO TO 100
C     LIMIT OF Z FOR PRINTING MAP (ZMA)
 3120 XLIM(3) = BB(1)
      GO TO 100
C     NUMBER OF PEAKS TO SEACH FOR IN MAP (PEA)
 3200 NPEAK = BB(1) + 0.5
      GO TO 100
C     NO INTERPRETATION OF PEAKS (NOJ)
 3220 NOJOIN = 1
      GO TO 100
C     NUMBER OF PROJECTIONS TO BE PLOTTED (PRO)
 3240 NPROJ = BB(1) + 0.5
      GO TO 100
C     INTERPEAK DISTANCES LESS THAN DMUT ARE OUTPUT (DOU)
 3260 DMUT = BB(1)
      GO TO 100
C     MINIMUM BOND LENGTH IN THE INTERPRETATION (DMI)
 3280 DMIN = BB(1)
      GO TO 100
C     MAXIMUM BOND LENGTH IN THE INTERPRETATION (DMA)
 3300 DMAX = BB(1)
      GO TO 100
C     MINIMUM BOND ANGLE IN THE INTERPRETATION (AMI)
 3320 ANGMIN = BB(1)
      GO TO 100
C     MAXIMUM BOND ANGLE IN THE INTERPRETATION (AMA)
 3340 ANGMAX = BB(1)
      GO TO 100
C     NUMBER OF HEAVY ATOMS IN ASYMMETRIC UNIT (MET)
 3360 METAL = BB(1) + 0.5
      GO TO 100
      END
C     INPUT INDEX GROUPS FOR RESCALING
      SUBROUTINE INGRO(IC,BB,KS,N,IP)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /RC/ RHOMAX,TH,BT,SC,MG
      DIMENSION KX(20),LN(30),LINE(110),N(80),IP(200)
      DATA KX/1H0,1H1,1H2,1H3,1H4,1H5,1H6,1H7,1H8,1H9,1HH,1HK,1HL,1HN,
     1  1H ,1H=,1H+,1H-,1H,,1H*/
C     INITIALISE STORE
      DO 1000 I=1,110
      LINE(I) = KX(15)
 1000 CONTINUE
      DO 1020 I=1,200
      IP(I) = 0
 1020 CONTINUE
C     BACKSPACE TO BEGINNING OF NUMBER
      IF (IC .EQ. 0) GO TO 1060
 1040 KS = KS - 1
      IF (N(KS) .EQ. KX(15)) GO TO 1040
      BB = 0.1*BB
      IF (BB .GT. 0.999) GO TO 1040
 1060 IA = 1
      IB = 0
      IC = 1
      ID = 0
      KK = 0
      ISN = 1
      WRITE (LC1,1080)
 1080 FORMAT(28H0INDEX GROUPS FOR RESCALING:)
C     START INTERPRETATION OF GROUP INPUT
 1100 DO 1400 I=KS,80
      DO 1120 K=1,20
      IF (N(I) .EQ. KX(K)) GO TO 1140
 1120 CONTINUE
C     UNRECOGNISED CHARACTER TERMINATES GROUP INPUT
      KK = 100
      GO TO 1260
 1140 IF (KK .EQ. 0) GO TO 1380
      IF (KK .GT. 10) GO TO 1160
C     CHARACTER 0,1,2,3,4,5,6,7,8 OR 9
      IB = 10*IB + KK - 1
      ID = ID + 1
      LN(ID) = KX(KK)
      GO TO 1380
 1160 IF (KK .GT. 14) GO TO 1200
C     CHARACTER H,K,L OR N
      IF (IB .EQ. 0) IB = 1
      IP(IA+KK-10) = ISN*IB
      IB = 0
      ISN = 1
C     CHARACTER SPACE
 1200 IF (KK .EQ. 15) GO TO 1380
      IF (KK .GT. 18) GO TO 1260
C     CHARACTER =
      IF (KK .EQ. 16) IX = ID + 1
C     CHARACTER -
      IF (KK .EQ. 18) ISN = -1
 1240 LN(ID+1) = KX(KK)
      LN(ID+2) = KX(15)
      ID = ID + 2
      GO TO 1380
C     CHARACTER , OR *
 1260 IP(IC) = IP(IC) + 1
      IA = IA + 5
      IP(IA) = ISN*IB
      IF (IP(IA-1) .EQ. 0) IP(IA-1) = 10000
      IB = 27*IP(IC) - 7 - IX
      DO 1280 J=1,ID
      LINE(IB+J) = LN(J)
 1280 CONTINUE
      ID = 0
      IB = 0
      ISN = 1
      IF (KK .LT. 20) GO TO 1380
C     CHARACTER *
      MG = MG + 1
      IA = IA + 1
      IC = IA
      WRITE (LC1,1300) MG,LINE
 1300 FORMAT(6H GROUP,I3,1X,110A1)
      DO 1320 J=1,110
      LINE(J) = KX(15)
 1320 CONTINUE
      IF (KK .EQ. 100) GO TO 1440
 1380 KK = K
 1400 CONTINUE
      KS = 1
      READ (LC2,1420) N
 1420 FORMAT(80A1)
      GO TO 1100
 1440 KS = I
      IF (I .GT. 1) KS = I - 1
      RETURN
      END
C     DETERMINATION OF PARAMETERS AND SCATTERING FACTORS
      SUBROUTINE PRELIM(LTA,KUSER1,PKARL,SIG3,IHVY,NAT,P)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),AL(8),AS(8),
     1  BL(8),BS(8),CL(8),GIS(60),GIW(60),IFORM(80),IP(200),X(250),
     2  Y(250),Z(250),NW(8),POP(10),NA(8),CR(6,10),N1(250),N2(250),
     3  N3(9),N4(9),ANX(8),NO(8)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NK,NGP,KGP,SIGP2,SIGN2,
     1  SIGQ3
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN
      DIMENSION ITEXT(11,6),ICAP1(2),ICAP2(2),SIG3(10),P(6)
      DATA ICAP1/2H N,2H  /, ICAP2/2HON,2H  /
      DATA ITEXT/2H  ,2HRA,2HND,2HOM,2HLY,2H O,2HRI,2HEN,2HTE,2HD ,2H  ,
     1           2H  ,2HCO,2HRR,2HEC,2HTL,2HY ,2HOR,2HIE,2HNT,2HED,2H  ,
     2           2H C,2HOR,2HRE,2HCT,2HLY,2H P,2HOS,2HIT,2HIO,2HNE,2HD ,
     3           2H  ,2HFO,2HR ,2HKA,2HRL,2HE ,2HRE,2HCY,2HCL,2HIN,2HG ,
     4           2H F,2HOR,2H W,2HEI,2HGH,2HTE,2HD ,2HFO,2HUR,2HIE,2HR ,
     5           2HFO,2HR ,2HDI,2HFF,2HER,2HEN,2HCE,2H F,2HOU,2HRI,2HER/
C     RECIP CELL PARAMETERS, LATTICE MULTIPLICITY AND CRYSTAL SYSTEM
      CALL PTSYS(P)
      NAT = NAG(1)
      IF (NPATH .EQ. 5) RETURN
      DO 2600 I=1,60
      GIS(I) = 0.0
 2600 CONTINUE
      IHVY = 0
      NAT = 0
      KGP = 0
      SIGN2 = 0.0
      SIGP2 = 0.0
      SIGQ3 = 0.0
      DO 2810 I=1,NK
      ANX(I) = 0.0
      NO(I) = AL(I) + BL(I) + CL(I) + 0.5
C     SET FLAG IF STRUCTURE CONTAINS A HEAVY ATOM
      IF (NO(I) .GE. 10) IHVY = 1
      IF (NO(I) .NE. 1) NAT = NAT + NA(I)
      TEMP = FLOAT(NO(I)**2)*FLOAT(NA(I))/PTS
      SIGN2 = SIGN2 + TEMP
      SIGQ3 = SIGQ3 + TEMP*FLOAT(NO(I))
 2810 CONTINUE
      ANAT = FLOAT(NAT)/(PTS*FLOAT((ICENT+1)*NSYM))
      NAT = ANAT + 0.5
      WRITE (LC1,2820) ICAP1(ICENT+1),ICAP2(ICENT+1),LTA,ANAT,
     1  (N3(I),N4(I),NA(I),NO(I),AL(I),AS(I),BL(I),BS(I),CL(I),I=1,NK)
 2820 FORMAT(17H0THE STRUCTURE IS,2A2,15HCENTROSYMMETRIC,9X,24HTHE LATTI
     1CE IS OF TYPE  ,A1,8X,36HNUMBER OF ATOMS IN ASYMMETRIC UNIT =,F6.1
     2  ///26X,18HUNIT CELL CONTENTS,27X,27HSCATTERING FACTOR CONSTANTS/
     3  17X,35HATOM  NUMBER IN CELL  ATOMIC NUMBER,12X,42H(F = AA*EXP(-A
     4*RHO) + BB*EXP(-B*RHO) + CC)/(18X,2A1,2I13,15X,5F9.3))
      IF(NGP.EQ.0) GO TO 2880
      NF=0
      DO 2870 I=1,NGP
      NS=NF+1
      NF=NF+NAG(I)
      IF (POP(I) .EQ. 0.0) POP(I) = PTS*FLOAT(NSYM*(ICENT + 1))
      DO 2825 J=NS,NF
      X(J) = 0.0001*FLOAT(IXYZ(1,J))
      Y(J) = 0.0001*FLOAT(IXYZ(2,J))
      Z(J) = 0.0001*FLOAT(IXYZ(3,J))
 2825 CONTINUE
      K = NINF(I) - 1
      WRITE (LC1,2830) I,(ITEXT(J,K),J=1,11),NAG(I),POP(I),(N1(J),N2(J),
     1  X(J),Y(J),Z(J),J=NS,NF)
 2830 FORMAT(/13H0GROUP NUMBER,I3,11X,11A2,11X,27HNUMBER OF ATOMS IN GRO
     1UP  =,I4,10X,14HMULTIPLICITY =,F5.1/(4(4X,2A1,3F8.4)))
      IF (K .GT. 1) GO TO 2850
C     CALCULATE SPHERICALLY AVERAGED MOLECULAR SCATTERING FACTORS
      CALL DEBYE(NS,NF,I,NK)
      GO TO 2870
C     NUMBER OF ORIENTED OR POSITIONED GROUPS
 2850 IF (K .LE. 3) KGP = KGP + 1
      IF (K .LE. 3) SIG3(KGP) = 0.0
C     CALCULATE SCATTERING POWERS OF GROUPS
      DO 2860 J=NS,NF
      K = IXYZ(4,J)
      IF (NINF(I) .LE. 4) IXYZ(4,J) = NO(K)
      ANX(K) = ANX(K) + SOF(J)*POP(I)
      TEMP = FLOAT(NO(K)*NO(K))*POP(I)/PTS
      SIGP2 = SIGP2 + TEMP
      IF (NINF(I) .NE. 5) SIGQ3 = SIGQ3 - TEMP*FLOAT(NO(K))
      IF (NINF(I) .LE. 4) SIG3(KGP) = SIG3(KGP) + TEMP*FLOAT(NO(K))
 2860 CONTINUE
 2870 CONTINUE
C     CALCULATE WILSON (GIW) AND DEBYE (GIS) SCATTERING FACTORS
 2880 DO 2900 I=2,60
      TT = 0.01*FLOAT(I-10)
      IF (I .LE. 10) TT = 0.002*FLOAT(I-2)
      GIW(I)=0.0
      DO 2890 J=1,NK
      FZ = (AL(J)*EXP(-AS(J)*TT)+BL(J)*EXP(-BS(J)*TT)+CL(J))**2
      GIS(I) = GIS(I) + FZ*FLOAT(NA(J))
      GIW(I) = GIW(I) + FZ*FLOAT(NA(J))
      IF (NPATH .GE. 2) GIW(I) = GIW(I) - FZ*ANX(J)
 2890 CONTINUE
      IF (GIW(I) .LE. 0.0) GIW(I) = 0.01
 2900 CONTINUE
C     PROPORTION OF KNOWN STRUCTURE FOR KARLE RECYCLING
      PKARL = 1.0 - GIW(2)/GIS(2)
C     QUARTIC EXTRAPOLATION TO HELP INTERPOLATION NEAR ORIGIN
      GIS(1) = 5.0*(GIS(2) - GIS(5)) - 10.0*(GIS(3) - GIS(4)) + GIS(6)
      GIW(1) = 5.0*(GIW(2) - GIW(5)) - 10.0*(GIW(3) - GIW(4)) + GIW(6)
      IF (NPATH .GE. 3) RETURN
C     NUMBER OF REFLEXIONS TO BE USED IN PHASE DETERMINATION
      IF (NUMB .GT. 0) GO TO 2920
      NUMB = 4*NAT + 100
      IF (NSYM .EQ. 1) NUMB = NUMB + 100
      IF (NSYM .EQ. 2) NUMB = NUMB + 50
      NUMB = NUMB + (NUMB + 5)/10
 2920 IF (NUMB .GT. KUSER1) NUMB = KUSER1
C     NUMBER OF PHASES TO BE DETERMINED
      IF (NDET .GT. NUMB) NDET = NUMB
      IF (NDET .EQ. 0) NDET = (10*NUMB + 5)/11
      WRITE (LC1,2940) NUMB,IZRO
 2940 FORMAT(/26X,24HREFLEXIONS FOR MULTAN  -,I5,13H  LARGEST E'S,3X,
     1  3HAND,I5,14H  SMALLEST E'S)
      IF (KRAN.GT.0 .AND. NSREQ.EQ.0  .AND.  NAT.LE.50) NSREQ = 50
      IF (KRAN.GT.0 .AND. NSREQ.EQ.0  .AND.  NAT.GT.50) NSREQ = NAT
      IF (NSPEC+NGEN+NANY.EQ.0 .AND. NSREQ.EQ.0) NSREQ = 3*NAT/2
      IF (NPATH .EQ. 2) NSREQ = 1
      IF (NSREQ .EQ. 0) NSREQ = 300
      RETURN
      END
C     RECIP CELL PARAMETERS, LATTICE MULTIPLICITY AND CRYSTAL SYSTEM
      SUBROUTINE PTSYS(P)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24)
      DIMENSION P(6),CP(6)
C     CALCULATE AND OUTPUT RECIPROCAL CELL PARAMETERS
      DO 1000 I=4,6
      CP(I-3) = SIN(DTOR*CX(I))
      CP(I) = COS(DTOR*CX(I))
 1000 CONTINUE
      V = SQRT((CP(1)*CP(3))**2 - (CP(5) - CP(4)*CP(6))**2)
      DO 1020 I=1,3
      P(I) = CP(I)/(V*CX(I))
 1020 CONTINUE
      P(4) = 0.5*P(1)*P(2)*(CP(4)*CP(5) - CP(6))/(CP(1)*CP(2))
      P(5) = 0.5*P(3)*P(1)*(CP(6)*CP(4) - CP(5))/(CP(3)*CP(1))
      P(6) = 0.5*P(2)*P(3)*(CP(5)*CP(6) - CP(4))/(CP(2)*CP(3))
      DO 1040 I=1,3
      P(I) = 0.25*P(I)*P(I)
 1040 CONTINUE
      WRITE (LC1,1060) CX,P
 1060 FORMAT(12H0DIRECT CELL,12X,3HA =,F7.3,5X,3HB =,F7.3,5X,3HC =,
     1  F7.3,5X,7HALPHA =,F7.2,5X,6HBETA =,F7.2,5X,7HGAMMA =,F7.2/
     2  29H0(SIN(THETA)/LAMBDA)**2   =  ,F9.6,7H*H**2 +,F9.6,7H*K**2 +,
     3  F9.6,7H*L**2 +,F9.6,6H*H*K +,F9.6,6H*L*H +,F9.6,4H*K*L)
C     DETERMINE LATTICE MULTIPLICITY
C     PRIMITIVE
      PTS=1.0
      IF(LATT.EQ.7) GO TO 2300
C     A, B, C OR I CENTRED
      IF(LATT.NE.1) PTS=2.0
C     F CENTRED
      IF(LATT.EQ.6) PTS=4.0
      GO TO 2400
 2300 DO 2310 I=1,NSYM
C     PRIMITIVE RHOMBOHEDRAL  (PTS=1.0)
      IF (IABS(IS(3,1,I)) .EQ. 1) GO TO 2400
 2310 CONTINUE
C     CENTRED HEXAGONAL
      PTS=3.0
C     DETERMINE CRYSTAL SYSTEM
 2400 DO 2450 I=1,2
      DO 2440 J=1,NSYM
      IF (IS(4-I,1,J) .NE. 0) GO TO 2460
 2440 CONTINUE
 2450 CONTINUE
C     1 - TRICLINIC, 2 - MONOCLINIC, 3 - ORTHORHOMBIC
      KSYS = NSYM
      IF (NSYM .GT. 3) KSYS = 3
      GO TO 2500
 2460 IF(I.EQ.1) GO TO 2480
C     TETRAGONAL
      KSYS=4
      IF(NSYM.EQ.4.OR.NSYM.EQ.8) GO TO 2500
C     TRIGONAL OR RHOMBOHEDRAL INDEXED ON HEXAGONAL AXES
      KSYS=5
C     TEST FOR 6-FOLD AXIS - GENERAL FORM -X, -Y, Z + T
      DO 2470 J=2,NSYM
      IF (IS(1,1,J).NE.(-1) .OR. IS(2,1,J).NE.0 .OR. IS(3,1,J).NE.0)
     1  GO TO 2470
      IF (IS(1,2,J).NE.0 .OR. IS(2,2,J).NE.(-1) .OR. IS(3,2,J).NE.0)
     1  GO TO 2470
C     HEXAGONAL
      KSYS=6
 2470 CONTINUE
      GO TO 2500
C     CUBIC
 2480 KSYS=8
C     PRIMITIVE RHOMBOHEDRAL
      IF(LATT.EQ.7) KSYS=7
      IF(KSYS.EQ.7) LATT=1
 2500 RETURN
      END
C     READ GENERAL EQUIVALENT POSITIONS AS IN INTERNATIONAL TABLES
      SUBROUTINE INSYM(KS,N,LINE)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      DIMENSION KX(15),N(80),LINE(21,4),ID(4)
      DATA KX/1H1,1H2,1H3,1H4,1H5,1H6,1HX,1HY,1HZ,1H ,1H+,1H/,1H-,1H,,
     1 1H*/
      ISN = 1
      NSYM = 0
      KS = KS - 1
      N(KS) = KX(15)
   10 DO 100 I=KS,80
      DO 20 K=1,15
      IF (N(I) .EQ. KX(K)) GO TO 30
   20 CONTINUE
C     UNRECOGNISED CHARACTER MARKS END OF SYMMETRY INPUT
      GO TO 120
   30 IF (K .GT. 6) GO TO 40
C     CHARACTER 1,2,3,4,5 OR 6
      IF (DIV .LT. 0.0) DIV = K
      ITS(IC,NSYM) = 24.0*DIV/FLOAT(K) + 0.5
      GO TO 100
   40 IF (K .GT. 9) GO TO 50
C     CHARACTER X,Y OR Z
      IS (K-6,IC,NSYM) = ISN
      ISN = 1
      GO TO 100
   50 IF (K-13) 100,80,60
C     CHARACTER , OR *
   60 DIV = -1.0
      IF (K .EQ. 15) IC = 0
      IC = IC + 1
      IF (K .EQ. 15) NSYM = NSYM + 1
      DO 70 K=1,3
      IS(K,IC,NSYM) = 0
   70 CONTINUE
      ITS(IC,NSYM) = 0
      GO TO 100
C     CHARACTER -
   80 ISN = -1
  100 CONTINUE
      KS = 1
      READ (LC2,110) N
  110 FORMAT(80A1)
      GO TO 10
C     OUTPUT GENERAL EQUIVALENT POSITIONS
  120 KS = I
      WRITE (LC1,125)
  125 FORMAT(30H0GENERAL EQUIVALENT POSITIONS:)
      K = 0
      DO 200 I=1,NSYM
      K = K + 1
      ID(K) = I
      DO 130 J=1,21
      LINE(J,K) = KX(10)
  130 CONTINUE
      DO 170 IC=1,3
      IND = 7*IC - 5
      LINE(IND+5,K) = KX(14)
      IF (ITS(IC,I) .EQ. 0) GO TO 150
C     TRANSLATIONAL PART
      NUM = 1
      IF (ITS(IC,I).GT.14) NUM=FLOAT(ITS(IC,I))/FLOAT(24-ITS(IC,I))+0.5
      NOM = 24.0*FLOAT(NUM)/FLOAT(ITS(IC,I)) + 0.5
      LINE(IND,K) = KX(NUM)
      LINE(IND+1,K) = KX(12)
      LINE(IND+2,K) = KX(NOM)
      LINE(IND+3,K) = KX(11)
C     SYMBOLIC PART
  150 DO 160 J=1,3
      IF (IS(J,IC,I)) 154,160,157
  154 LINE(IND+3,K) = KX(13)
  157 LINE(IND+4,K) = KX(J+6)
      IND = IND - 2
  160 CONTINUE
      IF (LINE(IND+7,K) .EQ. KX(10)) LINE(IND+7,K) = KX(11)
  170 CONTINUE
      IF (K .LT. 4) GO TO 200
      WRITE (LC1,180) (ID(IC),(LINE(J,IC),J=1,20),IC=1,K)
  180 FORMAT(4(I8,2H) ,20A1))
      K = 0
  200 CONTINUE
      IF (K .NE. 0) WRITE (LC1,180) (ID(I),(LINE(J,I),J=1,20),I=1,K)
      RETURN
      END
C     EXTRACT SCATTERING FACTOR CONSTANTS FROM TABLE
      SUBROUTINE ATREC(NK)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),AL(8),AS(8),
     1  BL(8),BS(8),CL(8),GIS(60),GIW(60),IFORM(80),IP(200),X(250),
     2  Y(250),Z(250),NW(8)
      DIMENSION ALT(50),AST(50),BLT(50),BST(50),CLT(50),N1(50)
      DATA N1/8,369,65,2,3,14,15,6,421,397,42,579,16,19,102,11,91,
     1  609,22,108,404,185,105,429,111,794,49,575,78,542,588,798,
     2  405,561,548,484,37,94,584,572,9,109,61,23,469,500,51,247,
     3  482,69/
C     ATOMIC SCATTERING FACTORS FOR ABOVE ATOM TYPES
C     F = AL * EXP(-AS * RHO) + BL * EXP(-BS * RHO) + CL
      DATA ALT/0.388,1.560,1.261,1.207,2.112,3.188,4.197,5.155,7.488,
     1 7.426,7.276,6.988,6.509,5.967,5.557,9.544,10.25,11.69,12.50,
     2 13.67,14.17,15.01,15.84,16.69,17.88,18.32,18.62,18.48,18.18,
     3 17.27,17.95,18.21,18.38,19.56,20.42,20.02,22.37,23.74,25.20,
     4 25.41,25.51,25.57,26.03,36.53,36.50,36.08,36.22,37.13,38.75,
     5 39.16/
      DATA AST/7.151,3.264,2.620,5.745,7.827,7.341,6.327,5.392,4.821,
     1 3.770,3.143,2.739,2.602,2.753,3.176,7.683,7.176,6.300,5.929,
     2 5.789,5.252,4.958,4.687,4.440,4.357,4.019,3.091,2.815,2.638,
     3 3.382,4.361,4.515,4.490,4.686,4.797,4.398,4.881,4.953,4.631,
     4 4.290,3.653,3.556,4.022,3.505,3.460,3.333,3.360,3.585,3.820,
     5 3.714/
      DATA BLT/0.601,1.059,2.008,2.530,2.462,2.305,2.218,2.172,1.280,
     1 2.267,3.192,4.169,5.107,5.925,6.573,2.843,3.086,3.419,3.482,
     2 3.131,3.554,3.573,3.578,3.558,3.088,3.501,5.729,6.744,7.710,
     3 7.397,5.919,6.578,7.602,7.598,7.360,8.892,6.844,6.153,6.411,
     4 7.297,9.410,10.22,9.230,8.741,9.627,11.22,11.46,10.38,9.179,
     5 9.659/
      DATA BST/30.18,108.3,54.77,38.23,31.65,26.84,22.83,19.61,96.71,
     1 69.72,55.67,43.28,34.46,28.44,24.26,53.75,79.64,62.92,57.74,
     2 46.70,49.62,46.50,43.88,41.79,35.63,38.46,35.40,30.87,27.32,
     3 28.90,44.38,42.30,30.85,28.20,27.65,20.92,26.38,32.06,40.81,
     4 39.07,33.09,31.70,38.86,33.47,29.80,23.06,22.12,25.33,33.99,
     5 35.23/
      DATA CLT/0.008,0.3747,0.7163,1.243,1.412,1.498,1.578,1.668,2.216,
     1 2.291,2.491,2.801,3.343,4.073,4.839,6.494,6.616,6.846,6.966,
     2 7.147,7.226,7.375,7.541,7.712,7.986,8.136,8.601,8.727,9.070,
     3 12.09,13.92,15.06,15.88,16.72,17.11,17.04,17.69,18.02,18.30,
     4 18.22,18.02,18.93,20.42,28.57,29.71,30.56,31.19,32.35,33.92,
     5 34.06/
      DO 150 I=1,NK
C     CHECK ATOM TYPE
      DO 120 J=1,50
      IF(NW(I).NE.N1(J)) GO TO 120
      AS(I)=AST(J)
      AL(I)=ALT(J)
      BS(I)=BST(J)
      BL(I)=BLT(J)
      CL(I)=CLT(J)
  120 CONTINUE
  150 CONTINUE
      RETURN
      END
C     CALCULATE SCATTERING FACTORS FOR RANDOM GROUPS  (NINF = 2)
      SUBROUTINE DEBYE(NMEM,NTOT,N,NK)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),AL(8),AS(8),
     1  BL(8),BS(8),CL(8),GIS(60),GIW(60),IFORM(80),IP(200),X(250),
     2  Y(250),Z(250),NW(8),POP(10),NA(8),CR(6,10),N1(250),N2(250),
     3  N3(9),N4(9),ANX(8),CP(6),F(8)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR
      IF (CR(1,N) .LT. 0.01) GO TO 15
      WRITE (LC1,5) (CR(I,N),I=1,6)
    5 FORMAT(4X,35HGIVEN COORDINATES REFER TO THE CELL,2X,4H A =,F6.2,
     1 2X,3HB =,F6.2,2X,3HC =,F6.2,2X,7HALPHA =,F6.1,2X,6HBETA =,
     2 F6.1,2X,7HGAMMA =,F6.1)
C     CONVERT TO ORTHOGONAL COORDINATES
      DO 8 I=4,6
      CP(I-3) = SIN(DTOR*CR(I,N))
      CP(I) = COS(DTOR*CR(I,N))
    8 CONTINUE
      V = SQRT((CP(1)*CP(3))**2 - (CP(5) - CP(4)*CP(6))**2)
      DO 10 I=NMEM,NTOT
      X(I) = CR(1,N)*X(I) + CR(2,N)*CP(6)*Y(I) + CR(3,N)*CP(5)*Z(I)
      Y(I) = CR(2,N)*CP(3)*Y(I)+CR(3,N)*(CP(4)-CP(5)*CP(6))*Z(I)/CP(3)
      Z(I) = CR(3,N)*V*Z(I)/CP(3)
   10 CONTINUE
   15 DO 100 I=2,60
      GG = 0.0
      TT = 0.01*FLOAT(I-10)
      IF (I .LE. 10) TT = 0.002*FLOAT(I-2)
      T = 720.0*DTOR*SQRT(TT)
      DO 20 J=1,NK
      F(J)=AL(J)*EXP(-AS(J)*TT)+BL(J)*EXP(-BS(J)*TT)+CL(J)
   20 CONTINUE
C     SUM OVER INTERATOMIC VECTORS
      DO 50 K=NMEM,NTOT
      KT = IXYZ(4,K)
      GIS(I) = GIS(I) - F(KT)*F(KT)*POP(N)
      DO 40 L=NMEM,NTOT
      LT = IXYZ(4,L)
      D = 1.0
      IF (L.EQ.K .OR. I.EQ.2) GO TO 30
      D = T*SQRT((X(K)-X(L))**2+(Y(K)-Y(L))**2+(Z(K)-Z(L))**2)
      D=SIN(D)/D
   30 GG = GG + F(KT)*F(LT)*D
   40 CONTINUE
   50 CONTINUE
      GIS(I) = GIS(I) + GG*POP(N)
      GIW(I) = SQRT(GG)
  100 CONTINUE
      WRITE (LC1,120) GIW(2),(GIW(I),I=11,43)
  120 FORMAT(/25X,70HGROUP SCATTERING FACTOR AT INTERVALS OF 0.01 IN (SI
     1N(THETA)/LAMBDA)**2/(1X,17F7.2))
      RETURN
      END
C     INPUT REFLEXION DATA;  CALCULATE RHO, EPSILON, MULTIPLICITY AND
C     SCATTERING FACTOR; CALCULATE STRUCTURE FACTORS FOR WTD FOURIER
      SUBROUTINE INPUT(NPATH,NPC,NREF,NK,NGP,P)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),AL(8),AS(8),
     1  BL(8),BS(8),CL(8),GIS(60),GIW(60),IFORM(80),IP(200),X(250),
     2  Y(250),Z(250),TS(3,24),KH(3,10),FF(10),KD(10),I2(3),H2(3),F(8),
     3  SINT(451),LH(40),LK(40),LL(40),FO(40),ID(40),ED(40),EW(40),
     4  RHO(40),FC(40),IPHAZ(40)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      COMMON /RC/ RHOMAX,TH,BT,SC,MG
      DIMENSION P(6)
      NREF = 0
      RHOMAX = 0.0
      DO 920 K=1,NSYM
      DO 900 I=1,3
      TS(I,K) = FLOAT(ITS(I,K))/24.0
  900 CONTINUE
  920 CONTINUE
C     SET UP SINE/COSINE TABLE IF NEEDED
      IF (NPATH .LT. 2) GO TO 1040
      DO 1000 I=1,451
      SINT(I) = SIN(DTOR*FLOAT(I-1))
 1000 CONTINUE
      NF = 0
      DO 1020 K=1,NGP
      NS = NF + 1
      NF = NF + NAG(K)
      IF (NINF(K) .GT. 4) GO TO 1040
 1020 CONTINUE
 1040 I = 0
 1050 READ (LC4,IFORM) ((KH(K,II),K=1,3),FF(II),KD(II),II=1,NPC)
      DO 1500 II=1,NPC
C     PUT REFLEXION IN STANDARD HEMISPHERE
      DO 1060 K=1,3
      IF (KH(K,II)) 1065,1060,1080
 1060 CONTINUE
 1065 DO 1070 K=1,3
      KH(K,II) = -KH(K,II)
 1070 CONTINUE
 1080 I = I + 1
      LH(I) = KH(1,II)
      LK(I) = KH(2,II)
      LL(I) = KH(3,II)
      FO(I) = FF(II)
      IF (FO(I) .LT. 0.0) GO TO 1520
      RHO(I)=P(1)*FLOAT(LH(I)*LH(I))+P(2)*FLOAT(LK(I)*LK(I))
     1 +P(3)*FLOAT(LL(I)*LL(I))+P(4)*FLOAT(LH(I)*LK(I))
     2 +P(5)*FLOAT(LH(I)*LL(I))+P(6)*FLOAT(LK(I)*LL(I))
      IF (RHO(I) .LE. TH) GO TO 1090
      I = I - 1
      GO TO 1500
 1090 NREF = NREF + 1
      IF (RHO(I) .GT. RHOMAX) RHOMAX = RHO(I)
      IGP = MG
      IEPS = 0
      MULT = 0
C     SET UP ATOMIC SCATTERING FACTORS IF NEEDED
      IF (NPATH .LT. 2) GO TO 1120
      REL = 0.0
      RIM = 0.0
      DO 1100 K=1,NK
      F(K) = AL(K)*EXP(-AS(K)*RHO(I)) + BL(K)*EXP(-BS(K)*RHO(I)) + CL(K)
 1100 CONTINUE
 1120 MKANG = 0
      DO 1400 J=1,NSYM
C     GENERATE SYMMETRY RELATED REFLEXIONS
      T = 1000.0
      DO 1140 K=1,3
      I2(K) = IS(K,1,J)*KH(1,II)+IS(K,2,J)*KH(2,II)+IS(K,3,J)*KH(3,II)
      H2(K) = I2(K)
      T = T + FLOAT(KH(K,II))*TS(K,J)
 1140 CONTINUE
C     COMPUTE EPSILON, MULTIPLICITY AND PHASE RESTRICTIONS
C     EPSILON = NUMBER OF TIMES SAME REFLEXION GENERATED BY SYMMETRY
C     MULTIPLICITY = NUMBER DIFFERENT REFLEXIONS GENERATED
C     PHASE RESTRICTION OCCURS WHEN FRIEDEL OPPOSITE IS GENERATED
      DO 1160 K=1,3
      IF (KH(K,II) .NE. I2(K)) GO TO 1180
 1160 CONTINUE
      IEPS = IEPS + 1
      GO TO 1220
 1180 DO 1200 K=1,3
      IF (KH(K,II) .NE. (-I2(K))) GO TO 1240
 1200 CONTINUE
      IF (ICENT .NE. 0) IEPS = IEPS + 1
      MKANG = 12.0*(T - IFIX(T)) + 0.5
      IF (MKANG .EQ. 0) MKANG = 12
 1220 MULT = MULT + 1
C     CALCULATE STRUCTURE FACTORS FOR WTD OR DIFF FOURIER OR KARLE RECYC
 1240 IF (NPATH .LT. 2) GO TO 1300
      DO 1260 K=NS,NF
      N = IXYZ(4,K)
      ARG = H2(1)*X(K)+H2(2)*Y(K)+H2(3)*Z(K)+T
      IARG = 360.0*(ARG - IFIX(ARG)) + 1.5
      REL = REL + F(N)*SOF(K)*SINT(IARG+90)
      RIM = RIM + F(N)*SOF(K)*SINT(IARG)
 1260 CONTINUE
 1300 IF (MG .EQ. 0) GO TO 1400
C     INDEX GROUPS FOR RESCALING INPUT BY USER
      L = 1
      DO 1370 IG=1,MG
      LG = IP(L)
      DO 1350 KG=1,LG
      K = IP(L+1)*I2(1) + IP(L+2)*I2(2) + IP(L+3)*I2(3) - IP(L+5)
      IF (MOD(K,IP(L+4)) .NE. 0) GO TO 1360
      L = L + 5
 1350 CONTINUE
      GO TO 1390
 1360 L = L + 5*(LG - KG) + 6
 1370 CONTINUE
      IG = MG + 1
 1390 IF (IG .LE. IGP) IGP = IG - 1
 1400 CONTINUE
      IF (MG .GT. 0) GO TO 1440
C     DEFAULT INDEX GROUPS FOR RESCALING
      IF (KSYS .GE. 7) GO TO 1430
      LG = MOD(IABS(LL(I)),2)
      IF (KSYS .GE. 5) GO TO 1420
      KG = MOD(IABS(LK(I)),2)
      JG = MOD(IABS(LH(I)),2)
C     TRICLINIC, MONCLINIC AND ORTHORHOMBIC
      IF (KSYS .LE. 3) IGP = JG + 2*KG + 4*LG
C     TETRAGONAL
      IF (KSYS .EQ. 4) IGP = JG + KG + 3*LG
      GO TO 1440
C     TRIGONAL, HEXAGONAL AND RHOMBOHEDRAL INDEXED ON HEXAGONAL AXES
 1420 IGP = 3*LG
      IF (MOD(LH(I),3) .EQ. 0) IGP = IGP + 1
      IF (MOD(LK(I),3).EQ.0 .OR. MOD(LH(I)+LK(I),3).EQ.0) IGP = IGP + 1
      GO TO 1440
C     CUBIC AND PRIMITIVE RHOMBOHEDRAL
 1430 IGP = 3*MOD(IABS(LH(I)+LK(I)+LL(I)),2)
      IF (MOD(LH(I)-LL(I),3) .EQ. 0) IGP = IGP + 1
      IF (MOD(LK(I)-LL(I),3).EQ.0.OR.MOD(LH(I)-LK(I),3).EQ.0) IGP=IGP+1
C     PACK SYMMETRY FUNCTIONS FOR LATER USE
 1440 IF (ICENT .NE. 0) MKANG = 12
      ID(I) = 1024*(NSYM/MULT) + 128*(IEPS - 1) + 8*MKANG + IGP
C     LOOK UP SCATTERING FACTOR TABLES GENERATED BY ATREC
      IF (RHO(I) .GT. 0.015) STHSQ = 100.0*RHO(I) + 10.0
      IF (RHO(I) .LE. 0.015) STHSQ = 500.0*RHO(I) + 2.0
      IND = STHSQ + 0.5
      FRAC = STHSQ - FLOAT(IND)
C     EXPECTED INTENSITY ACCORDING TO DEBYE
      BF=0.5*(GIS(IND+1)-GIS(IND-1))
      AF=BF+GIS(IND-1)-GIS(IND)
      ED(I) = (AF*FRAC+BF)*FRAC+GIS(IND)
C     WILSON'S EXPECTED INTENSITY (IF NPATH.GE.2 THIS IS MISSING ATOMS)
      BF=0.5*(GIW(IND+1)-GIW(IND-1))
      AF=BF+GIW(IND-1)-GIW(IND)
      EW(I) = (AF*FRAC+BF)*FRAC+GIW(IND)
      IF (NPATH .LT. 2) GO TO 1460
C     CALCULATED MAGNITUDE AND PHASE FOR WTD FOURIER OR KARLE RECYCLING
      IF (ICENT .EQ. 1) REL = REL + REL
      IF (ICENT .EQ. 1) RIM = 0.0
      FC(I) = PTS*PTS*(REL*REL + RIM*RIM)
      IFAZ = ATAN2(RIM,REL)/DTOR + 359.5
      IPHAZ(I) = MOD(IFAZ, 360) + 1
 1460 IF (I .LT. 40) GO TO 1500
      WRITE (LC2) LH,LK,LL,FO,ID,ED,RHO,EW,FC,IPHAZ
      I = 0
 1500 CONTINUE
      GO TO 1050
 1520 WRITE (LC2) LH,LK,LL,FO,ID,ED,RHO,EW,FC,IPHAZ
      RES = 0.5/SQRT(RHOMAX)
      WRITE (LC1,1540) NREF,RHOMAX,RES
 1540 FORMAT(/10X,22HNUMBER OF REFLEXIONS =,I6,8X,32HMAXIMUM (SIN(THETA)
     1/LAMBDA)**2 =,F6.3,8X,12HRESOLUTION =,F6.2)
      RETURN
      END
C     DETERMINE SCALE FACTOR AND OVERALL TEMPERATURE FACTOR BY LEAST
C     SQUARES STRAIGHT LINE FIT; PLOT WILSON AND DEBYE CURVES
      SUBROUTINE WILSON(NPATH,NREF,DEL)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),
     1  DCV(60),RA(70),SW(70),SD(70),SR(70),SI(70),SN(70),LH(40),LK(40),
     2  LL(40),FO(40),ID(40),ED(40),EW(40),RHO(40),FC(40),FH(6),M(119)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40)
      COMMON /RC/ RHOMAX,TH,BT,SC
      DATA ISP/1H /, IST/1H*/, IMN/1H-/, JD/1HD/, IH/1HH/, II/1HI/,
     1  IO/1HO/, IR/1HR/, IW/1HW/
C     ODD NUMBER OF POINTS ON THE WILSON PLOT  (NB=15*LOG10(NREF/20))
      NB = 2*IFIX(3.25725*ALOG(0.05*FLOAT(NREF))) + 4
      RR=FLOAT(NB-3)/RHOMAX
      NBP1 = NB + 1
      DO 1000 I=1,NBP1
      SW(I)=0.0
      SD(I)=0.0
      SR(I)=0.0
      SI(I)=0.0
      SN(I) = 0.0
      RA(I) = 0.0
 1000 CONTINUE
      REWIND LC2
 1020 READ (LC2) LH,LK,LL,FO,ID,ED,RHO,EW,FC
      DO 1040 I=1,40
      IF(FO(I).LT.0.0) GO TO 1060
      IF (NPATH .GT. 2) ED(I) = EW(I) + FC(I)
      N = RR*RHO(I) + 4.0
      TMUL = ID(I)/1024
      EPS = MOD(ID(I), 1024)/128 + 1
C     ACCUMULATE SUMS FOR SCALING
      SN(N) = SN(N) + TMUL
      SW(N) = SW(N) + TMUL*EW(I)
      SD(N) = SD(N) + TMUL*ED(I)
      SR(N) = SR(N) + TMUL*RHO(I)
      SI(N) = SI(N) + TMUL*FO(I)*FO(I)/EPS
 1040 CONTINUE
      GO TO 1020
C     CALCULATE POINTS FOR WILSON PLOT
 1060 REWIND LC2
      DO 1080 I=4,NB
      ID(I-1) = I - 3
      RA(I-1) = FLOAT(I-3)/RR
C     SMOOTH CURVE BY COMBINING ADJACENT RANGES OF RHO
      SN(I-1) = SN(I-1) + 2.0*SN(I) + SN(I+1)
      IF (SN(I-1) .LT. 0.5) GO TO 1080
      SR(I-1) = (SR(I-1) + 2.0*SR(I) + SR(I+1))/SN(I-1)
      SI(I-1) = (SI(I-1) + 2.0*SI(I) + SI(I+1))/SN(I-1)
      SW(I-1) = ALOG(SI(I-1)*SN(I-1)/(SW(I-1) + 2.0*SW(I) + SW(I+1)))
      SD(I-1) = ALOG(SI(I-1)*SN(I-1)/(SD(I-1) + 2.0*SD(I) + SD(I+1)))
C     COEFFICIENTS OF NORMAL EQUATIONS
      SR(1) = SR(1) + SR(I-1)
      SD(1) = SD(1) + SD(I-1)
      SI(1) = SI(1) + SR(I-1)*SR(I-1)
      SW(1) = SW(1) + SR(I-1)*SD(I-1)
 1080 CONTINUE
      RA(NB) = RHOMAX
      NB = NB - 1
      IF (NPATH .LT. 2) WRITE(LC1,1100) (ID(I),RA(I-2),RA(I+1),SN(I),
     1  SR(I),SI(I),SD(I),SW(I),I=3,NB,2)
 1100 FORMAT(//50X,19H**  WILSON PLOT  **/2(11X,12HRANGE OF RHO,9X,
     1  4HMEAN,24X)/2(10X,50H(SINTH/LAM)**2 NUMBER  RHO    MEAN I  DEBYE
     2 WILSON)/(2(I8,F8.3,2H -,F6.3,F7.0,F6.3,F9.1,2F7.3)))
C     LEAST SQUARES FIT FOR OVERALL SCALE AND TEMPERATURE FACTORS
      BN = NB - 2
      SD(2) = (SI(1)*SD(1) - SR(1)*SW(1))/(SI(1)*BN - SR(1)*SR(1))
      SW(2) = SD(2)
      BT = 0.5*(SR(1)*SD(1) - SW(1)*BN)/(SI(1)*BN - SR(1)*SR(1))
      SC = EXP(-SD(2))
      WRITE (LC1,1120) BT,SC
 1120 FORMAT(42H0LEAST SQUARES STRAIGHT LINE GIVES:   B  =,F7.3,8X,
     1  8HSCALE  =,F7.3,48H    WHERE  F(ABSOLUTE)**2 = SCALE*F(OBSERVED)
     2**2)
      IF (NPATH .GE. 3) RETURN
C     EXTRAPOLATE TO NEGATIVE RHO TO HELP LATER INTERPOLATION
      SD(1) = SD(2) + 2.0*BT*SR(3)
      SW(1) = SD(1)
      SR(1) = -SR(3)
C     DETERMINE RANGE OF PLOT
      FX = SW(2)
      FN = -2.0*BT*SR(NB) + SW(2)
      DO 1140 I=3,NB
      IF (SW(I) .GT. FX) FX = SW(I)
      IF (SD(I) .GT. FX) FX = SD(I)
      IF (SW(I) .LT. FN) FN = SW(I)
      IF (SD(I) .LT. FN) FN = SD(I)
 1140 CONTINUE
      FD=FX-FN
      DO 1160 I=1,6
      FH(I)=FN+0.2*FLOAT(I-1)*FD
 1160 CONTINUE
C     LINE PRINTER PLOT AT 50 VALUES OF RHO
      IF (NPATH .LT. 2) WRITE (LC1,1180) ITLE,FH
 1180 FORMAT( //28X,63HPLOT OF WILSON AND DEBYE CURVES AND LEAST SQUARES
     1 STRAIGHT LINE//20X,40A2//50X,20HLN(F(OBS)**2/SIGFSQ)/F19.3,
     2  5F20.3/7X,9H0.000   -,5(1HI,19(1H-)),2HI-)
      J = 0
      DO 1300 I=1,50
      DO 1200 L=1,119
      M(L) = ISP
 1200 CONTINUE
C     SIDE FRAME (I)
      M(16) = II
      IF (I .NE. 25) GO TO 1220
      M(3) = IR
      M(4) = IH
      M(5) = IO
C     INTERPOLATION
 1220 Q = FLOAT(I)*SR(NB)/50.0
      L = 100.0*(SW(2) - 2.0*BT*Q - FN)/FD + 16.5
      IF (L.GT.119) L=119
C     STRAIGHT LINE OUTPUT (*)
      M(L) = IST
C     LAGRANGE 4-POINT INTERPOLATION FOR K-CURVE
      IF (SR(J+3) .LT. Q .AND. J .LT. NB-4) J = J + 1
      W = 0.0
      D = 0.0
      DO 1240 K=1,4
      EL = 1.0
      DO 1230 L=1,4
      IF (K .NE. L) EL = EL*(Q - SR(J+L))/(SR(J+K) - SR(J+L))
 1230 CONTINUE
      W = W + EL*SW(J+K)
      D = D + EL*SD(J+K)
 1240 CONTINUE
C     WILSON PLOT OUTPUT (W)
      L = 100.0*(W - FN)/FD + 16.5
      IF (L.GT.119) L=119
      M(L) = IW
C     DEBYE CURVE OUTPUT (D)
      L = 100.0*(D - FN)/FD + 16.5
      IF (L .GT. 119) L = 119
      M(L) = JD
C     STORE K-CURVE
      DCV(I+1) = EXP(D)
      IF (NPATH .GE. 2) GO TO 1300
      IF (MOD(I,10) .NE. 0) GO TO 1270
      M(15) = IMN
      M(17) = IMN
      WRITE (LC1,1260) Q,(M(L),L=12,119)
 1260 FORMAT(F12.3,108A1)
      GO TO 1300
 1270 WRITE (LC1,1280) M
 1280 FORMAT(1X,119A1)
 1300 CONTINUE
C     EXTRAPOLATE K-CURVE TO RHOMAX PARALLEL TO L.S. STRAIGHT LINE
      DEL = 50.0/SR(NB)
      DCV(1) = 1.0/SC
      J = RHOMAX*DEL + 2.0
      DO 1320 I=52,J
      DCV(I) = DCV(51)*EXP(-2.0*BT*FLOAT(I-51)/DEL)
 1320 CONTINUE
      RETURN
      END
C     PREPARE FILE FOR WEIGHTED OR DIFFERENCE FOURIER
      SUBROUTINE FFTOUT(NPATH)
      COMMON /LOCAL/ LH(40),LK(40),LL(40),FO(40),ID(40),ED(40),RHO(40),
     1  EW(40),FC(40),IPHAZ(40),SFO(5),SFC(5),SOC(5),NNN(5)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40)
      COMMON /RC/ RHOMAX,TH,BT,SC
C     I1/I0 BESSEL FUNCTION RATIO
      VEC(U) = U*(U + 0.4807)/((U + 0.8636)*U + 1.3943)
      DO 1140 I=1,15
      SFO(I) = 0.0
      NNN(I) = 0
 1140 CONTINUE
      RR = 4.999/RHOMAX
      SC = SQRT(SC)
 1200 READ (LC2) LH,LK,LL,FO,ID,ED,RHO,EW,FC,IPHAZ
      DO 1300 I=1,40
      IF (FO(I) .LT. 0.0) GO TO 1320
C     SCALE FOBS AND REMOVE TEMPERATURE FACTOR
      FO(I) = SC*FO(I)*EXP(BT*RHO(I))
      FC(I) = SQRT(FC(I))
C     CALCULATE SIM WEIGHT
      MKANG = MOD(ID(I), 128)/8
      WT = 1.0
      XKAP = 2.0*FO(I)*FC(I)
      IF (XKAP .GT. 6.0*EW(I)) GO TO 1220
      IF (MKANG .EQ. 0) WT = VEC(XKAP/EW(I))
      IF (MKANG .GT. 0) WT = TANH(0.5*XKAP/EW(I))
 1220 IF (MKANG .EQ. 0) ED(I) = 2.0*WT*FO(I) - FC(I)
      IF (MKANG .GT. 0) ED(I) = WT*FO(I)
      IF (NPATH .EQ. 4) ED(I) = WT*FO(I) - FC(I)
C     ACCUMULATE SUMS FOR R-FACTOR
      N = RR*RHO(I) + 1.0
      SFO(N) = SFO(N) + FO(I)**2
      SFC(N) = SFC(N) + FC(I)**2
      SOC(N) = SOC(N) + FO(I)*FC(I)
      NNN(N) = NNN(N) + 1
 1300 CONTINUE
      WRITE (LC3) LH,LK,LL,ED,IPHAZ
      GO TO 1200
 1320 LH(I) = -1000
      WRITE (LC3) LH,LK,LL,ED,IPHAZ
C     CALCULATE AND OUTPUT R-FACTORS
      DO 1340 I=1,5
      IF (NNN(I) .GT. 0) SFO(I) = 100.0*SQRT(1.0 - SOC(I)*SOC(I)/(SFO(I)
     1  *SFC(I)))
      SFC(I) = FLOAT(I)/RR
 1340 CONTINUE
      WRITE (LC1,1360) ITLE,SFC,SFO,NNN
 1360 FORMAT(1H0,119(1H-)/1H0,40A2,39H STRUCTURE FACTORS FOR WEIGHTED FO
     1URIER//26X,21HRANGE OF (STH/LAM)**2,7X,4H0.00,5(3H --,F5.2)//26X,
     2  21HR-FACTOR   IN   RANGE,7X,5F8.1//26X,21HNUMBER OF  REFLEXIONS,
     3  7X,5I8)
      RETURN
      END
C     CALCULATE E'S AND ACCUMULATE INTENSITY STATISTICS
      SUBROUTINE ECAL(KSYS,NUMB,IZRO,NC,DEL)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),
     1  DCV(60),IX1(1400),IX2(1400),EX(1400),
     2  SCAL(9),ANG(9),RHR(10),SHR(10),ANU(25),AST(5),VST(10,5),
     3  ZT(18,5),EE(9),LH(40),LK(40),LL(40),FO(40),ID(40),ED(40),RHO(40)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /RC/ RHOMAX,TH,BT,SC
C     LIM = SIZE OF ARRAYS IX1, IX2, EX AND RH
      LIM = 1400
C     MAKE SURE ARRAY SIZE IS NOT EXCEEDED
      IF (NUMB+IZRO .LE. LIM-200) GO TO 900
      NUMB = FLOAT(NUMB)*FLOAT(LIM-200)/FLOAT(NUMB+IZRO) + 0.5
      IZRO = LIM - 200 - NUMB
C     INITIALISE VARIABLES
  900 NC = 0
      IZ = 0
      EN = 0.0
      ER = 10.0
      DO 1000 I=1,208
      SCAL(I) = 0.0
 1000 CONTINUE
 1020 READ (LC2) LH,LK,LL,FO,ID,ED,RHO
      DO 1040 I=1,40
      IF (FO(I) .LT. 0.0) GO TO 1050
      TMUL = ID(I)/1024
      EPS = MOD(ID(I), 1024)/128 + 1
      IG = MOD(ID(I), 8) + 1
      AN = RHO(I)*DEL + 1.0
      NN = AN
      ESQ = FO(I)*FO(I)/(EPS*ED(I)*(DCV(NN) + (AN - FLOAT(NN))*
     1  (DCV(NN+1) - DCV(NN))))
      SCAL(IG) = SCAL(IG) + ESQ*TMUL
      ANG(IG) = ANG(IG) + TMUL
 1040 CONTINUE
      GO TO 1020
 1050 DO 1060 I=1,8
      SCAL(9) = SCAL(9) + SCAL(I)
      ANG(9) = ANG(9) + ANG(I)
      IF (ANG(I) .GT. 0.5) SCAL(I) = SCAL(I)/ANG(I)
 1060 CONTINUE
      SCAL(9) = SCAL(9)/ANG(9)
      REWIND LC2
 1080 READ (LC2) LH,LK,LL,FO,ID,ED,RHO
      DO 1250 I=1,40
      IF(FO(I).LT.0.0) GO TO 1300
      TMUL = ID(I)/1024
      EPS = MOD(ID(I), 1024)/128 + 1
      MKANG = MOD(ID(I), 128)/8
      IG = MOD(ID(I), 8) + 1
C     CALCULATE E
      AN = RHO(I)*DEL + 1.0
      NN = AN
      ESQ = FO(I)*FO(I)/(SCAL(IG)*EPS*ED(I)*(DCV(NN) + (AN - FLOAT(NN))*
     1  (DCV(NN+1)-DCV(NN))))
      E=SQRT(ESQ)
      EE(1) = E
C     STORE REFLEXIONS FOR MULTAN
      IF(E.GT.EN) GO TO 1100
      E=E+0.2*RHO(I)
      IF(E.GT.ER) GO TO 1110
 1100 NC=NC+1
      IX1(NC) = 256*LH(I) + LK(I) + 128
      IX2(NC) = 256*IABS(LL(I)) + 16*MKANG + IFIX(EPS+0.5)
      IF (LL(I) .LT. 0) IX2(NC) = -IX2(NC)
      EX(NC)=E
      IF (NC+IZ .LT. LIM) GO TO 1110
      CALL SORT(LIM)
      NC = NUMB
      IZ = IZRO
      EN = EX(NUMB)
      IF (IZRO .GT. 0) ER = EX(LIM-IZRO+1)
C     FINAL STATISTICS - DISTRIBUTION OF E WITH SIN(THETA)/LAMBDA
 1110 N = 9.999*SQRT(RHO(I)/RHOMAX) + 1.0
      SHR(N)=SHR(N)+TMUL
      RHR(N)=RHR(N)+ESQ*TMUL
      NZR=INT(10.0*ESQ)+1
      IF (NZR.GT.8) NZR = 5 + (NZR - 1)/2
      IF (NZR .GT. 12) NZR = 7 + (NZR - 1)/2
      DO 1120 J=2,6
      EE(J)=EE(J-1)*EE(1)
 1120 CONTINUE
      EE(7)=ESQ-1.0
      EE(8)=EE(7)*EE(7)
      EE(9)=EE(8)*EE(7)
      EE(7)=ABS(EE(7))
C     ADD FUNCTIONS OF E TO APPROPRIATE ZONES
      IND = 0
      J=LH(I)
      K=LK(I)
      L=LL(I)
      GO TO (1140,1140,1140,1150,1160,1160,1170,1180), KSYS
C     TRICLINIC, MONOCLINIC AND ORTHORHOMBIC
 1140 IF(J.EQ.0) IND = IND + 3
      IF(K.EQ.0) IND = IND + 4
      IF(L.EQ.0) IND = IND + 5
      GO TO 1200
C     TETRAGONAL
 1150 IF(J.EQ.0.OR.K.EQ.0) IND = IND + 3
      IF(IABS(J).EQ.IABS(K)) IND = IND + 4
      IF(L.EQ.0) IND = IND + 5
      GO TO 1200
C     TRIGONAL, HEXAGONAL AND RHOMBOHEDRAL INDEXED ON HEXAGONAL AXES
 1160 IF(J.EQ.0.OR.K.EQ.0.OR.J+K.EQ.0) IND = IND + 3
      IF(J.EQ.K.OR.J+2*K.EQ.0.OR.2*J+K.EQ.0) IND = IND + 4
      IF(L.EQ.0) IND = IND + 5
      GO TO 1200
C     PRIMITIVE RHOMBOHEDRAL
 1170 IF(J.EQ.K.OR.J.EQ.L.OR.K.EQ.L) IND = IND + 3
      IF(L.EQ.2*K-J.OR.K.EQ.2*J-L.OR.J.EQ.2*L-K) IND = IND + 4
      IF(J+K+L.EQ.0) IND = IND + 5
      GO TO 1200
C     CUBIC
 1180 IF(J.EQ.0.OR.K.EQ.0.OR.L.EQ.0) IND = IND + 3
      IF(IABS(J).EQ.IABS(K).OR.IABS(J).EQ.IABS(L).OR.IABS(K).EQ.IABS(L))
     1  IND = IND + 4
C     H,H,2H IS IN TWO PRINCIPAL ZONES BUT NOT ON A PRINCIPAL AXIS
      IF(IABS(L).EQ.IABS(J+K).OR.IABS(K).EQ.IABS(J+L).OR.IABS(J)
     1  .EQ.IABS(K+L)) IND = IND + 5
C     REFLEXIONS NOT BELONGING TO PRINCIPAL ZONES GO INTO HKL GROUP
 1200 IF (IND .LT. 3) IND = 2
      IF (IND .GT. 5) IND = 0
      DO 1220 J=1,9
      VST(J,1) = VST(J,1) + TMUL*EE(J)
      IF (IND .GT. 0) VST(J,IND) = VST(J,IND) + TMUL*EE(J)
 1220 CONTINUE
      AST(1) = AST(1) + TMUL
      IF (IND .GT. 0) AST(IND) = AST(IND) + TMUL
      IF (NZR .LE. 18) ZT(NZR,1) = ZT(NZR,1) + TMUL
      IF (IND .GT. 0 .AND. NZR .LE. 18) ZT(NZR,IND) = ZT(NZR,IND) + TMUL
C     DISTRIBUTION OF E FOR COMPLETE DATA
      NET = 10.0*EE(1)
      IF (NET .GT. 25) NET = 25
      IF (NET .GT. 0) ANU(NET) = ANU(NET) + 1.0
 1250 CONTINUE
      GO TO 1080
C     FINAL SORT OF MULTAN REFLEXIONS
 1300 IF (IZ .NE. 0) NC = LIM
      CALL SORT(NC)
      REWIND LC2
      RETURN
      END
C     OUTPUT INTENSITY STATISTICS AND PRINT MULTAN REFLEXIONS
      SUBROUTINE STATS(KSYS,MS,LISTE,NC)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),
     1  DCV(60),IX1(1400),IX2(1400),EX(1400),SCAL(9),ANG(9),
     2  RHR(10),SHR(10),ANU(25),AST(5),VST(10,5),ZT(18,5),STL(10),
     3  AVR(25),NU(25),ZZ(18),CPA(18),CPC(18),JJ(1400),KK(1400),LL(1400)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH
      COMMON /RC/ RHOMAX,TH,BT,SC,MG
C     TABLES OF THEORETICAL DISTRIBUTIONS
      DIMENSION AVA(9),AVC(9),AVH(9),CPH(18),ITEXT(10,2)
      DATA AVA/0.886,1.0,1.329,2.0,3.323,6.0,0.736,1.0,2.0/
      DATA AVC/0.798,1.0,1.596,3.0,6.383,15.0,0.968,2.0,8.0/
      DATA AVH/0.718,1.0,1.916,4.5,12.26,37.5,1.145,3.5,26.0/
      DATA CPH/0.368,0.463,0.526,0.574,0.612,0.643,0.670,0.694,0.733,
     1  0.765,0.791,0.813,0.848,0.875,0.896,0.913,0.926,0.938/
      DATA ITEXT/2H  ,2H 0,2HKL,2H  ,2H H,2H0L,2H  ,2H H,2HK0,2H  ,
     1           2HH,,2HK,,2H2K,2H-H,2H H,2HHL,2HH,,2HK,,2H-H,2H-K/
C     8 PARITY GROUPS UP TO ORTHORHOMBIC, 6 INDEX GROUPS OTHERWISE
      NN = 8
      IF (KSYS .GE. 4) NN = 6
      WRITE (LC1,300)
  300 FORMAT( //27X,66HAVERAGE E**2 ACCORDING TO APPROPRIATE INDEX GROUP
     1 BEFORE RESCALING)
      IF (MG .LE. 0) GO TO 330
      NN = MG
      IF (ANG(MG+1) .GT. 0.5) NN = MG + 1
      IF (NN .GT. 8) NN = 8
      WRITE (LC1,320) (I,I=1,NN)
  320 FORMAT(/5X,12HINPUT GROUPS,8X,3HALL,I10,7I11)
      GO TO 365
  330 IF(KSYS.LE.3) WRITE(LC1,335)
  335 FORMAT(/4X,13HPARITY GROUPS,8X,3HALL,8X,3HEEE,8X,3HOEE,8X,3HEOE,
     1  8X,3HOOE,8X,3HEEO,8X,3HOEO,8X,3HEOO,8X,3HOOO)
      IF(KSYS.EQ.4) WRITE(LC1,340)
  340 FORMAT(28H0MODIFIED PARITY GROUPS  ALL,8X,3HEEE,6X,7HEOE,OEE,6X,
     1  3HOOE,8X,3HEEO,6X,7HEOO,OEO,6X,3HOOO)
      IF(KSYS.LE.4) GO TO 365
      IF(KSYS.LE.6) WRITE(LC1,350)
  350 FORMAT(25H0INDEX GROUPS DIVIDED ON:,13X,13H1) MOD(H-K,3), 5X,11H2)
     1 MOD(H,3),5X,11H3) MOD(L,2))
      IF(KSYS.GE.7) WRITE(LC1,355)
  355 FORMAT(25H0INDEX GROUPS DIVIDED ON:,10X,15H1) MOD(H+K+L,3),4X,
     1  13H2) MOD(H-L,3),4X,15H3) MOD(H+K+L,2))
      WRITE(LC1,360)
  360 FORMAT(38X,18HE - ZERO REMAINDER,5X,22HO - NON-ZERO REMAINDER//
     1  25X,3HALL,8X,3HEOE,6X,7HOOE,OEE,6X,3HEEE,8X,3HEOO,6X,7HOOO,OEO,
     2  6X,3HEEO)
  365 WRITE(LC1,370) SCAL(9),(SCAL(I),I=1,NN)
  370 FORMAT(9X,4HE**2,5X,9F11.3)
      WRITE(LC1,380) ANG(9),(ANG(I),I=1,NN)
  380 FORMAT(8X,6HNUMBER,4X,9F11.0)
C     OUTPUT STATISTICS
      DO 400 I=1,10
      STL(I) = FLOAT(I)*SQRT(RHOMAX)/10.0
      IF(SHR(I).GT.0.5) RHR(I)=RHR(I)/SHR(I)
      DO 390 J=1,5
      IF(AST(J).GT.0.5) VST(I,J)=VST(I,J)/AST(J)
  390 CONTINUE
  400 CONTINUE
      WRITE(LC1,410) STL,RHR,SHR
  410 FORMAT( //30X,59HDISTRIBUTION OF E**2 WITH SIN(THETA)/LAMBDA AFTER
     1 RESCALING/6X,9HSINTH/LAM,10F10.4/9X,6HE**2  ,10F10.4/8X,
     2  7HNUMBER ,10F10.0)
      IF (NPATH .EQ. 2) GO TO 520
C     CAPTION ACCORDING TO CRYSTAL SYSTEM
      IF (KSYS .GT. 3) ITEXT(6,1) = ITEXT(6,2)
      J = 1 + KSYS/7
      WRITE (LC1,420) (ITEXT(I,J),I=1,10)
  420 FORMAT(//53X,14HAVERAGE VALUES//46X,12HEXPERIMENTAL,39X,
     1  11HTHEORETICAL/5X,7HAVERAGE,12X,8HALL DATA,7X,3HHKL,6X,4A2,6X,
     2  2A2,6X,4A2,6X,8HACENTRIC,5X,21HCENTRIC  HYPERCENTRIC)
      WRITE (LC1,430) ((VST(I,J),J=1,5),AVA(I),AVC(I),AVH(I),I=1,9)
  430 FORMAT(6X,6HMOD(E),7X,5F12.3,2X,3F12.3/7X,4HE**2,8X,5F12.3,2X,
     1  3F12.3/7X,4HE**3,8X,5F12.3,2X,3F12.3/7X,4HE**4,8X,5F12.3,2X,
     2  3F12.3/7X,4HE**5,8X,5F12.3,2X,3F12.3/7X,4HE**6,8X,5F12.3,2X,
     3  3F12.3/3X,11HMOD(E**2-1),5X,5F12.3,2X,3F12.3/
     4         3X,11H(E**2-1)**2,5X,5F12.3,2X,3F12.3/
     5         3X,11H(E**2-1)**3,5X,5F12.3,2X,3F12.3)
      DO 480 I=1,18
      DO 470 J=1,5
      IF(AST(J).GT.0.5) ZT(I,J)=ZT(I,J)/AST(J)
      IF(I.NE.1) ZT(I,J)=ZT(I,J)+ZT(I-1,J)
  470 CONTINUE
C     THEORETICAL DISTRIBUTIONS
      ZZ(I) = 0.1*FLOAT(I)
      IF (I .GT.  8) ZZ(I) = 0.2*FLOAT(I) - 0.8
      IF (I .GT. 12) ZZ(I) = 0.4*FLOAT(I) - 3.2
      CPA(I) = 1.0 - EXP(-ZZ(I))
      T = 1.0/(1.0 + 0.47047*SQRT(0.5*ZZ(I)))
      CPC(I) = 1.0-((0.74786*T-0.09588)*T+0.34802)*T*EXP(-0.5*ZZ(I))
  480 CONTINUE
      WRITE (LC1,500) (ZZ(I),(ZT(I,J),J=1,5),CPA(I),CPC(I),CPH(I),
     1  I=1,18),AST
  500 FORMAT(/40X,40HN(Z) CUMULATIVE PROBABILITY DISTRIBUTION/9X,1HZ/
     1  18(F11.1,8X,5F12.3,2X,3F12.3/),21H0WEIGHTED SAMPLE SIZE,F10.0,
     2  4F12.0)
  520 DO 540 I=2,25
      J = 26 - I
      NU(J+1) = ANU(J+1) + 0.5
      ANU(J) = ANU(J) + ANU(J+1)
      AVR(I)=0.1*FLOAT(I)
  540 CONTINUE
      WRITE (LC1,560) (AVR(I),I=7,25),(NU(I),I=7,25)
  560 FORMAT(//39X,44HDISTRIBUTION OF E - NUMBER OF E'S .GT. LIMIT//
     1  6H   E  ,19F6.1/6H  NO. ,19I6)
C     PRINT REFLEXIONS USED FOR PHASE DETERMINATION AND PSI(ZERO)
      IF (NC .LT. NUMB) NUMB = NC
      IF (NC .LT. IZRO) IZRO = NC
      IF (LISTE .EQ. 0) LISTE = NUMB
      DO 600 I=1,NC
      JJ(I) = IX1(I)/256
      KK(I) = IX1(I) - 256*JJ(I) - 128
      LL(I) = IX2(I)/256
  600 CONTINUE
      WRITE (LC1,620) (I,JJ(I),KK(I),LL(I),EX(I),I=1,LISTE)
  620 FORMAT(//41X,38HLARGE E'S USED FOR PHASE DETERMINATION//
     1  6(20H CODE  H  K  L   E  )/(6(I5,3I3,F6.3)))
      MS = NUMB - 17
      IF (LISTE .LT. NUMB) WRITE (LC1,640) (I,JJ(I),KK(I),LL(I),EX(I),
     1  I=MS,NUMB)
  640 FORMAT(50X,19H**  SHORT  LIST  **/(6(I5,3I3,F6.3)))
      MS = NC - IZRO + 1
      IF (LISTE .EQ. NUMB) WRITE (LC1,660) (I,JJ(I),KK(I),LL(I),EX(I),
     1  I=MS,NC)
  660 FORMAT(/46X,27HSMALL E'S USED IN PSI(ZERO)//(6(I5,3I3,F6.3)))
C     REVERT TO QUASI-NORMALISED STRUCTURE AMPLITUDES FOR THE E-MAP
      DO 700 I=1,NUMB
      EPS = MOD(IABS(IX2(I)), 16)
      EX(I) = SQRT(EPS)*EX(I)
  700 CONTINUE
      RETURN
      END
C     SORT ON A
      SUBROUTINE SORT(N)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),
     1  DCV(60),IX1(1400),IX2(1400),A(1400)
      INT = N
   20 INT=INT/2
      IF (2*(INT/2) .EQ. INT) INT = INT-1
      IFIN=N-INT
      DO 70 II=1,IFIN
      I=II
      J=I+INT
      IF(A(I).GE.A(J)) GO TO 70
      T1 = A(J)
      L1 = IX1(J)
      L2 = IX2(J)
   40 A(J)=A(I)
      IX1(J) = IX1(I)
      IX2(J) = IX2(I)
      J=I
      I=I-INT
      IF(I.LE.0) GO TO 60
      IF(A(I).LT.T1) GO TO 40
   60 A(J)=T1
      IX1(J) = L1
      IX2(J) = L2
   70 CONTINUE
      IF(INT.GT.1) GO TO 20
      RETURN
      END
C     PHASE CALCULATION FOR KARLE RECYCLING
      SUBROUTINE RECYC(NUMB,NREC,PKARL)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),DCV(60),
     1  IX1(1400),IX2(1400),EX(1400),KD(800),IP(800),LH(40),LK(40),
     2  LL(40),FO(40),ID(40),ED(40),RHO(40),EW(40),FC(40),IPHAZ(40),
     3  IX3(800)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40)
      COMMON /RC/ RHOMAX,TH,BT,SC
      NREC = 0
      RS = 0.0
      SUMF = 0.0
      SUMC = 0.0
      SC = SQRT(SC)
      IF (PKARL .LT. 0.25) PKARL = 0.25
      IF (PKARL .GT. 0.60) PKARL = 0.60
      NNN = 1
      DO 1000 I=1,NUMB
      IX3(I) = IX2(I)/256
      IF (EX(I) .GT. 1.5) NNN = I
 1000 CONTINUE
 1020 READ (LC2) LH,LK,LL,FO,ID,ED,RHO,EW,FC,IPHAZ
      DO 1200 I=1,40
      IF (FO(I) .LT. 0.0) GO TO 1220
C     SEARCH FOR REFLEXION AMONG STRONG E'S
      IH1 = 256*LH(I) + LK(I) + 128
      DO 1040 J=1,NNN
      IF (IH1 .NE. IX1(J)) GO TO 1040
      IF (LL(I) .EQ. IX3(J)) GO TO 1060
 1040 CONTINUE
      GO TO 1200
C     FOUND REFLEXION - SCALE FOBS AND REMOVE TEMPERATURE FACTOR
 1060 FOB = SC*FO(I)*EXP(BT*RHO(I))
      FCL = SQRT(FC(I))
      SUMF = SUMF + FOB*FOB
      SUMC = SUMC + FCL*FCL
      RS = RS + FOB*FCL
C     ARGUMENT OF SIM WEIGHT
      XKAP = FOB*FCL
      IF (XKAP .GT. 2.0*EW(I)) GO TO 1080
      IF (XKAP .LT. 1.2*EW(I) .OR. FCL .LT. PKARL*FOB) GO TO 1200
 1080 NREC = NREC + 1
      KD(NREC) = J
      IP(NREC) = IPHAZ(I)
 1200 CONTINUE
      GO TO 1020
C     OUTPUT RESULTS AND REFLEXIONS
 1220 REWIND LC2
      RS = 100.0*SQRT(1.0 - RS*RS/(SUMF*SUMC))
      WRITE (LC1,1240) ITLE,PKARL,NUMB,RS,NREC
 1240 FORMAT(/1X,119(1H-)//1X,40A2,39H  PHASE CALCULATION FOR KARLE RECY
     1CLING//40X,38HRATIO OF KNOWN TO COMPLETE STRUCTURE =,F5.2//29X,
     2  25HR-FACTOR FOR F'S OVER THE,I4,20H MULTAN REFLEXIONS =,F5.1//
     3  51X,27HNUMBER OF PHASES ACCEPTED =,I5)
      WRITE (LC3) (KD(I),I=1,NREC)
      WRITE (LC3) (IP(I),I=1,NREC)
      RETURN
      END
C     * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * *
C                      ***   SET   UP   SIGMA2    PHASE    RELATIONSHIPS
C     FIRST SECTION    ***   FIND  STARTING  REFLEXIONS  BY  CONVERGENCE
C                      ***   SET   UP   PSI ZERO  PHASE    RELATIONSHIPS
C     * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * *
      SUBROUTINE FIRST
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IZ(800),MKANG(800),
     1  IPALF(800)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NK,NGP,KGP,SIGP2,SIGN2,
     1  SIGQ3
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN,MSG,LISTE
C     MAX. NUMBER OF REFLEXIONS IN HEMISPHERE: DIMENSION OF IR1,IR2,LOC
      KUSER2 = 3740
C     GENERATE SYMMETRY-RELATED REFLEXIONS
      REWIND LC2
      READ (LC2) NUMB,(IH1(I),IH2(I),I=1,NUMB),(E(I),I=1,NUMB)
      CALL SETUP(NIOR,NUMB,KUSER2)
C     SET UP PSI(ZERO) RELATIONSHIPS
      IF (IZRO .GT. 0) CALL SIGMA2(NIOR,3,NSRPSI,250,LC4)
C     SET UP SIGMA2 RELATIONSHIPS
      JUMP = 1
      IF (NPATH .EQ. 1) JUMP = 2
      CALL SIGMA2(NIOR,JUMP,NSRTOT,KMIN,LC2)
C     DETERMINE STRUCTURE SEMINVARIANTS FOR ORIGIN DEFINITION
      CALL GROUP
      CALL CLOPEN(4)
C     INITIALISE ALL VARIABLES FOR CONVERGENCE PROCEDURE
      CALL CALPHA(NSRTOT,NSRPSI)
C     CONVERGENCE METHOD FOR ORIGIN  AND  STARTING  POINT  DETERMINATION
      CALL CONVEG
C     FIX ENANTIOMORPH
      IF (KRAN .LE. 0 .AND. NPATH .NE. 2) CALL START(MSG)
C     SORT RELATIONSHIPS FOR TANGENT FORMULA
      CALL SORT2(NINPUT)
C     OUTPUT CONVERGENCE MAP AND STARTING REFLEXIONS
      CALL OUTPT1(ICENT,NINPUT)
      WRITE (LC2) IPALF,IH1,IH2,E,IZ,MKANG
      CALL CLOPEN(5)
      RETURN
      END
C     ARRANGE REFLEXION DATA AND SET UP ARRAYS OF EQUIVALENT REFLEXIONS
      SUBROUTINE SETUP(NIOR,NUMB,KUSER2)
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IR1(3740),IR2(3740),
     1  LOC(3740),I1(3),I2(3)
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      NIP = 1
      NIOR=0
C     GENERATE SYMMETRY RELATED REFLEXIONS
      DO 480 II=1,NUMB
      I1(1) = IH1(II)/256
      I1(2) = IH1(II) - 256*I1(1) - 128
      I1(3) = IH2(II)/256
      DO 450 J=1,NSYM
      KL1 = 0
      DO 200 I=1,3
      KL1 = KL1 - I1(I)*ITS(I,J)
      I2(I) = IS(I,1,J)*I1(1) + IS(I,2,J)*I1(2) + IS(I,3,J)*I1(3)
  200 CONTINUE
      KL3 = 256*I2(1) + I2(2)
      KL2 = 1
      IF (KL3 .LT. 0) KL2 = -1
      IF (KL3 .EQ. 0 .AND. I2(3) .LT. 0) KL2 = -1
      KL3 = IABS(KL3)
      KL4 = I2(3)*KL2
      KL1 = MOD(KL1*KL2+2400, 24)
C     ELIMINATE DUPLICATIONS AND USE KL2 +VE AS FAR AS POSSIBLE
      IF (J .EQ. 1) GO TO 300
      DO 240 I=NIP,NIOR
      IF (KL3 .NE. IR1(I) .OR. KL4 .NE. IR2(I)) GO TO 240
      IF (LOC(I) .LT. 0) LOC(I) = (24*II + KL1)*KL2
      GO TO 450
  240 CONTINUE
C     STORE PACKED INDICES IN IOR AND CODE IN LOC
  300 NIOR=NIOR+1
      IF (NIOR .GT. KUSER2) GO TO 500
      IR1(NIOR) = KL3
      IR2(NIOR) = KL4
      LOC(NIOR) = (24*II + KL1)*KL2
  450 CONTINUE
      NIP = NIOR + 1
  480 CONTINUE
      GO TO 900
C     TOO MANY REFLEXIONS FOR EXPANSION TO HEMISPHERE - IGNORE EXTRA
  500 NUMB = II - 1
      NIOR = NIP - 1
C     SORT PACKED INDICES KEEPING TRACK OF ADDRESS IN LOC
  900 IND = NIOR
 1020 IND = IND/2
      IF (2*(IND/2) .EQ. IND) IND = IND - 1
      IFIN = NIOR - IND
      DO 1120 II=1,IFIN
      I = II
      J = I + IND
      IF (IR1(I) - IR1(J)) 1120,1030,1040
 1030 IF (IR2(I) .LE. IR2(J)) GO TO 1120
 1040 K = IR1(J)
      L = IR2(J)
      M = LOC(J)
 1060 IR1(J) = IR1(I)
      IR2(J) = IR2(I)
      LOC(J) = LOC(I)
      J = I
      I = I - IND
      IF (I .LE. 0) GO TO 1100
      IF (IR1(I) - K) 1100,1080,1060
 1080 IF (IR2(I) .GT. L) GO TO 1060
 1100 IR1(J) = K
      IR2(J) = L
      LOC(J) = M
 1120 CONTINUE
      IF (IND .GT. 1) GO TO 1020
      RETURN
      END
C     CALCULATE GROUP TRANSFORMS FOR USE IN PHASE RELATIONSHIPS
      SUBROUTINE FORM(SIG3,NUMB,NGP,SDEV,P)
      COMMON /LOCAL/ IXYZ(4,250),SOF(250),NINF(10),NAG(10),DCV(60),
     1  IX1(1400),IX2(1400),STABLE(451),KNOW1(24),KNOW2(24),
     2  TS(3,24),I1(3),A2(3),X(250),Y(250),Z(250),AZ(250)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      DIMENSION SIG3(10),P(6)
      FACT = 8.0*(180.0*DTOR*SDEV)**2
      DO 30 I=1,NSYM
      DO 20 J=1,3
      TS(J,I) = FLOAT(ITS(J,I))/24.0
   20 CONTINUE
   30 CONTINUE
C     SET UP SINE/COSINE TABLE
      DO 50 I=1,451
      STABLE(I) = SIN(DTOR*FLOAT(I-1))
   50 CONTINUE
      NF = NAG(NGP)
      DO 80 I=1,NF
      X(I) = 0.0001*FLOAT(IXYZ(1,I))
      Y(I) = 0.0001*FLOAT(IXYZ(2,I))
      Z(I) = 0.0001*FLOAT(IXYZ(3,I))
      AZ(I) = SOF(I)*FLOAT(IXYZ(4,I))
   80 CONTINUE
C     REFLEXION LOOP
      DO 1000 I=1,NUMB
      IND = 0
      I1(1) = IX1(I)/256
      I1(2) = IX1(I) - 256*I1(1) - 128
      I1(3) = IX2(I)/256
      RHO = FLOAT(I1(1))*(P(1)*FLOAT(I1(1)) + P(4)*FLOAT(I1(2)) + P(5)*
     1  FLOAT(I1(3))) + FLOAT(I1(2))*(P(2)*FLOAT(I1(2)) + P(6)*
     2  FLOAT(I1(3))) + P(3)*FLOAT(I1(3)*I1(3))
      SFAC = EXP(-FACT*RHO)
C     LOOP OVER ALL GROUPS
      NF = 0
      DO 900 IGP=1,NGP
      NS = NF + 1
      NF = NF + NAG(IGP)
      IF (NINF(IGP) .LT. 3) GO TO 900
      SUMR=0.0
      SUMI=0.0
C     TRANSFORM FOR EACH SYMMETRY ELEMENT
      DO 800 ISYM=1,NSYM
      ARGA = 1000.0
      DO 110 L=1,3
      ARGA = ARGA + FLOAT(I1(L))*TS(L,ISYM)
      A2(L) = IS(L,1,ISYM)*I1(1)+IS(L,2,ISYM)*I1(2)+IS(L,3,ISYM)*I1(3)
  110 CONTINUE
      IF (NINF(IGP) .EQ. 3) ARGA = 1000.0
C     LOOP OVER ATOMS IN GROUP
      DO 200 J=NS,NF
      ARG = A2(1)*X(J) + A2(2)*Y(J) + A2(3)*Z(J) + ARGA
      IARG = 360.0*(ARG - IFIX(ARG)) + 1.5
      SUMR = SUMR + AZ(J)*STABLE(IARG+90)
      IF (ICENT .EQ. 0) SUMI = SUMI + AZ(J)*STABLE(IARG)
  200 CONTINUE
      IF(NINF(IGP).EQ.4) GO TO 800
C     STORE STRUCTURE FACTORS FOR SYMMETRY RELATED GROUPS
      IF(ICENT .EQ. 1) SUMR = 2.0 * SUMR
      IND = IND + 1
      KNOW1(IND) = 10.0*SFAC*SQRT(SUMI*SUMI + SUMR*SUMR) + 0.5
      KNOW2(IND) = ATAN2(SUMI,SUMR)/DTOR + 360.5
      SUMI=0.0
      SUMR=0.0
  800 CONTINUE
      IF(NINF(IGP).EQ.3) GO TO 900
C     STORE STRUCTURE FACTORS FOR EQUIVALENT REFLEXIONS
      IF(ICENT .EQ. 1) SUMR = 2.0 * SUMR
      IA=ATAN2(SUMI,SUMR)/DTOR+360.5
      IR = 10.0*SFAC*SQRT(SUMI*SUMI+SUMR*SUMR)+0.5
      DO 880 ISYM=1,NSYM
      IND=IND+1
      KNOW1(IND) = -IR
      KNOW2(IND) = MOD(IA+15*(I1(1)*ITS(1,ISYM)+I1(2)*ITS(2,ISYM)+
     1  I1(3)*ITS(3,ISYM)), 360)
  880 CONTINUE
  900 CONTINUE
      WRITE (LC3'I) SFAC,KNOW1,KNOW2
 1000 CONTINUE
      I = NUMB + 1
      WRITE (LC3'I) SIG3
      RETURN
      END
C     SET UP PHASE RELATIONSHIPS WITH CORRECT SPACE GROUP WEIGHTING
C     JUMP=3:PSI ZERO;  JUMP=2:SIG2 + KNOWN STRUCTURE;  JUMP=1:SIG2 ONLY
      SUBROUTINE SIGMA2(NIOR,JUMP,NSR,KMIN,ITMP)
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IR1(3740),IR2(3740),
     1  LOC(3740),STABLE(30),KNOW1(24),KNOW2(24),KNOW3(24),KNOW4(24),
     2  KNOW5(24),KNOW6(24),SIG3(10),IPH1(239),IPH2(239),EEE(239)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NK,NGP,KGP,SIGP2,SIGN2,
     1  SIGQ3
C     MAX NO RELATIONSHIPS FOR A REFLEXION - DIMENSION OF IPH1,IPH2,EEE
      MAXREL = 239
      EE3MIN = KMIN
      NS = 2
      NAN = 0
      NSR = 0
      NSRT = 1
      IPH1(1) = 0
      IPH2(1) = 1
      IFAZQ = 0
      IF (JUMP .EQ. 1) SIGMA = 200.0*SIGQ3/(SIGN2*SQRT(SIGN2))
      IF (JUMP .EQ. 2) SIGMA = 200.0*SIGN2*SQRT(SIGN2)
      IF (JUMP .EQ. 3) SIGMA = 100.0
      I = NUMB + 1
      IF (JUMP .EQ. 2) READ (LC3'I) SIG3
C     SET UP SINE/COSINE TABLE
      DO 1000 I=1,30
      STABLE(I) = SIN(15.0*DTOR*FLOAT(I-1))
 1000 CONTINUE
C     INPUT REFLEXION INDICES
      READ (LC2) NN,(IH1(K),IH2(K),K=1,NN)
      REWIND LC2
C     SET UP RELATIONSHIPS FOR EACH REFLEXION IN TURN
      DO 1500 I=1,NN
      INDEX1 = IH1(I) - 128
      INDEX2 = IH2(I)/256
      EVAL = 1.0/FLOAT(MOD(IABS(IH2(I)), 16))
      IF (JUMP .LT. 3) EVAL = E(I)*EVAL
      IF (JUMP .EQ. 2) READ (LC3'I) SFAC1,KNOW1,KNOW2
      ISG = -1
      IND1 = NIOR
      IND2 = NIOR
C     MOVE POINTER UP ARRAY
 1020 IND1 = IND1 - 1
      IF (IND1 .LE. 0) GO TO 1100
 1040 IF (IR1(IND2)-IR1(IND1)-INDEX1) 1020,1060,1080
 1060 IF (IR2(IND2)-IR2(IND1)-INDEX2) 1020,1200,1080
 1080 IND2 = IND2 - 1
      GO TO 1040
 1100 ISG = 1
C     MOVE POINTER DOWN ARRAY
 1120 IND1 = IND1 + 1
      IF (IND1 .GE. IND2) GO TO 1400
 1140 IF (IR1(IND2)+IR1(IND1)-INDEX1) 1120,1160,1180
 1160 IF (IR2(IND2)+IR2(IND1)-INDEX2) 1120,1200,1180
 1180 IND2 = IND2 - 1
      IF (IND1 - IND2) 1140,1400,1400
C     REMOVE 3-FOLD DUPLICATION AND SIGMA1 RELATIONSHIPS
 1200 J = IABS(LOC(IND1))/24
      K = IABS(LOC(IND2))/24
      IF (J .EQ. K) GO TO 1320
      IF (JUMP .EQ. 3) GO TO 1210
      IF (I .LE. J .OR. I .LE. K) GO TO 1320
C     SET UP RELATIONSHIP
 1210 SIGMAQ = SIGMA
      IF (JUMP .EQ. 2) CALL SINV(J,K,IND1,IND2,ISG,SIGMAQ,IFAZQ,SFAC1)
      EE3 = IFIX(SIGMAQ*EVAL*E(J)*E(K) + 0.5)
      IF (EE3 .LT. EE3MIN) GO TO 1320
      IPH1(NSRT+1) = ISIGN(J, LOC(IND1))*ISG
      IPH2(NSRT+1) = ISIGN(K, LOC(IND2))
      IFZ = 0
C     USE +VE SIGN FOR RESTRICTED PHASES
      IF (ISG .GT. 0 .OR. LOC(IND1) .LT. 0) GO TO 1213
      IFZ = MOD(IABS(IH2(J)), 256)/8
      IF (IFZ .GT. 0) IPH1(NSRT+1) = IABS(IPH1(NSRT+1))
 1213 IFZ = ISG*MOD(IABS(LOC(IND1)),24) + MOD(IABS(LOC(IND2)),24) + IFZ
      IFAZE = MOD(IFZ+IFAZQ+240, 24)
      EEE(NSRT+1) = 0.01*(EE3 + 0.01*FLOAT(IFAZE))
      IF (K .LT. J) GO TO 1215
      L = IPH1(NSRT+1)
      IPH1(NSRT+1) = IPH2(NSRT+1)
      IPH2(NSRT+1) = L
C     TEST FOR DUPLICATIONS
 1215 IF (NSRT .LT. NS) GO TO 1240
      DO 1220 L=NS,NSRT
      IF (IABS(IPH1(NSRT+1)) .NE. IABS(IPH1(L))) GO TO 1220
      IF (IABS(IPH2(NSRT+1)) .NE. IABS(IPH2(L))) GO TO 1220
      IF (IPH1(L) .NE. IPH1(NSRT+1)) GO TO 1320
      IF (IPH2(L) - IPH2(NSRT+1)) 1320,1260,1320
 1220 CONTINUE
C     ACCEPT NEW RELATIONSHIP
 1240 NSRT = NSRT + 1
      NSR = NSR + 1
      IF (IFAZE .NE. 0 .AND. IFAZE .NE. 12) NAN = NAN + 1
      IF (NSRT - MAXREL) 1320,1420,1420
C     RELATIONSHIP ALREADY FOUND - ADD THEM TOGETHER
 1260 E3 = IFIX(100.0*EEE(L) + 0.5)
      IFZ = 100.0*(100.0*EEE(L) - E3) + 1.5
      SR = EE3*STABLE(IFAZE+7) + E3*STABLE(IFZ+6)
      SI = EE3*STABLE(IFAZE+1) + E3*STABLE(IFZ)
      EE3 = IFIX(SQRT(SR*SR + SI*SI) + 0.5)
      IFAZE = (ATAN2(SI,SR)/DTOR + 360.0)/15.0 + 0.5
      IFAZE = MOD(IFAZE, 24)
      EEE(L) = 0.01*(EE3 + 0.01*FLOAT(IFAZE))
C     RETURN TO LOOK FOR NEXT RELATIONSHIP
 1320 IF (ISG) 1020,1500,1120
C     FOUND ALL THE RELATIONSHIPS FOR THIS REFLEXION
 1400 NSRT = NSRT + 1
      IPH1(NSRT) = 0
      IPH2(NSRT) = I + 1
      IF (NSRT .LT. 60) GO TO 1460
 1420 WRITE (ITMP) (IPH1(L),L=1,60),(IPH2(L),L=1,60),(EEE(L),L=1,60)
      DO 1440 L=61,NSRT
      IPH1(L-60) = IPH1(L)
      IPH2(L-60) = IPH2(L)
      EEE(L-60) = EEE(L)
 1440 CONTINUE
      NSRT = NSRT - 60
      IF (NSRT+60 .EQ. MAXREL) GO TO 1320
      IF (NSRT .GE. 60) GO TO 1420
 1460 NS = NSRT + 1
 1500 CONTINUE
      WRITE (ITMP) (IPH1(L),L=1,60),(IPH2(L),L=1,60),(EEE(L),L=1,60)
      IF (JUMP .LT. 3 .AND. (4*NAN)/NSR .GT. 0) NSR = -NSR
      RETURN
      END
C     CALCULATE SIGMA AND PHASE OF INVARIANT FROM KNOWN STRUCTURE
      SUBROUTINE SINV(J,K,IND1,IND2,ISG,SIGMAQ,IFAZQ,SFAC1)
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IR1(3740),IR2(3740),
     1  LOC(3740),STABLE(30),KNOW1(24),KNOW2(24),KNOW3(24),KNOW4(24),
     2  KNOW5(24),KNOW6(24),SIG3(10)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR
      COMMON /SYMET/ NSYM
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NK,NGP,KGP,SIGP2,SIGN2,
     1  SIGQ3
      DIMENSION I2(3),I3(3),I4(3),I5(3)
      READ (LC3'J) SFAC2,KNOW3,KNOW4
      READ (LC3'K) SFAC3,KNOW5,KNOW6
      I2(1) = (IR1(IND1) + 128)/256
      I2(2) = IR1(IND1) - 256*I2(1)
      I2(3) = IR2(IND1)
      I3(1) = (IR1(IND2) + 128)/256
      I3(2) = IR1(IND2) - 256*I3(1)
      I3(3) = IR2(IND2)
      I4(1) = IH1(J)/256
      I4(2) = IH1(J) - 256*I4(1) - 128
      I4(3) = IH2(J)/256
      I5(1) = IH1(K)/256
      I5(2) = IH1(K) - 256*I5(1) - 128
      I5(3) = IH2(K)/256
      INDI = 0
      F1 = 100.0*(SIGN2 - SIGP2*SFAC1*SFAC1)
      F2 = 100.0*(SIGN2 - SIGP2*SFAC2*SFAC2)
      F3 = 100.0*(SIGN2 - SIGP2*SFAC3*SFAC3)
      TR = 1000.0*SIGQ3
      TI = 0.0
      BT = 0.0
C     LOOP OVER ATOMIC GROUPS
      DO 1000 IGP=1,KGP
      SUMR = 1000.0*SIG3(IGP)*(1.0 - SFAC1*SFAC2*SFAC3)
      SUMI = 0.0
      DO 400 ISYM=1,NSYM
C     FIRST REFLEXION
      ISF = INDI + ISYM
C     SECOND REFLEXION
      JSY = KCOMP(I4,I2,ISYM)*ISG
      JSF = INDI + IABS(JSY)
C     THIRD REFLEXION
      KSY = KCOMP(I5,I3,ISYM)
      KSF = INDI + IABS(KSY)
C     CONTRIBUTION TO EXPECTED VALUE FOR ELEMENT ISYM
      FACT = ABS(FLOAT(KNOW1(ISF))*FLOAT(KNOW3(JSF))*FLOAT(KNOW5(KSF)))
      IARG = (MOD(KNOW2(ISF)-ISIGN(KNOW4(JSF),JSY)-ISIGN(KNOW6(KSF),KSY)
     1  +3607, 360))/15 + 1
      SUMR = SUMR + FACT*STABLE(IARG+6)
      SUMI = SUMI + FACT*STABLE(IARG)
      F1 = F1 + FLOAT(KNOW1(ISF))**2
      F2 = F2 + FLOAT(KNOW3(JSF))**2
      F3 = F3 + FLOAT(KNOW5(KSF))**2
C     ONE TABLE LOOK-UP FOR TYPE 4 GROUP, NSYM FOR TYPE 3
      IF (KNOW1(ISF) .LT. 0) GO TO 500
  400 CONTINUE
  500 TR = TR + SUMR
      TI = TI + SUMI
      BT = BT + SUMR*SUMR + SUMI*SUMI
C     INCREMENT POINTERS FOR NEXT GROUP
      INDI = INDI + NSYM
 1000 CONTINUE
      SIGMAQ = 1000.0*SIGMAQ*SQRT(TR*TR + TI*TI)/(F1*F2*F3 - BT)
      IF (ABS(TI) .GT. ABS(TR)) GO TO 1020
      ARCTAN = TR*TI/((TR**2 + 0.28*TI**2)*DTOR)
      IF (TR .LT. 0.0) ARCTAN = ARCTAN + 180.0
      GO TO 1040
 1020 ARCTAN = 90.0 - TR*TI/((TI**2 + 0.28*TR**2)*DTOR)
      IF (TI .LT. 0.0) ARCTAN = ARCTAN + 180.0
 1040 IFAZQ = (ARCTAN + 367.5)/15.0
      RETURN
      END
C     FIND THE SYMMETRY ELEMENT RELATING TWO EQUIVALENT REFLEXIONS
      FUNCTION KCOMP(IB,IA,J)
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24)
      DIMENSION IA(3),IB(3),IC(3),ID(3)
C     GENERATE THE J'TH SYMMETRY RELATED REFLEXION FOR IA
      DO 100 L=1,3
      IC(L) = IS(L,1,J)*IA(1) + IS(L,2,J)*IA(2) + IS(L,3,J)*IA(3)
  100 CONTINUE
C     COMPARE WITH ALL SYMMETRY RELATED REFLEXIONS FOR IB
      DO 200 I=1,NSYM
      DO 150 L=1,3
      ID(L) = IS(L,1,I)*IB(1) + IS(L,2,I)*IB(2) + IS(L,3,I)*IB(3)
  150 CONTINUE
      DO 190 L=1,3
      IF(ID(L).NE.IC(L)) GO TO 195
  190 CONTINUE
      KCOMP = I
      GO TO 250
C     COMPARE WITH FRIEDEL OPPOSITE
  195 DO 197 L=1,3
      IF(ID(L).NE.(-IC(L))) GO TO 200
  197 CONTINUE
      KCOMP = -I
      GO TO 250
  200 CONTINUE
      STOP
  250 RETURN
      END
C     DETERMINE SPACE GROUP TYPE ACCORDING TO THE CATEGORIES OF HAUPTMAN
C     & KARLE,  ACTA CRYST. (1956) 9, 45  AND  ACTA CRYST. (1959) 12, 93
C     AND KARLE & HAUPTMAN,  ACTA CRYST. (1961) 14, 217,  GIVEN ONLY THE
C     GENERAL EQUIVALENT POSITIONS AND LATTICE TYPE  -  GIVES  NECESSARY
C     INFORMATION ON NUMBER AND  TYPE  OF  REFLEXIONS  USED  FOR  ORIGIN
C     DEFINITION, SEMINVARIANT MODULUS & REDUCED INDICES FOR  REFLEXIONS
C     ROUTINE WILL HANDLE 230 SPACE GROUPS IN THE STANDARD  ORIENTATIONS
C     INCLUDING ALTERNATIVE SETTINGS AS IN INTERNATIONAL TABLES VOLUME 1
C     TEST  WHETHER  THE  ENANTIOMORPH  IS  FIXED  BY  THE  SPACE  GROUP
      SUBROUTINE GROUP
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IZ(800),MKANG(800),
     1  MKG1(800),MKG2(800),IND(3)
      COMMON /SYMET/ NSYM,ICENT,LATT,NRAL,NORI,PTS,IS(3,3,24),ITS(3,24)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,MODUL(3)
C     INITIALIZE PARAMETERS
      NRAL = 0
      DO 1000 I=1,3
      MODUL(I) = 2
 1000 CONTINUE
      DO 1020 I=1,NUMB
      MKANG(I) = MOD(IABS(IH2(I)), 256)/16 + 1
      IH2(I) = IH2(I)/256
      IZ(I) = 0
 1020 CONTINUE
C     IT = 3  TESTS FOR Z IN 1ST COORD. OF GENERAL EQUIVALENT  POSITIONS
C     -  GIVES RHOMBOHEDRAL OR CUBIC
C     IT = 2  TESTS FOR Y IN 1ST COORD. - GIVES TETRAGONAL, HEXAGONAL OR
C     TRIGONAL
      DO 1060 II=1,2
      DO 1040 J=1,NSYM
      IF (IS(4-II,1,J) .NE. 0) GO TO 1500
 1040 CONTINUE
 1060 CONTINUE
C     SPACE GROUP MUST BE TRICLINIC,  MONOCLINIC  OR  ORTHORHOMBIC
C     THREE REFLEXIONS ARE NORMALLY REQUIRED FOR ORIGIN DEFINITION
      NORI = 3
      IF (ICENT) 1080,1080,1160
C     DETERMINE  SEMINVARIANT  MODULUS VECTOR (MODUL) AND NUMBER OF AXES
C     ALONG  WHICH THE  ORIGIN  POSITION IS INFINITELY  VARIABLE  (NRAL)
 1080 DO 1140 I=1,3
      DO 1100 J=1,NSYM
      IF (IS(I,I,J)) 1140,1100,1100
 1100 CONTINUE
      MODUL(I) = 1000
      NRAL = NRAL + 1
 1140 CONTINUE
C     CHECK FOR CENTRED LATTICE
 1160 GO TO (1380,1260,1180,1220,1380,1320,1380), LATT
C     B CENTRED LATTICE  -  TEST FOR B2  OR  BM, BB
 1180 IF (NRAL.LE.1) GOTO 1380
 1200 II= 2
      MODUL(3) = 1000
      GO TO 1280
C     C CENTRED LATTICE  -  TEST FOR C2  OR  CM, CC
 1220 IF(NRAL.LE.1) GOTO 1380
 1240 MODUL(2) = 1000
 1260 II = 3
C     A CENTRED LATTICES, BM, BB, CM, CC
C     DETERMINE REDUCED INDICES FOR ALL REFLEXIONS
 1280 DO 1300 I=1,NUMB
      IND(2) = MOD(IH1(I), 256) - 128
      IND(3) = IH2(I)
      MKG1(I) = MOD(IH1(I)/256, MODUL(2)) + 128
      MKG2(I) = MOD(IND(II), MODUL(3))
 1300 CONTINUE
      GO TO 2000
C     F CENTRED LATTICE - TEST POINT GROUP SYMMETRY AROUND (1/4,1/4,1/4)
C     TO DETECT F222 IF SPACE GROUP IS NON-CENTROSYMMETRIC
 1320 IF (ICENT.GT.0) GOTO 1980
      CALL TEST(1,1,1,4,MM)
      IF (MM.EQ.0) GOTO 1960
C     TRICLINIC, MONOCLINIC & ORTHORHOMBIC EXCEPT A CENTRED, BM,BB,CM,CC
C     DETERMINE REDUCED INDICES FOR ALL REFLEXIONS
 1380 DO 1400 I=1,NUMB
      J = IH1(I)/256
      K = IH1(I) - 256*J - 128
      MKG1(I) = 256*MOD(J, MODUL(1)) + MOD(K, MODUL(2)) + 128
      MKG2(I) = MOD(IH2(I), MODUL(3))
 1400 CONTINUE
      GO TO 2000
C     SPACE GROUP MUST BE TETRAGONAL, TRIGONAL, HEXAGONAL OR CUBIC
 1500 IF (ICENT) 1520,1520,1640
 1520 IF (LATT - 1) 1600,1540,1600
C     TEST WHETHER ENANTIOMORPH IS FIXED BY THE SPACE GROUP
 1540 DO 1560 I=1,NSYM
      IF (MOD(ITS(3,I),12) .NE. 0) GO TO 1580
 1560 CONTINUE
      GO TO 1600
C     ENANTIOMORPH FIXED BY SPACE GROUP  -  SET FLAG
 1580 ICENT = -1
C     IS ORIGIN POSITION INFINITELY VARIABLE ALONG Z
C     SET FLAG (NRAL) AND 3RD COMPONENT OF SEMINVARIANT  MODULUS  VECTOR
 1600 DO 1620 I=1,NSYM
      IF (IS(3,3,I)) 1640,1620,1620
 1620 CONTINUE
C     SPACE GROUP MUST BE 2P20, 3P30, 3P(1)0 OR 3P(2)0
      NRAL = 1
      MODUL(3) = 1000
C     BRANCH FOR RHOMBOHEDRAL AND CUBIC
 1640 GO TO (1940,1660), II
C     TEST POINT GROUP SYMMETRY AROUND (1/2,1/2,0) TO DETECT  TETRAGONAL
 1660 CALL TEST(1,1,0,2,MM)
      IF (MM) 1820,1680,1820
C     SPACE GROUP MUST BE TETRAGONAL
C     TWO REFLEXIONS ARE NORMALLY REQUIRED FOR ORIGIN DEFINITION
 1680 NORI = 2
      IF (LATT.NE.5) GOTO 1780
C     I CENTRED  TETRAGONAL    -    TEST  POINT  GROUP  SYMMETRY  AROUND
C     (0,1/2,1/4)  TO  DETECT  BAR 4  AXIS
      CALL TEST(0,2,1,4,MM)
      IF (MM.NE.0) GOTO 1780
C     SPACE GROUP MUST BE 3P(3)4
      MODUL(3) = 4
C     DETERMINE REDUCED INDICES FOR ALL REFLEXIONS
      DO 1740 I=1,NUMB
      J = MOD(IH1(I), 256) - 128
      MKG1(I) = 128
      MKG2(I) = MOD(2*J+IH2(I), MODUL(3))
 1740 CONTINUE
      GO TO 2000
C     SPACE GROUP MUST BE 3P(3)0 OR 3P(3)2
C     ENTER HERE FOR PRIMITIVE TETRAGONAL
C     DETERMINE REDUCED INDICES FOR ALL REFLEXIONS
 1780 DO 1800 I=1,NUMB
      J = IH1(I)/256
      K = IH1(I) - 256*J - 128
      MKG1(I) = MOD(J+K, MODUL(2)) + 128
      MKG2(I) = MOD(IH2(I), MODUL(3))
 1800 CONTINUE
      GO TO 2000
C     SPACE GROUP MUST BE TRIGONAL OR HEXAGONAL
 1820 IF (ICENT) 1840,1840,1900
C     TEST POINT GROUP SYMMETRY AROUND (1/3,2/3,0) TO DETECT 3P30 & 3P32
 1840 IF (LATT - 7) 1850,1900,1900
 1850 CALL TEST(1,2,0,3,MM)
      IF (MM) 1900,1860,1900
C     SPACE GROUP MUST BE 3P30 OR 3P32
 1860 MODUL(2) = 3
C     DETECT 6P6
      IF (MODUL(3).EQ.2) GOTO 1890
C     TWO REFLEXIONS ARE NORMALLY REQUIRED FOR ORIGIN DEFINITION
      NORI = 2
C     DETERMINE REDUCED INDICES FOR ALL REFLEXIONS
      DO 1880 I=1,NUMB
      J = IH1(I)/256
      K = IH1(I) - 256*J - 128
      MKG1(I) = MOD(J-K, MODUL(2)) + 128
      MKG2(I) = MOD(IH2(I), MODUL(3))
 1880 CONTINUE
      GO TO 2000
C     ONE REFLEXION NORMALLY REQUIRED FOR ORIGIN DEFINITION
 1890 NORI=1
      MODUL(3)=6
C     DETERMINE REDUCED REFLEXIONS FOR ALL REFLEXIONS
      DO 1895 I=1,NUMB
      J = IH1(I)/256
      K = IH1(I) - 256*J - 128
      MKG1(I) = 128
      MKG2(I) = MOD(2*J+4*K+3*IH2(I), MODUL(3))
 1895 CONTINUE
      GOTO 2000
C     SPACE GROUP MUST BE 3P(1)0, 3P(1)2 OR RHOMBOHEDRAL USING HEXAGONAL
C     AXES
C     ONE REFLEXION IS NORMALLY REQUIRED FOR ORIGIN DEFINITION
 1900 NORI = 1
C     DETERMINE REDUCED INDICES FOR ALL REFLEXIONS
      DO 1920 I=1,NUMB
      MKG1(I) = 128
      MKG2(I) = MOD(IH2(I), MODUL(3))
 1920 CONTINUE
      GO TO 2000
C     SPACE GROUP MUST BE 3P(2)0, 3P(2)2, 3P(2)4 OR 4P111
C     TEST POINT GROUP SYMMETRY AROUND  (1/4,1/4,1/4)  TO DETECT  3P(2)4
 1940 IF (ICENT) 1950,1950,1980
 1950 IF (LATT - 7) 1960,1980,1980
 1960 CALL TEST(1,1,1,4,MM)
      IF (MM) 1980,1970,1980
 1970 MODUL(3) = 4
C     ONE REFLEXION IS NORMALLY REQUIRED FOR ORIGIN DEFINITION
 1980 NORI = 1
C     DETERMINE REDUCED INDICES FOR ALL REFLEXIONS
      DO 1990 I=1,NUMB
      J = IH1(I)/256
      K = IH1(I) - 256*J - 128
      MKG1(I) = 128
      MKG2(I) = MOD(J+K+IH2(I), MODUL(3))
 1990 CONTINUE
 2000 DO 2220 I=1,3
      MODUL(I) = MOD(MODUL(I),1000)
 2220 CONTINUE
C     ADJUST NUMBER OF ORIGIN  DEFINING  REFLEXIONS FOR CENTRED LATTICES
 2240 GO TO (2280,2260,2260,2260,2260,2300,2280), LATT
C     A, B, C AND I CENTRED LATTICES
 2260 NORI = NORI - 1
 2280 RETURN
C     F CENTRED LATTICES
 2300 NORI = IABS(NORI - 2)
      RETURN
      END
C     TEST TO SEE IF THE POINT (M1/M4,M2/M4,M3/M4) IS A POSSIBLE  ORIGIN
C     POSITION     MM .EQ. 0  IF YES     MM .NE. 0  IF NO
C     THIS ROUTINE IS WRITTEN TO TEST  NON-CENTROSYMMETRIC  SPACE GROUPS
C     WITH P, I AND F LATTICES ONLY
      SUBROUTINE TEST(M1,M2,M3,M4,KNT)
      COMMON /SYMET/ NSYM,ICENT,LATT,NRAL,NORI,PTS,IS(3,3,24)
      DO 1220 I=1,NSYM
      KNT = 0
      DO 1140 J=1,3
      IS(J,J,I) = IS(J,J,I) - 1
      MM = IABS(MOD(IS(1,J,I)*M1 + IS(2,J,I)*M2 + IS(3,J,I)*M3, M4))
      IS(J,J,I) = IS(J,J,I) + 1
      IF (MM) 1140,1140,1100
 1100 IF (2 * MM - M4) 1260,1120,1260
 1120 KNT = KNT + 1
 1140 CONTINUE
      IF (KNT) 1220,1220,1160
 1160 GO TO (1240,1240,1240,1240,1180,1200,1240), LATT
 1180 IF (KNT - 3) 1240,1220,1240
 1200 IF (KNT - 2) 1240,1220,1240
 1220 CONTINUE
      KNT = 0
 1240 RETURN
 1260 KNT = 1
      RETURN
      END
C     CONVERGENCE METHOD FOR ORIGIN  AND  STARTING  POINT  DETERMINATION
      SUBROUTINE CONVEG
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IZ(800),MKANG(800),
     1  MKG1(800),MKG2(800),ALPHA(801),LIM(800),LMN(800),IBF1(1489),
     2  IBF2(1489),ABFR(1489),JBF1(10),JBF2(10),BBFR(10)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /SYMET/ NSYM,ICENT,LATT,NRAL,NORI
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,MODUL(3),LARN,DX
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN,MSG,LISTE
      DIMENSION IGIN(4)
C     I1/I0 (BESSEL FUNCTION)
      VEC(U) = U*U*(U+0.4807)/((U+0.8636)*U+1.3943)
C     DIMENSION OF IBF1, IBF2 AND ABFR
      MX = 1489
      MN = MX - 59
      MX3 = 3*(MX - NUMB + 1)
      MSG = 0
      NSR = 0
      NGR = 0
      IOF = NUMB
      KNT = NUMB
      LARN = -NRAL
      DO 900 I=1,4
      IGIN(I) = 0
  900 CONTINUE
C     REFLEXIONS IN BOTTOM 1/3 OF CONVERGENCE MAP MAY GO IN STARTING SET
      LKSTA = NDET/3
C     ORIGIN REFLEXIONS MUST BE IN BOTTOM 25 PLACES OF CONVERGENCE MAP
      LKGIN = NORI + NSPEC + NGEN + NANY + 25
      IF (NANY .EQ. (-1)) LKGIN = LKGIN + 10
      IF (NPATH .EQ. 2) LKGIN = NUMB
C     CHECK THAT ORIGIN MAY BE DEFINED AT OUTSET
 1000 IF (KRAN .GT. 0) GO TO 1020
      CALL ORIGIN(JUMP,IGIN)
      IF (JUMP .EQ. 0) GO TO 1020
      NRAL = NRAL + 1
      IF (NRAL .LE. NORI) GO TO 1000
C     ORIGIN CAN NOT BE DEFINED - SET FLAG TO OUTPUT MESSAGE
      MSG = 1
      RETURN
C     START NEW PASS OF CONVERGE
 1020 AMIN = 1.0E10
      IREC = 0
      IF (KNT .EQ. NUMB) GO TO 1040
      BACKSPACE LC4
      READ (LC4) ALPHA,LIM,LMN,IBF1,IBF2,ABFR,IOF,LS
      KNT = LKSTA
      DO 1030 I=1,NUMB
      IF (IZ(I) .EQ. (-100) .AND. LIM(I) .NE. 0) IZ(I) = 0
 1030 CONTINUE
C     REPOSITION FILE FOR CONVERGENCE MAP
      REWIND LC3
      J = NDET - LKSTA
      DO 1035 I=1,J
      READ (LC3) MIN,ALF,II
 1033 II = II - 10
      IF (II .GE. 0) READ (LC3)
      IF (II .GE. 0) GO TO 1033
 1035 CONTINUE
      GO TO 1340
C     COPY UNSORTED RELATIONSHIPS INTO MEMORY
C     (CAREFUL ABOUT OVERFLOW OF ISUM FOR 16-BIT WORD)
 1040 ISUM = 0
      ALPHA(NUMB+1) = 0.0
      DO 1050 I=1,NUMB
      LIM(I) = IABS(LIM(I))
      IF (ISUM .LE. MX3) ISUM = ISUM + LIM(I)
 1050 CONTINUE
      IF (ISUM/3+NUMB-MX) 1080,1080,1065
 1060 LIM(J) = -LIM(J)
 1065 ISUM = IOF
      J = NUMB + 1
      DO 1070 I=1,NUMB
      IF (LIM(I) .LE. 0) GO TO 1070
      IF (ALPHA(I) .GE. ALPHA(J)) J = I
      ISUM = ISUM + LIM(I)
      IF (ISUM .GT. MX) GO TO 1060
 1070 CONTINUE
 1080 LS = 1
      IBF1(1) = 0
      REWIND LC2
 1100 READ (LC2) (IBF1(I),I=MN,MX),(IBF2(I),I=MN,MX),(ABFR(I),I=MN,MX)
      DO 1200 I=MN,MX
      IF (IBF1(I) .NE. 0) GO TO 1120
      II = IBF2(I)
      IF (II .GT. NUMB) GO TO 1320
      IF (IBF1(LS) .EQ. 0) LS = LS - 1
      LMN(II) = LS + 1
      GO TO 1140
 1120 IF (IZ(II) .EQ. (-100)) GO TO 1200
      ILA = IABS(IBF1(I))
      IF (IZ(ILA) .EQ. (-100)) GO TO 1200
      IRA = IABS(IBF2(I))
      IF (IZ(IRA) .EQ. (-100)) GO TO 1200
      IF (LIM(II).LT.0.AND.LIM(ILA).LT.0.AND.LIM(IRA).LT.0) GO TO 1200
 1140 LS = LS + 1
      IBF1(LS) = IBF1(I)
      IBF2(LS) = IBF2(I)
      ABFR(LS) = ABFR(I)
 1200 CONTINUE
      IF (LS+60 .LE. MX) GO TO 1100
      IOF = IOF + 100
      GO TO 1060
 1320 IOF = IOF - MX + LS + 100
      ALPHA(NUMB+1) = 1.0E10
C     LOOK FOR SMALLEST ESTIMATED ALPHA
 1340 MIN = NUMB + 1
      DO 1360 I=1,NUMB
      IF (IZ(I) .EQ. 0 .AND. ALPHA(I) .LT. ALPHA(MIN)) MIN = I
 1360 CONTINUE
      IF (MIN .GT. NUMB) GO TO 1660
C     ARE THE RELATIONSHIPS IN MEMORY
      IF (LIM(MIN) .LT. 0) GO TO 1040
C     IS THIS A POSSIBLE ORIGIN FIXING REFLEXION
      DO 1380 I=1,3
      IF (IGIN(I) .EQ. MIN) GO TO 1400
 1380 CONTINUE
      GO TO 1460
C     CAN ORIGIN BE DEFINED WITHOUT THIS REFLEXION      JUMP=0 IF IT CAN
 1400 IZ(MIN) = -100
      CALL ORIGIN(JUMP,IGIN)
      IZ(MIN) = 0
      IF (JUMP .EQ. 0) GO TO 1460
C     ARE WE SUFFICIENTLY NEAR THE END OF CONVERGENCE
      IF (LKGIN .GE. KNT) GO TO 1420
C     INCREASE NUMBER OF GENERAL REFLEXIONS USED IN ORIGIN DEFINITION
      NRAL = NRAL + 1
      IF (NORI .GE. NRAL) GO TO 1400
C     ORIGIN IS POORLY DEFINED - SET FLAG TO PRINT MESSAGE
      MSG = 3
C     THIS REFLEXION MUST BE USED FOR DEFINING ORIGIN
 1420 LAST = 0
      IF (MKANG(MIN) .GT. 1) GO TO 1440
C     COUNT NUMBER OF GENERAL  REFLEXIONS  USED  FOR  ORIGIN  DEFINITION
      LARN = LARN + 1
      IF (LARN .LE. 0) GO TO 1440
      IZ(MIN) = 3060 + LARN/2
      GO TO 1340
 1440 IZ(MIN) = 1000*(MKANG(MIN) - 1) + 60
      IF (IZ(MIN) .EQ. 60 .OR. IZ(MIN) .EQ. 12060) IZ(MIN) = 24060
      GO TO 1340
C     THIS REFLEXION IS ELIMINATED
 1460 IF (KNT .GT. LKSTA) GO TO 1500
C     RECORD POOREST REFLEXION AT END OF CONVERGENCE PROCEDURE
      IF (LIM(MIN) .GT. 0 .AND. ALPHA(MIN) .GT. AMIN) GO TO 1500
C     FOR ZERO ESTIMATED ALPHA, PREVIOUS REFLEXION MAY BE USED INSTEAD
      IF (LIM(MIN) .GT. 0 .OR. LAST .EQ. 0) LAST = MIN
      IF (LIM(MIN) .EQ. 0 .AND. LAST .GT. MIN) LAST = MIN
C     IS THE REFLEXION CHOSEN OF THE RIGHT TYPE
      IF (MKANG(LAST) .EQ. 1 .AND. NGEN .GT. 0) GO TO 1480
      IF (MKANG(LAST) .GT. 1 .AND. NSPEC .GT. 0) GO TO 1480
      IF (NANY .EQ. 0) GO TO 1500
C     YES - IT IS SUITABLE FOR THE STARTING SET
 1480 IREC = LAST
      AMIN = ALPHA(MIN)
 1500 LAST = MIN
C     UPDATE ESTIMATED ALPHAS
      LL = 0
      II = LIM(MIN)
      ALF = ALPHA(MIN)
      LI = LMN(MIN)
      DO 1580 I=LI,LS
      IF (IBF1(I) .NE. 0) GO TO 1510
      IFR = IBF2(I)
      GO TO 1580
 1510 IF (IZ(IFR) .EQ. (-100)) GO TO 1580
      ILA = IABS(IBF1(I))
      IF (IZ(ILA) .EQ. (-100)) GO TO 1580
      IRA = IABS(IBF2(I))
      IF (IZ(IRA) .EQ. (-100)) GO TO 1580
      IF (IFR.NE.MIN .AND. ILA.NE.MIN .AND. IRA.NE.MIN) GO TO 1580
      VVEC = VEC(ABFR(I))
      ALPHA(IFR) = ALPHA(IFR) - VVEC
      ALPHA(ILA) = ALPHA(ILA) - VVEC
      ALPHA(IRA) = ALPHA(IRA) - VVEC
      LIM(IFR) = ISIGN(IABS(LIM(IFR))-1, LIM(IFR))
      LIM(ILA) = ISIGN(IABS(LIM(ILA))-1, LIM(ILA))
      LIM(IRA) = ISIGN(IABS(LIM(IRA))-1, LIM(IRA))
C     REJECT THE FIRST NUMB-NDET REFLEXIONS ELIMINATED
      IF (KNT .GT. NDET) GO TO 1580
      LL = LL + 1
      JBF1(LL) = IBF1(I)
      JBF2(LL) = IBF2(I)
      BBFR(LL) = ABFR(I)
      IF (IFR .EQ. MIN) GO TO 1560
C     REARRANGE RELATIONSHIP FOR PRINTING CONVERGENCE MAP
      IX = 1
      IF (IRA .EQ. MIN) GO TO 1520
      IF (JBF1(LL) .LT. 0) IX = -1
      JBF2(LL) = -JBF2(LL)*IX
      GO TO 1540
 1520 IF (JBF2(LL) .LT. 0) IX = -1
      JBF2(LL) = -JBF1(LL)*IX
 1540 JBF1(LL) = IFR*IX
      IF (IX .LT. 0) GO TO 1560
      IBUFR = 100.0*(100.0*ABFR(I)-FLOAT(IFIX(100.0*ABFR(I)+0.5)))+0.5
      IBUFR = MOD(24-IBUFR, 24)
      BBFR(LL) = 0.01*FLOAT(IFIX(100.0*ABFR(I)+0.5))+0.0001*FLOAT(IBUFR)
 1560 IF (LL .LT. 10) GO TO 1580
      WRITE (LC3) MIN,ALF,II,JBF1,JBF2,BBFR
      LL = 0
 1580 CONTINUE
      IZ(MIN) = -100
      KNT = KNT - 1
      IF (KNT .GE. NDET) IH1(MIN) = -IABS(IH1(MIN))
      IF (KNT .GE. NDET) GO TO 1340
      WRITE (LC3) MIN,ALF,II,JBF1,JBF2,BBFR
      IF (KNT.EQ.LKSTA) WRITE (LC4) ALPHA,LIM,LMN,IBF1,IBF2,ABFR,IOF,LS
      GO TO 1340
C     THIS PASS OF CONVERGENCE IS NOW FINISHED
 1660 IF (KRAN .GT. 0 .OR. NPATH .EQ. 2) RETURN
      IF (IREC .LE. 0) GO TO 1760
C     WORST REFLEXION AT END OF CONVERGENCE GOES INTO STARTING SET
      IF (IZ(IREC) .GT. 0) GO TO 1720
      IZ(IREC) = -1
      IF (MKANG(IREC) .EQ. 1) GO TO 1680
      NSR = NSR + 1
      NSPEC = NSPEC - 1
      IF (NSPEC) 1700,1720,1720
 1680 NGR = NGR + 1
      NGEN = NGEN - 1
      IF (NGEN .GE. 0) GO TO 1720
 1700 NANY = NANY - 1
C     CALCULATE NUMBER OF PHASE SETS TO BE PRODUCED
 1720 IF (NSET(LARN,NSR,NGR,ICENT) .LT. NSREQ) GO TO 1020
C     CANCEL LAST REFLEXION CHOSEN FOR STARTING SET
      IF (MKANG(IREC) .EQ. 1) NGR = NGR - 1
      IF (MKANG(IREC) .GT. 1) NSR = NSR - 1
      IZ(IREC) = -100
 1760 NSREQ = NSET(LARN,NSR,NGR,ICENT)
C     MAGIC INTEGER VARIABLE X INCREMENTED BY STEPS OF 360/NSET DEGREES
      DX = 360.0/FLOAT(NSET(0,0,NGR,1))
      RETURN
      END
C     CALCULATE NUMBER OF STARTING SETS - USES FIBONACCI SERIES
      FUNCTION NSET(LA,NS,NG,ICENT)
      NSET = 2**NS
      IF (LA .GT. 0) NSET = NSET*2**LA
      IF (NG .EQ. 1) NSET = 4*NSET
      IF (NG .GT. 1) NSET = (3*(2*IFIX((1.618034**(NG+1)/2.236068) +
     1  0.5) - 1) + 5)*NSET
      IF (ICENT .EQ. 0) NSET = NSET/2
      RETURN
      END
C     SET CONVERGE PARAMETERS AND CALCULATE ESTIMATED ALPHA'S
      SUBROUTINE CALPHA(NSRTOT,NSRPSI)
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IZ(800),MKANG(800),
     1  MKG1(800),MKG2(800),PALF(801),LIM(800),IPH1(60),
     2  IPH2(60),EEE(60),LN1(800),LN2(800),LN3(800),ICH(800)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40)
      COMMON /SYMET/ NSYM,ICENT,LATT,NRAL,NORI
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN,MSG,LISTE
      DATA  ISK/1H*/, NOT/1H /
C     I1/I0 (BESSEL FUNCTION)
      VEC(U)=U*U*(U+0.4807)/((U+0.8636)*U+1.3943)
C     FLAG FOR ENANTIOMORPH FIXED BY INVARIANTS
      IF (NSRTOT .LT. 0 .AND. ICENT .EQ. 0) ICENT = -2
      NSRTOT = IABS(NSRTOT)
      WRITE (LC1,900) ITLE,KMIN,NUMB,NSRTOT,IZRO,NSRPSI
  900 FORMAT(1H0,119(1H+)/15H0MULTAN  PART 1,19X,51HSET UP PHASE RELATIO
     1NSHIPS AND FIND STARTING PHASES,16X,19HVERSION  JUNE  1984//
     2  1X,40A2,26X,10H100*KMIN =,I3//25X,37HNUMBER OF PHASE RELATIONSHI
     3PS FOR THE,I4,23H STRONGEST REFLEXIONS =,I6/25X,37HNUMBER OF PHASE
     4 RELATIONSHIPS FOR THE,I4,23H  WEAKEST  REFLEXIONS =,I6)
      IF (ICENT .EQ. 1) NANY = NANY + NGEN
      IF (ICENT .EQ. 1) NGEN = 0
      IF (NPATH .NE. 2) WRITE (LC1,1800) NSPEC, NGEN, NANY, NSREQ
 1800 FORMAT(42H0REFLEXIONS REQUESTED FOR STARTING SET ARE,4X,6HSPEC =,
     1  I2,4X,5HGEN =,I2,4X,5HANY =,I2,7X,33HMAXIMUM NUMBER OF SETS REQU
     2IRED =,I4)
C     NANY = -1 DEFINES DEFAULT PARAMETERS
      IF (NINPUT+NSPEC+NGEN+NANY .EQ. 0) NANY = -1
      NUMS = 0
      REWIND LC2
      DO 2020 I=1,NUMB
      LIM(I) = 0
      PALF(I) = 0.0
 2020 CONTINUE
 2040 READ (LC2) IPH1,IPH2,EEE
      DO 2080 I=1,60
      IF (IPH1(I) .NE. 0) GO TO 2060
      II = IPH2(I)
      IF (II - NUMB) 2080,2080,2100
 2060 ILA = IABS(IPH1(I))
      IRA = IABS(IPH2(I))
C     COMPUTE QUANTITIES FOR ESTIMATED ALPHA
      VVEC = VEC(EEE(I))
      PALF(II) = PALF(II) + VVEC
      PALF(ILA) = PALF(ILA) + VVEC
      PALF(IRA) = PALF(IRA) + VVEC
      LIM(II) = LIM(II) + 1
      LIM(ILA) = LIM(ILA) + 1
      LIM(IRA) = LIM(IRA) + 1
 2080 CONTINUE
      GO TO 2040
 2100 II = 0
      SUM = 0.0
      DO 2140 I=1,NUMB
      SUM = SUM + PALF(I)
      IF (MKANG(I) .GT. 1 .AND. LIM(I) .LT. LIM(I+1)) NUMS = NUMS + 1
      IF (I .GT. LISTE .AND. I .LE. NUMB-20) GO TO 2140
      II = II + 1
      LN1(II) = I
      LN2(II) = PALF(I) + 0.5
      LN3(II) = MKANG(I)
      ICH(II) = NOT
      IF (MKG1(I) .EQ. 128 .AND. MKG2(I) .EQ. 0) ICH(II) = ISK
 2140 CONTINUE
      J = SUM/FLOAT(NUMB) + 0.5
      WRITE (LC1,2160) J,(LN1(I),LN2(I),LN3(I),ICH(I),I=1,II)
 2160 FORMAT(//47X,26HTABLE OF ESTIMATED ALPHA'S/33H0(MK>1 MEANS PHASE I
     1S RESTRICTED),12X,25HAVERAGE ESTIMATED ALPHA =,I4,23X,23H(*=STRUCT
     2URE INVARIANT)/10(12H  CD ALF MK )/(10(2I4,I3,A1)))
      IF (NSPEC .GT. NUMS) NSPEC = NUMS
      RETURN
      END
C     FIND ANY NORI REFLEXIONS FROM THOSE AVAILABLE TO DEFINE THE ORIGIN
C     ROUTINE WILL HANDLE 230 SPACE GROUPS IN THE STANDARD  ORIENTATIONS
C     INCLUDING ALTERNATIVE SETTINGS AS IN INTERNATIONAL TABLES VOLUME 1
      SUBROUTINE ORIGIN(JUMP,IGIN)
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IZ(800),MKANG(800),
     1  MKG1(800),MKG2(800),ALPHA(801),LIM(800),LMN(800),IBF1(1489),
     2  IBF2(1489),ABFR(1489),M(3,4),MM(3,3),IP(3)
      COMMON /SYMET/ NSYM,ICENT,LATT,NRAL,NORI
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,MODUL(3)
      DIMENSION IGIN(4)
      JUMP = NORI
      IF (JUMP .LE. 0) RETURN
      MARK = 3
C     RESET MARK FOR POINT GROUPS 2 AND M
      IF(NSYM .EQ. 2 .AND. ICENT .NE. 1) MARK = 0
C     LOOK FOR FIRST REFLEXION
      DO 1900 II=1,NUMB
C     TEST FOR ELIMINATED REFLEXION
      IF (IZ(II) .LT. 0) GO TO 1900
C     COUNT NUMBER OF GENERAL REFLEXIONS USED
      LARN1 = 0
      IF (MKANG(II) .GT. 1) GO TO 1160
      IF (NRAL .LE. 0) GO TO 1900
      LARN1 = 1
C     TEST FOR LINEAR INDEPENDENCE
 1160 M(1,1) = MKG1(II)/256
      M(1,2) = MKG1(II) - 256*M(1,1) - 128
      M(1,3) = MKG2(II)
      M(1,4) = M(1,1)
      DO 1180 I=1,3
      IF (M(1,I) .NE. 0) GO TO 1200
 1180 CONTINUE
      GO TO 1900
C     TEST FOR NUMBER OF ORIGIN REFLEXIONS REQUIRED
 1200 IF (JUMP .GT. 1) GO TO 1220
C     TEST FOR PRIMITIVITY
      IF (IABS(M(1,3)) .EQ. 1) GO TO 2040
      IF (IABS(M(1,3) - MODUL(3)) - 1) 1900,2040,1900
 1220 IIPO = II + 1
      IF (IIPO .GT. NUMB) GO TO 1900
C     LOOK FOR SECOND REFLEXION
 1240 DO 1880 JJ=IIPO,NUMB
      LARN2 = LARN1
C     TEST FOR ELIMINATED REFLEXION
      IF (IZ(JJ) .LT. 0) GO TO 1880
C     COUNT NUMBER OF GENERAL REFLEXIONS USED
      IF (MKANG(JJ) .GT. 1) GO TO 1280
      IF (NRAL .LE. LARN1) GO TO 1880
      LARN2 = LARN1 + 1
C     TEST FOR LINEAR INDEPENDENCE
 1280 M(2,1) = MKG1(JJ)/256
      M(2,2) = MKG1(JJ) - 256*M(2,1) - 128
      M(2,3) = MKG2(JJ)
      M(2,4) = M(2,1)
      DO 1300 I=1,3
      IF (M(1,I)*M(2,I+1) - M(1,I+1)*M(2,I)) 1320,1300,1320
 1300 CONTINUE
      GO TO 1880
C     TEST FOR NUMBER OF ORIGIN REFLEXIONS REQUIRED
 1320 IF (JUMP .GT. 2) GO TO 1620
C     TEST FOR PRIMITIVITY  TRY REFLEXIONS IN SYMMETRY RELATED POSITIONS
      DO 1600 I=1,3
      IP(1) = I - 2
      DO 1580 J=1,3
      IP(2) = J - 2
      DO 1560 K=2,3
      DO 1540 L=1,2
      MM(L,K) = M(L,K) + IP(L) * MODUL(K)
      IF (MODUL(K)) 1540,1540,1400
 1400 IF (IABS(MM(L,K)) - MODUL(K)) 1540,1420,1410
 1410 GO TO (1600,1580), L
 1420 MM(L,K) = 0
 1540 CONTINUE
 1560 CONTINUE
      IF (IABS(MM(1,2) * MM(2,3) - MM(1,3) * MM(2,2)) -1) 1580,2020,1580
 1580 CONTINUE
 1600 CONTINUE
      GO TO 1880
 1620 JJPO = JJ + 1
      IF (JJPO .GT. NUMB) GO TO 1880
C     LOOK FOR THIRD REFLEXION
      DO 1860 KK=JJPO,NUMB
C     TEST FOR ELIMINATED REFLEXION
      IF (IZ(KK) .LT. 0) GO TO 1860
C     COUNT NUMBER OF GENERAL REFLEXIONS USED
      IF (MKANG(KK) .GT. 1) GO TO 1700
      IF (NRAL .LE. LARN2) GO TO 1860
C     TEST FOR LINEAR INDEPENDENCE AND PRIMITIVITY
 1700 M(3,1) = MKG1(KK)/256
      M(3,2) = MKG1(KK) - 256*M(3,1) - 128
      M(3,3) = MKG2(KK)
C     NECESSARY  TO  TRY  REFLEXIONS  IN  SYMMETRY   RELATED   POSITIONS
      DO 1840 I=1,4
      IF (IABS( M(1,1)*( M(2,2)* M(3,3)- M(2,3)* M(3,2))- M(1,2)*
     1  ( M(2,1)* M(3,3)- M(2,3)* M(3,1))+ M(1,3)*( M(2,1)* M(3,2)-
     2   M(2,2)* M(3,1)))-1) 1720,2000,1720
 1720 IF(MARK+I .GE. 4) GO TO 1860
      DO 1780 J=1,3
      IF(MODUL(J) .LE. 0) GO TO 1780
      M(I,J) = -M(I,J)
      IF(I .GE. 2) M(I-1,J) = -M(I-1,J)
 1780 CONTINUE
 1840 CONTINUE
 1860 CONTINUE
 1880 CONTINUE
 1900 CONTINUE
      RETURN
 2000 IGIN(3) = KK
 2020 IGIN(2) = JJ
 2040 IGIN(1) = II
      JUMP = 0
      RETURN
 2080 JUMP = -1
      RETURN
      END
C     DETERMINE   THE   ENANTIOMORPH   FIXING   REFLEXION
      SUBROUTINE START(MSG)
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IZ(800),MKANG(800),
     1  MKG1(800),MKG2(800)
      COMMON /SYMET/ NSYM,ICENT,LATT,NRAL,NORI
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,MODUL(3),NANT
      IF (MSG .EQ. 1 .OR. MSG .EQ. 2) RETURN
C     HAS ENANTIOMORPH BEEN FIXED     NANT .LE. 0 IF NOT
      IF (NANT .LE. 0) GO TO 1500
      NANT = 0
      RETURN
 1500 NANT = 0
C     DOES THE  ENANTIOMORPH  NEED TO BE FIXED   -  ICENT .NE. 0  IF NOT
      IF (ICENT.NE.0) RETURN
C     ENANTIOMORPH TO BE FIXED
      JUMP = 0
      NAN = 1
C     TEST FOR PRIMITIVE SPACE GROUP WITH SEMINVARIANT  MODULUS  (2,2,2)
      IF (LATT.NE.1) GOTO 1605
      J = 4 - NORI
      DO 1603 I=J,3
      IF (MODUL(I).NE.2) GOTO 1605
 1603 CONTINUE
      JUMP = 1
C     SELECT PERMUTED PHASE WITH LARGEST E-VALUE TO FIX ENANTIOMORPH
 1605 DO 1620 MAX=1,NUMB
      IF (IZ(MAX) .EQ. (-1)) GO TO 1625
 1620 CONTINUE
      GO TO 2120
 1625 IF (JUMP.LE.0) GOTO 1860
C     TO DETERMINE  WHETHER  ENANTIOMORPH  FIXING  REFLEXION  MUST  HAVE
C     POSITIVE REAL (NAN = -1) OR IMAGINARY (NAN = 1) PART,  FIND LINEAR
C     DEPENDENCE OF ENANTIOMORPH FIXING REFLEXION ON  ORIGIN  REFLEXIONS
 1635 LOG1 = 0
      M1 = MKG1(MAX)/256
      M2 = MKG1(MAX) - 256*M1 - 128
      M3 = MKG2(MAX)
      L1 = M1
      L2 = M2
      L3 = M3
      NORF=0
      DO 1800 J=1,NUMB
      IF(MOD(IZ(J), 100).NE.60) GOTO 1800
      NORF=NORF+1
      J1 = MKG1(J)/256
      J2 = MKG1(J) - 256*J1 - 128
      J3 = MKG2(J)
      LOG2 = MOD(M1 + J1, 2) + MOD(M2 + J2, 2) + MOD(M3 + J3, 2)
      IF (LOG2.GT.0) GOTO 1660
C     REFLEXION IS LINEARLY DEPENDENT ON ONE ORIGIN REFLEXION
      IF (IABS(MKANG(J) - 7) - 3) 1840,1820,1820
 1660 JP=J+1
      IF(NORF.EQ.NORI) JP=1
      DO 1670 K=JP,NUMB
      IF(MOD(IZ(K), 100).EQ.60) GOTO 1675
 1670 CONTINUE
 1675 K1 = MKG1(K)/256
      K2 = MKG1(K) - 256*K1 - 128
      K3 = MKG2(K)
      LOG2 = MOD(M1+J1+K1,2) + MOD(M2+J2+K2,2) + MOD(M3+J3+K3,2)
      IF (LOG2.GT.0) GOTO 1700
C     REFLEXION IS LINEARLY DEPENDENT ON TWO ORIGIN REFLEXIONS
      IF (IABS(MOD(MKANG(J) + MKANG(K) - 2, 12) - 6) - 3) 1840,1820,1820
C     DETERMINE LINEAR DEPENDENCE ON ALL THREE ORIGIN REFLEXIONS
 1700 LOG1 = LOG1 + MKANG(J) - 1
      L1 = L1 + J1
      L2 = L2 + J2
      L3 = L3 + J3
 1800 CONTINUE
      IF (MOD(L1,2) + MOD(L2,2) + MOD(L3,2)) 2100,1810,1820
C     REFLEXION IS LINEARLY DEPENDENT ON THREE ORIGIN REFLEXIONS
 1810 IF (IABS(MOD(LOG1, 12) - 6) - 3) 1840,1820,1820
C     IMAGINARY PART MUST BE POSITIVE TO FIX ENANTIOMORPH
 1820 NAN = 1
      GO TO 1860
C     REAL PART MUST BE POSITIVE TO FIX ENANTIOMORPH
 1840 NAN = -1
 1860 IF (MKANG(MAX).LE.1) GOTO 2060
      IF (IABS(MKANG(MAX) - 7) - 3) 2020,2040,2040
 2020 IF (NAN) 2100,2100,2080
 2040 IF (NAN) 2080,2100,2100
 2060 IF (NAN) 2080,2100,2080
 2080 NANT = NAN * MAX
      GO TO 2160
 2100 IZ(MAX) = -2
      GO TO 1605
C     ENANTIOMORPH NOT DEFINED - SET MESSAGE FLAG
 2120 MSG = MSG + 6
 2160 DO 2180 I=1,NUMB
      IF (IZ(I) .EQ. (-2)) IZ(I) = -1
 2180 CONTINUE
      RETURN
      END
C     SORT RELATIONSHIPS FOR TANGENT FORMULA
      SUBROUTINE SORT2(NINPUT)
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IZ(800),MKANG(800),
     1  IPALF(800),PALF(800),ALPHA(800),XALF(800),IPH1(64),IBUF1(700),
     2  IPH2(64),IBUF2(700),EEE(64),ABUFR(700),JBUF1(60),JBUF2(60),
     3  BBUFR(60)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NSETS,NSRPSI,NSRT,
     1  NANT,DX,NSP,ALFRAN,PSIRAN
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN,MSG,LISTE
      VEC(U) = U * U * (U + 0.4807) / ((U + 0.8636) * U + 1.3943)
      IF (MSG .EQ. 1 .OR. MSG .EQ. 2) RETURN
      REWIND LC2
      KNT = 0
      DO 1000 I=1,NUMB
      PALF(I) = 0.0
      XALF(I) = 0.0
      ALPHA(I) = 0.0
      IF (IZ(I) .EQ. (-100)) GO TO 1000
      KNT = KNT + 1
      IPH1(KNT) = 0
 1000 CONTINUE
      NINPUT = KNT + 1
      NSRT = 0
C     COPY RELATIONSHIPS TO FILE IN ORDER USED BY TANGENT FORMULA
      NN0 = NINPUT
      NNN = 100
      NDM1 = NDET - 1
 1100 REWIND LC3
      IF (NNN .EQ. NDET) GO TO 1200
      DO 1180 I=NNN,NDM1
      READ (LC3) MIN,ALFMIN,N
 1140 N = N - 10
      IF (N .GE. 0) READ (LC3)
      IF (N .GE. 0) GO TO 1140
 1180 CONTINUE
 1200 DO 1400 I=NN0,NNN
      LS = 0
 1220 LI = LS + 1
      LS = LS + 10
      READ (LC3) MIN,ALFMIN,K,(IBUF1(J),J=LI,LS),(IBUF2(J),J=LI,LS),
     1  (ABUFR(J),J=LI,LS)
      IF (LI .EQ. 1) N = K
      IF (N .GE. LS) GO TO 1220
      NSRT = NSRT + N
      KNT = KNT + 1
      IPH1(KNT) = 0
      IPH2(KNT) = MIN
      IF (KNT .LT. 64) GO TO 1240
      WRITE (LC2) IPH1,IPH2,EEE
      KNT = 0
 1240 IF (N .LE. 0) GO TO 1400
      DO 1300 J=1,N
      KNT = KNT + 1
      IPH1(KNT) = IBUF1(J)
      IPH2(KNT) = IBUF2(J)
      EEE(KNT) = ABUFR(J)
      ILA = IABS(IBUF1(J))
      IRA = IABS(IBUF2(J))
      VEC1 = VEC(ABUFR(J))
      VEC2 = ABUFR(J)*ABUFR(J)
      PALF(MIN) = PALF(MIN) + VEC1
      PALF(ILA) = PALF(ILA) + VEC1
      PALF(IRA) = PALF(IRA) + VEC1
      XALF(MIN) = XALF(MIN) + VEC2 - VEC1*VEC1
      XALF(ILA) = XALF(ILA) + VEC2 - VEC1*VEC1
      XALF(IRA) = XALF(IRA) + VEC2 - VEC1*VEC1
      ALPHA(MIN) = ALPHA(MIN) + VEC2
      ALPHA(ILA) = ALPHA(ILA) + VEC2
      ALPHA(IRA) = ALPHA(IRA) + VEC2
      IF (KNT .LT. 64) GO TO 1300
      WRITE (LC2) IPH1,IPH2,EEE
      KNT = 0
 1300 CONTINUE
 1400 CONTINUE
      IF (NNN .EQ. NDET) GO TO 1500
      NN0 = NNN + 1
      NNN = NNN + NNN/2
      IF (NNN .GT. NDET) NNN = NDET
      GO TO 1100
 1500 IPH1(KNT+1) = 0
      WRITE (LC2) IPH1,IPH2,EEE
      REWIND LC3
      ALFRAN = 0.0
      DO 1600 I=1,NUMB
      ALFRAN = ALFRAN + SQRT(ALPHA(I))
      IPALF(I) = 10.0*SQRT(PALF(I)**2 + XALF(I)) + 0.5
 1600 CONTINUE
C     COPY PSI ZERO RELATIONSHIPS TO TANGENT FORMULA FILE
      IF (IZRO .LE. 0) RETURN
      KNT = 1
      II = 1
      NST = 0
      NSRPSI = 0
      PSIRAN = 0.0
      RAN = 0.0
      IPH1(1) = 0
      IPH2(1) = 1
      REWIND LC4
 1860 READ (LC4) JBUF1,JBUF2,BBUFR
      DO 2000 I=1,60
      IF (JBUF1(I) .NE. 0) GO TO 1960
C     EACH REFLEXION MUST HAVE AT LEAST 15 TERMS
      IF (NST .GE. 15) GO TO 1900
      IZRO = IZRO - 1
      GO TO 1920
 1900 PSIRAN = PSIRAN + SQRT(RAN)
      NSRPSI = NSRPSI + NST
      KNT = KNT + NST + 1
      II = II + 1
      IPH1(KNT) = 0
      IPH2(KNT) = II
 1920 IF (KNT .LT. 64) GO TO 1950
      WRITE (LC2) IPH1,IPH2,EEE
      DO 1940 J=65,KNT
      IPH1(J-64) = IPH1(J)
      IPH2(J-64) = IPH2(J)
      EEE(J-64) = EEE(J)
 1940 CONTINUE
      KNT = KNT - 64
      IF (KNT .GE. 64) GO TO 1920
 1950 RAN = 0.0
      NST = 0
      IF (II-IZRO) 2000,2000,2040
C     REMOVE ELIMINATED REFLEXIONS
 1960 J = IABS(JBUF1(I))
      IF (IH1(J) .LE. 0) GO TO 2000
      J = IABS(JBUF2(I))
      IF (IH1(J) .LE. 0) GO TO 2000
      NST = NST + 1
      IPH1(KNT+NST) = JBUF1(I)
      IPH2(KNT+NST) = JBUF2(I)
      EEE(KNT+NST) = BBUFR(I)
      RAN = RAN + BBUFR(I) * BBUFR(I)
 2000 CONTINUE
      GO TO 1860
 2040 WRITE (LC2) IPH1,IPH2,EEE
      RETURN
      END
C     OUTPUT CONVERGENCE RESULTS
      SUBROUTINE OUTPT1(ICENT,NINPUT)
      COMMON /LOCAL/ IH1(800),IH2(800),E(800),IZ(800),MKANG(800),
     1  IPALF(800),LINE(3,1200),I3(3),IBUF1(700),IBUF2(700),IBUF3(700),
     2  ABUFR(700)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NSETS,NSRPSI,NSRT,NANT,
     1  DX,NSP
      COMMON /USER/ IPATH,LIST,NSREQ,NSPEC,NGEN,NANY,KMIN,MSG,LISTE
      DATA ISP/1H /
C     GENERATE NTH MEMBER OF FIBONACCI SERIES
      IU(N) = 1.618034**N/2.236068 + 0.5
C     OUTPUT MESSAGES FROM CONVEG AND START
      IF (MSG .EQ. 1) WRITE (LC1,100)
  100 FORMAT(/53X,7(2H* )//43X,34HORIGIN CAN NOT BE PROPERLY DEFINED//
     1  53X,7(2H* ))
      IF (MSG .EQ. 1) STOP
      IF (MOD(MSG,6) .GT. 0) WRITE (LC1,140)
  140 FORMAT(/53X,7(2H* )//35X,51HMULTAN CAN NOT FIND GOOD ORIGIN-DEFINI
     1NG REFLEXIONS//53X,7(2H* ))
      IF (MSG .GE. 6) WRITE (LC1,180)
  180 FORMAT(/53X,7(2H* )//32X,55HREFLEXIONS IN STARTING SET WILL NOT DE
     1FINE ENANTIOMORPH//53X,7(2H* ))
      NSP = 1
C     OUTPUT ELIMINATED REFLEXIONS
      IF (NDET .GE. NUMB) GO TO 340
      N = 0
      DO 300 I=1,NUMB
      IF (IH1(I) .GE. 0) GO TO 300
      IH1(I) = IABS(IH1(I))
      LINE(1,N+1) = I
      LINE(1,N+2) = IH1(I)/256
      LINE(1,N+3) = IH1(I) - 256*LINE(1,N+2) - 128
      LINE(1,N+4) = IH2(I)
      LINE(1,N+5) = MKANG(I)
      N = N + 5
  300 CONTINUE
      K = NUMB - NDET
      WRITE (LC1,320) ITLE,K,(LINE(1,I),I=1,N)
  320 FORMAT(/1X,119(1H-)//1X,40A2,18X,21HCONVERGENCE PROCEDURE//35X,
     1  I4,47H REFLEXIONS ELIMINATED FROM PHASE DETERMINATION//
     2  6(20H  CODE   H  K  L MK )/(6(I6,I4,3I3,1X)))
  340 IF (LIST .LT. 0) GO TO 500
      IF (KRAN .GT. 0 .OR. NPATH .EQ. 2) GO TO 1820
C     OUTPUT CONVERGENCE MAP
      WRITE (LC1,360)
  360 FORMAT(24H0 CODE   H  K  L  ALFEST,45X,12HCONTRIBUTORS/)
      IF (LIST .EQ. 0) LIST = NDET - 40
      DO 480 I=NINPUT,NDET
      LS = 0
  400 LI = LS + 1
      LS = LS + 10
      READ (LC3) MIN,ALFMIN,K,(IBUF1(J),J=LI,LS),(IBUF2(J),J=LI,LS),
     1  (ABUFR(J),J=LI,LS)
      IF (LI .EQ. 1) N = K
      IF (N .GE. LS) GO TO 400
      IF (I .LE. LIST) GO TO 480
      L1 = IH1(MIN)/256
      L2 = IH1(MIN) - 256*L1 - 128
      IF (N .LE. 0) WRITE (LC1,420) MIN,L1,L2,IH2(MIN),ALFMIN
  420 FORMAT(2X,2I4,2I3,F7.2,8X,38H***  WEAK LINK IN CONVERGENCE MAP  **
     1*)
      IF (N .LE. 0) GO TO 480
      DO 440 K=1,N
      IBUF3(K) = 100.0*(100.0*ABUFR(K)-FLOAT(IFIX(100.0*ABUFR(K)+0.5)))
     1  + 0.5
  440 CONTINUE
      WRITE (LC1,460) MIN,L1,L2,IH2(MIN),ALFMIN,(ISP,IBUF1(K),IBUF2(K),
     1  IBUF3(K),ABUFR(K),K=1,N)
  460 FORMAT(2X,2I4,2I3,F7.2,1X,A1,5(I5,I4,I3,F6.2,A1)/(25X,I5,I4,I3,
     1  F6.2,A1,I5,I4,I3,F6.2,A1,I5,I4,I3,F6.2,A1,I5,I4,I3,F6.2,A1,I5,
     2  I4,I3,F6.2,A1))
  480 CONTINUE
C     OUTPUT STARTING REFLEXIONS FOR PHASE DETERMINATION
  500 WRITE (LC1,520) ITLE
  520 FORMAT(1H0,119(1H-)//1X,40A2,19X,20HCONVERGENCE  RESULTS)
      IF (ICENT .EQ. (-1)) WRITE (LC1,620)
  620 FORMAT(/44X,33HENANTIOMORPH FIXED BY SPACE GROUP)
      IF (ICENT .EQ. (-2)) WRITE(LC1,630)
  630 FORMAT(/44X,32HENANTIOMORPH FIXED BY INVARIANTS)
      DO 650 I=1,3
      I3(I) = 0
  650 CONTINUE
      L1 = 0
      L2 = 0
      N = 0
      DO 1200 I=1,NUMB
      IND1 = 3
      IF (IZ(I)+1) 1000,1040,1020
C     ELIMINATED REFLEXION
 1000 IZ(I) = 0
      GO TO 1200
C     KNOWN, ORIGIN OR PERMUTED REFLEXION
 1020 IWT = MOD(IZ(I), 100)
      IND1 = IWT/30
      IF (IWT .LE. 60) GO TO 1040
      IZ(I) = -IZ(I) + 8
      IF (L1 .NE. 0) L2 = I3(IND1)
      IF (L1 .EQ. 0) L1 = I3(IND1)
      NSP = 2*NSP
 1040 IND2 = I3(IND1)
      LINE(IND1,IND2+1) = I
      LINE(IND1,IND2+2) = IH1(I)/256
      LINE(IND1,IND2+3) = IH1(I) - 256*LINE(IND1,IND2+2) - 128
      LINE(IND1,IND2+4) = IH2(I)
      LINE(IND1,IND2+5) = (3*(IZ(I)/100) + 1)/2
      LINE(IND1,IND2+6) = IWT
      I3(IND1) = I3(IND1) + 6 - IND1/3
      GO TO (1200,1080,1100), IND1
C     ORIGIN REFLEXION
 1080 LINE(IND1,IND2+6) = MKANG(I)
      GO TO 1200
C     PERMUTED REFLEXION
 1100 LINE(IND1,IND2+5) = MKANG(I)
      IF (MKANG(I) .EQ. 1) GO TO 1120
      IZ(I) = -1000*(MKANG(I) - 1) - 52
      NSP = 2*NSP
      GO TO 1200
C     ASSIGN MAGIC INTEGERS TO UNKNOWN GENERAL PHASES
 1120 N = N + 1
      IZ(I) = IU(N+1) - 2*IU(NGR+1)
 1200 CONTINUE
      K = I3(2)
      IF(K.LE.0) GO TO 1400
      WRITE (LC1,1300) (LINE(2,I),I=1,K)
 1300 FORMAT(/48X,24HORIGIN FIXING REFLEXIONS/ /3(8X,24HCODE   H   K   L
     1  PHI MK,8X)/3(I12,3I4,I5,I3,8X))
      IF (L1.GT.0) WRITE(LC1,1340)LINE(2,L1+2),LINE(2,L1+3),LINE(2,L1+4)
      IF (L2.GT.0) WRITE(LC1,1340)LINE(2,L2+2),LINE(2,L2+3),LINE(2,L2+4)
 1340 FORMAT(/23X,12HPHASE OF THE,3I4,50H  REFLEXION CAN HAVE TWO VALUES
     1 45 AND 315 DEGREES)
 1400 K=I3(3)
      IF (K .NE. 0) WRITE (LC1,1440) (LINE(3,I),I=1,K)
 1440 FORMAT(/48X,25HPHASE PERMUTED REFLEXIONS//5(24H   CODE   H   K   L
     1 MK  )/5(I7,3I4,I3,2X))
 1820 WRITE (LC1,1860) NSREQ,NDET,NSRT,IZRO,NSRPSI
 1860 FORMAT(/31X,51HNUMBER   OF   PHASE   SETS   TO   BE    GENERATED =
     1  ,I6//31X,27HNUMBER OF RELATIONSHIPS FOR,I4,20H STRONG REFLEXIONS
     2 =,I6/ 31X,27HNUMBER OF RELATIONSHIPS FOR,I4,20H  WEAK  REFLEXIONS
     3 =,I6)
      RETURN
      END
C     * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * *
C     SECOND  SECTION   ***   PHASE  DETERMINATION  BY  TANGENT  FORMULA
C     * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * *
      SUBROUTINE LAST
      COMMON /LOCAL/AMN(3),AMX(3),STABLE(450),IPH1(64),IPH2(64),EEE(64),
     1  MKSTOR(12),NUNDET(12),IZ(800),MKANG(800),IPALF(800),IH1(800),
     2  IH2(800),E(800)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NSYM,ICENT,LATT,NRAL,NORI,PTS,IS(3,3,24),ITS(3,24)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NSETS,NST,NSRT,NANT,
     1  DX,NSP,ALFRAN,PSIRAN
      COMMON /LASPM/ IMK,IPUB,ISKIP,IHVY,IALL,WTFOM(3),MAPS
C     KUSER3 = DIMENSION OF ISNUM, ISDEN, IALF, IPHAZ AND WT
      KUSER3 = 1600
      BACKSPACE LC2
      READ (LC2) IPALF,IH1,IH2,E,IZ,MKANG
      CALL INPUT3(ICENT)
      IF (ICENT .LT. 0) ICENT = 0
C     NUMBER OF PHASE SETS TO BE GENERATED SIMULTANEOUSLY
      NST = KUSER3/NUMB
      IF (NST .GT. 12) NST = 12
      MST = NST
      IF (NPATH .EQ. 2) NST = 1
      IST = 0
      MKST = 0
      NUMSET = 0
C     GENERATE NEXT SET OF STARTING PHASES
 1600 CALL PHASE(NUMSET,MKST,IST)
      IF (NST.EQ.0) GO TO 2000
C     TANGENT FORMULA PHASE DETERMINATION
      CALL SWTR
 2000 CALL FMERIT(IST,MST)
      IF (NST .GE. MST) GO TO 1600
C     PHASE REFINEMENT COMPLETE - CHECK FOR IDENTICAL PHASE SETS
      CALL UNIQUE(WTFOM,MAPS)
      RETURN
      END
C     INITIALISE MEMORY AND FILES FOR PHASE DETERMINATION
      SUBROUTINE INPUT3(ICENT)
      COMMON /LOCAL/AMN(3),AMX(3),STABLE(450),IPH1(64),IPH2(64),EEE(64),
     1  MKSTOR(12),NUNDET(12),IZ(800),MKANG(800),IPALF(800),IH1(800),
     2  IH2(800),E(800),KDSTOR(800),FM(3)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40),CX(6)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NSETS,NST,NSRT,NANT,DX
      COMMON /LASPM/ IMK,IPUB,ISKIP
      COMMON /USER/ IPATH,LIST,NSREQ
C     SET UP SINE/COSINE TABLE
      DO 1000 I=1,450
      STABLE(I) = SIN(DTOR*FLOAT(I-1))
 1000 CONTINUE
      DO 1040 I=1,3
      AMN(I) = 100.0
      AMX(I) = 0.0
 1040 CONTINUE
      WRITE (LC1,1440) ITLE,ISKIP
 1440 FORMAT(1H0,119(1H+)/15H0MULTAN  PART 2,27X,35HTANGENT FORMULA PHAS
     1E DETERMINATION,22X,21HVERSION   JUNE   1984//1X,40A2/74X,
     2  41HNUMBER OF PHASE SETS ALREADY DEVELOPED IS,I5)
      NSETS = 0
      IF (ISKIP .GT. 0) GO TO 1460
      WRITE (LC3) NUMB,(IH1(I),IH2(I),E(I),I=1,NUMB)
      GO TO 1500
C     READ OVER RESULTS OF THE PREVIOUS (ABORTED) RUN
 1460 READ (LC3)
 1480 READ (LC3) J
      NSETS = NSETS + 1
      DO 1490 I=1,3
      IF (FM(I) .GT. AMX(I)) AMX(I) = FM(I)
      IF (FM(I) .LT. AMN(I)) AMN(I) = FM(I)
 1490 CONTINUE
      IF (J.NE.ISKIP) GOTO 1480
 1500 IF (IMK .LE. 0) GO TO 2000
C     STARTING PHASES INPUT BY USER
      IF (NPATH .NE. 2) WRITE (LC1,1800)
 1800 FORMAT(21H PHASES INPUT BY USER/)
      READ (LC4) (KDSTOR(I),I=1,IMK)
      IF (NPATH .NE. 2) WRITE (LC1,1860) (KDSTOR(I),I=1,IMK)
 1860 FORMAT(8H CODES  ,28I4)
      DO 1880 I=1,NUMB
      IZ(I) = 0
 1880 CONTINUE
      DO 1900 I=1,IMK
      J = KDSTOR(I)
      IZ(J) = I
 1900 CONTINUE
C     STARTING PHASES GENERATED BY PROGRAM
 2000 IF (KRAN .EQ. 0 .AND. IMK .EQ. 0) WRITE (LC1,2010)
 2010 FORMAT(47H STARTING PHASES GENERATED BY PHASE PERMUTATION)
      IF (KRAN .GT. 0) WRITE (LC1,2020) KRAN
 2020 FORMAT(36H STARTING PHASES GENERATED BY RANTAN,I3)
      WRITE (LC1,2030)
 2030 FORMAT(48H0NUMBER OF UNDETERMINED PHASES IN EACH PHASE SET)
C     READ SPECIFIED SET NUMBERS
      IF (IPUB .GT. 0) READ (LC4) (MKSTOR(I),I=1,IPUB)
      IF (KRAN .LE. 0) RETURN
      DX = 180.0/FLOAT(NSREQ)
      IF (ICENT .LT. 0) DX = 2.0*DX
      NSREQ = NSREQ - ISKIP
      RETURN
      END
C     GENERATE STARTING SETS OF PHASES FROM CONVERGENCE RESULTS
      SUBROUTINE PHASE(NUMSET,MKST,IST)
      COMMON /LOCAL/AMN(3),AMX(3),STABLE(450),IPH1(64),IPH2(64),EEE(64),
     1  MKSTOR(12),NUNDET(12),IZ(800),MKANG(800),SNUM(1600),
     2  SDEN(1600),IALF(1600),IPHAZ(1600),WT(1600)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NSETS,NST,NSRT,NANT,DX,
     1  NSP
      COMMON /LASPM/ IMK,IPUB,ISKIP
      COMMON /USER/ IPATH,LIST,NSREQ
      IOF = 0
      IF (KRAN .GT. 0) GO TO 1400
      IF (IMK .GT. 0) GO TO 1600
      DO 1300 II=1,NST
      IF (IPUB .GT. 0 .AND. IST+II .GT. IPUB) GO TO 1520
 1000 NUMSET = NUMSET + 1
      IF (IPUB .LE. 0) MKSTOR(IST+II) = NUMSET
 1060 NZ = MOD(MKST, NSP)
      XP = (FLOAT(MKST/NSP) + 0.5)*DX
      IF (XP .GT. 360.0) GO TO 1520
      MKST = MKST + 1
      DO 1200 I=1,NUMB
      LL = I + IOF
      WT(LL) = 0.0
      IPHAZ(LL) = 0
C     PHASE NOT IN STARTING SET
      IF (IZ(I) .EQ. 0) GO TO 1200
C     ORIGIN FIXING OR KNOWN PHASE
      IF (IZ(I) .GT. 0) GO TO 1160
C     PERMUTED PHASE
      IF (IZ(I) .LT. (-3000)) GO TO 1120
      IPHAZ(LL) = AMOD(FLOAT(-IZ(I))*XP, 360.0) + 0.5
      GO TO 1180
 1120 IF (MOD(NZ,2) .NE. 0) IPHAZ(LL) = (MOD(-IZ(I),100) - 50)*90
      NZ = NZ/2
 1160 IPHAZ(LL) = IPHAZ(LL) + (3*(IABS(IZ(I))/100) + 1)/2
 1180 IF (IPHAZ(LL) .EQ. 0) IPHAZ(LL) = 360
      WT(LL) = 1.0
      MKANG(I) = -IABS(MKANG(I))
 1200 CONTINUE
      IF (NANT .EQ. 0) GO TO 1220
      NAN = IABS(NANT) + IOF
      IF (IPHAZ(NAN) .LT. 90) GO TO 1220
      IF (NANT .LT. 0 .AND. IPHAZ(NAN) .LE. 270) GO TO 1060
      IF (NANT .GT. 0 .AND. IPHAZ(NAN) .GE. 180) GO TO 1060
 1220 IF (NUMSET .LT. ISKIP .OR. NUMSET .LT. MKSTOR(IST+II)) GO TO 1000
      IOF = IOF + NUMB
 1300 CONTINUE
      RETURN
C     STARTING PHASES GENERATED BY MAGIC INTEGERS
 1400 IF (NUMSET .LT. ISKIP) NUMSET = ISKIP
      DO 1500 II=1,NST
      IF (IPUB .GT. 0 .AND. IST+II .GT. IPUB) GO TO 1520
      NUMSET = NUMSET + 1
      IF (NUMSET .GT. NSREQ) GO TO 1520
      IF (IPUB .LE. 0) MKSTOR(IST+II) = NUMSET
      K = 2*NUMB - KRAN
      XP = (FLOAT(MKSTOR(IST+II)) - 0.5)*DX
      DO 1440 I=1,NUMB
      LL = I + IOF
      WT(LL) = 1.0
      IPHAZ(LL) = AMOD(FLOAT(K)*XP, 360.0) + 0.5
      IF (IPHAZ(LL) .EQ. 0) IPHAZ(LL) = 360
      K = K - 1
      IF (K .LT. NUMB) K = K + NUMB
      MKANG(I) = IABS(MKANG(I))
 1440 CONTINUE
      XP = XP + DX
      IOF = IOF + NUMB
 1500 CONTINUE
      RETURN
 1520 NST = II - 1
      RETURN
C     STARTING PHASES INPUT BY USER
 1600 DO 1740 II=1,NST
      READ (LC4) (IALF(I),I=1,IMK)
      IF (IALF(1) .NE. (-1000)) GO TO 1680
      NST = II - 1
      GO TO 1760
 1680 IF (NPATH .NE. 2) WRITE (LC1,1700) (IALF(I),I=1,IMK)
 1700 FORMAT(8H PHASES ,28I4)
      NUMSET = NUMSET + 1
      MKSTOR(IST+II) = NUMSET
      DO 1720 I=1,NUMB
      LL = I + IOF
      IPHAZ(LL) = 0
      WT(LL) = 0.0
      IF (IZ(I) .EQ. 0) GO TO 1720
      MKANG(I) = -IABS(MKANG(I))
      WT(LL) = 1.0
      J = IZ(I)
      IPHAZ(LL) = IALF(J)
      IF (IPHAZ(LL) .LE. 0) IPHAZ(LL) = IPHAZ(LL) + 360
 1720 CONTINUE
      IOF = IOF + NUMB
 1740 CONTINUE
 1760 RETURN
      END
C     STATISTICALLY WEIGHTED TANGENT FORMULA FOR PHASE DETERMINATION
      SUBROUTINE SWTR
      COMMON /LOCAL/AMN(3),AMX(3),STABLE(450),IPH1(64),IPH2(64),EEE(64),
     1  MKSTOR(12),NUNDET(12),IZ(800),MKANG(800),SNUM(1600),
     2  SDEN(1600),IALF(1600),IPHAZ(1600),WT(1600)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NSETS,NST
      DIMENSION CTABLE(360),SUMALF(12),SALF(12)
      EQUIVALENCE (STABLE(91),CTABLE(1))
      VEC(U) = U*(U + 0.4807)/((U + 0.8636)*U + 1.3943)
C     IF ORDER OF USING PHASE RELS CHANGES, ALTER SORT2 CORRESPONDINGLY
      JUMP = 0
      MARK = -6
      IF (NPATH .EQ. 2) MARK = 0
      NNN = 100
      IF (KRAN .GT. 0) NNN = NDET
      CUT = 0.8
      IF (KRAN .GT. 0) CUT = -1.0
      NMB = NST*NUMB
  800 DO 900 II=1,NST
      SUMALF(II) = 0.0
  900 CONTINUE
 1000 DO 1010 I=1,NMB
      IALF(I) = 0
 1010 CONTINUE
      IF (NNN .GT. NDET) NNN = NDET
      REWIND LC2
 1020 DO 1030 I=1,NMB
      SNUM(I) = 0.0
      SDEN(I) = 0.0
 1030 CONTINUE
      KD = 0
 1050 READ (LC2) IPH1,IPH2,EEE
      DO 1220 JJ=1,64
      IF (IPH1(JJ) .NE. 0) GO TO 1070
      L = IPH2(JJ)
      KD = KD + 1
      IF (KD - NNN) 1220,1220,1250
 1070 IP = 1500.0*(100.0*EEE(JJ)-FLOAT(IFIX(100.0*EEE(JJ)+0.5)))+0.5
      IVEC = 10.0*VEC(EEE(JJ))*EEE(JJ) + 0.5
      IOF = 0
      DO 1210 II=1,NST
      IF (SUMALF(II) .LT. 0.0) GO TO 1200
      LL = L + IOF
      IND = 7
      IF (IPHAZ(LL) .GT. 0) IND = JUMP + 6
      ILA = IABS(IPH1(JJ)) + IOF
      IF (IPHAZ(ILA) .GT. 0) IND = IND - 2
      IF (IND .EQ. 7) GO TO 1200
      IRA = IABS(IPH2(JJ)) + IOF
      IF (IPHAZ(IRA) .GT. 0) IND = IND - 3
      IF (IND .GT. 4) GO TO 1200
      GO TO (1100,1100,1120,1140),IND
 1100 IFL = ISIGN(IPHAZ(ILA),IPH1(JJ))
      IFR = ISIGN(IPHAZ(IRA),IPH2(JJ))
      IARG = MOD(IFL+IFR+IP+2160,360) + 1
      EE = EEE(JJ)*WT(ILA)*WT(IRA)
      SNUM(LL) = SNUM(LL) + EE*STABLE(IARG)
      SDEN(LL) = SDEN(LL) + EE*CTABLE(IARG)
      IF (JUMP .EQ. 1) GO TO 1200
      IALF(LL) = IALF(LL) + IVEC
      IF (IND-1) 1200,1130,1200
 1120 IFR = ISIGN(IPHAZ(IRA),IPH2(JJ))
 1130 IARG = MOD((IPHAZ(LL)-IFR-IP)*ISIGN(1,IPH1(JJ))+2160,360) + 1
      EE = EEE(JJ)*WT(LL)*WT(IRA)
      SNUM(ILA) = SNUM(ILA) + EE*STABLE(IARG)
      SDEN(ILA) = SDEN(ILA) + EE*CTABLE(IARG)
      IALF(ILA) = IALF(ILA) + IVEC
      IF (IND-1) 1200,1150,1200
 1140 IFL = ISIGN(IPHAZ(ILA),IPH2(JJ))
 1150 IARG = MOD((IPHAZ(LL)-IFL-IP)*ISIGN(1,IPH2(JJ))+2160,360) + 1
      EE = EEE(JJ)*WT(LL)*WT(ILA)
      SNUM(IRA) = SNUM(IRA) + EE*STABLE(IARG)
      SDEN(IRA) = SDEN(IRA) + EE*CTABLE(IARG)
      IALF(IRA) = IALF(IRA) + IVEC
 1200 IOF = IOF + NUMB
 1210 CONTINUE
 1220 CONTINUE
      GO TO 1050
 1250 IF (JUMP .EQ. 1) GO TO 1640
      IF (CUT .GT. 0.0) GO TO 1280
C     CALCULATE INITIAL WT = 1.5 * RMS WT
      CUT = 0.0
      DO 1270 I=1,NMB
      CUT = CUT + SNUM(I)**2 + SDEN(I)**2
 1270 CONTINUE
      CUT = 1.0/(0.3*SQRT(CUT/FLOAT(NST*NDET)))
      IF (CUT .GT. 1.0) CUT = 1.0
      WATE = CUT*CUT
      DO 1275 I=1,NMB
      SNUM(I) = SNUM(I)*WATE
      SDEN(I) = SDEN(I)*WATE
 1275 CONTINUE
C     UPDATE WEIGHTS AND PHASES
 1280 IOF = 0
      DO 1505 II=1,NST
      IF (SUMALF(II) .LT. 0.0) GO TO 1503
      SALF(II) = 0.0
      DO 1500 I=1,NUMB
      LL = I + IOF
      IF (MKANG(I) .LE. 0) GO TO 1500
      WT(LL) = 0.8*WT(LL)
      ID = 15*MKANG(I) - 14
      IF (ID .EQ. 1) GO TO 1300
      T2 = SNUM(LL)*STABLE(ID) + SDEN(LL)*CTABLE(ID)
      SNUM(LL) = T2*STABLE(ID)
      SDEN(LL) = T2*CTABLE(ID)
 1300 WATE = 0.2*SQRT(SNUM(LL)**2 + SDEN(LL)**2)
      IF (WATE .LT. CUT) GO TO 1500
      SALF(II) = SALF(II) + WATE
      IF (MARK .GE. 2) IALF(LL) = 50.0*WATE + 0.5
      IF (WATE .LT. 1.0) GO TO 1320
      WATE = (0.022*FLOAT(IALF(LL)) + 1.0)/WATE
      IF (WATE .GT. 1.0) WATE = 1.0
 1320 IF (WATE .LT. 0.15) WATE = 0.15
      WT(LL) = WATE
      IPHAZ(LL) = ATAN2(SNUM(LL),SDEN(LL))/DTOR + 360.5
 1500 CONTINUE
 1503 IOF = IOF + NUMB
 1505 CONTINUE
C     SWTR CONTROL STATEMENTS
      CUT = 0.85*CUT
      IF (MARK .LT. 0) MARK = MARK + 1
      IF (MARK .LT. 0) GO TO 1000
      IF (NNN .EQ. NDET) GO TO 1550
      NNN = NNN + NNN/2
      GO TO 1000
 1550 IF (MARK .GT. 0) GO TO 1620
      LL = 0
      DO 1570 II=1,NST
      IF (SUMALF(II) .LT. 0.0) GO TO 1560
      IF ((SALF(II)-SUMALF(II))/SALF(II) .LT. 0.02) GO TO 1560
      SUMALF(II) = SALF(II)
      GO TO 1570
 1560 LL = LL + 1
      SUMALF(II) = -1.0
 1570 CONTINUE
      IF (LL .LT. NST) GO TO 1000
      DO 1600 LL=1,NUMB
      MKANG(LL) = IABS(MKANG(LL))
 1600 CONTINUE
      MARK = 2
      GO TO 800
 1620 NNN = IZRO
      JUMP = 1
      IF (IZRO .GT. 0) GO TO 1020
 1640 RETURN
      END
C     CALCULATE FIGURES OF MERIT AND OUTPUT PHASES
      SUBROUTINE FMERIT(IST,MST)
      COMMON /LOCAL/AMN(3),AMX(3),STABLE(450),IPH1(64),IPH2(64),EEE(64),
     1  MKSTOR(12),NUNDET(12),IZ(800),MKANG(800),SNUM(1600),
     2  SDEN(1600),IALF(1600),IPHAZ(1600),IPALF(800)
      COMMON /CONST/ LC1,LC2,LC3,LC4
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NSETS,NST,NSRT,NANT,
     1  DX,NSP,ALFRAN,PSIRAN
      COMMON /LASPM/ IMK,IPUB,ISKIP,IHVY,IALL
      DIMENSION FM(3)
C     FM(1) = ABSFOM;   FM(2) = PSIZRO;   FM(3) = RESID
      IF (NST .EQ. 0) GO TO 5020
      READ (LC2) IPALF
      IOF = 0
      DO 5000 II=1,NST
      DO 1600 I=1,3
      FM(I) = 0.0
 1600 CONTINUE
      IF (IZRO .LE. 0) GO TO 1700
      DO 1660 I=1,IZRO
      LL = I + IOF
      FM(2) = FM(2) + SQRT(SNUM(LL)**2+SDEN(LL)**2)
 1660 CONTINUE
 1700 NUNDET(IST+II) = NDET - NUMB
      SUMEO = 0.0
      DO 4800 I=1,NUMB
      LL = I + IOF
      IF (IALF(LL) .GE. 5) GO TO 4740
      IPHAZ(LL) = 0
      NUNDET(IST+II) = NUNDET(IST+II) + 1
      GO TO 4800
 4740 SUMEO = SUMEO + FLOAT(IPALF(I))
      FM(1) = FM(1) + FLOAT(IALF(LL))
 4800 CONTINUE
      IF (NPATH .LE. 1 .AND. 0.1*SUMEO .LE. ALFRAN) GO TO 4980
      FM(1) = (0.1*FM(1) - ALFRAN)/(0.1*SUMEO - ALFRAN)
      IF (NPATH .LE. 1 .AND. FM(1) .LT. 0.2) GO TO 4980
      IF (IZRO .GT. 0) FM(2) = FM(2)/(FM(1)*PSIRAN)
      IF (FM(1) .GT. 1.3) FM(2) = FM(2)*FM(1)/1.3
      SC = 1.0
      IF (FM(1) .GT. 1.0) SC = SQRT(FM(1))
      IF (SC .GT. 1.3) SC = 1.3
      IF (IHVY .EQ. 0) SC = 1.0
      DO 4920 I=1,NUMB
      LL = I + IOF
      IF (IALF(LL) .GE. 5) FM(3) = FM(3) + ABS(FLOAT(IALF(LL))/SC
     1  - FLOAT(IPALF(I)))
 4920 CONTINUE
      FM(3) = 100.0*FM(3)/SUMEO
      LS = II*NUMB
      LI = LS - NUMB + 1
      WRITE (LC3) MKSTOR(IST+II),FM,(IPHAZ(I),I=LI,LS)
      NSETS = NSETS + 1
      DO 4940 I=1,3
      IF (FM(I) .GT. AMX(I)) AMX(I) = FM(I)
      IF (FM(I) .LT. AMN(I)) AMN(I) = FM(I)
 4940 CONTINUE
C     TEST FOR ACCEPTABLE SOLUTION
      IF (IZRO .LE. 0 .OR. NPATH .GT. 1 .OR. IALL .NE. 0) GO TO 4980
      IF (FM(2) .GT. 1.25 .OR. FM(2) .GT. AMN(2)+0.01) GO TO 4980
      IF (FM(3) .GT. 20.0 .OR. FM(3) .GT. AMN(3)+0.10) GO TO 4980
      IST = IST + II
      NST = -1
      GO TO 5020
 4980 IOF = IOF + NUMB
 5000 CONTINUE
      IST = IST + NST
      IF (IST+NST .LE. 12 .AND. NST .EQ. MST) GO TO 5060
 5020 IF (IST .GT. 0) WRITE (LC1,5040) (MKSTOR(II),NUNDET(II),II=1,IST)
 5040 FORMAT(12(I6,I4))
      IF (NST .GE. 0) IST = 0
 5060 IF (NST .LT. 0) WRITE (LC1,5080) MKSTOR(IST)
 5080 FORMAT(/44X,3HSET,I4,26H ACCEPTED AS TRUE SOLUTION)
      RETURN
      END
C     COMPARE PHASE SETS AND OUTPUT FIGURES OF MERIT
      SUBROUTINE UNIQUE(WTFOM,MAPS)
      COMMON /LOCAL/ AMN(3),AMX(3),LINE(16),ENIL(4,3),IPH1(64),
     1  IPH2(64),EEE(64),IPHAZ1(800),IPHAZ2(800),IF1(1299),FM(1299,4)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40)
      COMMON /BARAM/ NUMB,NDET,IZRO,NPATH,KRAN,NSETS,NST,NSRT
      DIMENSION WTFOM(3)
      IF (NSETS .LT. 1) GO TO 1190
      REWIND LC3
      READ (LC3)
C     NORMALISE CFOM TO 3.0
      IF (IZRO.EQ.0) WTFOM(2) = 0.0
      FACTOR = 3.0 / (WTFOM(1)+WTFOM(2)+WTFOM(3))
      DO 80 I=1,3
      WTFOM(I)=WTFOM(I)*FACTOR
   80 CONTINUE
      WRITE (LC1,140) ITLE,AMX,AMN,WTFOM
  140 FORMAT(1H0,119(1H-)//1X,40A2,12X,27HSUMMARY OF FIGURES OF MERIT//
     1  52X,7HABS FOM,10X,8HPSI ZERO,11X,5HRESID/27X,13HMAXIMUM VALUE,
     2  2F18.3,F17.2/27X,13HMINIMUM VALUE,2F18.3,F17.2/7X,33HRELATIVE WE
     3IGHTS FOR COMBINED FOM,F17.2,2F18.2//3(40H     SET  ABS FOM   PSI0
     4   RESID    CFOM))
      IF (AMX(1) .EQ. AMN(1)) AMN(1) = 0.0
      IF (AMX(2) .EQ. AMN(2)) AMX(2) = 100.0
      IF (AMX(3) .EQ. AMN(3)) AMX(3) = 100.0
      DO 180 I=1,NSETS
      READ (LC3) IF1(I),(FM(I,J),J=1,3)
      FM(I,4) = WTFOM(1) * (FM(I,1) - AMN(1)) / (AMX(1) - AMN(1)) +
     1  WTFOM(2) * (AMX(2) - FM(I,2)) / (AMX(2) - AMN(2)) +
     2  WTFOM(3) * (AMX(3) - FM(I,3)) / (AMX(3) - AMN(3))
  180 CONTINUE
      IREC = 100
      II = 0
C     ALLOW AVERAGE DIFFERENCE OF 20 DEGREES BETWEEN PHASE SETS
      TEST = 20.0*FLOAT(NSRT)
      DO 1000 I=1,NSETS
      IF (FM(I,4) .LT. 0.0) GO TO 1000
      IF (I .EQ. NSETS) GO TO 920
      CALL RTAPE(IPHAZ1,IREC,I,NUMB,LC3)
      IP1 = I+1
      DO 900 J=IP1,NSETS
      IF(FM(J,4) .LT. 0.0) GO TO 900
C     COMPARE SETS WITH SIMILAR FOMS
      IF(ABS(FM(J,1)-FM(I,1)) .GT. 0.05) GO TO 900
      IF(ABS(FM(J,2)-FM(I,2)) .GT. 0.05) GO TO 900
      IF(ABS(FM(J,3)-FM(I,3)) .GT. 0.4) GO TO 900
      CALL RTAPE(IPHAZ2,IREC,J,NUMB,LC3)
      TESTI = 0.0
      TESTE = 0.0
      REWIND LC2
      KD = 0
  420 READ (LC2) IPH1,IPH2,EEE
      DO 500 JJ=1,64
      IF (IPH1(JJ) .NE. 0) GO TO 460
      LL = IPH2(JJ)
      KD = KD + 1
      IF (KD - NDET) 500,500,600
  460 ILA = IABS(IPH1(JJ))
      IRA = IABS(IPH2(JJ))
      IPI = IPHAZ1(LL) - ISIGN(IPHAZ1(ILA),IPH1(JJ)) - ISIGN(IPHAZ1(IRA)
     1  ,IPH2(JJ))
      IPJ = IPHAZ2(LL) - ISIGN(IPHAZ2(ILA),IPH1(JJ)) - ISIGN(IPHAZ2(IRA)
     1  ,IPH2(JJ))
      IARG = MOD(IPI-IPJ+3600,360)
      IF (IARG .GT. 180) IARG = 360 - IARG
      TESTI = TESTI + FLOAT(IARG)
      IARG = MOD(IPI+IPJ+3600,360)
      IF (IARG .GT. 180) IARG = 360 - IARG
      TESTE = TESTE + FLOAT(IARG)
      IF(TESTI .GT. TEST .AND. TESTE .GT. TEST) GO TO 900
  500 CONTINUE
      GO TO 420
  600 FM(J,4) = -IF1(I)
  900 CONTINUE
  920 II = II + 1
      LINE(II) = IF1(I)
      DO 960 J=1,4
      ENIL(J,II) = FM(I,J)
  960 CONTINUE
      IF (II .LT. 3) GO TO 1000
      WRITE (LC1,970) (LINE(K),(ENIL(J,K),J=1,4),K=1,3)
  970 FORMAT(3(I8,2F8.3,F8.2,F8.3))
      II = 0
 1000 CONTINUE
      IF (II .GT. 0) WRITE (LC1,970) (LINE(K),(ENIL(J,K),J=1,4),K=1,II)
      II = 0
      WRITE (LC1,1010)
 1010 FORMAT(1X)
      K = 1
      DO 1100 I=1,NSETS
      IF (FM(I,4) .GE. 0.0) GO TO 1040
      II = II + 2
      LINE(II-1) = IF1(I)
      LINE(II) = -FM(I,4) + 0.5
      IF (II .LT. 16) GO TO 1100
      WRITE (LC1,1020) (LINE(J),J=1,II)
 1020 FORMAT(16H DUPLICATE SETS:,8(I6,3H  =,I4))
      II = 0
      GO TO 1100
 1040 IF (I .LE. MAPS) GO TO 1050
      IF (FM(I,4) .LT. FM(K,4)) GO TO 1100
      FM(K,4) = FM(I,4)
      IF1(K) = IF1(I)
 1050 DO 1060 J=1,MAPS
      IF (FM(J,4) .LT. FM(K,4)) K = J
 1060 CONTINUE
 1100 CONTINUE
      IF (II .GT. 0) WRITE (LC1,1020) (LINE(J),J=1,II)
      CALL RTAPE(IPHAZ1,IREC,NSETS,NUMB,LC3)
 1190 NIX=-1
      WRITE (LC3) NIX
      WRITE (LC3) MAPS,(IF1(I),FM(I,4),I=1,MAPS)
      RETURN
      END
C     POSITION FILE FOR READING SET ISET
      SUBROUTINE RTAPE(IA,IREC,ISET,NUMB,LOUT)
      DIMENSION IA(800)
      IF (ISET .GT. IREC) GO TO 10
      IREC = -1
      REWIND LOUT
   10 IREC = IREC+1
      IF (IREC .GE. ISET) GO TO 20
      READ (LOUT)
      GO TO 10
   20 READ (LOUT) I,A,A,A,(IA(K),K=1,NUMB)
      RETURN
      END
C     * * * * * * * * * * * * * * * EXFFT * * * * * * * * * * * * * * *
C     FAST FOURIER TRANSFORM             ALL SPACE GROUPS TREATED AS P1
C     MODIFICATION OF PROGRAM OF L. F. TEN EYCK                MAY 1983
C     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SUBROUTINE EXFFT(IPATH,IMP)
      COMMON /LOCAL/ X(7800)
      COMMON /CONST/ LT,LO,LIN,LSCRA,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NSYM,ICENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      COMMON /BARAM/ NP(3),NUMSET,TWOPI,SCALE,MH(3)
      COMMON /FFTPM/ LEVEL,IT4,XLIM(3),FACTOR
C     KUSER4 = DIMENSION OF X
      KUSER4 = 7800
      KUSER4 = KUSER4 - 1
C     KUSER5 = SPACE AVAILABLE IN SEARCH FOR STORING 3 SECTIONS OF MAP
      KUSER5 = 14600
C     INPUT STRUCTURE FACTORS,  EXPAND TO HEMISPHERE FOR P1 CALCULATION
      CALL INPUT4(KUSER4,KUSER5,IPATH,IMP)
C     PERFORM FOURIER TRANSFORM
      CALL PP1(X,KUSER4)
      RETURN
      END
C     INPUT STRUCTURE FACTORS AND GENERATE A HEMISPHERE OF REFLEXIONS
      SUBROUTINE INPUT4(KUSER4,KUSER5,IPATH,IMP)
      COMMON /LOCAL/ IHKL1(800),IHKL2(800),E(800),IPHAZ(800),CFOM(2000),
     1  IF1(2000),LH(40),LK(40),LL(40),IH1(100),IH2(100),G(2,100),I1(3),
     2  I2(3),KIN1(24),KIN2(24),TAB(450)
      COMMON /CONST/ LT,LO,LIN,LSCRA,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NSYM,NCENT,LATT,KSYS,NORI,PTS,IS(3,3,24),ITS(3,24)
      COMMON /BARAM/ NP(3),NUMSET,TWOPI,SCALE,MH(3)
      COMMON /FFTPM/ LEVEL,IT4,XLIM(3),GRID
      NUMB = 40
      NUMSET = 0
      REWIND LSCRA
      REWIND LIN
      REWIND LO
      WRITE (LT,110) ITLE
  110 FORMAT(1H0,119(1H+)/23H0FAST FOURIER TRANSFORM,78X,19HVERSION  JUN
     1E  1984//20X,40A2)
      IF (IPATH .GT. 4) GO TO 200
C     EXAMINE PHASE SETS IN ORDER OF COMBINED FIGURE OF MERIT (CFOM)
  120 READ (LIN) I
      IF (I .GT. 0) GO TO 120
      READ (LIN) MAPS,(IF1(I),CFOM(I),I=1,MAPS)
      REWIND LIN
      READ (LIN) NUMB,(IHKL1(I),IHKL2(I),E(I),I=1,NUMB)
  140 READ (LIN) NUMSET,ABSFOM,PSIZRO,RESID,(IPHAZ(I),I=1,NUMB)
      IF (NUMSET .NE. IF1(IMP)) GO TO 140
C     POSITION FILE FOR WRITING PEAKS
  150 READ (LIN) I
      IF (I .GT. 0) GO TO 150
      DO 160 I=1,IMP
      READ (LIN)
  160 CONTINUE
      WRITE (LT,190) NUMSET,ABSFOM,PSIZRO,RESID,CFOM(IMP)
  190 FORMAT(/25X,6HNUMSET,7X,7HABS FOM,11X,8HPSI ZERO,11X,5HRESID,11X,
     1  4HCFOM/21X,I8,F15.3,F19.3,F17.2,F15.3)
C     CALCULATE NUMBER OF GRID POINTS FOR FOURIER MAP
  200 FACTOR = GRID
  220 DO 280 I=1,3
      NP(I) = CX(I)/FACTOR + 0.5
  250 IF(I.EQ.3) NP(I)=NP(I)+MOD(NP(I),2)
      IB = NP(I)
      DO 270 J=2,5
  260 IF (IB .NE. (IB/J)*J) GO TO 270
      IB = IB/J
      IF (IB .EQ. 1) GO TO 280
      GO TO 260
  270 CONTINUE
      NP(I)=NP(I)+1
      GO TO 250
  280 CONTINUE
C     MAKE SURE NUMBER OF GRID POINTS IS NOT TOO LARGE
C     IF (2*NP(2)*(MH(3)+1) .GT. KUSER4) GO TO 290
      IF (NP(1)*NP(3) .GT. KUSER4) GO TO 290
      IF (NP(1) .GT. 150) GO TO 290
      IF (3*(NP(1)+2)*(NP(3)+2) .LE. KUSER5) GO TO 300
  290 FACTOR = 1.05*FACTOR
      GO TO 220
C     CALCULATE AND OUTPUT MEAN GRID SPACING
  300 AB = CX(1)*CX(2)*CX(3)/(FLOAT(NP(1)*NP(2))*FLOAT(NP(3)))
      FACTOR = (2.0*FACTOR + AB/FACTOR**2)/3.0
C     MH3 = MAXIMUM ALLOWED MODULUS OF L INDEX
      MH3 = KUSER4/(2*NP(2)) - 1
      TWOPI = 360.0*DTOR
      IF (IMP .GT. 1) GO TO 440
      DO 420 I=1,NSYM
      DO 400 J=1,3
      ITS(J,I) = 10000.0*FLOAT(ITS(J,I))/24.0 + 0.5
  400 CONTINUE
  420 CONTINUE
  440 DO 460 I=1,3
      MH(I) = 0
  460 CONTINUE
      DO 470 I=1,450
      TAB(I)=SIN(FLOAT(I)*DTOR)
  470 CONTINUE
      NEX = 0
      NNN = 0
      SCALE = 0.0
      NBATCH=0
C     IF NUMSET=0 READ FILE FROM NORMAL FOR WEIGHTED OR DIFF FOURIER
  480 IF (NUMSET .EQ. 0) READ (LIN) LH,LK,LL,(E(I),I=1,40),(IPHAZ(I),
     1  I=1,40)
      DO 800 JN=1,NUMB
      IF (NUMSET .EQ. 0) GO TO 500
      IF (IPHAZ(JN) .LE. 0) GO TO 800
      I1(1) = IHKL1(JN)/256
      I1(2) = IHKL1(JN) - 256*I1(1) - 128
      I1(3) = IHKL2(JN)
      GO TO 520
  500 IF (LH(JN) .LT. (-999)) GO TO 820
      I1(1) = LH(JN)
      I1(2) = LK(JN)
      I1(3) = LL(JN)
  520 NNN = NNN + 1
      DO 700 J=1,NSYM
      DO 540 I=1,3
      I2(I) = IS(I,1,J)*I1(1) + IS(I,2,J)*I1(2) + IS(I,3,J)*I1(3)
  540 CONTINUE
      JS=1
      IF(I2(3)) 590,570,600
  570 IF(I2(1)) 590,580,600
  580 IF(I2(2)) 590,600,600
  590 JS = -1
  600 KIN1(J) = JS*(256*I2(3) + I2(2)) + 128
      KIN2(J) = JS*I2(1)
      IF (IABS(I2(3)) .GT. MH3) GO TO 700
      DO 610 I=1,3
      IF(IABS(I2(I)).GE.NP(I)/2) GO TO 700
      IF(I2(I).GT.MH(I)) MH(I)=I2(I)
  610 CONTINUE
      IF(J.EQ.1) GO TO 630
      NU = J-1
      DO 620 I=1,NU
      IF (KIN1(J) .NE. KIN1(I)) GO TO 620
      IF (KIN2(J) .EQ. KIN2(I)) GO TO 700
  620 CONTINUE
  630 NBATCH=NBATCH+1
      NEX=NEX+1
      NU = JS*IPHAZ(JN)
      DO 640 I=1,3
      NU = MOD(NU-JS*I1(I)*IFIX(0.036*FLOAT(ITS(I,J))+0.5), 360)
  640 CONTINUE
      IF (NU .LE. 0) NU = NU + 360
      G(1,NBATCH) = E(JN)*TAB(NU+90)
      G(2,NBATCH) = E(JN)*TAB(NU)
      IH1(NBATCH) = KIN1(J)
      IH2(NBATCH) = KIN2(J)
      SCALE = SCALE + E(JN)
      IF(NBATCH.LT.100) GO TO 700
      WRITE(LO) IH1,IH2,G
      NBATCH=0
  700 CONTINUE
  800 CONTINUE
      IF (NUMSET .EQ. 0) GO TO 480
  820 IH1(NBATCH+1) = -1000
      WRITE (LO) IH1,IH2,G
      SCALE = 3000.0/SCALE
      WRITE (LT,840) FACTOR,SCALE,MH,NP,NNN,NEX
  840 FORMAT(/10X,29HGRID SPACING IS APPROXIMATELY,F6.2,11H  ANGSTROMS,
     1  37X,8HSCALE  =,F8.3//10X,7HMAXIMUM,9X,1HH,9X,1HK,9X,1HL,14X,
     2  21HNUMBER OF GRID POINTS,5X,2HNX,8X,2HNY,8X,2HNZ/10X,7HINDICES,
     3  3I10,18X,14HIN FOURIER MAP,3I10//36X,40HNUMBER OF INDEPENDENT RE
     4FLEXIONS INPUT =,I7/ 36X,40HNUMBER OF REFLEXIONS IN ONE HEMISPHERE
     5 =,I7)
      IF (IT4 .GT. 0) WRITE (LT,880) XLIM,LEVEL
  880 FORMAT(/13X,43HFOURIER MAP TO BE PRINTED FROM X =  0.0  TO,F7.3,
     1  15H,  Y =  0.0  TO,F7.3,15H,  Z =  0.0  TO,F7.3//40X,33HPOINTS U
     2NDERLINED IF GREATER THAN,I5)
      RETURN
      END
      SUBROUTINE CMPLFT (X, Y, NSIZE, N, D)
      REAL X(NSIZE), Y(NSIZE)
      INTEGER D(5),PMAX,PSYM,TWOGRP,FACTOR(15),SYM(15),UNSYM(15)
C
C     COMPLEX FINITE DISCRETE FOURIER TRANSFORM
C     TRANSFORMS ONE DIMENSION OF MULTI-DIMENSIONAL DATA
C     MODIFIED BY L. F. TEN EYCK FROM A ONE-DIMENSIONAL VERSION WRITTEN
C     BY G. T. SANDE, 1969.
C
C     THIS PROGRAM CALCULATES THE TRANSFORM
C       (X(T) + I*Y(T))*(COS(2*PI*T/N) - I*SIN(2*PI*T/N))
C
      P MAX = 5
      TWO GRP = 4
C
      CALL S R FP (N, P MAX, TWO GRP, FACTOR, SYM, P SYM, UN SYM)
      CALL MDFTKD (N, FACTOR, D, X, Y, NSIZE)
      CALL DIPRP (N, SYM, P SYM, UN SYM, D, X, Y, NSIZE)
      RETURN
      END
      SUBROUTINE S R FP (PTS,PMAX,TWO GRP,FACTOR,SYM,P SYM,UN SYM)
C     SYMMETRIZED REORDERING FACTORING PROGRAM
C
      INTEGER PTS,PMAX,TWO GRP,P SYM, FACTOR (10), SYM (10), UN SYM (10)
      INTEGER PP(14), QQ (7), F,P,P TWO,Q,R
      NEST=14
      N=PTS
      P SYM=1
      F=2
      P=0
      Q=0
  100 IF (N.LE.1) GO TO 500
      DO 200 J=F,PMAX
      IF (N.EQ.(N/J)*J) GO TO 300
  200 CONTINUE
      STOP
  300 F=J
      N=N/F
      IF (N.EQ.(N/F)*F) GO TO 400
      Q=Q+1
      QQ(Q)=F
      GO TO 100
  400 N=N/F
      P=P+1
      PP(P)=F
      P SYM=P SYM*F
      GO TO 100
C
  500 R=1
      IF (Q.EQ.0) R=0
      IF (P.LT.1) GO TO 700
      DO 600 J=1,P
      JJ=P+1-J
      SYM(J)=PP(JJ)
      FACTOR(J)=PP(JJ)
      JJ=P+Q+J
      FACTOR(JJ)=PP(J)
      JJ=P+R+J
      SYM(JJ)=PP(J)
  600 CONTINUE
  700 IF (Q.LT.1) GO TO 900
      DO 800 J=1,Q
      JJ=P+J
      UN SYM(J)=QQ(J)
      FACTOR(JJ)=QQ(J)
  800 CONTINUE
      SYM(P+1)=PTS/P SYM**2
  900 JJ=2*P+Q
      FACTOR(JJ+1)=0
      P TWO=1
      J=0
 1000 J=J+1
      IF (FACTOR(J).EQ.0) GO TO 1200
      IF (FACTOR(J).NE.2) GO TO 1000
      P TWO=P TWO*2
      FACTOR(J)=1
      IF (P TWO.GE.TWO GRP) GO TO 1100
      IF (FACTOR(J+1).EQ.2) GO TO 1000
 1100 FACTOR(J)=P TWO
      P TWO=1
      GO TO 1000
 1200 IF (P.EQ.0) R=0
      JJ=2*P+R
      SYM(JJ+1)=0
      IF (Q.LE.1) Q=0
      UN SYM(Q+1)=0
      RETURN
      END
      SUBROUTINE DIPRP (PTS, SYM, P SYM, UN SYM, DIM, X, Y, NSIZE)
C     DOUBLE IN PLACE REORDERING PROGRAM
C
      REAL X(NSIZE), Y(NSIZE)
      INTEGER SYM(10), UN SYM(10), DIM(5), PTS, PSYM, DK, P UN SYM, TEST
      INTEGER SEP, DELTA, P, P0, P1, P2, P3, P4, P5, SIZE
      INTEGER V(14), MODULO(14), S(14), U(14)
      NEST=14
      NT = DIM(1)
      SEP = DIM(2)
      P2 = DIM(3)
      SIZE = DIM(4) - 1
      P4 = DIM(5)
      IF (SYM(1).EQ.0) GO TO 500
      DO 100 J=1,NEST
      U(J)=1
      S(J)=1
  100 CONTINUE
      N=PTS
      DO 200 J=1,NEST
      IF (SYM(J).EQ.0) GO TO 300
      JJ=NEST+1-J
      U(JJ)=N
      N=N/SYM(J)
      S(JJ)=N
  200 CONTINUE
  300 JJ=0
      L=1
      V(1)=1
  310 L=L+1
      V(L)=V(L-1)
  320 IF(L.LT.NEST) GO TO 310
      N=V(NEST)
      JJ=JJ+1
      IF (JJ.GE.N) GO TO 400
      DELTA = (N-JJ)*SEP
      P1 = (JJ-1)*SEP + 1
      DO 350 P0 = P1, NT, P2
      P3 = P0 + SIZE
      DO 350 P = P0, P3, P4
      P5 = P + DELTA
      T = X(P)
      X(P) = X(P5)
      X(P5) = T
      T = Y(P)
      Y(P) = Y(P5)
      Y(P5) = T
  350 CONTINUE
  400 V(L)=V(L)+S(L)
      IF(V(L).LE.U(L)) GO TO 320
      L=L-1
      IF(L.NE.0) GO TO 400
C
  500 IF (UN SYM(1).EQ.0) GO TO 1900
      P UN SYM=PTS/P SYM**2
      MULT=P UN SYM/UN SYM(1)
      TEST=(UN SYM(1)*UN SYM(2)-1)*MULT*P SYM
      LK=MULT
      DK=MULT
      DO 600 K=2,NEST
      IF (UN SYM(K).EQ.0) GO TO 700
      LK=LK*UN SYM(K-1)
      DK=DK/UN SYM(K)
      U(K)=(LK-DK)*P SYM
      MODS=K
  600 CONTINUE
  700 IF (MODS .LT. 3) GO TO 900
      DO 800 J=3,MODS
      JJ=MODS+3-J
      MODULO(JJ)=U(J)
  800 CONTINUE
  900 MODULO(2)=U(2)
      JL=(P UN SYM-3)*P SYM
      MS=P UN SYM*P SYM
C
      DO 1800 J=P SYM,JL,P SYM
      K=J
C
 1000 K=K*MULT
      IF (MODS .LT. 3) GO TO 1200
      DO 1100 I=3,MODS
      K=K-(K/MODULO(I))*MODULO(I)
 1100 CONTINUE
 1200 IF (K.GE.TEST) GO TO 1300
      K=K-(K/MODULO(2))*MODULO(2)
      GO TO 1400
 1300 K=K-(K/MODULO(2))*MODULO(2)+MODULO(2)
 1400 IF (K.LT.J) GO TO 1000
C
      IF (K.EQ.J) GO TO 1800
      DELTA = (K-J)*SEP
      DO 1600 L=1,P SYM
      DO 1500 M=L,PTS,MS
      P1 = (M+J-1)*SEP + 1
      DO 1500 P0 = P1, NT, P2
      P3 = P0 + SIZE
      DO 1500 JJ = P0, P3, P4
      KK = JJ + DELTA
      T=X(JJ)
      X(JJ)=X(KK)
      X(KK)=T
      T=Y(JJ)
      Y(JJ)=Y(KK)
      Y(KK)=T
 1500 CONTINUE
 1600 CONTINUE
 1800 CONTINUE
 1900 RETURN
      END
      SUBROUTINE MDFTKD (N, FACTOR, DIM, X, Y, NSIZE)
C     MULTI-DIMENSIONAL COMPLEX FOURIER TRANSFORM KERNEL DRIVER
C
      INTEGER FACTOR(10), DIM(5), F, P, R, S
      REAL X(NSIZE), Y(NSIZE)
      S = DIM(2)
      F = 0
      M = N
  100 F = F + 1
      P = FACTOR(F)
      IF (P.EQ.0) RETURN
      M = M/P
      R = M*S
      GO TO (100, 200, 300, 400, 500), P
C
  200 CALL R2 CFTK (N, M, X(1), Y(1), X(R+1), Y(R+1), DIM)
      GO TO 100
C
  300 CONTINUE
      CALL R3 CFTK (N, M, X(1), Y(1), X(R+1), Y(R+1), X(2*R+1), Y(2*R+1)
     ., DIM)
      GO TO 100
C
  400 CALL R4 CFTK (N, M, X(1), Y(1), X(R+1), Y(R+1), X(2*R+1), Y(2*R+1)
     ., X(3*R+1), Y(3*R+1), DIM)
      GO TO 100
C
  500 CALL R5 CFTK (N, M, X(1), Y(1), X(R+1), Y(R+1), X(2*R+1), Y(2*R+1)
     ., X(3*R+1), Y(3*R+1), X(4*R+1), Y(4*R+1), DIM)
      GO TO 100
C
      END
      SUBROUTINE R2 CFTK (N, M, X0, Y0, X1, Y1, DIM)
C     RADIX 2 MULTI-DIMENSIONAL COMPLEX FOURIER TRANSFORM KERNEL
C
      INTEGER DIM(5), SIZE, SEP
      REAL X0(10), Y0(10), X1(10), Y1(10), IS, IU
      COMMON /BARAM/ NP(3),NUMSET,TWOPI
      NT = DIM(1)
      SEP = DIM(2)
      L1 = DIM(3)
      SIZE = DIM(4) - 1
      K2 = DIM(5)
      NS = N*SEP
      M2=M*2
      FM2 = FLOAT(M2)
      M OVER 2=M/2+1
      MM2 = SEP*M2
C
      FJM1 = -1.0
      IFOLD = 0
      DO 600 J=1,M OVER 2
      IF (J .GT. 1 .AND. 2*J .LT. M+2) IFOLD = 1
      K0 = (J-1)*SEP + 1
      FJM1 = FJM1 + 1.0
      ANGLE = TWO PI*FJM1/FM2
      IF (J .EQ. 1) GO TO 200
      C=COS(ANGLE)
      S=SIN(ANGLE)
      GO TO 200
  100 IFOLD = 0
      K0 = (M+1-J)*SEP + 1
      C=-C
  200 DO 500 KK = K0, NS, MM2
      DO 440 L = KK, NT, L1
      K1 = L + SIZE
      DO 420 K = L, K1, K2
      RS=X0(K)+X1(K)
      IS=Y0(K)+Y1(K)
      RU=X0(K)-X1(K)
      IU=Y0(K)-Y1(K)
      X0(K)=RS
      Y0(K)=IS
      IF (J .EQ. 1) GO TO 300
      X1(K)=RU*C+IU*S
      Y1(K)=IU*C-RU*S
      GO TO 420
  300 X1(K)=RU
      Y1(K)=IU
  420 CONTINUE
  440 CONTINUE
  500 CONTINUE
      IF (IFOLD .NE. 0) GO TO 100
  600 CONTINUE
      RETURN
      END
      SUBROUTINE R3 CFTK (N, M, X0, Y0, X1, Y1, X2, Y2, DIM)
C     RADIX 3 MULTI-DIMENSIONAL COMPLEX FOURIER TRANSFORM KERNEL
C
      INTEGER DIM(5), SIZE, SEP
      REAL X0(10),Y0(10),X1(10),Y1(10),X2(10),Y2(10), I0,I1,I2,IA,IB,IS
      COMMON /BARAM/ NP(3),NUMSET,TWOPI
      DATA A/-0.5/, B/0.86602540/
C
      NT = DIM(1)
      SEP = DIM(2)
      L1 = DIM(3)
      SIZE = DIM(4) - 1
      K2 = DIM(5)
      NS = N*SEP
      M3=M*3
      FM3 = FLOAT(M3)
      MM3 = SEP*M3
      M OVER 2=M/2+1
C
      FJM1 = -1.0
      IFOLD = 0
      DO 600 J=1,M OVER 2
      IF (J .GT. 1 .AND. 2*J .LT. M+2) IFOLD = 1
      K0 = (J-1)*SEP + 1
      FJM1 = FJM1 + 1.0
      ANGLE = TWO PI*FJM1/FM3
      IF (J .EQ. 1) GO TO 200
      C1=COS(ANGLE)
      S1=SIN(ANGLE)
      C2=C1*C1-S1*S1
      S2=S1*C1+C1*S1
      GO TO 200
  100 IFOLD = 0
      K0 = (M+1-J)*SEP + 1
      T=C1*A+S1*B
      S1=C1*B-S1*A
      C1=T
      T=C2*A-S2*B
      S2=-C2*B-S2*A
      C2=T
  200 DO 500 KK = K0, NS, MM3
      DO 440 L = KK, NT, L1
      K1 = L + SIZE
      DO 420 K = L, K1, K2
      R0=X0(K)
      I0=Y0(K)
      RS=X1(K)+X2(K)
      IS=Y1(K)+Y2(K)
      X0(K)=R0+RS
      Y0(K)=I0+IS
      RA=R0+RS*A
      IA=I0+IS*A
      RB=(X1(K)-X2(K))*B
      IB=(Y1(K)-Y2(K))*B
      IF (J .EQ. 1) GO TO 300
      R1=RA+IB
      I1=IA-RB
      R2=RA-IB
      I2=IA+RB
      X1(K)=R1*C1+I1*S1
      Y1(K)=I1*C1-R1*S1
      X2(K)=R2*C2+I2*S2
      Y2(K)=I2*C2-R2*S2
      GO TO 420
  300 X1(K)=RA+IB
      Y1(K)=IA-RB
      X2(K)=RA-IB
      Y2(K)=IA+RB
  420 CONTINUE
  440 CONTINUE
  500 CONTINUE
      IF (IFOLD .NE. 0) GO TO 100
  600 CONTINUE
      RETURN
      END
      SUBROUTINE R4 CFTK (N, M, X0, Y0, X1, Y1, X2, Y2, X3, Y3, DIM)
C     RADIX 4 MULTI-DIMENSIONAL COMPLEX FOURIER TRANSFORM KERNEL
C
      INTEGER DIM(5), SIZE, SEP
      REAL X0(10),Y0(10),X1(10),Y1(10),X2(10),Y2(10),X3(10),Y3(10)
      REAL I1,I2,I3,IS0,IS1,IU0,IU1
      COMMON /BARAM/ NP(3),NUMSET,TWOPI
      NT = DIM(1)
      SEP = DIM(2)
      L1 = DIM(3)
      SIZE = DIM(4) - 1
      K2 = DIM(5)
      NS = N*SEP
      M4=M*4
      FM4 = FLOAT(M4)
      MM4 = SEP*M4
      M OVER 2=M/2+1
C
      FJM1 = -1.0
      IFOLD = 0
      DO 600 J=1,M OVER 2
      IF (J .GT. 1 .AND. 2*J .LT. M+2) IFOLD = 1
      K0 = (J-1)*SEP + 1
      FJM1 = FJM1 + 1.0
      ANGLE = TWO PI*FJM1/FM4
      IF (J .EQ. 1) GO TO 200
      C1=COS(ANGLE)
      S1=SIN(ANGLE)
      C2=C1*C1-S1*S1
      S2=S1*C1+C1*S1
      C3=C2*C1-S2*S1
      S3=S2*C1+C2*S1
      GO TO 200
  100 IFOLD = 0
      K0 = (M+1-J)*SEP + 1
      T=C1
      C1=S1
      S1=T
      C2=-C2
      T=C3
      C3=-S3
      S3=-T
  200 DO 500 KK = K0, NS, MM4
      DO 440 L = KK, NT, L1
      K1 = L + SIZE
      DO 420 K = L, K1, K2
      RS0=X0(K)+X2(K)
      IS0=Y0(K)+Y2(K)
      RU0=X0(K)-X2(K)
      IU0=Y0(K)-Y2(K)
      RS1=X1(K)+X3(K)
      IS1=Y1(K)+Y3(K)
      RU1=X1(K)-X3(K)
      IU1=Y1(K)-Y3(K)
      X0(K)=RS0+RS1
      Y0(K)=IS0+IS1
      IF (J .EQ. 1) GO TO 300
      R1=RU0+IU1
      I1=IU0-RU1
      R2=RS0-RS1
      I2=IS0-IS1
      R3=RU0-IU1
      I3=IU0+RU1
      X2(K)=R1*C1+I1*S1
      Y2(K)=I1*C1-R1*S1
      X1(K)=R2*C2+I2*S2
      Y1(K)=I2*C2-R2*S2
      X3(K)=R3*C3+I3*S3
      Y3(K)=I3*C3-R3*S3
      GO TO 420
  300 X2(K)=RU0+IU1
      Y2(K)=IU0-RU1
      X1(K)=RS0-RS1
      Y1(K)=IS0-IS1
      X3(K)=RU0-IU1
      Y3(K)=IU0+RU1
  420 CONTINUE
  440 CONTINUE
  500 CONTINUE
      IF (IFOLD .NE. 0) GO TO 100
  600 CONTINUE
      RETURN
      END
      SUBROUTINE R5 CFTK(N,M,X0, Y0, X1, Y1, X2, Y2, X3, Y3, X4, Y4,DIM)
C     RADIX 5 MULTI-DIMENSIONAL COMPLEX FOURIER TRANSFORM KERNEL
C
      INTEGER DIM(5), SIZE, SEP
      REAL X0(10),Y0(10),X1(10),Y1(10),X2(10),Y2(10),X3(10),Y3(10),
     1 X4(10),Y4(10),I0,I1,I2,I3,I4,IA1,IA2,IB1,IB2,IS1,IS2,IU1,IU2
      COMMON /BARAM/ NP(3),NUMSET,TWOPI
      DATA A1/0.30901699/,B1/0.95105652/,A2/-0.80901699/,B2/0.58778525/
      NT = DIM(1)
      SEP = DIM(2)
      L1 = DIM(3)
      SIZE = DIM(4) - 1
      K2 = DIM(5)
      NS = N*SEP
      M5=M*5
      FM5 = FLOAT(M5)
      MM5 = SEP*M5
      M OVER 2=M/2+1
C
      FJM1 = -1.0
      IFOLD = 0
      DO 600 J=1,M OVER 2
      IF (J .GT. 1 .AND. 2*J .LT. M+2) IFOLD = 1
      K0 = (J-1)*SEP + 1
      FJM1 = FJM1 + 1.0
      ANGLE = TWO PI*FJM1/FM5
      IF (J .EQ. 1) GO TO 200
      C1=COS(ANGLE)
      S1=SIN(ANGLE)
      C2=C1*C1-S1*S1
      S2=S1*C1+C1*S1
      C3=C2*C1-S2*S1
      S3=S2*C1+C2*S1
      C4=C2*C2-S2*S2
      S4=S2*C2+C2*S2
      GO TO 200
  100 IFOLD = 0
      K0 = (M+1-J)*SEP + 1
      T=C1*A1+S1*B1
      S1=C1*B1-S1*A1
      C1=T
      T=C2*A2+S2*B2
      S2=C2*B2-S2*A2
      C2=T
      T=C3*A2-S3*B2
      S3=-C3*B2-S3*A2
      C3=T
      T=C4*A1-S4*B1
      S4=-C4*B1-S4*A1
      C4=T
  200 DO 500 KK = K0, NS, MM5
      DO 440 L = KK, NT, L1
      K1 = L + SIZE
      DO 420 K = L, K1, K2
      R0=X0(K)
      I0=Y0(K)
      RS1=X1(K)+X4(K)
      IS1=Y1(K)+Y4(K)
      RU1=X1(K)-X4(K)
      IU1=Y1(K)-Y4(K)
      RS2=X2(K)+X3(K)
      IS2=Y2(K)+Y3(K)
      RU2=X2(K)-X3(K)
      IU2=Y2(K)-Y3(K)
      X0(K)=R0+RS1+RS2
      Y0(K)=I0+IS1+IS2
      RA1=R0+RS1*A1+RS2*A2
      IA1=I0+IS1*A1+IS2*A2
      RA2=R0+RS1*A2+RS2*A1
      IA2=I0+IS1*A2+IS2*A1
      RB1=RU1*B1+RU2*B2
      IB1=IU1*B1+IU2*B2
      RB2=RU1*B2-RU2*B1
      IB2=IU1*B2-IU2*B1
      IF (J .EQ. 1) GO TO 300
      R1=RA1+IB1
      I1=IA1-RB1
      R2=RA2+IB2
      I2=IA2-RB2
      R3=RA2-IB2
      I3=IA2+RB2
      R4=RA1-IB1
      I4=IA1+RB1
      X1(K)=R1*C1+I1*S1
      Y1(K)=I1*C1-R1*S1
      X2(K)=R2*C2+I2*S2
      Y2(K)=I2*C2-R2*S2
      X3(K)=R3*C3+I3*S3
      Y3(K)=I3*C3-R3*S3
      X4(K)=R4*C4+I4*S4
      Y4(K)=I4*C4-R4*S4
      GO TO 420
  300 X1(K)=RA1+IB1
      Y1(K)=IA1-RB1
      X2(K)=RA2+IB2
      Y2(K)=IA2-RB2
      X3(K)=RA2-IB2
      Y3(K)=IA2+RB2
      X4(K)=RA1-IB1
      Y4(K)=IA1+RB1
  420 CONTINUE
  440 CONTINUE
  500 CONTINUE
      IF (IFOLD .NE. 0) GO TO 100
  600 CONTINUE
      RETURN
      END
      SUBROUTINE HERMFT (X, Y, NSIZE, N, DIM)
      REAL X(NSIZE), Y(NSIZE)
      INTEGER DIM(5), D2, D3, D4, D5
C
C     HERMITIAN SYMMETRIC FOURIER TRANSFORM
C
      COMMON /BARAM/ NP(3),NUMSET,TWOPI
      TWO N = FLOAT(2*N)
      NT = DIM(1)
      D2 = DIM(2)
      D3 = DIM(3)
      D4 = DIM(4) - 1
      D5 = DIM(5)
C
      DO 100 I0 = 1, NT, D3
      I1 = I0 + D4
      DO 100 I = I0, I1, D5
      A = X(I)
      B = Y(I)
      X(I) = A + B
      Y(I) = A - B
  100 CONTINUE
C
      N OVER 2 = N/2 + 1
      IF (N OVER 2 .LT. 2) GO TO 500
      DO 400 I0 = 2, N OVER 2
      ANGLE = TWO PI*FLOAT(I0-1)/TWO N
      CO = COS(ANGLE)
      SI = SIN(ANGLE)
      K = (N + 2 - 2*I0)*D2
      K1 = (I0 - 1)*D2 + 1
      DO 300 I1 = K1, NT, D3
      I2 = I1 + D4
      DO 200 I = I1, I2, D5
      J = I + K
      A = X(I) + X(J)
      B = X(I) - X(J)
      C = Y(I) + Y(J)
      D = Y(I) - Y(J)
      E = B*CO + C*SI
      F = B*SI - C*CO
      X(I) = A + F
      X(J) = A - F
      Y(I) = E + D
      Y(J) = E - D
  200 CONTINUE
  300 CONTINUE
  400 CONTINUE
C
      CALL CMPLFT (X, Y, NSIZE, N, DIM)
C
  500 RETURN
      END
      SUBROUTINE PP1 (X, NSIZE)
      REAL X(NSIZE)
      INTEGER  P1, P2, R, SKIP, RECS,  D(5)
      COMMON /CONST/ LT,LO,LIN,LSCRA,DTOR,ITLE(40),CX(6)
      COMMON /BARAM/ NX,NY,NZ,NUMSET,TWOPI,SCALE,MH(3)
      COMMON /FFTPM/ LEVEL,IT4,XLIM(3),FACTOR
C
      P1 = NSIZE/(2*NY*(MH(3) + 1))
      P2 = NSIZE/(NX*NZ)
C
C     PASS ONE. TRANSFORM ON K AND WRITE INTERMEDIATE RESULTS ON LSCRA
C
      R = -MH(1)
  100 IF (R + P1 .GT. MH(1)) P1 = MH(1) + 1 - R
      CALL READ KL(X, NY, MH(3)+1, P1, R)
      D(1) = 2*(NY*P1*(MH(3)+1))
      D(2) = 2
      D(3) = D(1)
      D(4) = D(1)
      D(5) = 2*NY
      CALL CMPLFT (X(1), X(2), NSIZE, NY, D)
      CALL WRITE Y (X, NY, MH(3)+1, P1, P2)
      R = R + P1
      IF (R .LE. MH(1)) GO TO 100
C
C     END OF PASS 1.  PASS 2 READS BACK THE INTERMEDIATE RESULTS,
C     CALCULATES THE TRANSFORMS ON H AND L, AND WRITES OUT THE FINAL
C     Y SECTIONS.
C
      REWIND LO
      REWIND LSCRA
      SKIP = 0
      R = 0
      P1 = NSIZE/(2*NY*(MH(3) + 1))
      RECS = (NY - 1)/P2
  200 IF (R + P2 .GT. NY) P2 = NY - R
      CALL READ HL (X, NX, NZ/2, P2, MH(1), MH(3), P1, SKIP, RECS)
      IF (R + P2 .LT. NY) REWIND LSCRA
      SKIP = SKIP + 1
C
C     X NOW CONTAINS INTERMEDIATE RESULTS STORED WITH L DOWN THE
C     COLUMNS AND H ACROSS THE ROWS.
C
      D(1) = NX*NZ*P2
      D(2) = NZ
      D(3) = NZ*NX
      D(4) = 2*(MH(3) + 1)
      D(5) = 2
      CALL CMPLFT (X(1), X(2), NSIZE, NX, D)
      D(2) = 2
      D(3) = D(1)
      D(4) = D(1)
      D(5) = NZ
      CALL HERMFT (X(1), X(2), NSIZE, NZ/2, D)
      CALL OUTPUT (X, NZ, NX, P2, R, NY)
      R = R + P2
      IF (R .LT. NY) GO TO 200
C
C     END OF JOB
C
      RETURN
      END
      SUBROUTINE READ KL(X, NY, NZ, NX, HS)
      INTEGER HS, H, HM, HL
      COMPLEX X(NY,NZ,NX)
      DIMENSION IH1(100),IH2(100), G(2,100)
      COMMON /CONST/ LT,LO,LIN,LSCRA
      REWIND LO
      HM = NX + HS
      DO 100 H = 1, NX
      DO 100 L = 1, NZ
      DO 100 K = 1, NY
      X(K,L,H) = CMPLX(0.0,0.0)
  100 CONTINUE
  200 READ (LO) IH1,IH2,G
      DO 300 J = 1,100
      IF (IH1(J) .LT. (-999)) GO TO 500
      IF (IH2(J) .LT. HS .OR. IH2(J) .GE. HM) GO TO 300
      H = IH2(J)
      L = IH1(J)/256
      K = IH1(J) - 256*L - 128
      NOKO = 0
      IF (H.EQ.0.AND.L.EQ.0.AND.K.NE.0) NOKO = NY-K+1
      H = H - HS + 1
      IF(K.LT.0)K=NY+K
      K = K + 1
      L = L + 1
      X(K,L,H) = CMPLX(G(1,J),G(2,J))
      IF (NOKO.NE.0) X(NOKO,L,H) = CONJG(X(K,L,H))
  300 CONTINUE
      GO TO 200
  500 RETURN
      END
      SUBROUTINE WRITE Y (X, NY, NZ, NX, SIZE)
      INTEGER SIZE, H, P, Q, R
      COMPLEX X(NY,NZ,NX)
      COMMON /CONST/ LT,LO,LIN,LSCRA
      P = SIZE
      Q = 0
  100 R = Q + 1
      IF (Q + P .GT. NY) P = NY - Q
      Q = Q + P
      WRITE (LSCRA) (((X(K,L,H), H = 1, NX), K = R, Q), L = 1, NZ)
      IF (Q .LT. NY) GO TO 100
      RETURN
      END
      SUBROUTINE READ HL (X, NX, NZ, NY, HMAX, LMAX, SIZE, SKIP, RECS)
      INTEGER HMAX, SIZE, SKIP ,RECS, H, HL, HU, P, Q
      COMPLEX X(NZ,NX,NY)
C
C     READS IN INTERMEDIATE RESULTS FOR ALL H AND L FOR A BLOCK OF K.
C     THE INPUT IS STORED WITH L DOWN THE COLUMNS AND H ON THE ROWS.
      COMMON /CONST/ LT,LO,LIN,LSCRA
      LM = LMAX + 1
      P = SIZE
      HU = NX - HMAX
      IF (SKIP .LE. 0) GO TO 200
      DO 100 Q = 1, SKIP
      READ (LSCRA)
  100 CONTINUE
C
C     READ DATA FOR NEGATIVE H
C
  200 IF (HU + P .GT. NX) GO TO 400
      HL = HU + 1
      HU = HU + P
      READ (LSCRA) (((X(L,H,K), H = HL, HU), K = 1, NY), L = 1, LM)
      IF (RECS .LE. 0) GO TO 200
      DO 300 Q = 1, RECS
      READ (LSCRA)
  300 CONTINUE
      GO TO 200
C
C     GO PICK UP RECORD WHICH SPANS H = 0 IF NECESSARY
C
  400 IF (HU .NE. NX) GO TO 700
      HU = 0
C
C     READ RECORDS FOR POSITIVE H
C
  500 IF (HU + P .GT. HMAX + 1) P = HMAX + 1 - HU
      HL = HU + 1
      HU = HU + P
      READ (LSCRA) (((X(L,H,K), H = HL, HU), K = 1, NY), L = 1, LM)
  550 IF (HU .EQ. HMAX + 1) GO TO 800
      IF (RECS .LE. 0) GO TO 500
      DO 600 Q = 1, RECS
      READ (LSCRA)
  600 CONTINUE
      GO TO 500
C
C     SECTION TO READ A RECORD SPANNING H = 0
C
  700 HL = HU + 1
      HU = HU + P - NX
      IF (HU .GT. HMAX + 1) HU = HMAX + 1
      READ (LSCRA) (((X(L,H,K), H = HL, NX), (X(L,H,K), H = 1, HU),
     .   K = 1, NY), L = 1, LM)
      GO TO 550
C
C     PAD THE ARRAY WITH ZERO WHERE THERE ARE NO DATA, AND FILL IN THE
C     -H K 0 RESULTS BY SYMMETRY.
C
  800 DO 900 H = 2, HU
      HL = NX + 2 - H
      DO 900 K = 1, NY
      X(1,HL,K) = CONJG(X(1,H,K))
  900 CONTINUE
      HL = HMAX + 2
      HU = NX - HMAX
      IF (HU .LT. HL) GO TO 920
      DO 910 L = 1, LM
      DO 910 K = 1, NY
      DO 910 H = HL, HU
      X(L,H,K) = CMPLX(0.0,0.0)
  910 CONTINUE
C
  920 IF (LM .GE. NZ) GO TO 940
      P = LM + 1
      DO 930 K = 1, NY
      DO 930 L = P, NZ
      DO 930 H = 1, NX
      X(L,H,K) = CMPLX(0.0,0.0)
  930 CONTINUE
C
C     END OF INPUT
C
  940 RETURN
      END
      SUBROUTINE OUTPUT (X, NZ, NX, NY, Y, NYT)
      REAL X(NZ,NX,NY)
      INTEGER STAR,BLANK,Y,SEC,XL,XU
      COMMON /CONST/ LT,LO,LIN,LSCRA,DTOR,ITLE(40)
      COMMON /BARAM/ NP(3),NUMSET,TWOPI,SCALE
      COMMON /FFTPM/ LEVEL,IT4,XLIM(3),FACTOR
      DIMENSION INUT(150),LINE(50)
      DATA STAR/2H**/,BLANK/2H    /,NCOL/36/
C
C     PUT OUT SCALED Y-SECTIONS
C
      IF(IT4.EQ.0) GO TO 250
      NXM=MIN0(NX,INT(XLIM(1)*FLOAT(NX))+1)
      NYM=MIN0(NYT,INT(XLIM(2)*FLOAT(NYT))+1)
      NZM=MIN0(NZ,INT(XLIM(3)*FLOAT(NZ))+1)
      ASC=1000.0/FLOAT(NX)
C
  250 DO 900 K = 1, NY
      SEC = Y + K - 1
      DO 350 J=1,NZ
      DO 330 I=1,NX
      XX=X(J,I,K)*SCALE
      X(J,I,K)=XX
      INUT(I)=0
      IF(XX.NE.0.0) INUT(I)=XX+SIGN(0.5,XX)
  330 CONTINUE
      WRITE (LO) (INUT(I),I=1,NX)
  350 CONTINUE
      IF (IT4 .EQ. 0) GO TO 900
      XU = 0
  450 XL = XU + 1
      XU = XU + NCOL
      IF(XU.GT.NXM)XU=NXM
      DO 460 L=XL,XU
      INUT(L)=FLOAT((L-1))*ASC+0.5
  460 CONTINUE
      NEC=1000.*(FLOAT(SEC))/(FLOAT(NYT))+0.5
      WRITE (IT4,480) ITLE,NEC
  480 FORMAT(1H1,7X,20A4,8X,12HSECTION  Y =,I4/)
      WRITE (IT4,500) (INUT(NN),NN=XL,XU,2)
  500 FORMAT(8X,3HX =,I4,17I6)
      ILIM = XL + 1
      WRITE (IT4,520) (INUT(NN),NN=ILIM,XU,2)
  520 FORMAT(12X,18I6)
      WRITE(IT4,530)
  530 FORMAT(1H0)
      DO 700 I = 1,NZM
      LINE(1)=FLOAT((I-1))*1000./FLOAT(NZ)+0.5
      L = 1
      DO 600 J = XL, XU
      L = L + 1
      INUT(L)=BLANK
      XX=X(I,J,K)
      LINE(L)=0
      IF(XX.NE.0.0) LINE(L)=INT(0.1*XX+SIGN(0.5,XX))
      IF (IABS(LINE(L)) .GT. 99) LINE(L) = ISIGN(99,LINE(L))
      IF (10 * LINE(L) .GT. LEVEL) INUT(L) = STAR
  600 CONTINUE
      WRITE (IT4,630) (LINE(J), J = 1, L)
  630 FORMAT(4H Z =,I4,4H *  ,36I3)
      WRITE(IT4,660) (INUT(J),J=2,L)
  660 FORMAT(12X,36(1X,A2))
  700 CONTINUE
      IF(XU.LT.NXM)GO TO 450
      IF(SEC.GE.NYM) IT4=0
  900 CONTINUE
      RETURN
      END
C     * * * * * * * * * * * * * * * SEARCH * * * * * * * * * * * * * * *
C     AUTOMATIC PEAK SEARCH AND INTERPRETATION OF ELECTRON-DENSITY  MAPS
C     VERSION AUGUST 1982         PETER MAIN          UNIVERSITY OF YORK
C     * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * *
      SUBROUTINE SEARCH(NATT,IPATH)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600),LW(600),LR(600),JBOND(3000)
      COMMON /CONST/ LT,LIN,NOUT,LC4,DTOR,ITLE(40),CX(6)
      COMMON /SYMET/ NEQV,ICENT,LATT,NSYM,MLAT,PTS,IS(3,3,24),ITS(3,24),
     1  ITL(12)
      COMMON /BARAM/ NX,NY,NZ,NUMSET,NATM,NAT,NPIC,IDXMAX(3),DM,
     1  DFRG,ALN,T(6),A(6)
      COMMON /SERPM/ ANGMIN,ANGMAX,DMIN,DMAX,DMUT,NPROJ,NPEAK,
     1  NOJOIN,METAL
C     KUSER6 = MAXIMUM NUMBER OF PEAKS TO BE FOUND + 20, ALSO MAXIMUM
C              NUMBER OF PEAKS FOR INTERPRETATION AND DIMENSION OF IXYZ
      KUSER6 = 250
C     KUSER5 = SIZE OF ARRAY NR3D IN PKSRCH FOR STORING 3 SECTIONS OF
C              ELECTRON-DENSITY MAP:           * VALUE SET IN EXFFT *
C     IF TWO PEAKS ARE CLOSER THAN DM THE SMALLER IS ELIMINATED
      DM = 0.85
C     IF TWO CLUSTERS ARE CLOSER TOGETHER THAN DFRG INCLUDE MORE PEAKS
      DFRG = 2.80
C     ALN = NUMBER OF LINES PER INCH ON LINEPRINTER - USED IN PICTUR
      ALN = 6.0
      NATM = NATT
      IF (IPATH .EQ. 6) NPEAK = NATT
      IF (IPATH .EQ. 6) NUMSET = 0
C     OUTPUT HEADINGS AND INITIALISE CONSTANTS
      CALL INPUT1(IHALF,KUSER6-20,AMIN,AMAX)
C     SEARCH MAP FOR PEAK POSITIONS AND RECORD PEAK HEIGHTS
      IF (IPATH .NE. 6) CALL PKSRCH(KUSER6,IHALF)
C     IDENTIFY SEPARATE CLUSTERS OF PEAKS AND RECORD BONDING PATTERNS.
C     FOR EACH CLUSTER OF MORE THAN 4 PEAKS, PLOT PEAKS IN PROJECTION,
C     INTERPRET THEM IN TERMS OF A STEREOCHEMICALLY SENSIBLE MOLECULE.
      CALL PLINCO(AMIN,AMAX)
C     OUTPUT PEAKS HEIGHTS, COORDINATES, INTERPEAK DISTANCES AND ANGLES
      CALL BONGLE
C     OUTPUT INTERCLUSTER BONDS AND DISTANCES
      CALL INCLBO(DMUT,DMAX)
      RETURN
      END
C     OUTPUT HEADINGS AND INITIALISE CONSTANTS
      SUBROUTINE INPUT1(IHALF,KUSER,AMIN,AMAX)
      COMMON /LOCAL/ IXYZ(4,250),C(6)
      COMMON /CONST/ LT,LIN,NOUT,LC4,DTOR,ITLE(40),CELL(6)
      COMMON /SYMET/ NEQV,ICENT,LATT,NSYM,MLAT,PTS,IS(3,3,24),ITS(3,24),
     1  ITL(12)
      COMMON /BARAM/ NX,NY,NZ,NUMSET,NATM,NAT,NPIC,IDXMAX(3),DM,
     1  DFRG,ALN,T(6),A11,A21,A22,A23,A31,A33
      COMMON /SERPM/ ANGMIN,ANGMAX,DMIN,DMAX,DMUT,NPROJ,NPEAK,
     1  NOJOIN,METAL
      DIMENSION ITST(18)
      DATA ITST/0,0,0, 5000,5000,5000, 5000,0,5000, 5000,5000,0,
     1  3333,6667,6667, 6667,3333,3333/
      WRITE (LT,720) ITLE, NUMSET, NATM
  720 FORMAT(1H0,119(1H+)/31H0PEAK SEARCH AND INTERPRETATION,70X,19HVERS
     1ION  JUNE  1984//10X,40A2,9X,7HSET NO.,I3//31X,30HNUMBER OF ATOM
     2S TO BE FOUND IS,I6)
      IF (METAL .GT. 0) WRITE (LT,730) METAL
  730 FORMAT(18X,43HNUMBER OF HEAVY ATOMS IN ASYMMETRIC UNIT IS,I6)
      IF (NPEAK .LE. 0) GO TO 760
      IF (NPEAK .GT. KUSER) NPEAK = KUSER
      NAT = NPEAK
      NPIC = NPEAK
      WRITE (LT,740) NPEAK
  740 FORMAT(26X,35HNUMBER OF PEAKS TO BE CONSIDERED IS,I6)
      GO TO 800
  760 NAT = (11*NATM + 13)/9
      IF (NAT .GT. KUSER) NAT = KUSER
      NPIC = (3*NATM + 1)/2
      IF (NPIC .GT. KUSER) NPIC = KUSER
  800 IF (NOJOIN .GT. 0) GO TO 870
      WRITE (LT,820) DMIN, ANGMIN, DMAX, ANGMAX, DMUT
  820 FORMAT(24H0STEREOCHEMICAL CRITERIA,10X,27HMINIMUM BONDING DISTANCE
     1  =,F6.2,7X,21HMINIMUM BOND ANGLE  =,F6.1/34X,27HMAXIMUM BONDING D
     2ISTANCE  =,F6.2,7X,21HMAXIMUM BOND ANGLE  =,F6.1//18X,
     3  43HINTERATOMIC DISTANCES OUTPUT WHEN LESS THAN,F6.2)
      IF (NPROJ .GT. 0) WRITE (LT,860) NPROJ
  860 FORMAT(11X,53HNUMBER OF PROJECTIONS OF EACH CLUSTER TO BE OUTPUT I
     1S,I3)
C     HALVE Y-AXIS BY C. OF S. OR LATTICE TYPE IF POSSIBLE
  870 IHALF = -ICENT
      IF (IHALF .NE. 0) GO TO 890
      GO TO (890,886,890,886,886,886,890), LATT
  886 IHALF = 1
C     DERIVE FULL SPACE GROUP SYMMETRY - PUT LATTICE POINTS IN ITL
  890 ITST(LATT+2) = 0
      DO 900 I=1,12
      ITL(I) = ITST(I)
  900 CONTINUE
      IF (LATT - 6) 940,910,920
  910 ITL(4) = 0
      GO TO 940
  920 DO 930 I=4,9
      ITL(I) = ITST(I+9)
  930 CONTINUE
  940 IF (NEQV .LE. 1 .OR. IHALF .NE. 0) GO TO 1010
C     HALVE Y-AXIS BY SYMMETRY OP. IF POSSIBLE
      DO 1000 I=2,NEQV
      DO 990 K=1,3
      IF (IS(K,K,I) .EQ. 0) GO TO 1000
      DO 980 J=1,3
      IF (J .NE. K .AND. IS(J,K,I) .NE. 0) GO TO 1000
  980 CONTINUE
  990 CONTINUE
      IF (IS(2,2,I) .EQ. (-1) .AND. ITS(2,I) .EQ. 0) IHALF = -1
      IF (IS(2,2,I) .EQ. 1 .AND. ITS(2,I) .EQ. 5000) IHALF = 1
 1000 CONTINUE
 1010 MLAT = PTS + 0.5
      NSYM=NEQV*(ICENT+1)*MLAT
C     SET UP CONSTANTS
      AMIN = COS(DTOR*ANGMIN)
      AMAX = COS(DTOR*ANGMAX)
C     SET UP MATRIX TO CALCULATE DISTANCES AND ANGLES
      DO 1020 I=1,3
      C(I+3) = COS(DTOR*CELL(I+3))
      C(I) = SQRT(1.0 - C(I+3)**2)
      T(I) = CELL(I)**2
 1020 CONTINUE
      T(4) = CELL(1)*CELL(2)*C(6)
      T(5) = CELL(2)*CELL(3)*C(4)
      T(6) = CELL(3)*CELL(1)*C(5)
      V = CELL(1)*CELL(2)*CELL(3)*SQRT(1.0 - C(4)**2 - C(5)**2 - C(6)**2
     1  + 2.0*C(4)*C(5)*C(6))
      IDXMAX(1) = 10000.0*DM*CELL(2)*CELL(3)*C(1)/V + 0.5
      IDXMAX(2) = 10000.0*DM*CELL(3)*CELL(1)*C(2)/V + 0.5
      IDXMAX(3) = 10000.0*DM*CELL(1)*CELL(2)*C(3)/V + 0.5
C     SET UP ORTHOGONALISATION MATRIX
      COSW = (C(5) - C(6)*C(4))/(C(3)*C(1))
      SINW = SQRT(1.0 - COSW**2)
      A11 = CELL(1)*SINW*C(3)
      A21 = CELL(1)*C(6)
      A22 = CELL(2)
      A23 = CELL(3)*C(4)
      A31 = CELL(1)*COSW*C(3)
      A33 = CELL(3)*C(1)
      RETURN
      END
C     FIND POSITIONS OF PEAKS BY FITTING QUADRATIC FUNCTION TO 19 POINTS
      SUBROUTINE PKSRCH(KUSER1,IHALF)
      COMMON /LOCAL/ IXYZ(4,250),NR3D(14600)
      COMMON /CONST/ LT,LIN,NOUT,LC4
      COMMON /SYMET/ NEQV,ICENT,LATT,NSYM
      COMMON /BARAM/ NNX,NNY,NNZ,NUMSET,NATM,NAT,NPIC,IDXMAX(3),DM
      DIMENSION  IXS(3), X1(3), IX1(3), IDIFF(19), B(19)
      REWIND LIN
C     HALVE Y-AXIS IF POSSIBLE
      NNYOLD=NNY
      IF (IHALF.NE.0) NNY=NNY-NNY/2
      NNXP2 = NNX + 2
      NXZ = NNXP2 * (NNZ + 2)
      NXZ3 = 3 * NXZ
C     INITIALISE CONSTANTS
 1020 DX = 10000.0/FLOAT(NNX)
      DY = 10000.0/FLOAT(NNYOLD)
      DZ = 10000.0/FLOAT(NNZ)
      DMSQ = DM*DM
      LEVEL = 0
      LIMIT = 2*NAT
      IF (LIMIT .GT. KUSER1) LIMIT = KUSER1
C     SET UP TABLE OF OFFSETS TO LOOK UP 19 POINTS IN E-MAP
 1100 IDIFF(1) = -NXZ - 1
      IDIFF(2) = -NXZ - NNXP2
      IDIFF(3) = -NXZ
      IDIFF(4) = -NXZ + NNXP2
      IDIFF(5) = -NXZ + 1
      IDIFF(6) = -NNXP2 - 1
      IDIFF(7) = -1
      IDIFF(8) = NNXP2 - 1
      IDIFF(9) = -NNXP2
      IDIFF(10) = 0
      DO 1120 I=1,9
      IDIFF(20-I) = -IDIFF(I)
 1120 CONTINUE
C     INITIALISE VARIABLES
      NO = 0
      IY = -1
      NY = 0
C     IF (LEVEL .EQ. 0) GO TO 1300
C     REPOSITION FILE TO READ IN FIRST TWO SECTIONS AGAIN
 1200 REWIND LIN
      IF (IY+2.EQ.NNYOLD) GOTO 1400
C     READ IN FIRST SECTION (END OF LAST UNIT CELL)
 1300 MAX = NXZ
      ISKIP = NNZ*(NNYOLD - 1)
      DO 1305 I=1,ISKIP
      READ (LIN)
 1305 CONTINUE
 1310 CALL RDSECT(MAX,NNXP2,NNZ,NXZ3)
      REWIND LIN
C     READ SECOND SECTION (START OF UNIT CELL)
      CALL RDSECT(MAX,NNXP2,NNZ,NXZ3)
C     READ IN THE NEXT SECTION
 1400 MX = MAX - NXZ + NNX + 1
      CALL RDSECT(MAX,NNXP2,NNZ,NXZ3)
      IY = IY + 1
      NY = MOD(NY+2, 3) - 1
      KK = NXZ3
      IF (NY) 1440,1460,1500
 1440 KK = -NXZ3
 1460 DO 1480 I=1,5
      IDIFF(I) = IDIFF(I) - KK
 1480 CONTINUE
      IF (NY .EQ. 0) GO TO 1540
 1500 DO 1520 I=15,19
      IDIFF(I) = IDIFF(I) - KK
 1520 CONTINUE
C     SEARCH ONE SECTION OF THE E-MAP
 1540 DO 2000 IZ=1,NNZ
      MN = MX + 3
      MX = MX + NNXP2
      DO 1980 IX=MN,MX
      IF (NR3D(IX) .LT. LEVEL) GO TO 1980
C     LOCATE GRID POINT WITH MAXIMUM DENSITY
      DO 1560 I=1,9
      J = IDIFF(I) + IX
      IF (NR3D(IX) .LE. NR3D(J)) GO TO 1980
 1560 CONTINUE
      DO 1580 I=11,19
      J = IDIFF(I) + IX
      IF (NR3D(IX) .LT. NR3D(J)) GO TO 1980
 1580 CONTINUE
C     FIT QUADRATIC FUNCTION TO 19 POINTS
C     DENS = A + C*X + D*Y + E*Z - 0.5*F*(X*X + Y*Y + Z*Z)
      DO 1600 I=1,19
      J = IDIFF(I) + IX
      B(I) = NR3D(J)
 1600 CONTINUE
      B1 = B(3) + B(7) + B(9) + B(11) + B(13) + B(17)
      B2 = B(1) + B(2) + B(4) + B(5) + B(6) + B(8) + B(12) + B(14) +
     1  B(15) + B(16) + B(18) + B(19)
      F = (30.0 * B(10) + 11.0 * B1 - 8.0 * B2) / 63.0
      C = (B(5)+B(12)+B(13)+B(14)+B(19)-B(1)-B(6)-B(7)-B(8)-B(15))/10.0
      DELTAX = C / F
      IF (ABS(DELTAX) .GT. 1.0) GO TO 1620
      D = (B(15)+B(16)+B(17)+B(18)+B(19)-B(1)-B(2)-B(3)-B(4)-B(5))/10.0
      DELTAY = D / F
      IF (ABS(DELTAY) .GT. 1.0) GO TO 1620
      E = (B(4)+B(8)+B(11)+B(14)+B(18)-B(2)-B(6)-B(9)-B(12)-B(16))/10.0
      DELTAZ = E / F
      IF (ABS(DELTAZ) .LE. 1.0) GO TO 1640
 1620 DELTAX = 0.0
      DELTAY = 0.0
      DELTAZ = 0.0
 1640 IXX = (FLOAT(IX-MN+1) + DELTAX) * DX + 0.5
      IYY = (FLOAT(IY) + DELTAY) * DY + 0.5
      IZZ = (FLOAT(IZ) + DELTAZ) * DZ + 0.5
C     PEAK HEIGHT INTERPOLATION - NOT SUITABLE IF PEAK SHAPE IS POOR
C     A = (9.0 * B(10) + 4.0 * B1 - B2) / 21.0
C     B(10) = AMAX1(A+0.5*(C*DELTAX+D*DELTAY+E*DELTAZ), B(10))
      IB10 = B(10) + 0.5
      NOP1 = NO+1
      IXYZ(1,NOP1) = IXX
      IXYZ(2,NOP1) = IYY
      IXYZ(3,NOP1) = IZZ
      IXYZ(4,NOP1) = IB10
      IF (NO .EQ. 0) GO TO 1820
      IR=0
C     IF TWO PEAKS ARE CLOSER THAN DM ANGSTROMS ELIMINATE THE SMALLER
      DO 1800 K=1,NSYM
      CALL OPER(K,IXS,NOP1)
      DO 1780 I=1,NO
      DO 1720 L=1,3
      IX1(L) = MOD(IXYZ(L,I)-IXS(L), 10000)
      IX1(L) = MOD(IX1(L)+15000, 10000) - 5000
      IF (IABS(IX1(L)) .GT. IDXMAX(L)) GO TO 1780
      X1(L) = 0.0001*FLOAT(IX1(L))
 1720 CONTINUE
      IF (QUAD(X1,X1) .GT. DMSQ) GO TO 1780
      IF (IR.GT.0) IXYZ(4,IR) = 0
      IR=0
      IF (IB10 .LE. IXYZ(4,I)) GO TO 1980
      IXYZ(1,I) = IXX
      IXYZ(2,I) = IYY
      IXYZ(3,I) = IZZ
      IXYZ(4,I) = IB10
      IR=I
 1780 CONTINUE
 1800 CONTINUE
      IF(IR.GT.0) GO TO 1980
 1820 NO = NOP1
      IF (NO .LT. LIMIT) GO TO 1980
      CALL SORT3(IXYZ,NO,4)
      NO = NPIC
      LEVEL = IXYZ(4,NPIC)
 1980 CONTINUE
 2000 CONTINUE
      IF (IY .GE. NNY) GO TO 2100
      IF (IY - NNYOLD + 2) 1400,1200,1400
C     SORT PEAKS IN ORDER OF PEAK HEIGHT
 2100 CALL SORT3(IXYZ,NO,4)
      IF (NPIC .LE. NO) GO TO 2120
C     INSUFFICIENT PEAKS FOUND - LOWER SCAN LEVEL AND TRY AGAIN
      LEVEL = LEVEL - 100
      IF(LEVEL.GE.(-200)) GO TO 1100
      NPIC=NO
 2120 IF (NPIC .LT. NAT) NAT = NPIC
      RETURN
      END
C     IDENTIFY SEPARATE BONDED CLUSTERS AND SET UP BONDING ARRAY.
C     NPASS DETERMINES PATH THROUGH SUBROUTINE.
C     NPASS = 0 :SET UP ALL CLUSTERS ; NPASS =1 :REDO CLUSTER NOFRAG
      SUBROUTINE CLSTRS(NPASS,DMAX)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600),LW(600),LR(600),JBOND(3000)
      COMMON /SYMET/ NEQV,ICENT,LATT,NSYM
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,NPIC,IDXMAX(3),DM,
     1  DFRG
      DIMENSION   IB(3), IXS(3), X1(3), IXSTOR(3)
      ICHECK=0
      MCON = 0
      DSQMAX = DMAX*DMAX
      IF (NPASS.EQ.0) GOTO 1010
C     INITIALISE ARRAYS TO REDO CLUSTER
      ICHECK = 1
      DO 980 I=1,NAT
      IF (IFRAG(I) .NE. 0 .AND. IFRAG(I) .NE. (-1000)) GO TO 940
      IUSE(I) = 0
      GO TO 980
  940 KS = ICON(I) + 1
      KL = ICON(I+1)
      DO 960 K=KS,KL
      MCON = MCON + 1
      IBOND(MCON) = IBOND(K)
      JBOND(MCON) = I
  960 CONTINUE
  980 CONTINUE
      GOTO 1025
 1000 NAT=NPIC
      MCON = 0
C     CLEAR ARRAYS
 1010 NN=0
      DO 1020 I=1,NAT
      IFRAG(I)=0
      LW(I) = 0
      LR(I) = 0
 1020 CONTINUE
C     APPLY DISTANCE CRITERION TO PEAKS TO IDENTIFY SEPARATE CLUSTERS
C     PEAKS WITHIN DISTANCE DMAX ARE POSSIBLE BONDED PEAKS
      NOFRAG=0
 1025 NATM1=NAT-1
C     START A NEW CLUSTER AT ATOM II
      DO 1180 II=1,NATM1
      IF (IFRAG(II).EQ.(-1000)) GOTO 1030
      IF (ICHECK.EQ.1.OR.IFRAG(II).NE.0) GOTO 1180
      NOFRAG=NOFRAG+1
 1030 ICHECK=0
      IFRAG(II)=NOFRAG
C     KOUNT RECORDS NUMBER OF PEAKS IN PRESENT CLUSTER.
      KOUNT=1
      I=II
      IBEGIN=II
      IF (NPASS.EQ.1) IBEGIN=1
 1040 DO 1140 J=IBEGIN,NAT
C     DO NOT CONSIDER PEAK PAIRS MORE THAN ONCE
      IF (IFRAG(J).LT.0.AND.IFRAG(J).NE.(-1000)) GOTO 1140
      KSYM=0
      DO 1120 K=1,NSYM
C     OMIT THE IDENTITY OPERATION WHEN I & J ARE THE SAME
      IF (I.EQ.J.AND.K.EQ.1) GOTO 1120
C     CALC K'TH SYMM POSITION OF J'TH PEAK & MOVE AS CLOSE
C     TO I'TH PEAK AS POSSIBLE BY LATTICE TRANSLATIONS
      IF(JSYMM(I,J,K,IB,IXS,X1).NE.0) GO TO 1120
C     CALCULATE DISTANCE BETWEEN PEAKS I & J
      DIST=QUAD(X1,X1)
      IF (DIST.GT.DFRG) GOTO 1120
C     PEAK J IS CLOSE TO CLUSTER NOFRAG
      LR(J)=1
C     DO NOT CONSIDER PEAKS OUTSIDE BONDING DISTANCE
C     OR PEAKS LYING ON SYMMETRY ELEMENTS
      IF (DIST .GT. DSQMAX) GO TO 1120
      IF (DIST.LT.0.04) GOTO 1120
C     PEAKS I & J ARE WITHIN BONDING DISTANCE-ADD TO CLUSTER
      IF (IABS(IFRAG(J)) .EQ. NOFRAG) GOTO 1080
      IF (IFRAG(J).EQ.(-1000)) GOTO 1060
C     PEAK J CAN BE MOVED, SO MOVE IT & RECORD SYMM. OP.
      KSYM=K
      DO 1050 L=1,3
      IXSTOR(L) = IXS(L)
 1050 CONTINUE
C     ADD J TO CLUSTER
 1060 IFRAG(J)=NOFRAG
      KOUNT=KOUNT+1
C     IF PEAK MOVED, ADD TO BONDING ARRAY
      IF (KSYM.EQ.K) GOTO 1100
 1080 DO 1090 L=1,3
      IF (IB(L) .NE. 5) GO TO 1095
 1090 CONTINUE
      IF (K .EQ. 1) GO TO 1100
C     CLUSTER NOFRAG BONDS TO ITSELF THROUGH I & J - RECORD IN ISYM
 1095 NN=NN+1
      ISYM1(NN) = I
      IF (J .LT. I) ISYM1(NN) = J
      ISYM2(NN) = I + J - ISYM1(NN)
      GOTO 1120
 1100 IF(I.EQ.J) GO TO 1120
      MCON = MCON + 2
      IBOND(MCON-1) = I
      JBOND(MCON-1) = J
      IBOND(MCON) = J
      JBOND(MCON) = I
 1120 CONTINUE
      IF (KSYM .EQ. 0) GO TO 1140
      DO 1125 L=1,3
      IXYZ(L,J) = IXSTOR(L)
 1125 CONTINUE
C     IF ONE PEAK IN A FRAGMENT MOVES,MOVE ALL THE REST
      IF (NPASS.NE.1.OR.JFRAG(J).EQ.0) GOTO 1140
      DO 1135 K=1,NAT
      IF (K.EQ.J) GOTO 1135
      IF (IFRAG(K).NE.0) GOTO 1135
      IF (JFRAG(K).NE.JFRAG(J)) GOTO 1135
      CALL OPER(KSYM,IXS,K)
      DO 1130 L=1,3
      IXYZ(L,K) = IXS(L)
 1130 CONTINUE
 1135 CONTINUE
 1140 CONTINUE
C     PEAK I HAS BEEN COMPLETELY DEALT WITH
      IFRAG(I)=-IFRAG(I)
C     CHOOSE NEXT PEAK IN CLUSTER
      DO 1160 I=1,NAT
      IF(IFRAG(I).EQ.NOFRAG)GO TO 1040
 1160 CONTINUE
C     CHECK FOR CLOSE APPROACHES BETWEEN CLUSTERS
      IF (NPASS.EQ.1) GOTO 1178
      IF (NAT .EQ. NPIC) GO TO 1178
      DO 1175 I=1,NAT
      IF (KOUNT.LE.4) GO TO 1170
      IF (IABS(IFRAG(I)) .NE. NOFRAG) GO TO 1165
      IF (LW(I) .EQ. 0) GO TO 1170
C     CLUSTERS ARE CLOSE TOGETHER - INCREASE NUMBER OF PEAKS
      GO TO 1000
 1165 IF (LW(I) .EQ. 0) LW(I) = LR(I)
 1170 LR(I) = 0
 1175 CONTINUE
 1178 IF(KOUNT.EQ.1)GO TO 1179
      KFRAG(NOFRAG)=KOUNT
      GOTO 1180
C     SINGLE PEAKS ARE GIVEN A CLUSTER NUMBER OF ZERO
 1179 IFRAG(II)=0
      NOFRAG=NOFRAG-1
      IF (NN .GT. 0 .AND. ISYM1(NN) .EQ. II) NN = NN - 1
 1180 CONTINUE
      DO 1240 I=1,NAT
      IFRAG(I)=IABS(IFRAG(I))
 1240 CONTINUE
C     PUT ENTRIES IN IBOND ARRAY IN ORDER OF PEAK HEIGHT
      IF (NPASS .EQ. 0) NFRAG = NOFRAG
      J = 1
      IF (MCON .EQ. 0) GO TO 1330
      CALL ISORT(IBOND,JBOND,MCON)
      ICON(1) = 0
      DO 1320 I=1,MCON
 1300 IF (JBOND(I) .EQ. J) GO TO 1320
      J = J + 1
      ICON(J) = I - 1
      GO TO 1300
 1320 CONTINUE
 1330 DO 1340 I=J,NAT
      ICON(I+1) = MCON
 1340 CONTINUE
      RETURN
      END
C     IDENTIFY SEPARATE CLUSTERS OF PEAKS AND RECORD BONDING PATTERNS.
C     FOR EACH CLUSTER OF MORE THAN 4 PEAKS, PLOT PEAKS IN PROJECTION,
C     INTERPRET THEM IN TERMS OF A STEREOCHEMICALLY SENSIBLE MOLECULE.
      SUBROUTINE PLINCO(AMIN,AMAX)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600),LW(600),LR(600)
      COMMON /CONST/ LT,LIN,NOUT,LC4
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,MFRAG,IDXMAX(3),DM,
     1  DFRG
      COMMON /SERPM/ ANGMIN,ANGMAX,DMIN,DMAX,DMUT,NPROJ,NPEAK,
     1  NOJOIN
C     ADJUST VALUES OF IDXMAX FOR BOND LENGTH CALCULATION
      DO 1100 I=1,3
      IDXMAX(I) = DFRG*FLOAT(IDXMAX(I))/DM + 0.5
 1100 CONTINUE
      DFRG = DFRG*DFRG
      CALL CLSTRS(0,DMAX)
      IF (ICON(NAT+1) .EQ. 0) NOJOIN = 1
      IF (NOJOIN .NE. 0) RETURN
      DO 1200 I=1,NAT
      IUSE(I) = 0
 1200 CONTINUE
      DO 1600 NOFRG=1,NFRAG
      NOFRAG = NOFRG
      IF (KFRAG(NOFRAG) .LE. 4) GO TO 1600
      IWM = 0
      NINT = 0
      NUMFRG = 100
C     INTERPRETATION OF PEAKS BEGINS WITH PEAK ISTART
C     INTERPRET CLUSTER IN TERMS OF BONDED PEAKS AND ELIMINATE
C     PEAKS WHICH DO NOT FULFIL DISTANCE AND ANGLE CRITERIA
 1240 FOM = 0.0
      ISTART = 0
      CALL INTERP(ISTART,FOMF,AMIN,AMAX)
      IF (ISTART - 1) 1600,1400,1300
C     ACCEPT INTERPRETATION IF FRAGMENT 1 CONTAINS MORE THAN 4 PEAKS.
 1300 IF (LFRAG(1) .LT. 5) GO TO 1240
C     IF MORE THAN 1 FRAGMENT,SHUFFLE THEM AROUND
 1400 IF (MFRAG.LE.1 .OR. NN.EQ.0 .OR. MFRAG.GE.NUMFRG) GO TO 1450
      NUMFRG = MFRAG
      CALL SHFFLE(MAXFRG,DMAX)
      IF (MAXFRG.EQ.0) GOTO 1450
C     REDO CLUSTER
      CALL CLSTRS(1,DMAX)
C     REINTERPRET CLUSTER
      GO TO 1240
 1420 CALL INTERP(ISTART,FOMF,AMIN,AMAX)
C     ACCEPT INTERPRETATION IF FRAGMENT 1 CONTAINS MORE
C     THAN 4 PEAKS AND MORE THAN ONE NEW PEAK IS INCLUDED IN THE
C     INTERPRETATION AND THE SIZE OF THE FRAGMENTS IS SIGNIFICANT.
      IF (ISTART - 1) 1600,1450,1440
 1440 IF (LFRAG(1).GE.5.AND.FOMF*2.0.GT.FOM) GOTO 1450
      ISTART=0
      GOTO 1420
C     PLOT THIS CLUSTER IN THE BEST PROJECTION(S)
 1450 IF (NPROJ.NE.0 .AND. NINT.EQ.0) CALL PICTUR(NPROJ)
      IF (NINT .EQ. 0) NINT = 1
C     OUTPUT BONDING PATTERN AND IDENTIFIED ATOMS
      IF (FOMF .GT. FOM) CALL OUTERP(ISTART,NINT,FOMF,FOM)
      IF (NINT.GT.3) GOTO 1600
      ISTART=0
      GOTO 1420
 1600 CONTINUE
      RETURN
      END
C     INTERPRET CLUSTER IN TERMS OF BONDED PEAKS AND ELIMINATE
C     PEAKS WHICH DO NOT FULFIL DISTANCE AND ANGLE CRITERIA
      SUBROUTINE INTERP(ISTART,FOMF,AMIN,AMAX)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600)
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,MFRAG
      COMMON /SERPM/ ANGMIN,ANGMAX,DMIN,DMAX,DMUT,NPROJ,NPEAK,
     1  NOJOIN,METAL
      DIMENSION X1(3),X2(3)
C     INITIALISE ARRAYS AND VARIABLES
      DO 980 I=1,NAT
      JFRAG(I) = 0
      IF (IFRAG(I) .NE. NOFRAG) GO TO 980
      IF (ISTART .EQ. 0 .AND. IUSE(I) .EQ. 0) ISTART = I
      IF (ISTART .LE. METAL) ISTART = 0
      KS = ICON(I) + 1
      KL = ICON(I+1)
      DO 940 J=KS,KL
      IBOND(J) = IABS(IBOND(J))
      IF (I .EQ. ISTART .AND. IBOND(J) .LE. METAL) ISTART = 0
  940 CONTINUE
  980 CONTINUE
      IF (ISTART.EQ.0) RETURN
      DSQMIN = DMIN*DMIN
      MFRAG=0
C     START INTERPRETATION OF NEW SET OF PEAKS AT PEAK II
      II=ISTART
      IF (METAL.EQ.0) GOTO 1080
      DO 1020 I=1,METAL
      IF (IFRAG(I).NE.NOFRAG) GOTO 1020
      KS=ICON(I)+1
      KL=ICON(I+1)
      IF(KS.GT.KL) GO TO 1010
      DO 1000 K=KS,KL
      J = IBOND(K)
      IF (J .GT. 0) CALL ELIM(J)
 1000 CONTINUE
 1010 CALL ELIM(I)
 1020 CONTINUE
      GOTO 1080
 1040 II=0
 1060 II=II+1
      IF (II .GT. NAT) GO TO 1620
      IF (JFRAG(II) .NE. 0 .OR. IFRAG(II) .NE. NOFRAG) GO TO 1060
      KS = ICON(II) + 1
      KL = ICON(II+1)
      IF (KS .GT. KL) GO TO 1060
      DO 1070 J=KS,KL
      IF (IBOND(J) .GT. 0) GO TO 1080
 1070 CONTINUE
      GO TO 1060
 1080 MFRAG=MFRAG+1
      JFRAG(II)=MFRAG
      LFRAG(MFRAG)=1
      I=II
 1100 KS=ICON(I)+1
      KL=ICON(I+1)
C     APPLY MINIMUM DISTANCE CRITERION TO PEAKS AROUND THE ITH PEAK
      DO 1140 J=KS,KL
      IF (IBOND(J) .LE. 0) GO TO 1140
      JJ = IBOND(J)
      DO 1120 L=1,3
      X1(L) = 0.0001*FLOAT(IXYZ(L,I) - IXYZ(L,JJ))
 1120 CONTINUE
      IF (QUAD(X1,X1) .GE. DSQMIN) GO TO 1140
C     PEAKS I AND JJ ARE TOO CLOSE - ELIMINATE JJ
      IF (JFRAG(JJ) .NE. 0) LFRAG(MFRAG) = LFRAG(MFRAG) - 1
      CALL ELIM(JJ)
 1140 CONTINUE
C     APPLY ANGLE CRITERIA TO PEAKS AROUND THE ITH PEAK
      IF(KS.EQ.KL)GO TO 1480
C     CONSIDER THE ANGLES FRAGMENT - I - ANYTHING
      DO 1360 J=KS,KL
      IF (IBOND(J) .LE. 0) GO TO 1360
      JJ = IBOND(J)
C     FIND A FRAGMENT PEAK
      IF(IABS(JFRAG(JJ)).NE.MFRAG)GO TO 1360
C     SET UP VECTOR JJ - I FOR ANGLE CALCULATION
      DO 1300 L=1,3
      X1(L) = 0.0001*FLOAT(IXYZ(L,JJ) - IXYZ(L,I))
 1300 CONTINUE
      VEC1 = QUAD(X1,X1)
      DO 1340 K=KS,KL
      IF (IBOND(K) .LE. 0) GO TO 1340
      KK = IBOND(K)
      IF(JJ.EQ.KK)GO TO 1340
C     CALCULATE COSINE OF ANGLE BETWEEN PEAKS JJ - I - KK
      DO 1320 L=1,3
      X2(L) = 0.0001*FLOAT(IXYZ(L,KK) - IXYZ(L,I))
 1320 CONTINUE
      COSA = QUAD(X1,X2)/SQRT(VEC1*QUAD(X2,X2))
C     IF ANGLE IS WITHIN LIMITS CONTINUE TESTING
      IF (COSA.GE.AMAX .AND. COSA.LE.AMIN) GO TO 1340
C     ELIMINATE KK IF IT IS NOT IN THE FRAGMENT
      IF(IABS(JFRAG(KK)).NE.MFRAG)GO TO 1330
      LFRAG(MFRAG) = LFRAG(MFRAG) - 1
C     KK IS IN THE FRAGMENT - HAS IT ALREADY BEEN CONSIDERED
      IF(JFRAG(KK).GT.0)GO TO 1330
C     KK HAS ALREADY BEEN FULLY CONSIDERED FOR THE FRAGMENT-ELIMINATE I
      CALL ELIM(I)
      GO TO 1500
 1330 CALL ELIM(KK)
 1340 CONTINUE
 1360 CONTINUE
C     CONSIDER THE ANGLES NONFRAG - I - NONFRAG
      KLM1=KL-1
      DO 1460 J=KS,KLM1
      IF (IBOND(J) .LE. 0) GO TO 1460
      JJ = IBOND(J)
C     FIND A NON-FRAGMENT PEAK
      IF(IABS(JFRAG(JJ)).EQ.MFRAG)GO TO 1460
C     ADD PEAK TO FRAGMENT
      JFRAG(JJ)=MFRAG
      LFRAG(MFRAG)=LFRAG(MFRAG)+1
C     SET UP VECTOR JJ - I FOR ANGLE CALCULATION
      DO 1400 L=1,3
      X1(L) = 0.0001*FLOAT(IXYZ(L,JJ) - IXYZ(L,I))
 1400 CONTINUE
      VEC1 = QUAD(X1,X1)
      JP1=J+1
      DO 1440 K=JP1,KL
      IF (IBOND(K) .LE. 0) GO TO 1440
      KK = IBOND(K)
C     FIND A NON-FRAGMENT PEAK
      IF(IABS(JFRAG(KK)).EQ.MFRAG)GO TO 1440
C     CALCULATE COSINE OF ANGLE BETWEEN PEAKS JJ - I - KK
      DO 1420 L=1,3
      X2(L) = 0.0001*FLOAT(IXYZ(L,KK) - IXYZ(L,I))
 1420 CONTINUE
      COSA = QUAD(X1,X2)/SQRT(VEC1*QUAD(X2,X2))
C     IF ANGLE IS OUTSIDE LIMITS ELIMINATE KK
      IF (COSA.LT.AMAX .OR. COSA.GT.AMIN) CALL ELIM(KK)
 1440 CONTINUE
 1460 CONTINUE
C     SEE IF LAST PEAK CAN JOIN FRAGMENT
 1480 IF (IBOND(KL) .LE. 0) GO TO 1490
      JJ = IBOND(KL)
      IF (JFRAG(JJ) .NE. 0) GO TO 1490
      JFRAG(JJ)=MFRAG
      LFRAG(MFRAG)=LFRAG(MFRAG)+1
C     PEAK I HAS NOW BEEN FULLY CONSIDERED
 1490 JFRAG(I)=-JFRAG(I)
C     FIND LARGEST PEAK IN CLUSTER NOT YET DEALT WITH
 1500 DO 1520 I=1,NAT
      IF(JFRAG(I).EQ.MFRAG)GO TO 1100
 1520 CONTINUE
      IF(LFRAG(MFRAG).GT.1)GO TO 1600
C     SINGLE PEAKS ARE GIVEN A FRAGMENT NUMBER OF ZERO
      JFRAG(II)=0
      MFRAG=MFRAG-1
 1600 IF(II-ISTART)1060,1040,1060
C     INTERPRETATION COMPLETE
 1620 FOMF=0.0
      KKK=0
      DO 1640 I=1,NAT
      JFRAG(I)=IABS(JFRAG(I))
      J=JFRAG(I)
      IF(J.EQ.0.OR.LFRAG(J).LT.4) GO TO 1640
      FOMF=FOMF+ALOG(FLOAT(LFRAG(J)))*FLOAT(IXYZ(4,I))
      IF(IUSE(I).EQ.0) KKK=1
 1640 CONTINUE
      IF(KKK.EQ.0) FOMF=0.0
      IF(IUSE(ISTART).EQ.0)IUSE(ISTART)=1
      RETURN
      END
C     THIS ROUTINE SHUFFLES FRAGMENTS ACCORDING TO THE BONDINGS
C     STORED IN ISYM, ALTERING FRAGMENT NUMBER AS WELL
      SUBROUTINE SHFFLE(MAXFRG,DMAX)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600),LW(600),LR(600)
      COMMON /SYMET/ NEQV,ICENT,LATT,NSYM
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,MFRAG
      DIMENSION IXTEMP(3),ITN(3),IB(3),IXS(3),X1(3)
      MAXFRG=0
      NNN = 0
      DSQMAX = DMAX*DMAX
C     CONSIDER EACH SYMM. OP. IN TURN
      DO 700 K1=1,NN
C     OBTAIN PEAKS IN RELEVANT SYMM OPS AND CLUSTER
      I1 = ISYM1(K1)
      IF (IFRAG(I1) .EQ. NOFRAG) GO TO 50
      NNN = NNN + 1
      ISYM1(NNN) = ISYM1(K1)
      ISYM2(NNN) = ISYM2(K1)
      GO TO 700
   50 I2 = ISYM2(K1)
C     IF SAME FRAGMENT, DISREGARD SYMM. OP.
      IF(JFRAG(I1).EQ.JFRAG(I2)) GOTO 700
C     DETERMINE WHICH FRAGMENT TO MOVE, AND OBTAIN CORRECT
C     SYMMETRY OPERATION TO DO SO,ACCOUNTING FOR SINGLE PEAKS.
  100 JI1=JFRAG(I1)
      JI2=JFRAG(I2)
      IAT = I1
      IOTHER = I2
      IF (JI1.EQ.0) GOTO 300
      IF (JI2.EQ.0) GOTO 200
      IF(LFRAG(JI1).LT.LFRAG(JI2)) GOTO 300
  200 IAT=I2
      IOTHER=I1
  300 JIAT=JFRAG(IAT)
      JOTHER=JFRAG(IOTHER)
C     IDENTIFY ALL PEAKS IN FRAGMENT TO BE MOVED, AND MOVE THEM
      DO 345 K=1,NSYM
      IF(JSYMM(IOTHER,IAT,K,IB,IXS,X1).NE.0) GO TO 345
      IF (QUAD(X1,X1) .LE. DSQMAX) GO TO 347
  345 CONTINUE
  347 DO 350 L=1,3
      IXYZ(L,IAT) = IXS(L)
      ITN(L) = 10000*(IB(L) - 5)
  350 CONTINUE
      JFRAG(IAT)=JOTHER
      IF (JIAT.EQ.0) GOTO 520
      DO 500 K2=1,NAT
      IF (JFRAG(K2).NE.JIAT) GOTO 500
      CALL OPER(K,IXTEMP,K2)
      DO 450 K5=1,3
      IXYZ(K5,K2) = IXTEMP(K5) + ITN(K5)
  450 CONTINUE
      JFRAG(K2)=JOTHER
  500 CONTINUE
C     CORRECT LFRAG ARRAY
      LFRAG(JOTHER)=LFRAG(JOTHER)+LFRAG(JIAT)
      LFRAG(JIAT)=0
      GOTO 550
  520 LFRAG(JOTHER)=LFRAG(JOTHER)+1
  550 IF (LFRAG(JOTHER).GT.MAXFRG) MAXFRG=LFRAG(JOTHER)
C     CLOSE UP LFRAG & JFRAG ARRAYS
      IF (JIAT.EQ.0) GOTO 700
      MFRAG=MFRAG-1
      DO 620 K7=1,MFRAG
      IF (LFRAG(K7).NE.0) GOTO 620
      LFRAG(K7)=LFRAG(K7+1)
      LFRAG(K7+1)=0
  620 CONTINUE
      DO 650 K8=1,NAT
      IF (JFRAG(K8).LT.JIAT) GOTO 650
      JFRAG(K8)=JFRAG(K8)-1
  650 CONTINUE
  700 CONTINUE
      NN = NNN
C     RETURN IF NO SHUFFLING HAS TAKEN PLACE
      IF (MAXFRG.EQ.0) RETURN
C     PUTS IFRAG -VE FOR ALL PEAKS IN CLUSTERS OTHER THAN NOFRAG,
C     ZEROS IFRAG FOR MOVABLE PEAKS, AND PUTS IFRAG=-1000 FOR
C     LARGEST COMBINED FRAGMENT (-VE IFRAG FIXES PEAKS IN CLSTRS)
      DO 900 LOOP=1,MFRAG
      IF (LFRAG(LOOP).NE.MAXFRG) GOTO 900
      GOTO 1000
  900 CONTINUE
 1000 JCOMB=LOOP
      DO 1300 LOOP=1,NAT
      IF (IFRAG(LOOP).EQ.NOFRAG) GOTO 1100
      IFRAG(LOOP)=-IFRAG(LOOP)
      GOTO 1300
 1100 IF (JFRAG(LOOP).EQ.JCOMB) GOTO 1200
      IFRAG(LOOP)=0
      GOTO 1300
 1200 IFRAG(LOOP)=-1000
 1300 CONTINUE
      RETURN
      END
C     PLOT PROJECTION OF CLUSTER FOUND ONTO LEAST SQUARES PLANE
C     PLOT ALSO AN ORTHOGONAL  PROJECTION IF THE ATOMIC OVERLAP IS LARGE
      SUBROUTINE PICTUR(NPROJ)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600),IFMT(240),B(3,3),
     3  V(3,3),SUM(3),IXMAX(3),IXMIN(3),IXB(4,2),XA(4,250)
      COMMON /CONST/ LT,LIN,NOUT,LC4,DTOR,ITLE(40)
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,MFRAG,IDXMAX(3),DM,
     1  DFRG,ALN,T(6),A11,A21,A22,A23,A31,A33
C     DO NOT OUTPUT PICTURES WITH LESS THAN 8 PEAKS
      NUM = KFRAG(NOFRAG)
      IF (NUM .LT. 8) RETURN
C     INITIALISE ARRAYS
      DO 1020 J=1,3
      SUM(J)=0.0
      IXMAX(J) = -32000
      IXMIN(J) =  32000
      DO 1000 I=1,3
      B(I,J)=0.0
 1000 CONTINUE
 1020 CONTINUE
C     CONVERT PEAK COORDINATES TO AN ORTHOGONAL SYSTEM AND SET UP
C     THE MATRIX FOR THE PLANE FITTING CALCULATIONS
      DO 1080 I=1,NAT
      IF(IFRAG(I).NE.NOFRAG)GO TO 1080
      XA(1,I) = FLOAT(IXYZ(1,I))*A11
      XA(2,I) = FLOAT(IXYZ(1,I))*A21 + FLOAT(IXYZ(2,I))*A22 +
     1          FLOAT(IXYZ(3,I))*A23
      XA(3,I) = FLOAT(IXYZ(1,I))*A31 + FLOAT(IXYZ(3,I))*A33
      DO 1060 J=1,3
      SUM(J)=SUM(J)+XA(J,I)
      DO 1040 K=1,3
      B(J,K)=B(J,K)+XA(J,I)*XA(K,I)
 1040 CONTINUE
 1060 CONTINUE
 1080 CONTINUE
      DO 1120 J=1,3
      DO 1100 K=1,3
      B(J,K) = B(J,K) - SUM(J)*SUM(K)/FLOAT(NUM)
 1100 CONTINUE
 1120 CONTINUE
C     CALCULATE EIGENVECTORS AND EIGENVALUES OF MATRIX
      CALL EIGEN(B,V)
C     CONVERT COORDINATES TO AXES GIVEN BY EIGENVECTORS
      K=0
      DO 1180 I=1,NAT
      IF (IFRAG(I).NE.NOFRAG) GOTO 1180
      K=K+1
      IXB(4,K)=I
      DO 1140 J=1,3
      IXB(J,K) = (XA(1,I)*V(1,J)+XA(2,I)*V(2,J)+XA(3,I)*V(3,J))/100.0
      IF (IXB(J,K) .GT. IXMAX(J)) IXMAX(J) = IXB(J,K)
      IF (IXB(J,K) .LT. IXMIN(J)) IXMIN(J) = IXB(J,K)
 1140 CONTINUE
 1180 CONTINUE
C     DETERMINE NUMBER OF PROJECTIONS AND THEIR ORIENTATION
      N1 = 1
      IF (116.0/FLOAT(IXMAX(1)-IXMIN(1)) .GE. 2.0/25.4) N1 = 2
      NPR = NPROJ
      IF (NPROJ .GT. 0) GO TO 1190
      NPR = 1
      IF (B(2,2) .LE. 2.0*B(3,3)) NPR = 2
C     CALCULATE SCALE FACTOR TO FILL PAGE OR GIVE 2.5 CMS/A
 1190 SCALE = AMIN1(116.0/FLOAT(IXMAX(3-N1)-IXMIN(3-N1)),
     1              116.0/FLOAT(IXMAX(4-N1)-IXMIN(4-N1)), 2.5/25.4)
      SCL = 25.4 * SCALE
      DO 1500 K=1,NPR
      N2 = K + 2 - N1
C     SORT PEAKS IN ORDER OF PLOTTING
      CALL SORT3(IXB,NUM,N1)
C     OUTPUT HEADING AND PLOT PEAKS
      WRITE (LT,1220) ITLE,NUMSET,NOFRAG
 1220 FORMAT(/1X,119(1H-)//1X,40A2,13X,7HSET NO.,I3,6X,7HCLUSTER,I3)
      GO TO (1240,1280,1320), K
 1240 WRITE(LT,1260)SCL
 1260 FORMAT(/27X,36HPLOT OF PEAKS ON LEAST SQUARES PLANE,10X,8HSCALE  =
     1,F6.2,7H  CMS/A/)
      GO TO 1360
 1280 WRITE(LT,1300)SCL
 1300 FORMAT(/11X,66HPLOT OF PEAKS ON PLANE ORTHOGONAL TO LEAST AND MOST
     1 SQUARES PLANES,10X,8HSCALE  =,F6.2,7H  CMS/A/)
      GO TO 1360
 1320 WRITE(LT,1340)SCL
 1340 FORMAT(/27X,35HPLOT OF PEAKS ON MOST SQUARES PLANE,10X,8HSCALE  =,
     1  F6.2,7H  CMS/A/)
 1360 CALL PLOT(NUM,N1,N2,SCALE,ALN)
      IF (N1 .EQ. 2 .OR. N2 .EQ. 3) N1 = 3
 1500 CONTINUE
      RETURN
      END
C     PLOT PEAK NUMBERS A COMPLETE LINE AT A TIME AVOIDING OVERLAPS
      SUBROUTINE PLOT(NUM,N1,N2,SCALE,ALN)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600),IFMT(240),B(3,3),
     3  V(3,3),SUM(3),IXMAX(3),IXMIN(3),IXB(4,250),IY(30),NY(30)
      COMMON /CONST/ LT,LIN,NOUT,LC4
      DATA IBEG/1H(/, IBL/2H1X/, IPR/2HI3/, ICM/1H,/, IEND/1H)/
      IFMT(1) = IBEG
      IXB(N1,NUM+1) = IXMAX(N1)
      OFFSET = 0.5*(116.0 - FLOAT(IXMAX(N2) - IXMIN(N2))*SCALE) + 0.5
      IX = 0
      K = 0
      DO 1300 I=1,NUM
      JY = 2*IFIX(SCALE*FLOAT(IXB(N2,I) - IXMIN(N2)) + OFFSET) + 8
C     PUT PEAK IN ORDERED POSITION
      K = K + 1
      IF (K .EQ. 1) GO TO 1020
      DO 1000 J=2,K
      L = K - J + 1
      IF (IY(L) .LE. JY) GO TO 1040
      IY(L+1) = IY(L)
      NY(L+1) = NY(L)
 1000 CONTINUE
 1020 L = 0
 1040 IY(L+1) = JY
      NY(L+1) = IXB(4,I)
      IXREL = 0.1*ALN*SCALE*FLOAT(IXMAX(N1)-IXB(N1,I+1))-FLOAT(IX)+0.5
      IX = IX + IXREL
      IF (IXREL .EQ. 0) GO TO 1300
C     INITIALISE FORMAT ARRAY
 1100 DO 1120 J=1,119
      IFMT(2*J) = IBL
      IFMT(2*J+1) = ICM
 1120 CONTINUE
C     FORMAT FOR LINE - OVERLAPPED PEAKS MOVED IN OPPOSITE DIRECTIONS
      LM = 0
      DO 1200 J=1,K
      L = IY(J) - 4*J
      IF (L .LT. LM) L = LM
 1140 IF (IFMT(L) .NE. IPR) GO TO 1160
      L = L - 2
      GO TO 1140
 1160 IFMT(L) = IPR
      IF (L .GT. LM) LM = L
 1200 CONTINUE
      IFMT(LM+1) = IEND
C     OUTPUT LINE OF PEAKS
      WRITE (LT,IFMT) (NY(J),J=1,K)
      K = 0
C     OUTPUT BLANK LINES AS NECESSARY
      IF (IXREL .LE. 1) GO TO 1300
      DO 1260 J=2,IXREL
      WRITE (LT,1240)
 1240 FORMAT(1X)
 1260 CONTINUE
 1300 CONTINUE
      RETURN
      END
      SUBROUTINE OUTERP(ISTART,NINT,FOMF,FOM)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600),JCON(600),LW(27),JK(27),LR(27),IFMT(62)
      COMMON /CONST/ LT,LIN,NOUT,LC4
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,MFRAG
      INTEGER*2 ITX(8),IFMT,IPRNT,IBLNK,IEND,ICOMMA
      DATA ITX/2H(9,2HH ,2HBO,2HND,2HS ,2HTO,2H,3,2HX,/
      DATA IBL/1H /, ISK/1H*/, IPRNT/2HI4/, IBLNK/2H4X/, ICOMMA/1H,/,
     1  IEND/1H)/
      DO 100 I=1,8
      IFMT(I) = ITX(I)
  100 CONTINUE
      NINT = NINT + 1
      FOM = FOMF
      DO 240 I=1,NAT
      JCON(I) = 0
      IF(IFRAG(I).NE.NOFRAG) GO TO 240
      IF (IUSE(I) .NE. 0) IUSE(I) = 1
      KS = ICON(I) + 1
      KL = ICON(I+1)
      DO 220 J=KS,KL
      IF (IBOND(J) .GT. 0) JCON(I) = JCON(I) + 1
  220 CONTINUE
      IF (JCON(I) .LE. 0) GO TO 240
      LAST = I
      J=JFRAG(I)
      IF(LFRAG(J).LT.4) GO TO 240
      IUSE(I) = -1
  240 CONTINUE
C     DETERMINE RING STRUCTURE
  400 M = 0
      NID = 0
      DO 500 I=1,NAT
      NID = NID + JCON(I)
      IF (JCON(I) .NE. 1) GO TO 500
      M=1
      JCON(I)=0
      KS=ICON(I)+1
      KL=ICON(I+1)
      DO 450 J=KS,KL
      K = IBOND(J)
      IF(K.LE.0) GO TO 450
      IF (JCON(K) .GE. 1) JCON(K) = JCON(K) - 1
  450 CONTINUE
  500 CONTINUE
      IF(M.EQ.1) GO TO 400
      WRITE(LT,650) NOFRAG,ISTART
  650 FORMAT(1H0,119(1H-)/26H0INTERPRETATION OF CLUSTER,I3,27H  STARTING
     1 WITH PEAK NUMBER,I3)
      II = 0
      DO 900 I=1,LAST
      IF (JFRAG(I) .LE. 0) GO TO 900
      II = II + 1
      LW(II) = I
      JFRAG(II) = JFRAG(I)
      IFMT(2*II+8) = ICOMMA
      LR(II) = IBL
      IF (JCON(I) .GE. 2) LR(II) = ISK
      IF (II .LT. 27 .AND. I .LT. LAST) GO TO 900
      IFMT(2*II+8) = IEND
      WRITE (LT,700) (LW(J),J=1,II)
  700 FORMAT(5H0PEAK,7X,27I4)
  720 JJ = 0
      DO 780 J=1,II
      IFMT(2*J+7) = IBLNK
      K = LW(J)
      KS = ICON(K) + 1
      KL = ICON(K+1)
      DO 740 K=KS,KL
      IF (IBOND(K) .GT. 0) GO TO 760
  740 CONTINUE
      GO TO 780
  760 JJ = JJ + 1
      JK(JJ) = IBOND(K)
      IFMT(2*J+7) = IPRNT
      IBOND(K) = -IBOND(K)
  780 CONTINUE
      IF (JJ .EQ. 0) GO TO 800
      WRITE (LT,IFMT) (JK(J),J=1,JJ)
      GO TO 720
  800 IF (NID .GT. 0) WRITE (LT,820) (LR(J),J=1,II)
  820 FORMAT(5H RING,7X,27(3X,A1))
      WRITE (LT,840) (JFRAG(J),J=1,II)
  840 FORMAT(9H FRAGMENT,3X,27I4)
      II = 0
  900 CONTINUE
      WRITE (LT,1580) (LFRAG(I),I=1,MFRAG)
 1580 FORMAT(30H0NO. OF PEAKS IN EACH FRAGMENT,2X,22I4)
      RETURN
      END
C     CALCULATE AND OUTPUT PEAK POSITIONS,BOND LENGTHS AND ANGLES.
      SUBROUTINE BONGLE
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1 LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2 IUSE(600),X1(3),X2(3),IX1(3),LINE1(4,7),ENIL(11),JBND(11),X3(3,2)
      COMMON /CONST/ LT,LIN,NOUT,LC4,DTOR,ITLE(40)
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,MFRAG,IDXMAX(3)
      COMMON /SERPM/ ANGMIN,ANGMAX,DMIN,DMAX,DMUT,NPROJ,NPEAK,
     1  NOJOIN
      DIMENSION JFMT(39)
      DATA JFMT/2H(2,2HI7,2H,2,2HX,,2H3F,2H8.,2H4,,2H3X,1H,,2H3X,1H,,
     1  2H3X,1H,,2H3X,1H,,2H3X,1H,,2H3X,1H,,2H4X,2H,2,2HI7,2H,2,2HX,,
     2  2H3F,2H8.,2H4,,2H3X,1H,,2H3X,1H,,2H3X,1H,,2H3X,1H,,2H3X,1H,,
     3  2H3X,1H)/, IPR/2HI3/, IBL/2H3X/
      DOUT = DMUT*DMUT
      DSQMAX = DMAX*DMAX
C     OUTPUT PEAK HEIGHTS, PEAK COORDINATES AND CLUSTER NUMBERS
      WRITE (LT,900) ITLE
  900 FORMAT(/1X,119(1H-)//1X,40A2,22X,17HPEAK  COORDINATES//
     1  15H   PEAK  HEIGHT,6X,1HX,7X,1HY,7X,1HZ,18H    CLUSTER NUMBER,
     2  9X,12HPEAK  HEIGHT,6X,1HX,7X,1HY,7X,1HZ,18H    CLUSTER NUMBER)
      DO 940 I=1,NAT
      M = MOD(I+1,2) + 1
      IFRAG(I)=IABS(IFRAG(I))
      N = 2*IFRAG(I) + 20*M - 12
      IF (20*M-2 .LT. N) N = 20*M - 2
      JFMT(N) = IPR
      DO 920 J=1,3
      X3(J,M) = 0.0001*FLOAT(IXYZ(J,I))
  920 CONTINUE
      IF (M .EQ. 1) GO TO 940
      M = I - 1
      WRITE (LT,JFMT) M,IXYZ(4,M),(X3(J,1),J=1,3),IFRAG(M),I,IXYZ(4,I),
     1  (X3(J,2),J=1,3),IFRAG(I)
      DO 930 J=1,6
      JFMT(2*J+6) = IBL
      JFMT(2*J+26) = IBL
  930 CONTINUE
  940 CONTINUE
      IF (MOD(NAT,2) .EQ. 1) WRITE (LT,JFMT) NAT,IXYZ(4,NAT),(X3(J,1),
     1  J=1,3),IFRAG(NAT)
      N = NFRAG
      IF (N .GT. 20) N = 20
      WRITE (LT,960) (KFRAG(I),I=1,N)
  960 FORMAT(38H0TOTAL NUMBER OF PEAKS IN EACH CLUSTER,5X,20I3)
      IF (NOJOIN .EQ. 0) GO TO 1000
      WRITE (LT,980)
  980 FORMAT(//45X,34HNOJOIN SPECIFIED OR NO BONDS FOUND)
      STOP
 1000 WRITE(LT,1110) ITLE
 1110 FORMAT(/1X,119(1H-)//1X,40A2,11X,28HTABLE OF INTERPEAK DISTANCES
     1  //4X,16HFROM     TO DIST)
      DO 1260 I=1,NAT
      N=0
      II = 0
      DO 1220 J=1,NAT
      IF(J.EQ.I) GO TO 1170
      DO 1120 K=1,3
      IX1(K) = IXYZ(K,I) - IXYZ(K,J)
      IF (IABS(IX1(K)) .GT. IDXMAX(K)) GO TO 1170
      X1(K) = 0.0001*FLOAT(IX1(K))
 1120 CONTINUE
      D1 = QUAD(X1,X1)
      IF (D1 .GT. DOUT) GO TO 1170
      N=N+1
      JBND(N)=J
      ENIL(N)=SQRT(D1)
 1170 IF (N.LT.11.AND.J.NE.NAT) GO TO 1220
      IF (II.EQ.0.AND.N.GT.0) WRITE(LT,1190) I,(JBND(L),ENIL(L),L=1,N)
 1190 FORMAT(I7,3X,11(I5,F5.2))
      IF (II.NE.0.AND.N.GT.0) WRITE(LT,1210) (JBND(L),ENIL(L),L=1,N)
 1210 FORMAT(10X,11(I5,F5.2))
      N=0
      II = 1
 1220 CONTINUE
 1260 CONTINUE
      WRITE(LT,1300) DMAX
 1300 FORMAT(//16X,81HTABLE OF BOND ANGLES (IN DEGREES) AMONG PEAKS IN A
     1BOVE TABLE CLOSER TOGETHER THAN,F5.2,1HA/)
      N=0
      DO 1500 I=1,NAT
      KS=ICON(I)+1
      KL=ICON(I+1)
      IF(KS.GE.KL) GO TO 1500
      KLM1=KL-1
      DO 1490 J=KS,KLM1
      JJ = IABS(IBOND(J))
      DO 1400 L=1,3
      X1(L) = 0.0001*FLOAT(IXYZ(L,I) - IXYZ(L,JJ))
 1400 CONTINUE
      D1 = QUAD(X1,X1)
      IF (D1 .GT. DSQMAX) GO TO 1490
      JP1=J+1
      DO 1480 K=JP1,KL
      KK = IABS(IBOND(K))
      DO 1410 L=1,3
      X2(L) = 0.0001*FLOAT(IXYZ(L,I) - IXYZ(L,KK))
 1410 CONTINUE
      D2 = QUAD(X2,X2)
      IF (D2 .GT. DSQMAX) GO TO 1480
      COSA = QUAD(X1,X2)/SQRT(D1*D2)
      SINA = SQRT(ABS(1.0 - COSA*COSA))
      N=N+1
      LINE1(1,N)=JJ
      LINE1(2,N)=I
      LINE1(3,N)=KK
      IF (SINA .LE. ABS(COSA)) ARCTAN = SINA*COSA/((COSA*COSA + 0.28*
     1  SINA*SINA)*DTOR)
      IF (SINA .GT. ABS(COSA)) ARCTAN = 90.0 - SINA*COSA/((SINA*SINA +
     1  0.28*COSA*COSA)*DTOR)
      IF (ARCTAN .LT. 0.0) ARCTAN = ARCTAN + 180.0
      LINE1(4,N) = ARCTAN + 0.5
      IF (N.LT.7) GO TO 1480
      WRITE(LT,1470) ((LINE1(L,N),L=1,4),N=1,7)
 1470 FORMAT(1X,7(I5,1H-,I3,1H-,I3,I4))
      N=0
 1480 CONTINUE
 1490 CONTINUE
 1500 CONTINUE
      IF(N.NE.0) WRITE(LT,1470) ((LINE1(L,J),L=1,4),J=1,N)
      RETURN
      END
C     OUTPUT INTERCLUSTER BONDS AND DISTANCES
      SUBROUTINE INCLBO(DMUT,DMAX)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600),
     2  IUSE(600),IB(3),X1(3),X2(3),IXS(3),LINE1(3,3),ENIL1(3,4),
     3  SOF(250)
      COMMON /CONST/ LT,LIN,NOUT,LC4
      COMMON /SYMET/ NEQV,ICENT,LATT,NSYM,MLAT,PTS,IS(3,3,24),ITS(3,24),
     1  ITL(3,4)
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT
      N = -1
      NN = 0
      DOUT = DMUT*DMUT
      DSQMAX = DMAX*DMAX
      DO 1800 I=1,NAT
      SOF(I) = 1.0
      DO 1780 J=I,NAT
      DO 1740 K=1,NSYM
      IF(I.EQ.J.AND.K.EQ.1) GO TO 1740
      IF(JSYMM(I,J,K,IB,IXS,X1).NE.0) GO TO 1740
      JJ = 100*IB(1)+10*IB(2)+IB(3)
      IF (JJ.EQ.555.AND.K.EQ.1) GO TO 1740
      D1 = QUAD(X1,X1)
      IF (D1 .GT. DOUT) GO TO 1740
      IF (D1.LT.0.2.AND.I.EQ.J) SOF(I) = SOF(I) + 1.0
      IF (D1 .GT. DSQMAX .OR. IFRAG(I) .EQ. 0) GO TO 1500
      IF (NN .EQ. 0) GO TO 1400
      IF (ISYM1(NN) .EQ. I .AND. ISYM2(NN) .EQ. J) GO TO 1500
 1400 NN = NN + 1
      ISYM1(NN) = I
      ISYM2(NN) = J
 1500 ISIM = MOD(K-1, NEQV) + 1
      JJ=(K-1)/NEQV
      KK=MOD(JJ,MLAT)+1
      IF (JJ.GE.MLAT) ISIM=-ISIM
      N=N+1
      IF (N.EQ.0) WRITE(LT,1550)
 1550 FORMAT(//33X,53HDISTANCES BETWEEN ATOMS IN DIFFERENT ASYMMETRIC UN
     1ITS//3(5X,35HFROM   TO SYMM  X    Y    Z    DIST))
      IF (N.EQ.0) N = 1
      LINE1(N,1)=I
      LINE1(N,2)=J
      LINE1(N,3)=ISIM
      ENIL1(N,1) = FLOAT(IB(1) - 5) + 0.0001*FLOAT(ITL(1,KK))
      ENIL1(N,2) = FLOAT(IB(2) - 5) + 0.0001*FLOAT(ITL(2,KK))
      ENIL1(N,3) = FLOAT(IB(3) - 5) + 0.0001*FLOAT(ITL(3,KK))
      ENIL1(N,4)=SQRT(D1)
      IF(N.LT.3) GO TO 1740
      WRITE(LT,1710) ((LINE1(N,L),L=1,3),(ENIL1(N,L),L=1,4),N=1,3)
 1710 FORMAT(3(I9,I5,I4,3F5.2,F7.2))
      N=0
 1740 CONTINUE
 1780 CONTINUE
 1800 CONTINUE
      IF(N.GT.0) WRITE(LT,1710) ((LINE1(J,L),L=1,3),
     1  (ENIL1(J,L),L=1,4),J=1,N)
      DO 1850 I=1,NAT
      IF (SOF(I) .GT. 1.5) WRITE (LT,1820) I,SOF(I)
 1820 FORMAT(5H0PEAK,I4,47H  IS ON A SPECIAL POSITION: SITE MULTIPLICITY
     1 =,F4.0)
 1850 CONTINUE
C     WRITE PEAKS TO FILE FOR RECYCLING
      WRITE (NOUT) NUMSET,NAT,((IXYZ(J,I),J=1,3),SOF(I),IUSE(I),I=1,NAT)
      IF (NN .LE. 0) RETURN
      IF (NN .EQ. 1) GO TO 1920
      DO 1900 L=2,NN
      I = ISYM1(L)
      J = ISYM2(L)
      II = IFRAG(I)
      DO 1880 K=2,L
      JJ = ISYM1(L-K+1)
      JJ = IFRAG(JJ)
      IF (JJ .LE. II) GO TO 1890
      ISYM1(L-K+2) = ISYM1(L-K+1)
      ISYM2(L-K+2) = ISYM2(L-K+1)
 1880 CONTINUE
      K = L + 1
 1890 ISYM1(L-K+2) = I
      ISYM2(L-K+2) = J
 1900 CONTINUE
 1920 ISYM1(NN+1) = 0
      K = 1
      II = ISYM1(1)
      II = IFRAG(II)
      DO 1960 I=1,NN
      JJ=II
      II = ISYM1(I+1)
      II = IFRAG(II)
      IF (II .EQ. JJ) GO TO 1960
      WRITE (LT,1940) JJ,(ISYM1(J),ISYM2(J),J=K,I)
 1940 FORMAT(8H0CLUSTER,I3,37H  JOINS TO ITSELF THROUGH PEAK PAIRS ,
     1  8(I5,1H,,I3)/(48X,I5,1H,,I3,I5,1H,,I3,I5,1H,,I3,I5,1H,,I3,I5,
     2  1H,,I3,I5,1H,,I3,I5,1H,,I3,I5,1H,,I3))
      K = I + 1
 1960 CONTINUE
      RETURN
      END
      SUBROUTINE RDSECT(MAX,NNXP2,NNZ,NXZ3)
      COMMON /LOCAL/ IXYZ(4,250),NR3D(14600)
      COMMON /CONST/ LT,LIN,NOUT,LC4
      IF (MAX .GE. NXZ3) MAX = 0
      MX = MAX
      MAX = MAX - 2
      DO 1320 IZ=1,NNZ
      MIN = MAX + 3
      MAX = MAX + NNXP2
      READ (LIN) (NR3D(IX),IX=MIN,MAX)
      NR3D(MAX+1) = NR3D(MIN)
      NR3D(MAX+2) = NR3D(MIN+1)
 1320 CONTINUE
      MIN = MAX + 3
      MAX = MAX + NNXP2 + NNXP2 + 2
      DO 1340 IX=MIN,MAX
      MX = MX + 1
      NR3D(IX) = NR3D(MX)
 1340 CONTINUE
      RETURN
      END
C     COMPUTE EIGENVECTORS AND EIGENVALUES OF REAL SYMMETRIC MATRIX
      SUBROUTINE EIGEN(B,V)
      DIMENSION B(3,3),V(3,3)
      DO 1020 I=1,3
      DO 1000 J=1,3
      V(I,J)=0.0
 1000 CONTINUE
      V(I,I)=1.0
 1020 CONTINUE
 1040 KNT=0
      DO 1500 I=1,2
      IP1=I+1
      DO 1460 J=IP1,3
      IF (ABS(B(I,J)) .LT. 0.00001*B(1,1)) GO TO 1460
      KNT = 1
      TMP = B(I,I) - B(J,J)
      IF (ABS(B(I,J)) .GT. ABS(TMP)) TMP = SIGN(B(I,J), TMP)
      T = B(I,J)/TMP
      G = T/(2.0 + 2.0*T*T)
      SN = 2.0*G/(1.0 + G*G)
      CS = 1.0 - G*SN
      IF (TMP .GE. 0.0) GO TO 1190
C     GET EIGENVALUES IN DESCENDING ORDER
      SN = -CS
      CS = G*(1.0 - SN)
 1190 DO 1200 K=1,3
      TMP = B(I,K)
      B(I,K) = SN*B(J,K) + CS*TMP
      B(J,K) = CS*B(J,K) - SN*TMP
 1200 CONTINUE
      DO 1220 K=1,3
      TMP = B(K,I)
      B(K,I) = SN*B(K,J) + CS*TMP
      B(K,J) = CS*B(K,J) - SN*TMP
      TMP = V(K,I)
      V(K,I) = SN*V(K,J) + CS*TMP
      V(K,J) = CS*V(K,J) - SN*TMP
 1220 CONTINUE
 1460 CONTINUE
 1500 CONTINUE
      IF (KNT .GT. 0) GO TO 1040
      RETURN
      END
C     SORT PEAKS IN ORDER OF PEAK HEIGHT OR IN ORDER OF PLOTTING
      SUBROUTINE SORT3(IX,NAT,N)
      DIMENSION IX(4,250),IT(4)
      INT = NAT
 1020 INT=INT/2
      IF (2*(INT/2) .EQ. INT) INT = INT - 1
      IFIN=NAT-INT
      DO 1200 II=1,IFIN
      I=II
      J=I+INT
      IF(IX(N,I).GE.IX(N,J))GO TO 1200
      DO 1060 K=1,4
      IT(K) = IX(K,J)
 1060 CONTINUE
 1080 DO 1100 K=1,4
      IX(K,J) = IX(K,I)
 1100 CONTINUE
      J=I
      I=I-INT
      IF(I)1140,1140,1120
 1120 IF(IX(N,I).LT.IT(N))GO TO 1080
 1140 DO 1160 K=1,4
      IX(K,J) = IT(K)
 1160 CONTINUE
 1200 CONTINUE
      IF(INT.NE.1)GO TO 1020
      RETURN
      END
C     GENERAL INTEGER SORT ROUTINE
      SUBROUTINE ISORT(N1,N2,M)
      DIMENSION N1(100),N2(100)
      IF (M .LE. 1) RETURN
      INT = M
 1020 INT=INT/2
      IF (2*(INT/2) .EQ. INT) INT = INT - 1
      IFIN=M-INT
      DO 1200 II=1,IFIN
      I=II
      J=I+INT
      IF (N2(I)-N2(J)) 1200,1040,1060
 1040 IF (N1(I) .LE. N1(J)) GO TO 1200
 1060 I2 = N2(J)
      I1 = N1(J)
 1080 N2(J) = N2(I)
      N1(J) = N1(I)
      J=I
      I=I-INT
      IF (I) 1140,1140,1100
 1100 IF (N2(I)-I2) 1140,1120,1080
 1120 IF (N1(I) .GT. I1) GO TO 1080
 1140 N2(J) = I2
      N1(J) = I1
 1200 CONTINUE
      IF(INT.NE.1) GO TO 1020
      RETURN
      END
C     ELIMINATE THE IITH PEAK AND UPDATE THE BONDING ARRAY
      SUBROUTINE ELIM(II)
      COMMON /LOCAL/ IXYZ(4,250),ISYM1(200),ISYM2(200),KFRAG(100),
     1  LFRAG(100),ICON(600),IBOND(3000),IFRAG(600),JFRAG(600)
      JFRAG(II) = 0
      KS = ICON(II)+1
      KL = ICON(II+1)
      IF (KS .GT. KL) RETURN
      DO 20 I=KS,KL
      IF (IBOND(I) .LE. 0) GO TO 20
      J = IBOND(I)
      IBOND(I) = -IBOND(I)
      KB = ICON(J)+1
      KE = ICON(J+1)
      IF (KB .GT. KE) GO TO 20
      DO 10 K=KB,KE
      IF (IBOND(K) .EQ. II) IBOND(K) = -IBOND(K)
   10 CONTINUE
   20 CONTINUE
      RETURN
      END
C     FUNCTION USED IN THE CALCULATION OF DISTANCES AND ANGLES
      FUNCTION QUAD(X1,X2)
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,MFRAG,IDXMAX(3),DM,
     1  DFRG,ALN,T(6)
      DIMENSION X1(3),X2(3)
      QUAD = X1(1)*(T(1)*X2(1) + T(4)*X2(2) + T(6)*X2(3)) +
     1       X1(2)*(T(4)*X2(1) + T(2)*X2(2) + T(5)*X2(3)) +
     2       X1(3)*(T(6)*X2(1) + T(5)*X2(2) + T(3)*X2(3))
      RETURN
      END
C     PERFORM THE KTH SYMMETRY OPERATION ON THE JTH PEAK
C     AND MOVE IT AS CLOSE AS POSSIBLE TO PEAK I BY LATTICE TRANSLATIONS
      FUNCTION JSYMM(I,J,K,IB,IXS,X1)
      COMMON /LOCAL/ IXYZ(4,250)
      COMMON /BARAM/ NN,NFRAG,NOFRAG,NUMSET,NATM,NAT,MFRAG,IDXMAX(3)
      DIMENSION IB(3),IXS(3),X1(3),IX1(3)
      JSYMM = 0
      CALL OPER(K,IXS,J)
      DO 1080 L=1,3
      IX1(L) = MOD(IXYZ(L,I)-IXS(L), 10000)
      IX1(L) = MOD(IX1(L)+15000, 10000) - 5000
      IF (IABS(IX1(L)) .GT. IDXMAX(L)) GO TO 1100
      IB(L) = (IXYZ(L,I)-IXS(L)-IX1(L))/10000 + 5
      IXS(L) = IXYZ(L,I) - IX1(L)
      X1(L) = 0.0001*FLOAT(IX1(L))
 1080 CONTINUE
      RETURN
 1100 JSYMM = 1
      RETURN
      END
C     APPLY J'TH SYMMETRY ELEMENT TO X,Y,Z & PUT RESULT IN XN
      SUBROUTINE OPER(J,IXN,K)
      COMMON /LOCAL/ IXYZ(4,250)
      COMMON/SYMET/NEQV,ICENT,LATT,NSYM,MLAT,PTS,IS(216),ITS(72),ITL(12)
      DIMENSION IXN(3)
      IP = (J - 1)/NEQV
      IND2 = MOD(J-1, NEQV)
      IND1 = 3*IND2
      IND2 = 3*MOD(IP, MLAT)
      JJ = 3*IND1 + 1
      DO 20 L=1,3
      IXN(L) = IXYZ(1,K)*IS(JJ)+IXYZ(2,K)*IS(JJ+1)+IXYZ(3,K)*IS(JJ+2)
      IF (IP.GE.MLAT) IXN(L) = -IXN(L)
      IXN(L) = IXN(L) + ITS(IND1+L) + ITL(IND2+L)
      JJ=JJ+3
   20 CONTINUE
      RETURN
      END
C     TRANSFER PEAKS TO FORMATTED FILE
      SUBROUTINE PEKOUT(MAPS,IPATH)
      COMMON /LOCAL/ IXYZ(3,250),SOF(250),IUSE(250),X(3),LH(40)
      COMMON /CONST/ LC1,LC2,LC3,LC4,DTOR,ITLE(40)
      REWIND LC3
C     POSITION FILE AT PEAK COORDINATES
      IF (IPATH .LT. 5) GO TO 1000
  900 READ (LC3) LH
      DO 920 I=1,40
      IF (LH(I) .LT. (-999)) GO TO 1010
  920 CONTINUE
      GO TO 900
 1000 READ (LC3) I
      IF (I .GT. 0) GO TO 1000
      READ (LC3)
 1010 DO 1120 I=1,MAPS
      READ (LC3) NUMSET,NAT,((IXYZ(J,K),J=1,3),SOF(K),IUSE(K),K=1,NAT)
      WRITE (LC4,1020) ITLE,NUMSET
 1020 FORMAT(2H '/40A2/8H SET NO.,I5,1H')
      DO 1080 J=1,NAT
      IF (IUSE(J) .GE. 0) GO TO 1080
      SOF(J) = 1.0/SOF(J)
      DO 1040 K=1,3
      X(K) = 0.0001*FLOAT(IXYZ(K,J))
 1040 CONTINUE
      WRITE (LC4,1060) X,SOF(J),J
 1060 FORMAT(2H C,4F8.4,I4)
 1080 CONTINUE
      WRITE (LC4,1100)
 1100 FORMAT(4H END)
 1120 CONTINUE
      RETURN
      END
