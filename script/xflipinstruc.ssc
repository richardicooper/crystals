%SCRIPT XFLIPINSTRUC
%%                                                                              
%% Read in a structure from a superflip shelx-type file.                        
%%                                                                              
{R Script version by R. Cooper. Based on the fortran program SXTOCA by          
{R R.O. Gould, The University of Edinburgh, March 1994.                         
{R Slightly modified for use with Superflip                                     
%%                                                                              
%%                                                                              
% VARIABLE CHARACTER CFILE CENTRO CLATYP CUNIT CSFAC CTEM CLAT                  
% VARIABLE CHARACTER SPACEHOOK INSTITLE HKLTITLE SPACEREAD                      
% VARIABLE INTEGER ILATT NSYMS SCOUNT SXF LEND                                  
% VARIABLE LOGICAL SFILERR LCANCEL LCRY SXGETALL LQS SPACETEXT                  
% VARIABLE REAL SUA SUB SUC SUAL SUBE SUGA                                      
% VARIABLE REAL SXX SXY SXZ SXO SXU11 SXU22 WAVE CELLZ                          
% VARIABLE REAL SXU33 SXU23 SXU13 SXU12                                         
% VARIABLE REAL SXOCC CRYOCC SPECOCC                                            
% VARIABLE INTEGER ATOMCOUNT                                                    
%%                                                                              
% EVALUATE SXGETALL = TRUE                                                     
%%                                                                              
%% variables used by the question box below                                     
% VARIABLE CHARACTER QTITLE BUTTOK BUTTXX QLINE1 QLINE2 QLINE3                  
% VARIABLE LOGICAL ANSWER                                                       
%%                                                                              
% EVALUATE LCRY = FALSE                                                         
%%                                                                              
%%                                                                              
%%                                                                              
%%                                                                              
% EVALUATE CFILE = 'SFLIP.INS'                                                  
% TRANSFER '#OPEN SCPD "' // CFILE // '"' TO CRYSTALS                           
%%                                                                              
%%                                                                              
%% SFAC and UNIT cards can be skipped for SUPERFLIP & EDMA                      
%% Find the SFAC and UNIT cards which give respectively, a
%% list of the elements and a list of how many of each element                  
%% is in the unit cell.                                                         
%%                                                                              
%%                                                                              
{I Looking for cell contents.                                                   
%%                                                                              
%%                                                                              
%% STEP1: Store the SFAC and UNIT cards in CSFAC and CUNIT.                     
%%                                                                              
%%                                                                              
%         EVALUATE SFILERR = TRUE                                               
%         EVALUATE LEND = 0                                                     
%         LOOP                                                                  
%           ON ERROR TERMINATE                                                  
%           ON END TERMINATE                                                    
%           EXTRACT NEXT                                                        
%           CLEAR                                                               
%%           EXTRACT TRANSFER COMMAND                                           
%%           EXECUTE SEND                                                       
%           EXTRACT TRANSFER INPUT                                              
%           CLEAR
%           GET NOSTORE NOPROMPT KEYWORD NULLSTRING                             
%           IF CVALUE .EQ. 'SFAC' THEN                                          
{R SFAC card found.                                                             
%% First token is always an element.                                            
%             GET NOSTORE KEYWORD ' ' ' '                                       
%             EVALUATE CSFAC = CSFAC // ' ' // CVALUE                           
%% Second token may be a number or an element or nothing.                       
%             GET NOSTORE NOREMOVE KEYWORD ' ' '0'                              
%             IF CVALUE STARTSWITH '0' .OR. CVALUE STARTSWITH '1' .OR. -        
                  CVALUE STARTSWITH '2' .OR. CVALUE STARTSWITH '3' .OR. -       
                  CVALUE STARTSWITH '4' THEN                                    
%% This is an old-fashioned card with actual sfac details on. Carry on looping. 
%                 EVALUATE LEND = LEND + 1                                      
              ELSE IF CVALUE STARTSWITH '5' .OR. CVALUE STARTSWITH '6' .OR. -   
                  CVALUE STARTSWITH '7' .OR. CVALUE STARTSWITH '8' .OR. -       
                  CVALUE STARTSWITH '9' THEN                                    
%% This is an old-fashioned card with actual sfac details on. Carry on looping. 
%                 EVALUATE LEND = LEND + 1                                      
%             ELSE                                                              
%% This is a new fangled card with all the elements on one line.                
%                 EVALUATE LEND = LEND + 1                                      
%                 GET NOSTORE TEXT ' ' ' '                                      
%                 EVALUATE CSFAC = CSFAC // ' ' // CVALUE                       
%              END IF                                                           
%           END IF                                                              
%           IF CVALUE .EQ. 'UNIT' THEN                                          
{R UNIT card found.                                                             
%              GET NOSTORE TEXT ' ' ' '                                         
%              EVALUATE CUNIT = CVALUE                                          
%              EVALUATE LEND = LEND + 1000                                      
%           END IF                                                              
%           IF LEND .GT. 1000 THEN                                              
%             EVALUATE LOOPEND = LOOPCOUNTER                                    
%           END IF                                                              
%         END LOOP
%         IF LEND .LT. 1001 THEN                                                
{E *** No valid "SFAC and UNIT" card pair found in SHELX file.                  
{E     You must enter your own LIST3 and LIST29.                                
%         ELSE                                                                  
%%                                                                              
%%                                                                              
%% Extract SFAC and UNIT info to a COMPOSITION card.                            
%%                                                                              
%%                                                                              
%   TRANSFER 'CSFAC: ' // CSFAC TO DISPLAY                                      
%   TRANSFER 'CUNIT: ' // CUNIT TO DISPLAY
%%
%% This routine uses the new TRANSFER TO INPUT code to copy
%% a character string to the users input buffer, the string
%% can then be picked apart one keyword at a time. This bit
%% of code copies CSFAC to the input, gets a keyword (ie. 'C'),
%% gets the rest of the text and puts it back into CSFAC. It
%% then does the same for CUNIT, and loops until the character
%% strings are exhausted.
%%
%          COPY '#COMPOSIT'
%          CLEAR
%           INSERT 'CONTE '
%%
%           LOOP
%%
%             TRANSFER CSFAC TO INPUT
%             GET KEYWORD 'SFAC1' ' '
%             EVALUATE CTEM = CVALUE
%%%     TRANSFER 'CSFAC, READ: ' // CVALUE TO DISPLAY
%%
%             GET NOSTORE NOPROMPT TEXT 'Rest of line' ' '
%             EVALUATE CSFAC = CVALUE
%%
%             IF CSFAC .EQ. ' ' THEN
%               EVALUATE LOOPEND = LOOPCOUNTER
%             END IF
%%
%% There seems to be a bug in the script processor, whereby if
%% we read the last thing on a line with a GET KEYWORD, you can
%% then read it again with a GET TEXT. This works around it, by
%% spotting that the same thing has been read twice:
%%
%             IF CSFAC .EQ. CTEM THEN
%               EVALUATE LOOPEND = LOOPCOUNTER
%             END IF
%%
%             IF CTEM .EQ. ' ' THEN
%               EVALUATE LOOPEND = LOOPCOUNTER
%             ELSE
%%%% TRANSFER 'CSFAC is now ' // CSFAC TO DISPLAY
%%
%               TRANSFER CUNIT TO INPUT
%               GET NOPROMPT KEYWORD ' '
%               EVALUATE CTEM = CVALUE
%%%% TRANSFER 'CUNIT, READ: ' // CVALUE TO DISPLAY
%%
%               GET NOSTORE NOPROMPT TEXT 'Rest of line' ' '
%               EVALUATE CUNIT = CVALUE
%%
%               IF CUNIT .EQ. ' ' THEN
%                 EVALUATE LOOPEND = LOOPCOUNTER
%               END IF
%%
%               IF CTEM .EQ. ' ' THEN
%                 EVALUATE LOOPEND = LOOPCOUNTER
%               ELSE
%%%%% TRANSFER 'CUNIT is now ' // CUNIT TO DISPLAY
%               END IF
%             END IF
%           END LOOP
%           SEND
%           OUTPUT
%           COPY 'SCATT CRYSDIR:script/scatt.dat'
%           COPY 'PROPERTIES CRYSDIR:script/propwin.dat'
%           COPY 'END'
%%
%% Now, experience shows that the SCPDATA file is closed and
%% used for something else during the #COMPOSITION command.
%% We must reopen it before continuing.
%%
%           TRANSFER '#OPEN SCPDATA "' // CFILE // '"' TO CRYSTALS
%         END IF
%         EXTRACT REWIND
%%
%%
%%
%%
%% Now, experience shows that the SCPDATA file is closed and
%% used for something else during the #COMPOSITION command.
%% We must reopen it before continuing.
%%
%           TRANSFER '#OPEN SCPDATA "' // CFILE // '"' TO CRYSTALS
%         EXTRACT REWIND
%%
%%
%% Finally, find the atoms and peaks.
%% Assume all lines not beginning with a recognised SHELX keyword
%% are atom records. This causes failure for files with reflections
%% in, though I'm sure someone could fix this by making it stop
%% at an HKLF instruction.
%%
%        COPY '#SCRIPT ZSHELXIN'
{R Shelx file processed.
%        COPY '#CLOSE SCPDATA'
%        IF ( ATOMCOUNT .EQ. 0 ) THEN
{I No atoms found
%          FINISH
%        ELSE
%          BLOCK
%            IF LQS .EQ. TRUE THEN
%              EVALUATE QTITLE = 'Change Q atoms?'                              
%              EVALUATE QLINE1 = 'Do you want to change all Q'                  
%              EVALUATE QLINE2 = 'atoms to Carbon?'                             
%              EVALUATE BUTTOK = '&Yes'                                         
%              EVALUATE BUTTXX = '&No'                                          
%              COPY '#SCRIPT XQUESTIO'                                          
%              IF ANSWER .EQ. TRUE THEN                                         
%               COPY '#EDIT'                                                    
%               COPY 'TYPECHANGE TYPE EQ Q C'                                   
%               COPY 'END'                                                      
%              END IF                                                           
%            END IF                                                             
%%
%          END BLOCK                                                            
%%                                                                              
%%                                                                              
%          BLOCK                                                                
%% Set scale factor                                                             
%              IF ( EXISTS ( 30 ) .EQ. 1 ) THEN                                 
%                   VARIABLE REAL SCALEO SCALEW                                 
%                   COPY '#GENERALEDIT 30'                                      
%                   COPY 'LOCATE RECORDTYPE = 101'                              
%                   COPY 'TRANSFER FROM OFFSET =  7 TO SCALEO'                  
%                   COPY 'END'                                                  
%                   EVALUATE SCALEW = SQRT ( 1. / SCALEO )                      
%                   if scalew .le. 0.05 then                                    
%                     evaluate scalew = 1.0                                     
%                   end if                                                      
%% SET Solution type                                                            
%                   COPY 'LOCATE RECORDTYPE=106'                                
%                   COPY 'CHANGE OFFSET=12 MODE=INTEGER INTEGER=1'              
%                   COPY 'WRITE'                                                
%                   COPY 'END'                                                  
%              END IF                                                           
Writing Wilson Scale to LIST 5                                                  
%              IF ( EXISTS ( 5 ) .EQ. 1 ) THEN                                  
%                    COPY '#GENERALEDIT 5'                                      
%                    COPY 'LOCATE RECORDTYPE=102'                               
%                    COPY 'TRANSFER TO OFFSET=1 FROM SCALEW'                    
%                    COPY 'WRITE OVERWRITE=OVERWRITE'                           
%                    COPY 'END'                                                 
%              END IF                                                           
%%                                                                              
%          END BLOCK                                                            
%%                                                                              
%        END IF                                                                 
%        FINISH                                                                 
%END SCRIPT
