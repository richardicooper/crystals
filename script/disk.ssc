%SCRIPT DISK
% VARIABLE LOGICAL SCRIPTEXT
% IF SCRIPTEXT .EQ. TRUE THEN
 
  The file *.dsc is a binary data base which accumulates data for a given
  structure analysis. It cannot be printed or edited directly. In it,data
  is stored in logical groups called LISTS, each with an identifying TYPE
  and SERIAL number. A single copy is kept of most LISTS, new versions
  over-writing old ones. An important excepion is LIST 5, the atom
  coordinates.
  The newest version of a LIST is normally active. A previous version can
  be made active with RESET, if it exists.
  The .dsc file grows automatically for small lists. For large lists,
  like the normal matrix (LIST 11) the .dsc file must be extended by hand
  or unlimited extension enabled. The .dsc file cannot be shortened, but
  unused space within it can be recovered with PURGE.
  In the event of user error (eg operating on a non existant LIST, this
  SCRIPT is abandoned
  Do not use .dsc files as a form of archiving. They are machine specific
 
%   COPY '#PAUSE 10'
% ELSE
A SCRIPT to help with management of the DSC file
% END IF
%VARIABLE INTEGER STATUS SERIAL LIST
%VARIABLE INTEGER DTEMP
%  ON ERROR TERMINATE ABANDONED
%  COPY '#DISK'
%  LOOP
%  CLEAR
%  VERIFY BACK HELP INDEX ACTIVE FULL EXTEND RESET STATUS PURGE NEW
%    GET NOSTORE FINAL ABBREVIATED 'Which DISK operation?' 'HELP'
%    CASE VALUE
%      BLOCK                                                   %BACK%
%%       FORCE AN EXIT FROM THE LOOP
%        EVALUATE LOOPEND = LOOPCOUNTER
%      END BLOCK
%%
%      BLOCK                                                   %HELP%
        This script helps you manage the disk file
      BACK        End this script
      HELP        Display this help text
      INDEX       List the possible CRYSTALS LISTS
      ACTIVE      List the currently active list serial numbers
      FULL        List the full disk index
      EXTEND      Extend the disk file for subsequent calculation
      RESET       Reset to a previous list. Do FULL first to check lists
      STATUS      Set the retain/delete status for future PURGEs.
      PURGE       Purge obsolete or deletable lists (Also exits from SCRIPT)
      NEW         Copy active lists to a new disk file, .NEW
%      END BLOCK
%%
%      BLOCK                                                     %INDEX%
%        COPY '#TYPE CRMAN:LISTS.IND'
%      END BLOCK
%%
%     BLOCK                                                      %ACTIVE%
%       COPY 'PRINT'
%     END BLOCK
%%
%     BLOCK                                                      %FULL%
%       COPY 'PRINT DISK'
%     END BLOCK
%%
%     BLOCK                                                      %EXTEND%
You can extend the disk by a specified number of records, or by
specifying 0, permit CRYSTALS to take whatever it needs.
%       GET NOSTORE FINAL INTEGER 'Extend size, in records' '0'
%       EVALUATE DTEMP = VALUE
%       IF DTEMP .EQ. 0 THEN
%         COPY 'EXTEND SIZE = 0'
%       ELSE
%         CLEAR
%         INSERT 'EXTEND FREE = '
%         STORE INTEGER DTEMP
%         SEND
%       END IF
%     END BLOCK
%%
%     BLOCK                                                      %RESET%
%       CLEAR
Reset to a non-active version of a list. You should have noted its serial
number during a FULL listsing. A serial of -1 resets to previous version
%       LOOP
%VERIFY END HELP CELL SYMMETRY SCATTER WEIGHTING ATOMS REFLECTIONS -
        PEAKS MATRIX VARIABLES DIFFRACTION SECTION RESTRAINTS SFCONTROL -
        DATASCALE OMIT ELEMENTS
%         GET FINAL ABBREVIATED -
          'Reset which list? ' 'HELP'
%         CASE VALUE RANGE 1 3
%           BLOCK                                               %END%
%%            FORCE AN EXIT FROM THE LOOP
%             EVALUATE LOOPEND = LOOPCOUNTER
%           END BLOCK
%%
%           BLOCK                                               %HELP%
      CELL         LIST  1  Cell parameters
      SYMMETRY     LIST  2  Symmetry operators
      SCATTER      LIST  3  Scattering factors
      WEIGHTING    LIST  4  Weighting scheme for least squares
      ATOMS        LIST  5  Atomic parameters and overall parameters
      REFLECTIONS  LIST  6  Reflection data
      PEAKS        LIST 10  Results from peak search
      MATRIX       LIST 11  Least squares matrix
      VARIABLES    LIST 12  Definition of refinable parameters
      DIFFRACTION  LIST 13  Description of data collection
      SECTION      LIST 14  Assymetric section for Fourier maps
      RESTRAINTS   LIST 16  Restraints applied during least squares
      SFCONTROL    LIST 23  Modifications applied to structure factors etc.
      DATASCALE    LIST 27  Scale factors for raw data
      OMIT         LIST 28  Conditions for excluding reflections
      ELEMENTS     LIST 29  Elemental properties
%           END BLOCK
%%
%           BLOCK                                            %RESET LIST%
%         INDEX LIST ( VALUE - 2 ) 1 2 3 4 5 6 10 11 12 13 14 16 23 27 28 29
%             CLEAR
%             INSERT 'RESET  LIST = '
%             STORE INTEGER LIST
%             GET NOSTORE FINAL INTEGER 'Serial number ' '-1'
%             EVALUATE SERIAL = VALUE
%             IF SERIAL .LE. 0 THEN
%                  INSERT ' 0 -1 '
%             ELSE
%                  STORE INTEGER SERIAL
%             END IF
%             SEND
%           END BLOCK
%         END CASE
%       END LOOP
%     END BLOCK
%%
%%
%     BLOCK                                                      %STATUS%
%       CLEAR
The retain or delete status of a list controls it preservation or
elimination during a PURGE.
%       VERIFY RETAIN DELETE
%       GET NOSTORE FINAL VERIFIED 'Retain or delete lists?' 'RETAIN'
%       EVALUATE STATUS = VALUE
%       LOOP
%VERIFY END HELP CELL SYMMETRY SCATTER WEIGHTING ATOMS REFLECTIONS -
        PEAKS MATRIX VARIABLES DIFFRACTION SECTION RESTRAINTS SFCONTROL -
        DATASCALE OMIT ELEMENTS
%         GET FINAL ABBREVIATED -
          'Set the STATUS of which lists? ' 'HELP'
%         CASE VALUE RANGE 1 3
%           BLOCK                                               %END%
%%            FORCE AN EXIT FROM THE LOOP
%             EVALUATE LOOPEND = LOOPCOUNTER
%           END BLOCK
%%
%           BLOCK                                               %HELP%
      CELL         LIST  1  Cell parameters
      SYMMETRY     LIST  2  Symmetry operators
      SCATTER      LIST  3  Scattering factors
      WEIGHTING    LIST  4  Weighting scheme for least squares
      ATOMS        LIST  5  Atomic parameters and overall parameters
      REFLECTIONS  LIST  6  Reflection data
      PEAKS        LIST 10  Results from peak search
      MATRIX       LIST 11  Least squares matrix
      VARIABLES    LIST 12  Definition of refinable parameters
      DIFFRACTION  LIST 13  Description of data collection
      SECTION      LIST 14  Assymetric section for Fourier maps
      RESTRAINTS   LIST 16  Restraints applied during least squares
      SFCONTROL    LIST 23  Modifications applied to structure factors etc.
      DATASCALE    LIST 27  Scale factors for raw data
      OMIT         LIST 28  Conditions for excluding reflections
      ELEMENTS     LIST 29  Elemental properties
%           END BLOCK
%%
%           BLOCK                                     %STATUS OF LIST%
%         INDEX LIST ( VALUE - 2 ) 1 2 3 4 5 6 10 11 12 13 14 16 23 27 28 29
%             CLEAR
%             IF STATUS .NE. 2 THEN
%               INSERT 'RETAIN  LIST = '
%             ELSE
%               INSERT 'DELETE LIST = '
%             END IF
%             STORE INTEGER LIST
%             SEND
%           END BLOCK
%         END CASE
%       END LOOP
%     END BLOCK
%%
%%
%     BLOCK                                                      %PURGE%
%       CLEAR
Purging the disk file.
%       VERIFY YES NO
%       GET NOSTORE FINAL ABBREVIATED 'Are you sure?' 'YES'
%       IF VALUE .EQ. 1 THEN
%          COPY '#PURGE'
%          COPY 'END'
%          FINISH
%       END IF
%     END BLOCK
%%
%     BLOCK                                                      %NEW%
%       CLEAR
Purging the disk file.
%       VERIFY YES NO
%       GET NOSTORE FINAL ABBREVIATED 'Are you sure?' 'YES'
%       IF VALUE .EQ. 1 THEN
%          COPY '#PURGE NEW'
%          COPY 'END'
%          FINISH
%       END IF
%     END BLOCK
%%
%   END CASE
%  END LOOP
%END SCRIPT
