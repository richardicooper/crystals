%SCRIPT XREFINE
%%
%%
%  VARIABLE LOGICAL EDONE PDONE PMASK SERR XREFINE
%  VARIABLE INTEGER NCYCLE NFORCE
%  VARIABLE REAL RMIN R
%  EVALUATE SERR = TRUE
%%
%%
%% If xrefine is set to true before calling, then ncycle and nforce should
%% also be set - otherwise if xrefine is false (not set) then ncycle and
%% nforce are set here:
%%
%%
%  IF XREFINE .EQ. FALSE THEN
%%
%    COPY '#SCRIPT CHECK3'
%%
%%
^^WI WINDOW XREFINE 'Least Squares Refinement' MODAL
^^WI COMMIT='RF_BOK' CANCEL='RF_BXX'
^^WI GRID MAIN NROWS=3 NCOLS=7
^^WI {
^^WI  @ 2,2 GRID L NROWS=5 NCOLS=1
^^WI  {
^^WI   @ 1,1 GRID NCYC NROWS=1 NCOLS=3
^^WI   {
^^WI    @ 1,1 STATIC T1 'Maximum number of cycles of refinement'
^^WI    @ 1,3 EDITBOX NC ' 5' CHARS=5 INTEGER
^^WI   }
^^WI   @ 3,1 CHECKBOX NF
^^WI         'Stop cycling if convergence is detected' STATE=ON
^^WI   @ 5,1 GRID LED NROWS=1 NCOLS=3
^^WI   {
^^WI    @ 1,1 BUTTON RF_B12 'Edit directives'
^^WI    @ 1,3 BUTTON RF_B16 'Edit restraints'
^^WI   }
^^WI  }
^^WI  @ 2,6 GRID R NROWS=3 NCOLS=1
^^WI  {
^^WI   @ 1,1 BUTTON RF_BOK '&OK' DEFAULT
^^WI   @ 3,1 BUTTON RF_BXX '&Cancel'
^^WI  }
^^WI }
^^WI SHOW
^^CR
%%
%%
%%
%    LOOP
%      ON ERROR TERMINATE
%      VERIFY RF_BXX RF_BOK RF_B12 RF_B16
%      GET NOSTORE SILENT FINAL ABBREVIATED ' ' ' '
%      CASE VALUE
%       BLOCK
^^CO      DISPOSE XREFINE
%         FINISH
%       END BLOCK
%       BLOCK
%         EVALUATE SERR = FALSE
%         EVALUATE LOOPEND = LOOPCOUNTER
%       END BLOCK
%       BLOCK         % EDIT 12
%         COPY '#SCRIPT EDLIST12'
%       END BLOCK
%       BLOCK         % EDIT 16
%         COPY '#SCRIPT EDLIST16'
%       END BLOCK
%      END CASE
%    END LOOP
%    IF SERR .EQ. TRUE THEN
^^CO      DISPOSE XREFINE
{E An error of some type occured. The xrefine script has stopped just
{E in case it is serious. A possible cause is an invalid List 12 - maybe
{E it refers to non-existant atoms.
%         FINISH
%    END IF
%%
^^?? NC TEXT
%    GET NOSTORE SILENT FINAL INTEGER 'How many cycles' '5'
%    EVALUATE NCYCLE = VALUE
^^?? NF STATE
%    VERIFY ON OFF
%    GET NOSTORE SILENT FINAL ABBREVIATED 'ONorOFF' ' '
%    EVALUATE NFORCE = VALUE
^^CO DISPOSE XREFINE
%       
%%
%  END IF
%  COPY '#SUM LIST 12'
%  COPY 'END'
%%
%  COPY '#SCRIPT RFACTOR'
%  EVALUATE RMIN = R
%%
%  COPY '#SCRIPT XGETINFO'
%  IF ( EDONE .EQ. TRUE ) .AND. ( PDONE .EQ. FALSE ) THEN
%    IF EXISTS 11 .EQ. 1 THEN
%      COPY '#DISK'
%      COPY 'DELETE 11'
%      COPY 'END'
%    END IF
%    EVALUATE PMASK = TRUE
%    EVALUATE PDONE = TRUE
%    COPY '#SCRIPT XPUTINFO'
%% Purge everything until bug is fixed.
%%    COPY '#PURGE LIST=11'
%    COPY '#PURGE'
%    COPY 'END'
%  END IF
%%
%  COPY '#LIST 22'
%  COPY 'END'
%%
%  COPY '#SCRIPT XDELQ'
%%
%%
%  IF NCYCLE .GT. 0 THEN
%    CASE NFORCE
%      BLOCK                                        % NORMAL (not forced)
%%
%% Cope with people who insist on more than 5 lsq cycles in one go.
%% Do them in blocks of 5. Even if convergence is detected, we'll
%% still have to do one from every block of 5.
%%
%        IF NCYCLE .GT. 5 THEN
^^WI WINDOW XABORT 'Refining' MODAL GRID MAIN NROWS=3 NCOLS=5
^^WI { @ 2,2 STATIC T1 'Click to abort (after at most 5 more cycles).'
^^WI   @ 2,4 BUTTON RF_BAB '&Abort' INFORM=NO DEFAULT } SHOW
^^CR
%          LOOP
%            COPY '#SFLS'
%            LOOP 5 TIMES
%              COPY 'REFINE'
%              EVALUATE NCYCLE = NCYCLE - 1
%              IF ( NCYCLE .LE. 0 ) THEN
%                EVALUATE LOOPEND = LOOPCOUNTER
%              END IF
%            END LOOP
%            COPY 'END'
^^??         RF_BAB STATE
%            VERIFY ON OFF
%            GET SILENT NOSTORE FINAL ABBREVIATED ' ' ' '
%            IF VALUE .EQ. 1 THEN
%              EVALUATE LOOPEND = LOOPCOUNTER
{I Further refinement cycles abandoned at users request.
%            END IF
%            IF ( NCYCLE .LE. 0 ) THEN
%              EVALUATE LOOPEND = LOOPCOUNTER
%            END IF
%          END LOOP
%        ELSE
%%
%% Normal less than or eq 5 lsq cycles.
%%
^^WI WINDOW XABORT 'Refining' MODAL GRID MAIN NROWS=3 NCOLS=3
^^WI { @ 2,2 STATIC T1 'Please wait. Refinement in progress' } SHOW
^^CR
%          COPY '#SFLS'
%          LOOP NCYCLE TIMES
%            COPY 'REFINE'
%          END LOOP
%          COPY 'END'
%        END IF
%      END BLOCK
%      BLOCK                                        % FORCE
%%
%% n forced cycles.
%%
^^WI WINDOW XABORT 'Refining' MODAL GRID MAIN NROWS=3 NCOLS=5
^^WI { @ 2,2 STATIC T1 'Click to abort (after next cycle).'
^^WI   @ 2,4 BUTTON RF_BAB '&Abort' INFORM=NO DEFAULT } SHOW
^^CR
%        LOOP NCYCLE TIMES
%          COPY '#SFLS'
%          COPY 'REFINE'
%          COPY 'END'
^^??       RF_BAB STATE
%          VERIFY ON OFF
%          GET SILENT NOSTORE FINAL ABBREVIATED ' ' ' '
%          IF VALUE .EQ. 1 THEN
{I Further refinement cycles abandoned at users request.
%              EVALUATE LOOPEND = LOOPCOUNTER
%          END IF
%        END LOOP
%      END BLOCK
%    END CASE
%  END IF

^^CO DISPOSE XABORT

%%
%  COPY '#SCRIPT RFACTOR'
{S * Test for near convergence of the R factor...
%  CLEAR
%  INSERT ' {R   Old R factor = '
%  STORE FORMAT /(F7.2)/ LENGTH 7 REAL RMIN
%  INSERT '%. New R factor = '
%  STORE FORMAT /(F7.2)/ LENGTH 7 REAL R
%  OUTPUT
%  CLEAR
%%
%  IF R .GE. RMIN * 0.99 THEN
{S * The refinement has probably converged.
%  END IF
%%
%  EVALUATE RMIN = R
%%
%END SCRIPT

