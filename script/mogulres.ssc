%SCRIPT MOGULRES
%     VARIABLE REAL ZMAX ZSUM ZNUM ZTOT ZAVE SERIAL
%     VARIABLE REAL IDEAL ACTUAL DEV Z EFOM RCHK EMAX ESUM ENUM
%     VARIABLE INTEGER ZB1 ZB2 ZB3 ZB4 ZB5 ZB6 ZB7 ZB8 ZB9 ZB10
%     VARIABLE INTEGER NIN NFOM MAT1 MAT2 MAT3 MAT4 NUMOBS ZMISS
%     VARIABLE INTEGER NOHIT NERROR DPVCOUNT ISER NINDEX
%     VARIABLE INTEGER CURSEL N SERMAX
%     VARIABLE CHARACTER CAT1 CAT2 CAT3 CAT4 RSVAL RSESD CLINE1
%     VARIABLE CHARACTER CAT CELE CCHK
%     EVALUATE ZMAX = 0.0
%     EVALUATE ZSUM = 0.0
%     EVALUATE ZTOT = 0.0
%     EVALUATE ZNUM = 0.0
%     EVALUATE NOHIT = 0
%     EVALUATE NERROR = 0
^^WI WINDOW XABORT 'Processing:' MODAL GRID MAIN NROWS=4 NCOLS=3
^^WI { @ 2,2 STATIC GFT1 'Please wait. Processing mogul data.'
^^WI   @ 3,2 STATIC GFT2 '                                   ' } SHOW
^^CR
%     COPY '#RELEASE PUNCH bfile.pch'
%     COPY '#CLOSE SCPDATA'
%     COPY '#OPEN SCPDATA mogul.stat'
%%
%% Wipe out spare and find max serial:
%%
%     COPY '#GENERALEDIT 5'
%     COPY 'LOCATE RECORDTYPE=101'
%     COPY 'ERROR MESSAGE=NO SIGNAL=NONE ACTION=CONTING NAME=EDITERROR'
%     COPY 'TOP'
%     EVALUATE EFOM = 1.0
%     EVALUATE SERMAX = 1
%     LOOP
%       ON EDITERROR TERMINATE
%       COPY 'TRANSFER TO OFFSET=13 FROM EFOM'
%       COPY 'TRANSFER FROM OFFSET=1 TO SERIAL'
%       IF ( INTEGER ( SERIAL ) .GT. SERMAX ) THEN
%         EVALUATE SERMAX = INTEGER ( SERIAL )
%       END IF
%       COPY 'NEXT'
%     END LOOP
^^WI WINDOW MOGUL2 'Mogul Results' MODAL COMMIT='MR_BXX' CANCEL='MR_BXX'
^^WI SIZE LARGE KEEP POSITION=CENTRED '_MAINTEXTOUTPUT'
^^WI GRID MGM NROWS=5 NCOLS=5
^^WI {
^^WI   @ 4,4 GRID MGC NROWS=1 NCOLS=2
^^WI   {
^^WI     @ 1,1 STRETCH B HORIZONTAL
^^WI     @ 1,2 BUTTON MR_BXX 'Cancel' CANCEL COMMIT DEFAULT
^^WI   }
^^WI   @ 2,2 GRID LOG NROWS=1 NCOLS=1
^^WI   {
^^WI      @ 1,1 BITMAP LOGO TRANS FILE 'ccdclogo.bmp'
^^WI   }
^^WI   @ 2,4 TABCTRL MOGULTABS
^^WI   {
^^WI     TAB MGTAB1 'Results' GRID MGG1 NROWS=3 NCOLS=5
^^WI     {
^^WI       @ 2,4 MODELWINDOW MODELRE 'N' NROWS=5 NCOLS=50
^^WI            ATTACH L5 RADSCALE=250 RADTYPE=COV
^^WI            MOUSEACTION=SELECTATOM
^^WI       @ 2,2 GRID M NROWS=9 NCOLS=3
^^WI       {
^^WI         @ 2,2 GRID G NROWS=2 NCOLS=1
^^WI         {
^^WI           @ 1,1 STATIC RT_T4
^^WI 'Z-scores: zero is best agreement. See information tab.'
^^WI           @ 2,1 STATIC RT_T5 
^^WI 'Click a column header to sort data.'
^^WI         }
^^WI         @ 4,2 GRID L NROWS=3 NCOLS=1 ISOLATE
^^WI         {
^^WI           @ 1,1 LISTCTRL MR_RES VISLINES=9 NCOLS=4
^^WI           'Query' 'Delta' '\Z\' 'Type' INFORM=YES ADDTOLIST
%     EXTRACT REWIND
%     EVALUATE DPVCOUNT = 0
%     LOOP
%      ON ERROR TERMINATE
%      ON END TERMINATE
%      ON EDITERROR REPEAT
%      IF ( DPVCOUNT .GT. 5000 ) THEN
%       COPY 'WRITE'
%       COPY 'END'
%       COPY '#GENERALEDIT 5'
%       COPY 'LOCATE RECORDTYPE=101'
%       COPY 'ERROR MESSAGE=NO SIGNAL=NONE ACTION=CONTING NAME=EDITERROR'
%       EVALUATE DPVCOUNT = 0
%      END IF
%%
%      COPY 'TOP'
%      EVALUATE DPVCOUNT = DPVCOUNT + 1
%%
%% Extract the original query line:
%%
%      EXTRACT NEXT
%      EXTRACT TRANSFER INPUT
%      CLEAR
%      VERIFY DIST ANGLE TORSION
%      GET SILENT NOSTORE ABBREVIATED ' '
%      EVALUATE NIN = VALUE
%% Read the atom numbers:
%      GET SILENT NOSTORE INTEGER ' '
%      LOOP NIN TIMES
%       GET SILENT NOSTORE INTEGER ' '
%      END LOOP
%% Read the #:
%      GET SILENT NOSTORE KEYWORD ' '
%% Read the actual value:
%      GET SILENT NOSTORE REAL ' '
%      EVALUATE ACTUAL = VALUE
%% Read the atoms:
%      INSERT !^^WI '!
%      EVALUATE CAT1 = ' '
%      EVALUATE CAT2 = ' '
%      EVALUATE CAT3 = ' '
%      EVALUATE CAT4 = ' '
%      LOOP ( NIN + 1 ) TIMES
%       EVALUATE CAT4 = CAT3
%       EVALUATE CAT3 = CAT2
%       EVALUATE CAT2 = CAT1
%       GET SILENT KEYWORD ' '
%       EVALUATE CAT1 = CVALUE
%      END LOOP
%      INSERT !' !
%%
%% Extract the results line:
%%
%      EXTRACT NEXT
%      EXTRACT TRANSFER INPUT
%      EVALUATE NUMOBS = 0
%% See what it holds:
%      VERIFY NOHITS ERROR STATS
%      GET SILENT NOSTORE ABBREVIATED ' '
%      CASE VALUE
%       BLOCK    %NOHITS%
%        EVALUATE NOHIT = NOHIT + 1
%        EVALUATE NUMOBS = 0
%        EVALUATE Z = 0.0
%        INSERT "'No hits'  ''"
%% Read the reason:
%       END BLOCK
%       BLOCK    %ERROR%
%        EVALUATE NERROR = NERROR + 1
%        EVALUATE NUMOBS = - 1
%        EVALUATE Z = 0.0
%        INSERT "'Error' ''"
%% Read the error code:
%% Read the reason:
%       END BLOCK
%       BLOCK    %STATS%
%% Work out the Z-score:
%        GET SILENT NOSTORE INTEGER ' '
%        EVALUATE NUMOBS = VALUE
%% Ignore, for now, the mean, min and max:
%        GET SILENT NOSTORE REAL ' '
%        GET SILENT NOSTORE REAL ' '
%        GET SILENT NOSTORE REAL ' '
%% Read the median:
%        GET SILENT NOSTORE REAL ' '
%        EVALUATE IDEAL = VALUE
%        GET SILENT NOSTORE REAL ' '
%        EVALUATE DEV = VALUE
%        IF ( DEV .LT. 0.000001 ) THEN
%         EVALUATE DEV = 0.000001
%        END IF
%        EVALUATE Z = ( ACTUAL - IDEAL ) / DEV
%        STORE FORMAT /(F8.3)/ REAL ( ACTUAL - IDEAL )
%        IF Z .GT. 100.0 THEN
%         INSERT '>100.0'
%        ELSE IF Z .LT. - 100.0 THEN
%         INSERT '>100.0'
%        ELSE IF Z .GT. 0.0 THEN
%         STORE FORMAT /(F8.3)/  LENGTH 8 REAL Z
%        ELSE
%         STORE FORMAT /(F8.3)/  LENGTH 8 REAL ( - Z )
%        END IF
%%
%%
%        EVALUATE ZTOT = ZTOT + 1.0
%        IF NUMOBS .GE. 4 THEN
%%
%         IF Z .GT. 0.0 THEN
%          EVALUATE ZSUM = ZSUM + Z
%         ELSE
%          EVALUATE ZSUM = ZSUM - Z
%         END IF
%%
%         EVALUATE ZNUM = ZNUM + 1.0
%%
%         IF Z .GT. ZMAX THEN
%          EVALUATE ZMAX = Z
%         END IF
%         IF ( - Z ) .GT. ZMAX THEN
%          EVALUATE ZMAX = - Z
%         END IF
%        END IF
%       END BLOCK
%      END CASE
%%
%% The atoms graph:
%%
%      IF NUMOBS .LT. 0 THEN
%% No badness for errors (probably bonds to metals etc.):
%        EVALUATE Z = 1.0
%      ELSE IF NUMOBS .LT. 4 THEN
%% Arbitrary badness for missing results:
%        EVALUATE Z = 2.0
%      ELSE IF Z .LT. 0.0 THEN
%        EVALUATE Z = - Z
%      END IF
%      IF Z .GT. 10.0 THEN
%        EVALUATE Z = 10.0
%      ELSE IF Z .LT. 1.0 THEN
%          EVALUATE Z = 1.0
%      END IF
%      LOOP ( NIN + 1 ) TIMES
%          CASE LOOPCOUNTER
%           EVALUATE CAT = CAT1
%           EVALUATE CAT = CAT2
%           EVALUATE CAT = CAT3
%           EVALUATE CAT = CAT4
%          END CASE
%          EVALUATE ISER = FIRSTINT ( CAT ) 
%          EVALUATE CELE = FIRSTSTR ( CAT )
%          EVALUATE NINDEX = 0
%          IF ( ISER .LE. SERMAX ) THEN
%            ON EDITERROR TERMINATE
%            COPY 'TOP'
%            EVALUATE DPVCOUNT = DPVCOUNT + 1
% LOOP 
%  ON EDITERROR TERMINATE
%  COPY 'TRANSFER FROM OFFSET=0 TO CCHK'
%  COPY 'TRANSFER FROM OFFSET=1 TO RCHK'
%  EVALUATE DPVCOUNT = DPVCOUNT + 2
%  IF ( ( CELE .EQ. CCHK ) .AND. ( ISER .EQ. INTEGER ( RCHK ) ) ) THEN
%   COPY 'TRANSFER FROM OFFSET=13 TO EFOM'
%   EVALUATE EFOM = EFOM * Z
%   COPY 'TRANSFER TO OFFSET=13 FROM EFOM'
%   EVALUATE LOOPEND = LOOPCOUNTER
%   EVALUATE NINDEX = LOOPCOUNTER
%   TRANSFER '^^CO SET GFT2 TEXT "' // CAT // ' ' // CHARACTER ( EFOM ) // - 
    '"' TO DISPLAY
%  END IF
%  COPY 'NEXT'
%  EVALUATE DPVCOUNT = DPVCOUNT + 3
% END LOOP
%            IF ( NINDEX .EQ. 0 ) THEN
%              TRANSFER '{E Atom not found. ' // CAT TO DISPLAY
%            END IF
%          END IF
%      END LOOP
%%
%      CASE NIN
%          INSERT 'Dist'
%          INSERT 'Angle'
%          INSERT 'Torsion'
%      END CASE
%      INSERT !'!
%      OUTPUT
%     END LOOP
%     COPY 'WRITE'
%     COPY 'END'
^^WI              'NULL'
^^WI           @ 3,1 GRID GB NROWS=2 NCOLS=1
^^WI           {
^^WI             @ 1,1 STATIC MR_TYPE 'Angle X(000) X(000) X(000)'
^^WI             @ 2,1 GRID GBB NROWS=7 NCOLS=7
^^WI             {
^^WI               @ 1,1 STATIC RT_T3 'Actual:'
^^WI               @ 1,3 STATIC MR_ACTU '0000.0000'
^^WI               @ 1,5 STATIC RT_T3 'Hits:'
^^WI               @ 1,7 STATIC MR_NUMO '000000'
^^WI               @ 2,1 STATIC RT_T3 'Median:'
^^WI               @ 2,3 STATIC MR_MEDIAN '0000.0000'
^^WI               @ 3,1 STATIC RT_T3 'Mean:'
^^WI               @ 3,3 STATIC MR_MEAN '0000.0000'
^^WI               @ 2,5 STATIC RT_T3 'Stdev:'
^^WI               @ 2,7 STATIC MR_SIGM '0000.0000'
^^WI               @ 5,1 STATIC RT_T3 'Min:'
^^WI               @ 5,3 STATIC MR_MINO '0000.0000'
^^WI               @ 5,5 STATIC RT_T3 'Max:'
^^WI               @ 5,7 STATIC MR_MAXO '0000.0000'
^^WI               @ 6,5 STATIC RT_T3 'Upper Q:'
^^WI               @ 6,7 STATIC MR_UPPERQ '0000.0000'
^^WI               @ 6,1 STATIC RT_T3 'Lower Q:'
^^WI               @ 6,3 STATIC MR_LOWERQ '0000.0000'
^^WI               @ 7,1 STATIC RT_T3 'Z-score:'
^^WI               @ 7,3 STATIC MR_ZSCO '0000.0000'
^^WI             }
^^WI           }
^^WI         }
^^WI         @ 6,2 GRID B NROWS=1 NCOLS=3
^^WI         {
^^WI           @ 1,1 BUTTON MR_BOK '&Examine in Mogul'
^^WI           @ 1,3 BUTTON MR_BRR '&Restrain'
^^WI         }
^^WI         @ 7,2 STRETCH V VERTICAL 
^^WI         @ 8,2 GRID C NROWS=1 NCOLS=1
^^WI         {
^^WI           @ 1,1 BUTTON MR_ALL '&Restrain Everything'
^^WI         }
^^WI       }
^^WI     }
^^WI     TAB MGTAB11 'Atoms' GRID ZDG NROWS=6 NCOLS=3
^^WI     {
^^WI       @ 2,2 STATIC RCEXP 
^^WI 'Atoms with large, outlying FOMs may be suspect. Investigate further.'
^^WI       @ 3,2 STATIC RC_XX 'xxxxxxxxxxxxxxxxx'
^^WI       @ 4,2 STATIC RC_YY 'xxxxxxxxxxxxxxxxx'
^^WI       @ 5,2 PLOTWINDOW _VPARAM NROWS=20 NCOLS=64
^^WI     }
^^WI     TAB MGTAB2 'Z Distribution' GRID ZDG NROWS=6 NCOLS=3
^^WI     {
^^WI         @ 2,2 STATIC ZEX
^^WI 'If there are outliers from the main distribution this indicates'
^^WI         @ 3,2 STATIC ZEX
^^WI 'errors which are out of proportion to the rest in the structure.'
^^WI         @ 4,2 GRID ST NROWS=2 NCOLS=7 {
^^WI           @ 1,1 STATIC RT_T3 'Mean Z:'
^^WI           @ 1,3 STATIC MR_ZAVE '0000.0000'
^^WI           @ 1,5 STATIC RT_T3 'Max Z:'
^^WI           @ 1,7 STATIC MR_ZMAX '0000.0000'
^^WI           @ 2,1 STATIC RT_T3 'Num. results:'
^^WI           @ 2,3 STATIC MR_ZTOT '0000.0000'
^^WI           @ 2,5 STATIC RT_T3 'Num. results with <4 hits:'
^^WI           @ 2,7 STATIC MR_ZMIS '0000.0000'
^^WI         }
^^WI         @ 5,2 PLOTWINDOW VMOGUL NROWS=20 NCOLS=64 
^^WI     }
^^WI     TAB MGTAB0 'Information' GRID MGG0 NROWS=1 NCOLS=1
^^WI     {
^^WI       @ 1,1 TEXTOUT MGEXPLAIN 
^^WI ' Mogul has collected statistics for each of the fragments listed'
^^WI NROWS=10 NCOLS=40 TRANSPARENT
^^WI TEXT ' in the results tab.'
^^WI TEXT ' Click on a particular hit to view the stats.'
^^WI TEXT ' '
^^WI TEXT ' The most useful statistic for each fragment is the Z-score.'
^^WI TEXT ' This indicates how far the observed value in your structure'
^^WI TEXT ' deviates from the CSD median, in units of standard deviations'
^^WI TEXT ' of the CSD sample   i.e.  Z = ( OBS - MEDIAN ) / sigma (OBS)'
^^WI TEXT ' '
^^WI TEXT ' The median is used here for robustness.'
^^WI TEXT ' '
^^WI TEXT ' The Z-distribution graph shows the frequency of Z-values for'
^^WI TEXT ' your structure. You may spot outliers here.'
^^WI TEXT ' '
^^WI TEXT ' For further information see:'
^^WI TEXT '      {&http://www.xtl.ox.ac.uk/mogul.html{&'
^^WI TEXT ' '
^^WI TEXT ' '
^^WI VIEWTOP
^^WI     }
^^WI   }
^^WI }
^^WI SHOW
^^CO DISPOSE XABORT
^^CR
^^CO SET MGEXPLAIN VIEWTOP
^^WI WINDOW XABORT 'Processing:' MODAL GRID MAIN NROWS=4 NCOLS=3
^^WI { @ 2,2 STATIC GFT1 'Please wait. Processing mogul data.'
^^WI   @ 3,2 STATIC GFT2 'Calculating Z graph.' } SHOW
^^CR
%    COPY '#edit'
%    COPY 'monitor off'
%    COPY 'select type ne H'
%    COPY 'dsort spare'
%    COPY 'graph of=spare'
%    COPY 'exec'
%    COPY 'QUIT'
%    COPY 'END'
%    COPY '#GENERALEDIT 5'
%    COPY 'LOCATE RECORDTYPE=101'
%    COPY 'ERROR MESSAGE=NO SIGNAL=NONE ACTION=CONTING NAME=EDITERROR'
%    COPY 'TOP'
%    EVALUATE EFOM = 1.0
%    LOOP
%      ON EDITERROR TERMINATE
%      COPY 'TRANSFER FROM OFFSET=13 TO EFOM'
%      EVALUATE ENUM = ENUM + 1.0
%      EVALUATE ESUM = ESUM + EFOM
%      IF EFOM .GT. EMAX THEN
%        EVALUATE EMAX = EFOM
%      END IF
%      COPY 'NEXT'
%    END LOOP
%    COPY 'END'
%    TRANSFER "^^CO SET RC_XX TEXT 'Average Fom:  " // -
 CHARACTER ( ESUM / ENUM ) // "'" TO DISPLAY
%    TRANSFER "^^CO SET RC_YY TEXT 'Maximum Fom: " // -
 CHARACTER ( EMAX ) // "'" TO DISPLAY
%    GET NOSTORE NOPROMPT TEXT NULLSTRING ' '
%    EVALUATE ZMISS = INTEGER ( ZTOT - ZNUM )
%    IF ZNUM .LE. 0.1 THEN
%     EVALUATE ZNUM = 1.0
%    END IF
%    EVALUATE ZAVE = ZSUM / ZNUM
%%
%    TRANSFER '^^CO SET MR_ZMIS TEXT ' // CHARACTER ( ZMISS ) TO DISPLAY
%    TRANSFER '^^CO SET MR_ZTOT TEXT ' // CHARACTER ( ZTOT ) TO DISPLAY
%    TRANSFER '^^CO SET MR_ZMAX TEXT ' // CHARACTER ( ZMAX ) TO DISPLAY
%    TRANSFER '^^CO SET MR_ZAVE TEXT ' // CHARACTER ( ZAVE ) TO DISPLAY
%%
%%  Loop again to get Z-graph.
%%
%    EXTRACT REWIND
%    EVALUATE ZB1 = 0
%    EVALUATE ZB2 = 0
%    EVALUATE ZB3 = 0
%    EVALUATE ZB4 = 0
%    EVALUATE ZB5 = 0
%    EVALUATE ZB6 = 0
%    EVALUATE ZB7 = 0
%    EVALUATE ZB8 = 0
%    EVALUATE ZB9 = 0
%    EVALUATE ZB10 = 0
%    LOOP
%       ON ERROR TERMINATE
%       ON END TERMINATE
%%
%% Extract the original query line:
%%
%       EXTRACT NEXT
%       EXTRACT TRANSFER INPUT
%%
%       CLEAR
%       VERIFY DIST ANGLE TORSION
%       GET SILENT NOSTORE ABBREVIATED ' '
%       EVALUATE NIN = VALUE
%% Skip the atom numbers:
%       GET SILENT NOSTORE INTEGER ' '
%       LOOP NIN TIMES
%         GET SILENT NOSTORE INTEGER ' '
%       END LOOP
%% Skip the #:
%       GET SILENT NOSTORE KEYWORD ' '
%% Read the actual value:
%       GET SILENT NOSTORE REAL ' '
%       EVALUATE ACTUAL = VALUE
%% Skip the atoms:
%       INSERT !^^WI '!
%       GET SILENT TEXT ' ' ' '
%%
%% Extract the results line:
%%
%       EXTRACT NEXT
%       EXTRACT TRANSFER INPUT
%% See what it holds:
%       VERIFY NOHITS ERROR STATS
%       GET SILENT NOSTORE ABBREVIATED ' '
%       IF ( VALUE .EQ. 3 ) THEN
%         GET SILENT NOSTORE INTEGER ' '
%         EVALUATE NUMOBS = VALUE
%% Ignore, the mean, min and max:
%         GET SILENT NOSTORE REAL ' '
%         GET SILENT NOSTORE REAL ' '
%         GET SILENT NOSTORE REAL ' '
%% Get the median:
%         GET SILENT NOSTORE REAL ' '
%         EVALUATE IDEAL = VALUE
%         GET SILENT NOSTORE REAL ' '
%         EVALUATE DEV = VALUE
%         IF ( DEV .LT. 0.000001 ) THEN
%           EVALUATE DEV = 0.000001
%         END IF
%         EVALUATE Z = ( ACTUAL - IDEAL ) / DEV
%         IF ( Z .LT. 0.0 ) THEN
%            EVALUATE Z = - Z
%         END IF
%         IF ( Z .GT. ( ZMAX * 0.9 ) ) THEN
%            EVALUATE ZB10 = ZB10 + 1
%         ELSE IF ( Z .GT. ( ZMAX * 0.8 ) ) THEN
%            EVALUATE ZB9 = ZB9 + 1
%         ELSE IF ( Z .GT. ( ZMAX * 0.7 ) ) THEN
%            EVALUATE ZB8 = ZB8 + 1
%         ELSE IF ( Z .GT. ( ZMAX * 0.6 ) ) THEN
%            EVALUATE ZB7 = ZB7 + 1
%         ELSE IF ( Z .GT. ( ZMAX * 0.5 ) ) THEN
%            EVALUATE ZB6 = ZB6 + 1
%         ELSE IF ( Z .GT. ( ZMAX * 0.4 ) ) THEN
%            EVALUATE ZB5 = ZB5 + 1
%         ELSE IF ( Z .GT. ( ZMAX * 0.3 ) ) THEN
%            EVALUATE ZB4 = ZB4 + 1
%         ELSE IF ( Z .GT. ( ZMAX * 0.2 ) ) THEN
%            EVALUATE ZB3 = ZB3 + 1
%         ELSE IF ( Z .GT. ( ZMAX * 0.1 ) ) THEN
%            EVALUATE ZB2 = ZB2 + 1
%         ELSE
%            EVALUATE ZB1 = ZB1 + 1
%         END IF
%%
%       END IF
%    END LOOP
%%
%% Do the graph
%%
^^PL PLOTDATA _CLASS BARGRAPH ATTACH VMOGUL
^^PL XAXIS TITLE 'Z values'
^^PL YAXIS TITLE 'Frequency'
^^PL NSERIES=1 LENGTH=10
% TRANSFER '^^PL LABEL ' // CHARACTER ( 0.0 ) // -
           ' DATA '      // CHARACTER ( ZB1 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.1 ) // -
           ' DATA '      // CHARACTER ( ZB2 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.2 ) // -
           ' DATA '      // CHARACTER ( ZB3 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.3 ) // -
           ' DATA '      // CHARACTER ( ZB4 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.4 ) // -
           ' DATA '      // CHARACTER ( ZB5 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.5 ) // -
           ' DATA '      // CHARACTER ( ZB6 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.6 ) // -
           ' DATA '      // CHARACTER ( ZB7 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.7 ) // -
           ' DATA '      // CHARACTER ( ZB8 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.8 ) // -
           ' DATA '      // CHARACTER ( ZB9 ) TO DISPLAY
% TRANSFER '^^PL LABEL ' // CHARACTER ( ZMAX * 0.9 ) // -
           ' DATA '      // CHARACTER ( ZB10 ) TO DISPLAY
^^PL SHOW
^^CR
% EVALUATE NFOM = 1
% EVALUATE CURSEL = 0
^^CO DISPOSE XABORT
%%
^^CO SET MR_RES SELECTION=1
%%
% LOOP
%% Flush input buffer:
% GET NOPROMPT NOSTORE TEXT ' ' ' '
%% Loop back here every time. First, fill in the details for the
%% currently selected FOM.
%%^^?? MR_RES SELECTED
%%%  GET NOSTORE SILENT INTEGER ' ' ' '
%%%  EVALUATE NFOM = VALUE
% IF ( NFOM .NE. CURSEL ) THEN
%  EVALUATE CURSEL = NFOM
%% Rewind mogul.stat
%  EXTRACT REWIND
%% Skip (NFOM-1 * 2) lines
%  LOOP ( ( NFOM - 1 ) * 2 ) TIMES
%  ON ERROR TERMINATE
%  ON END TERMINATE
%  EXTRACT NEXT
%  END LOOP
%  BLOCK
%  ON ERROR TERMINATE
%  ON END TERMINATE
%  EXTRACT NEXT
%  EXTRACT TRANSFER INPUT
%  CLEAR
%  VERIFY DIST ANGLE TORSION
%  GET SILENT NOSTORE ABBREVIATED ' '
%  EVALUATE NIN = VALUE
%  CASE NIN
%   BLOCK
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT1 = VALUE
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT2 = VALUE
%   END BLOCK
%   BLOCK
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT1 = VALUE
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT2 = VALUE
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT3 = VALUE
%   END BLOCK
%   BLOCK
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT1 = VALUE
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT2 = VALUE
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT3 = VALUE
%    GET SILENT NOSTORE INTEGER ' '
%    EVALUATE MAT4 = VALUE
%   END BLOCK
%  END CASE
%% Skip the '#'
%  GET NOSTORE SILENT KEYWORD ' ' 
%  CLEAR
%  INSERT !^^CO SET MR_ACTU TEXT '!
%  GET NOSTORE SILENT REAL ' '
%  EVALUATE ACTUAL = VALUE
%  STORE FORMAT /(F8.3)/ LENGTH 8 REAL ACTUAL
%  INSERT !'!
%  OUTPUT
%%
%% Get the crystals atom names
%%
%  EVALUATE CAT = ' '
%  EVALUATE CAT1 = ' '
%  EVALUATE CAT2 = ' '
%  EVALUATE CAT3 = ' '
%  EVALUATE CAT4 = ' '
^^WI SET MODEL01 SELECT ALL NO
%  LOOP ( NIN + 1 ) TIMES
%   EVALUATE CAT4 = CAT3
%   EVALUATE CAT3 = CAT2
%   EVALUATE CAT2 = CAT1
%   CLEAR
%   INSERT '^^WI SET MODEL01 SELECT '
%   GET SILENT KEYWORD ' '
%   EVALUATE CAT1 = CVALUE
%   EVALUATE CAT = CAT // ' ' // CVALUE
%   INSERT ' YES'
%   OUTPUT
%  END LOOP
%  CLEAR
%  CASE NIN
%   TRANSFER '^^WI SET MR_TYPE TEXT "Distance' // CAT // '"' TO DISPLAY
%   TRANSFER '^^WI SET MR_TYPE TEXT "Angle' // CAT // '"' TO DISPLAY
%   TRANSFER '^^WI SET MR_TYPE TEXT "Torsion' // CAT // '"' TO DISPLAY
%  END CASE
%  OUTPUT
%% Extract the next line
%  EXTRACT NEXT
%  EXTRACT TRANSFER INPUT
%  VERIFY NOHITS ERROR STATS
%  GET SILENT NOSTORE ABBREVIATED ' '
%  CASE VALUE
%   BLOCK    %NOHITS%
Nohits - setting dialog values to zero.
^^CO SET MR_NUMO TEXT '0' SET MR_MEDIAN TEXT ' '
^^CO SET MR_MEAN TEXT ' ' SET MR_MINO   TEXT ' '
^^CO SET MR_MAXO TEXT ' ' SET MR_UPPERQ TEXT ' '
^^CO SET MR_LOWERQ TEXT ' ' SET MR_SIGM TEXT ' '
^^CO SET MR_ZSCO TEXT ' ' 
%% Flush input buffer:
%    GET NOPROMPT NOSTORE TEXT ' ' ' '
%   END BLOCK
%   BLOCK    %ERROR%
Mogul reports error - setting dialog values to zero.
^^CO SET MR_NUMO TEXT '0' SET MR_MEDIAN TEXT ' '
^^CO SET MR_MEAN TEXT ' ' SET MR_MINO   TEXT ' '
^^CO SET MR_MAXO TEXT ' ' SET MR_UPPERQ TEXT ' '
^^CO SET MR_LOWERQ TEXT ' ' SET MR_SIGM TEXT ' '
^^CO SET MR_ZSCO TEXT ' ' 
%% Flush input buffer:
%    GET NOPROMPT NOSTORE TEXT ' ' ' '
%   END BLOCK
%   BLOCK    %STATS%
%    CLEAR
%    INSERT !^^CO SET MR_NUMO TEXT '!
%    GET SILENT INTEGER ' '
%    INSERT !' SET MR_MEAN TEXT '!
%    GET NOSTORE SILENT REAL ' '
%    STORE FORMAT /(F8.3)/ LENGTH 8 REAL VALUE
%    INSERT !'!
%    OUTPUT
%%
%    CLEAR
%    INSERT !^^CO SET MR_MINO TEXT '!
%    GET NOSTORE SILENT REAL ' '
%    STORE FORMAT /(F8.3)/  LENGTH 8 REAL VALUE
%    INSERT !' SET MR_MAXO TEXT '!
%    GET NOSTORE SILENT REAL ' '
%    STORE FORMAT /(F8.3)/  LENGTH 8 REAL VALUE
%    INSERT !'!
%    OUTPUT
%%
%    CLEAR
%    INSERT !^^CO SET MR_MEDIAN TEXT '!
%    GET NOSTORE SILENT REAL ' '
%    EVALUATE IDEAL = VALUE
%    STORE FORMAT /(F8.3)/ LENGTH 8 REAL IDEAL
%    INSERT !' SET MR_SIGM TEXT '!
%    GET NOSTORE SILENT REAL ' '
%    EVALUATE DEV = VALUE
%    STORE FORMAT /(F8.3)/ LENGTH 8 REAL DEV
%    INSERT !'!
%    OUTPUT
%%
%    CLEAR
%    INSERT !^^CO SET MR_UPPERQ TEXT '!
%    GET NOSTORE SILENT REAL ' '
%    STORE FORMAT /(F8.3)/  LENGTH 8 REAL VALUE
%    INSERT !' SET MR_LOWERQ TEXT '!
%    GET NOSTORE SILENT REAL ' '
%    STORE FORMAT /(F8.3)/  LENGTH 8 REAL VALUE
%    INSERT !'!
%    OUTPUT
%%
%%  Work out the Z-score
%    IF ( DEV .LT. 0.000001 ) THEN
%     EVALUATE DEV = 0.000001
%    END IF
%    EVALUATE Z = ( ACTUAL - IDEAL ) / DEV
%%
%    CLEAR
%    INSERT !^^CO SET MR_ZSCO TEXT '!
%    IF Z .GT. 100.0 THEN
%     INSERT '>100.0'
%    ELSE
%     STORE FORMAT /(F8.3)/ LENGTH 6 REAL Z
%    END IF
%    INSERT !'!
%    OUTPUT
%   END BLOCK
%  END CASE
^^CR
%  END BLOCK
%%
% END IF
%%
%       VERIFY MR_RES #$ MR_BXX MR_BOK MR_BRR MR_ALL
%       GET NOSTORE SILENT ABBREVIATED ' ' ' '
%       CASE VALUE
%         BLOCK        %%MR_RES
%           VERIFY SELECTED UNSELECTED
%           GET SILENT NOSTORE ABBREVIATED ' ' ' '
%           CASE VALUE
%           BLOCK %SELECTED%
%            GET SILENT NOSTORE INTEGER ' ' ' '
%            EVALUATE NFOM = VALUE
%           END BLOCK
%           BLOCK %UNSELECTED%
%            GET SILENT NOSTORE INTEGER ' ' ' '
%           END BLOCK
%           END CASE
%         END BLOCK
%         BLOCK  %#$command%
%           CLEAR
%           INSERT '#SPAWN '
%           GET SILENT FINAL TEXT ' ' ' '
%           OUTPUT
%           SEND
%         END BLOCK
%         BLOCK   %RT_BXX%
^^CO        DISPOSE MOGUL2
%           FINISH
%         END BLOCK
%         BLOCK
{I * Generating mol2 structure file for MoGuL...
%           COPY '#FOREIGN MOL2'
%           COPY 'END'
{R * Done.
{I * Writing instructions for MoGuL...
%           COPY '#CLOSE SCPDATA'
%           COPY '#RELEASE PUNCH crystals.qf'
%           TRANSFER 'MOGUL OPEN_GUI 3D' TO PUNCH
%           TRANSFER 'MOGUL MOLECULE crystals.mol2' TO PUNCH
%           CASE NIN
%             TRANSFER 'DIST  ' // CHARACTER ( MAT1 ) // ' ' // -
 CHARACTER ( MAT2 ) TO PUNCH
%             TRANSFER 'ANGLE ' // CHARACTER ( MAT1 ) // ' ' // -
 CHARACTER ( MAT2 ) // ' ' // CHARACTER ( MAT3 ) TO PUNCH
%             TRANSFER 'TORSION ' // CHARACTER ( MAT1 ) // ' ' // -
 CHARACTER ( MAT2 ) // ' ' // CHARACTER ( MAT3 ) // ' ' -
 CHARACTER ( MAT4 ) TO PUNCH
%           END CASE
%           COPY '#RELEASE PUNCH bfile.pch'
{R * Done.
{I * Running Mogul.
^^CO GETREG "Software\CCDC\" "MogulLatestVersion"
%GET SILENT NOSTORE TEXT 'Latest mogul?' ' '
%TRANSFER '^^CO GETREG "Software\CCDC\Mogul\' // CVALUE // -
 '\" Executable' TO DISPLAY
% GET SILENT NOSTORE TEXT 'Exec?' ' '
% TRANSFER '#SPAWN + "' // CVALUE // '" -ins crystals.qf' TO CRYSTALS
{R * Done.
^^CO        DISPOSE MOGUL2
%           FINISH
%         END BLOCK
%         BLOCK        %%MR_BRR
%           CASE NIN
%             BLOCK %DIST%
%% Get two values
%               CLEAR
^^WI WINDOW XRESTRD 'Restrain Distance' MODAL
^^WI GRID RESMAIN NROWS=5 NCOLS=5
^^WI {
% TRANSFER "^^WI @ 2,2 STATIC T0 'Restrain " // CAT2 // " to " // -
  CAT1 // "'" TO DISPLAY
^^WI   @ 4,2 GRID LEFT NROWS=3 NCOLS=5
^^WI   {
^^WI     @ 1,1 STATIC T1 'Distance'
%TRANSFER "^^WI @ 1,3 EDITBOX E1 '" // CHARACTER IDEAL // -
          "' CHARS=10 REAL" TO DISPLAY
^^WI     @ 1,5 STATIC T2 'angstroms'
^^WI     @ 3,1 STATIC T3 'E.s.d.'
%TRANSFER "^^WI @ 3,3 EDITBOX E2 '" // CHARACTER DEV // -
          "' CHARS=10 REAL" TO DISPLAY
^^WI     @ 3,5 STATIC T4 'angstroms'
^^WI   }
^^WI   @ 4,4 GRID RIGHT NROWS=3 NCOLS=1
^^WI   {
^^WI     @ 1,1 BUTTON BOK '&Ok' COMMIT DEFAULT
^^WI     @ 3,1 BUTTON BXX '&Cancel' CANCEL
^^WI   }
^^WI }
^^WI  SHOW
^^CR
%               VERIFY BOK BXX
%               GET SILENT NOSTORE FINAL ABBREVIATED 'Ok or cancel?'
%               CASE VALUE
%                 BLOCK %BOK%
^^??                E1 TEXT
%                   GET SILENT NOSTORE REAL 'Distance' '1.0'
%                   EVALUATE RSVAL = CVALUE
^^??                E2 TEXT
%                   GET SILENT NOSTORE REAL 'Esd' '0.02'
%                   EVALUATE RSESD = CVALUE
%                   EVALUATE CLINE1 = 'DISTANCE ' // RSVAL // ' , ' //  -
                    RSESD // ' = ' // CAT2 // ' to ' // CAT1
%                   COPY '#SCRIPT YADDLI16'
^^CO                DISPOSE XRESTRD
%% YADDLI16 closes SCPDATA - reopen it.
%                   COPY '#CLOSE SCPDATA'
%                   COPY '#OPEN SCPDATA mogul.stat'
%                 END BLOCK
%                 BLOCK %BXX%
^^CO                DISPOSE XRESTRD
%                 END BLOCK
%               END CASE
%             END BLOCK
%             BLOCK %ANGLE%
%% Get three values
%               CLEAR
^^WI WINDOW XRESTRD 'Restrain Angle' MODAL
^^WI GRID RESMAIN NROWS=5 NCOLS=5
^^WI {
% TRANSFER "^^WI @ 2,2 STATIC T0 'Restrain " // CAT2 // " to " // -
  CAT3  // " to " // CAT1 // "'" TO DISPLAY
^^WI   @ 4,2 GRID LEFT NROWS=3 NCOLS=5
^^WI   {
^^WI     @ 1,1 STATIC T1 'Angle'
%TRANSFER "^^WI @ 1,3 EDITBOX E1 '" // CHARACTER IDEAL // -
          "' CHARS=10 REAL" TO DISPLAY
^^WI     @ 1,5 STATIC T2 'degrees'
^^WI     @ 3,1 STATIC T3 'E.s.d.'
%TRANSFER "^^WI @ 3,3 EDITBOX E2 '" // CHARACTER DEV // -
          "' CHARS=10 REAL" TO DISPLAY
^^WI     @ 3,5 STATIC T4 'degrees'
^^WI   }
^^WI   @ 4,4 GRID RIGHT NROWS=3 NCOLS=1
^^WI   {
^^WI     @ 1,1 BUTTON BOK '&Ok' COMMIT DEFAULT
^^WI     @ 3,1 BUTTON BXX '&Cancel' CANCEL
^^WI   }
^^WI }
^^WI  SHOW
^^CR
%               VERIFY BOK BXX
%               GET SILENT NOSTORE FINAL ABBREVIATED 'Ok or cancel?'
%               CASE VALUE
%                 BLOCK %BOK%
^^??                E1 TEXT
%                   GET SILENT NOSTORE REAL 'Angle' '90.0'
%                   EVALUATE RSVAL = CVALUE
^^??                E2 TEXT
%                   GET SILENT NOSTORE REAL 'Esd' '0.5'
%                   EVALUATE RSESD = CVALUE
%                   EVALUATE CLINE1 = 'ANGLE ' // RSVAL // ' , ' //  -
               RSESD // ' = ' // CAT2 // ' to ' // CAT3 // ' to ' // CAT1
%                   COPY '#SCRIPT YADDLI16'
^^CO                DISPOSE XRESTRD
%% YADDLI16 closes SCPDATA - reopen it.
%                   COPY '#CLOSE SCPDATA'
%                   COPY '#OPEN SCPDATA mogul.stat'
%                 END BLOCK
%                 BLOCK %BXX%
^^CO                DISPOSE XRESTRD
%                 END BLOCK
%               END CASE
%             END BLOCK
%           END CASE
%         END BLOCK
%         BLOCK        %%MR_ALL
^^WI WINDOW XRESTRD 'Restrain All' MODAL
^^WI GRID RESMAIN NROWS=5 NCOLS=5
^^WI {
^^WI   @ 2,2 STATIC T0 'Restrain all hit distances and angles'
^^WI   @ 4,2 GRID LEFT NROWS=3 NCOLS=5
^^WI   {
^^WI     @ 1,1 STATIC T1 'Scale MOGUL esd by'
^^WI     @ 1,3 EDITBOX E1 '1.0' CHARS=10 REAL
^^WI     @ 1,5 STATIC T2 'to give restraint esd.'
^^WI   }
^^WI   @ 4,4 GRID RIGHT NROWS=3 NCOLS=1
^^WI   {
^^WI     @ 1,1 BUTTON RABOK '&Ok' COMMIT DEFAULT
^^WI     @ 3,1 BUTTON RABXX '&Cancel' CANCEL
^^WI   }
^^WI }
^^WI  SHOW
^^CR
%               VERIFY RABOK RABXX
%               GET SILENT NOSTORE FINAL ABBREVIATED 'RABOk or RABXX?'
%               CASE VALUE
%                 BLOCK %BOK%
%                   EXTRACT CLOSE
%                   IF ( EXISTS 16 .NE. 1 ) THEN
%                    COPY '#LIST 16'
%                    COPY 'NO'
%                    COPY 'END'
%                   END IF
%                   COPY '#RELEASE PUNCH scplst16.dat'
%                   COPY '#PUNCH 16'
%                   COPY 'END'
%                   COPY '#RELEASE PUNCH bfile.pch'
%                   COPY '#OPEN SCPDATA scplst16.dat'
%                   COPY '#RELEASE SCPQUEUE scplst16a.dat'
%                   QUEUE REWIND
%%                  Get the length of the file
%                   LOOP
%                        ON ERROR TERMINATE
%                        CLEAR
%                        EXTRACT NEXT
%                        EXTRACT TRANSFER COMMAND
%                        EVALUATE N = LOOPCOUNTER
%                   END LOOP
%                   EXTRACT REWIND
%% We need to insert 4 lines before the end. Copy SCPDATA to SCPQUEUE.
%                   EVALUATE N = N - 3
%                   QUEUE REWIND
%                   LOOP N TIMES
%                        ON ERROR TERMINATE
%                        CLEAR
%                        EXTRACT NEXT
%                        EXTRACT TRANSFER COMMAND
%                        QUEUE SEND
%                   END LOOP
^^??                E1 TEXT
%                   GET SILENT NOSTORE REAL 'Scale' '1.0'
%                   EVALUATE EFOM = VALUE
%                   COPY '#CLOSE SCPDATA'
%                   COPY '#OPEN SCPDATA mogul.stat'
%                   EXTRACT REWIND
%                   LOOP
%                    ON ERROR TERMINATE
%                    ON END TERMINATE
%                    ON EDITERROR REPEAT
%% Extract the original query line:
%                    EXTRACT NEXT
%                    EXTRACT TRANSFER INPUT
%                    CLEAR
%                    VERIFY DIST ANGLE TORSION
%                    GET SILENT NOSTORE ABBREVIATED ' '
%                    EVALUATE NIN = VALUE
%% Read the atom numbers:
%                    GET SILENT NOSTORE INTEGER ' '
%                    LOOP NIN TIMES
%                     GET SILENT NOSTORE INTEGER ' '
%                    END LOOP
%% Read the #:
%                    GET SILENT NOSTORE KEYWORD ' '
%% Read the actual value:
%                    GET SILENT NOSTORE REAL ' '
%                    EVALUATE ACTUAL = VALUE
%% Read the atoms:
%                    EVALUATE CAT1 = ' '
%                    EVALUATE CAT2 = ' '
%                    EVALUATE CAT3 = ' '
%                    EVALUATE CAT4 = ' '
%                    LOOP ( NIN + 1 ) TIMES
%                     EVALUATE CAT4 = CAT3
%                     EVALUATE CAT3 = CAT2
%                     EVALUATE CAT2 = CAT1
%                     GET NOSTORE SILENT KEYWORD ' '
%                     EVALUATE CAT1 = CVALUE
%                    END LOOP
%% Extract the results line:
%                    EXTRACT NEXT
%                    EXTRACT TRANSFER INPUT
%% See what it holds:
%                    VERIFY NOHITS ERROR STATS
%                    GET SILENT NOSTORE ABBREVIATED ' '
%                    IF VALUE .EQ. 3 THEN
%                      GET SILENT NOSTORE INTEGER ' '
%                      EVALUATE NUMOBS = VALUE
%% Ignore, for now, the mean, min and max:
%                      GET SILENT NOSTORE REAL ' '
%                      GET SILENT NOSTORE REAL ' '
%                      GET SILENT NOSTORE REAL ' '
%% Read the median:
%                      GET SILENT NOSTORE REAL ' '
%                      EVALUATE IDEAL = VALUE
%                      GET SILENT NOSTORE REAL ' '
%                      EVALUATE DEV = VALUE
%                      IF ( DEV .LT. 0.000001 ) THEN
%                       EVALUATE DEV = 0.000001
%                      END IF
%                      CASE NIN
%                        EVALUATE CLINE1 = 'DIST ' // CHARACTER ( IDEAL ) -
  // ', ' //  CHARACTER ( DEV * EFOM ) // ' = ' // CAT2 // ' to ' // CAT1
%                        EVALUATE CLINE1 = 'ANGL ' // CHARACTER ( IDEAL ) -
  // ', ' //  CHARACTER ( DEV * EFOM ) // ' = ' // CAT2 // ' to ' //  -
  CAT3 // ' to ' // CAT1
%                      END CASE
%                      TRANSFER '%QUEUE COPY ' // CLINE1 TO SCRIPT
%                    END IF
%                   END LOOP
%                   QUEUE COPY END
%                   COPY '#CLOSE SCPQUEUE'
%                   COPY '#USE scplst16a.dat'
^^CO                DISPOSE XRESTRD
%                   COPY '#SCRIPT EDLIST16'
%                 END BLOCK
%                 BLOCK %BXX%
^^CO                DISPOSE XRESTRD
%                 END BLOCK
%               END CASE
%         END BLOCK
%       END CASE
%     END LOOP
%END SCRIPT
                                  
