%SCRIPT CHECKASSEMBLY
%%
%% The file workfile.dat contains the information about the assembly
%% Here are the variables that we get from the calling routine
%%
%  VARIABLE INTEGER PRTNUM PRTCNT OFFSET PCOUNT1 PCOUNT2
%  VARIABLE LOGICAL LDEBUG
%%
%% Variables to call a_checkAtom.scp
%%
%  VARIABLE CHARACTER CATOMLABEL
%  VARIABLE LOGICAL LATOMEXISTS
%%
%% Local variables
%%
%  VARIABLE INTEGER ASSNUM ACHECK NATOMS NPAIRS ICYCLE IOFFSETFIRST IOFFSET NWRITES
%  VARIABLE INTEGER ISERI1 ISERI2 IPART1 IPART2 IPARTFIRST1 IPARTFIRST2 ITOTAL1 ITOTAL2
%  VARIABLE CHARACTER CATLBL1 CATLBL2 CATYPE1 CATYPE2
%  VARIABLE LOGICAL LPART1 LPART2 LATYPE LOFFSET
%% VARIABLE LOGICAL LPAIRSMATCH
%%
%  EVALUATE ASSNUM = PRTNUM / 1000
%%
%% From the way the file thisAssembly.dat has been written we know that there are only two possibilities:
%% PCOUNT1 and PCOUNT2 can be equal, or PCOUNT1 is bigger than PCOUNT2
%%
%  EVALUATE NATOMS = PCOUNT1
%  EVALUATE NPAIRS = PCOUNT2
%%
%  EVALUATE LPART1 = TRUE
%  EVALUATE LPART2 = TRUE
%  EVALUATE ITOTAL1 = 0
%  EVALUATE ITOTAL2 = 0
%  EVALUATE LOFFSET = TRUE
%  EVALUATE LATYPE = TRUE
%%
%  COPY '#OPEN SCPDATA thisAssembly.dat'
%  LOOP NATOMS TIMES
%    EVALUATE ICYCLE = LOOPCOUNTER
%    ON ERROR TERMINATE
%    ON END TERMINATE
%%
%    EXTRACT FIND STRING "PART1"
%    LOOP ICYCLE TIMES
%      EXTRACT NEXT
%    END LOOP
%    EXTRACT TRANSFER INPUT
%    CLEAR
%    GET KEYWORD 'Atom 1'
%    EVALUATE CATLBL1 = CVALUE
%    GET INTEGER 'Group number 1'
%    EVALUATE IPART1 = VALUE
%    EVALUATE CATYPE1 = FIRSTSTR ( CATLBL1 )
%    EVALUATE ISERI1 = FIRSTINT ( CATLBL1 )
%    IF NPAIRS .GE. ICYCLE THEN
%      EVALUATE ITOTAL1 = ITOTAL1 + ISERI1
%    END IF
%    IF ICYCLE .EQ. 1 THEN
%      EVALUATE IPARTFIRST1 = IPART1
%    ELSE
%      IF IPART1 .NE. IPARTFIRST1 THEN
%        EVALUATE LPART1 = FALSE
%      END IF
%    END IF
%%
%    IF NPAIRS .GE. ICYCLE THEN
%      EXTRACT FIND STRING "PART2"
%      LOOP ICYCLE TIMES
%        EXTRACT NEXT
%      END LOOP
%      EXTRACT TRANSFER INPUT
%      CLEAR
%      GET KEYWORD 'Atom 2'
%      EVALUATE CATLBL2 = CVALUE
%      GET INTEGER 'Group number 2'
%      EVALUATE IPART2 = VALUE
%      EVALUATE CATYPE2 = FIRSTSTR ( CATLBL2 )
%      EVALUATE ISERI2 = FIRSTINT ( CATLBL2 )
%      EVALUATE ITOTAL2 = ITOTAL2 + ISERI2
%      IF ICYCLE .EQ. 1 THEN
%        EVALUATE IPARTFIRST2 = IPART2
%      ELSE
%        IF IPART2 .NE. IPARTFIRST2 THEN
%          EVALUATE LPART2 = FALSE
%        END IF
%      END IF
%    END IF
%%
%    IF ICYCLE .EQ. 1 THEN
%      EVALUATE IOFFSETFIRST = ISERI2 - ISERI1
%    ELSE
%      IF NPAIRS .GE. ICYCLE THEN
%        EVALUATE IOFFSET = ISERI2 - ISERI1
%        IF IOFFSET .NE. IOFFSETFIRST THEN
%          EVALUATE LOFFSET = FALSE
%        END IF
%      END IF
%    END IF
%%
%    IF NPAIRS .GE. ICYCLE THEN
%      IF CATYPE1 .NE. CATYPE2 THEN
%        EVALUATE LATYPE = FALSE
%      END IF
%    END IF
%%
%%   TRANSFER CATLBL1 // ", " // CATLBL2 TO DISPLAY
%  END LOOP
%  COPY '#CLOSE SCPDATA'
%%
%  EVALUATE OFFSET = ( ITOTAL2 / NPAIRS ) - ( ITOTAL1 / NPAIRS )
%%
%  IF LDEBUG THEN
%    TRANSFER "{I " // CHARACTER ( ITOTAL2 / NPAIRS ) // " - " // CHARACTER ( ITOTAL1 / NPAIRS ) // " = " // CHARACTER ( OFFSET ) TO DISPLAY
%  END IF
%%
%  IF ( OFFSET .EQ. IOFFSETFIRST ) .AND. ( OFFSET .EQ. IOFFSET ) .AND. ( LPART1 ) .AND. ( LPART2 ) .AND. ( LOFFSET ) .AND. ( LATYPE ) THEN
%    TRANSFER "{I Assembly seems OK, offset is consistent, atoms are in same order and of same type." TO DISPLAY
%    IF NATOMS .GT. NPAIRS THEN
%      TRANSFER "{I Additional atoms in first part are localized at the end of the assembly." TO DISPLAY
%    END IF
%%
%    COPY '#RELEASE PUNCH pairs.dat'
%    COPY '#OPEN SCPDATA thisAssembly.dat'
%    LOOP NATOMS TIMES
%      EVALUATE ICYCLE = LOOPCOUNTER
%      ON ERROR TERMINATE
%      ON END TERMINATE
%%
%      EXTRACT FIND STRING "PART1"
%      LOOP ICYCLE TIMES
%        EXTRACT NEXT
%      END LOOP
%      EXTRACT TRANSFER INPUT
%      CLEAR
%      GET KEYWORD 'Atom 1'
%      EVALUATE CATLBL1 = CVALUE
%      GET INTEGER 'Group number 1'
%      EVALUATE IPART1 = VALUE
%%
%      IF NPAIRS .GE. ICYCLE THEN
%        EXTRACT FIND STRING "PART2"
%        LOOP ICYCLE TIMES
%          EXTRACT NEXT
%        END LOOP
%        EXTRACT TRANSFER INPUT
%        CLEAR
%        GET KEYWORD 'Atom 2'
%        EVALUATE CATLBL2 = CVALUE
%        GET INTEGER 'Group number 2'
%        EVALUATE IPART2 = VALUE
%      ELSE
%        EVALUATE CATLBL2 = "DUMMY"
%      END IF
%%
%      TRANSFER CATLBL1 // " " // CATLBL2 TO PUNCH
%    END LOOP
%    COPY '#CLOSE SCPDATA'
%    TRANSFER "END" TO PUNCH
%    COPY '#RELEASE PUNCH bfile.pch'
%%
%  ELSE
%    TRANSFER "{E CRYSTALS will try to get the pairs using the offset " // CHARACTER ( OFFSET ) // "." TO DISPLAY
%%   EVALUATE NWRITES = 0
%    COPY '#RELEASE PUNCH pairs.dat'
%    COPY '#OPEN SCPDATA thisAssembly.dat'
%    LOOP NATOMS TIMES
%      EVALUATE ICYCLE = LOOPCOUNTER
%%     ON ERROR TERMINATE
%      ON ERROR CONTINUE
%      ON END TERMINATE
%%
%      EXTRACT FIND STRING "PART1"
%      LOOP ICYCLE TIMES
%        EXTRACT NEXT
%      END LOOP
%      EXTRACT TRANSFER INPUT
%      CLEAR
%      GET KEYWORD 'Atom 1'
%      EVALUATE CATLBL1 = CVALUE
%      GET INTEGER 'Group number 1' '1'
%      EVALUATE IPART1 = VALUE
%      EVALUATE CATYPE1 = FIRSTSTR ( CATLBL1 )
%      EVALUATE ISERI1 = FIRSTINT ( CATLBL1 )
%%
%      EVALUATE ISERI2 = ISERI1 + OFFSET
%      EVALUATE CATLBL2 = CATYPE1 // "(" // CHARACTER ( ISERI2 ) // ")"
%%
%      EVALUATE CATOMLABEL = CATLBL2
%      COPY '#SCRIPT A_CHECKATOM'
%      EVALUATE IPART2 = PRTNUM
%%
%      EVALUATE ACHECK = IPART2 / 1000
%%
%      IF LATOMEXISTS .AND. ACHECK .EQ. ASSNUM THEN
%        CLEAR
%        INSERT '% EXTRACT FIND STRING "'
%        STORE CHARACTER CATLBL2
%        INSERT '"'
%        EXECUTE SEND
%        EXTRACT TRANSFER INPUT
%        CLEAR
%        GET KEYWORD 'Atom 2'
%        EVALUATE CATLBL2 = CVALUE
%%       TRANSFER "/" // CATLBL2 // "/" TO DISPLAY
%        GET INTEGER 'Group number 2' '2'
%        EVALUATE IPART2 = VALUE
%      ELSE
%        EVALUATE CATLBL2 = "DUMMY"
%      END IF
%%
%      TRANSFER CATLBL1 // " " // CATLBL2 TO PUNCH
%%     EVALUATE NWRITES = NWRITES + 1
%    END LOOP
%    COPY '#CLOSE SCPDATA'
%    TRANSFER "END" TO PUNCH
%    COPY '#RELEASE PUNCH bfile.pch'
%%
%  END IF
%%
%END SCRIPT