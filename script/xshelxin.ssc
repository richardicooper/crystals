%SCRIPT XSHELXIN
%%
%% Read in a the cell, symm and atoms from a shelx file.
%%
 --                                                      --
 SHELX Script version 0.25 by Richard Cooper, University of
 Oxford, April 1999. Based on the fortran program SXTOCA by
 R.O. Gould, The University of Edinburgh, March 1994.
 --                                                      --
 Read in the cell, contents and atomic parameters
 from a variety of standard SHELX res or ins files.
 --                                                      --
 This operation will overwrite your current model structure
 Be sure that you want to proceed.
 
%%
%%
% VARIABLE CHARACTER CFILE CENTRO CLATYP CUNIT CSFAC CTEM
% VARIABLE CHARACTER SPACEHOOK
% VARIABLE INTEGER ILATT NSYMS SCOUNT SXF LEND
% VARIABLE LOGICAL SFILERR LCANCEL LCRY
% VARIABLE REAL SXX SXY SXZ SXO SXU11 SXU22
% VARIABLE REAL SXU33 SXU23 SXU13 SXU12
%% variables used by the question box below
% VARIABLE CHARACTER QTITLE BUTTOK BUTTXX QLINE1 QLINE2
% VARIABLE LOGICAL ANSWER
%%
% EVALUATE LCRY = FALSE
%%
^^WI WINDOW XINSHELX 'Input RES or INS data' MODAL
^^WI        COMMIT='BOK' CANCEL='BXX'
^^WI GRID GRIDM NROWS=5 NCOLS=3
^^WI {
^^WI  @ 2,2 GRID TP NROWS=1 NCOLS=2
^^WI  {
^^WI   @ 1,1 GRID TX NROWS=4 NCOLS=1
^^WI   {
^^WI    @ 1,1 STATIC T1 'The option scans a SHELX file for a unit cell'
^^WI    @ 2,1 STATIC T2 'and atomic parameters.'
^^WI    @ 3,1 STATIC T3 'You must enter the spacegroup so that it'
^^WI    @ 4,1 STATIC T4 'can be included in the CIF.'
^^WI   }
^^WI   @ 1,2 GRID GB NROWS=5 NCOLS=5
^^WI   {
^^WI    @ 2,5 BUTTON BOK '&Ok' DEFAULT
^^WI    @ 4,5 BUTTON BXX '&Cancel'
^^WI   }
^^WI  }
^^WI  @ 4,2 GRID GF NROWS=1 NCOLS=3 OUTLINE='Shelx File'
^^WI  {
^^WI    @ 1,1 EDITBOX L6FILE ' ' CHARS=48 INFORM=NO INPUT
^^WI    @ 1,3 BUTTON BROWSE 'Browse...'
^^WI  }
^^WI }
^^WI SHOW
^^CR
% LOOP
%   VERIFY BROWSE BXX BOK
%   GET SILENT NOSTORE FINAL ABBREVIATED 'BXX?' 'BXX'
%   CASE VALUE
%     BLOCK                         %BROWSE%
^^WI    SYSOPENFILE '*.ins;*.res' 'Shelx file (*.res,*.ins)'
^^CR
%       GET SILENT KEYWORD 'New filename:'
%       IF CVALUE .NE. 'CANCEL' THEN
%        CLEAR
%        TRANSFER "^^WI SET L6FILE TEXT " // CVALUE TO DISPLAY
^^CR
%       END IF
%     END BLOCK
%     BLOCK                         %BXX%
^^WI    DISPOSE XINSHELX
^^CR
%       FINISH
%     END BLOCK
%     BLOCK                         %BOK%
^^??      L6FILE TEXT
%         GET SILENT FINAL FILENAME -
          'Shelx File (RES or INS file) '
%         EVALUATE CFILE = CVALUE
%         IF ( .NOT. ( FILEEXISTS CFILE ) ) THEN
 Error: Filename given does not exist.
^^WI        DISPOSE XINSHELX
^^CR
%           FINISH
%         END IF
^^WI      DISPOSE XINSHELX
^^CR
%         TRANSFER '#OPEN SCPDATA ' // CFILE TO CRYSTALS
%%
%%
%% Cell card is the first thing to look for.
%%
 
Please be patient while the SHELX file is scanned for
information. This may take some time...
 
 Looking for CELL instruction.
% EVALUATE SFILERR = TRUE
% LOOP
%   ON ERROR TERMINATE
%   ON END TERMINATE
%   EXTRACT NEXT
%   CLEAR
%   EXTRACT TRANSFER COMMAND
%   EXECUTE SEND
%   EXTRACT TRANSFER INPUT
%   CLEAR
%   GET NOSTORE NOPROMPT KEYWORD NULLSTRING
%   IF CVALUE .EQ. 'CELL' THEN
 CELL card found .
%      GET NOSTORE NOPROMPT KEYWORD NULLSTRING
%      GET NOSTORE NOPROMPT TEXT 'a,b,c,al,be,ga'
%      COPY '#LIST 1'
%      TRANSFER 'REAL ' // CVALUE TO CRYSTALS
%      COPY 'END'
%      EVALUATE SFILERR = FALSE
%      EVALUATE LOOPEND = LOOPCOUNTER
%   END IF
% END LOOP
% IF SFILERR .EQ. TRUE THEN
 *** No valid "CELL" card found in SHELX file.
%    FINISH
% END IF
 
 CELL card processed.
 Now give the spacegroup...
 
%%
%  EVALUATE SPACEHOOK = 'Space group needed for SHELX file input'
%  COPY '#SCRIPT XSPACE'
%  IF LCANCEL .EQ. TRUE THEN
 Shelx files do not contain the space group symbol, therefore
 it must be entered separately.
%      FINISH
%  END IF
%%
%%
%%%% Symmetry bit removed. Instead the user is forced to give a
%%%% space group symbol, otherwise things can go wrong later.
%%%%
%%%% Now look for the LATT card. If not there default to P and centric.
%%%%
%%%%
%%
%% Looking for LATT instruction.
%%
%%% EVALUATE SFILERR = TRUE
%%% EVALUATE CENTRO = 'YES'
%%% LOOP
%%%   ON ERROR TERMINATE
%%%   ON END TERMINATE
%%%   EXTRACT NEXT
%%%   CLEAR
%%%   EXTRACT TRANSFER COMMAND
%%%   EXECUTE SEND
%%%   EXTRACT TRANSFER INPUT
%%%   CLEAR
%%%   GET NOSTORE NOPROMPT KEYWORD NULLSTRING
%%%   IF CVALUE .EQ. 'LATT' THEN
%% LATT card found.
%%%      GET NOSTORE NOPROMPT INTEGER 'LATT?' ' '
%%%      EVALUATE ILATT = VALUE
%%%      IF ILATT .LT. 0 THEN
%%%         EVALUATE ILATT = 0 - ILATT
%%%         EVALUATE CENTRO = 'NO'
%%%      END IF
%%%      CASE ILATT
%%%         EVALUATE CLATYP = 'P'
%%%         EVALUATE CLATYP = 'I'
%%%         EVALUATE CLATYP = 'R'
%%%         EVALUATE CLATYP = 'F'
%%%         EVALUATE CLATYP = 'A'
%%%         EVALUATE CLATYP = 'B'
%%%         EVALUATE CLATYP = 'C'
%%%      END CASE
%%%      EVALUATE SFILERR = FALSE
%%%      EVALUATE LOOPEND = LOOPCOUNTER
%%%   END IF
%%% END LOOP
%%%%
%%% IF SFILERR .EQ. TRUE THEN
%%
%% No LATT card found. Defaulting to primitive centosymmetric lattice.
%%
%%%   EVALUATE CLATYP = 'P'
%%
%% Rewinding SHELX file.
%%
%%%   EXTRACT REWIND
%%% END IF
%%%%
%%%%
%%%% Now look for those SYMM cards.
%%%%
%%%%
%%
%% Looking for SYMM instructions.
%%
%%% EVALUATE SFILERR = TRUE
%%% LOOP
%%%   ON ERROR TERMINATE
%%%   ON END TERMINATE
%%%   EXTRACT NEXT
%%%   CLEAR
%%%   EXTRACT TRANSFER COMMAND
%%%   EXECUTE SEND
%%%   EXTRACT TRANSFER INPUT
%%%   CLEAR
%%%   GET NOSTORE NOPROMPT KEYWORD NULLSTRING
%%%   IF CVALUE .EQ. 'SYMM' THEN
%%
%% First SYMM card found.
%%
%%%%
%%%% Find out how many SYMM cards there are.
%%%%
%%%%%      EVALUATE NSYMS = 1
%%%      LOOP
%%%         GET NOSTORE NOPROMPT TEXT NULLSTRING
%%%         ON ERROR TERMINATE
%%%         ON END TERMINATE
%%%         EXTRACT NEXT
%%%         CLEAR
%%%         EXTRACT TRANSFER COMMAND
%%%         EXECUTE SEND
%%%         EXTRACT TRANSFER INPUT
%%%         CLEAR
%%%         GET NOSTORE NOPROMPT KEYWORD NULLSTRING
%%%         IF CVALUE .NE. 'SYMM' THEN
%%%            EVALUATE LOOPEND = LOOPCOUNTER
%%%            CLEAR
%%%            INSERT ' A total of '
%%%            STORE FORMAT /(I4)/ LENGTH 4 INTEGER NSYMS
%%%            INSERT ' SYMM card(s) were found.'
%%%            OUTPUT
%%%            CLEAR
%%%            EXTRACT REWIND
%%
%% Rewinding SHELX file.
%%
%%%         ELSE
%%%            EVALUATE NSYMS = NSYMS + 1
%%%         END IF
%%%      END LOOP
%%%      COPY '#LIST 2'
%%%      INSERT 'CELL   NSYM='
%%%      STORE FORMAT /(I3)/ LENGTH 3 INTEGER NSYMS + 1
%%%      TRANSFER ' LATTICE=' // CLATYP TO BUFFER
%%%      TRANSFER ' CENTRIC=' // CENTRO TO BUFFER
%%%      SEND
%%%% ShelX assumes identity operation. Crystals doesn't.
%%%      COPY 'SYM X,Y,Z'
%%%      EVALUATE SCOUNT = 0
%%%      LOOP
%%%         GET NOSTORE NOPROMPT TEXT NULLSTRING
%%%         ON ERROR TERMINATE
%%%         ON END TERMINATE
%%%         EXTRACT NEXT
%%%         CLEAR
%%%         EXTRACT TRANSFER COMMAND
%%%         EXECUTE SEND
%%%         EXTRACT TRANSFER INPUT
%%%         CLEAR
%%%         GET NOSTORE NOPROMPT KEYWORD NULLSTRING
%%%         IF CVALUE .EQ. 'SYMM' THEN
%%%            CLEAR
%%%            INSERT 'SYM '
%%%            GET NOPROMPT TEXT 'SYM OP'
%%%            SEND
%%%            EVALUATE SCOUNT = SCOUNT + 1
%%%            IF SCOUNT .EQ. NSYMS THEN
%%%               EVALUATE LOOPEND = LOOPCOUNTER
%%%            END IF
%%%         END IF
%%%      END LOOP
%%%      COPY 'END'
%%%      EVALUATE SFILERR = FALSE
%%%      EVALUATE LOOPEND = LOOPCOUNTER
%%%   END IF
%%% END LOOP
%%% IF SFILERR .EQ. TRUE THEN
%%
%% No SYMM cards found. Defaulting to P -1.
%%
%%% COPY '#SPACE'
%%% COPY 'SYMBOL P -1'
%%% COPY 'END'
%%
%% End of the symmetry bit, which is commented out.
 
 Rewinding SHELX file.
 
%   EXTRACT REWIND
%%% END IF
 
%%
%%
%% Find the SFAC and UNIT cards which give respectively, a
%% list of the elements and a list of how many of each element
%% is in the unit cell.
%%
%%
 
 Looking for cell contents.
 
%%
%%
%% STEP1: Store the SFAC and UNIT cards in CSFAC and CUNIT.
%%
%%
% EVALUATE SFILERR = TRUE
% EVALUATE LEND = 0
% LOOP
%   ON ERROR TERMINATE
%   ON END TERMINATE
%   EXTRACT NEXT
%   CLEAR
%   EXTRACT TRANSFER COMMAND
%   EXECUTE SEND
%   EXTRACT TRANSFER INPUT
%   CLEAR
%   GET NOSTORE NOPROMPT KEYWORD NULLSTRING
%   IF CVALUE .EQ. 'SFAC' THEN
 
 SFAC card found.
 NB. There must only be one SFAC card with all the elements on it.
     You may need to edit your SHELX file if this is not the case.
 
%      GET NOSTORE TEXT ' ' ' '
%      EVALUATE CSFAC = CVALUE
 
%      EVALUATE LEND = LEND + 1
%   END IF
%   IF CVALUE .EQ. 'UNIT' THEN
 
 UNIT card found.
 
%      GET NOSTORE TEXT ' ' ' '
%      EVALUATE CUNIT = CVALUE
%      EVALUATE LEND = LEND + 1
%   END IF
%   IF LEND .EQ. 2 THEN
%     EVALUATE LOOPEND = LOOPCOUNTER
%   END IF
% END LOOP
% IF LEND .LT. 2 THEN
 
 *** No valid "SFAC and UNIT" card pair found in SHELX file.
     You must enter your own LIST3 and LIST29.
 
% ELSE
%%
%%
%% Extract SFAC and UNIT info to a COMPOSITION card.
%%
%%
%%%%   TRANSFER 'CSFAC starts as ' // CSFAC TO DISPLAY
%%%%   TRANSFER 'CUNIT starts as ' // CUNIT TO DISPLAY
%%
%% This routine uses the new TRANSFER TO INPUT code to copy
%% a character string to the users input buffer, the string
%% can then be picked apart one keyword at a time. This bit
%% of code copies CSFAC to the input, gets a keyword (ie. 'C'),
%% gets the rest of the text and puts it back into CSFAC. It
%% then does the same for CUNIT, and loops until the character
%% strings are exhausted.
%%
%%
%   COPY '#COMPOSIT'
%   CLEAR
%   INSERT 'CONTE '
%%
%   LOOP
%%
%     TRANSFER CSFAC TO INPUT
%     GET KEYWORD 'SFAC1' ' '
%     EVALUATE CTEM = CVALUE
%%%%%     TRANSFER 'CSFAC, READ: ' // CVALUE TO DISPLAY
%%
%     GET NOSTORE NOPROMPT TEXT 'Rest of line' ' '
%     EVALUATE CSFAC = CVALUE
%%
%     IF CSFAC .EQ. ' ' THEN
%       EVALUATE LOOPEND = LOOPCOUNTER
%     END IF
%%
%% There seems to be a bug in the script processor, whereby if
%% we read the last thing on a line with a GET KEYWORD, you can
%% then read it again with a GET TEXT. This works around it, by
%% spotting that the same thing has been read twice:
%%
%     IF CSFAC .EQ. CTEM THEN
%       EVALUATE LOOPEND = LOOPCOUNTER
%     END IF
%%
%     IF CTEM .EQ. ' ' THEN
%       EVALUATE LOOPEND = LOOPCOUNTER
%     ELSE
%%       TRANSFER 'CSFAC is now ' // CSFAC TO DISPLAY
%%
%       TRANSFER CUNIT TO INPUT
%       GET NOPROMPT KEYWORD ' '
%       EVALUATE CTEM = CVALUE
%%%%       TRANSFER 'CUNIT, READ: ' // CVALUE TO DISPLAY
%%
%       GET NOSTORE NOPROMPT TEXT 'Rest of line' ' '
%       EVALUATE CUNIT = CVALUE
%%
%       IF CUNIT .EQ. ' ' THEN
%         EVALUATE LOOPEND = LOOPCOUNTER
%       END IF
%%
%       IF CTEM .EQ. ' ' THEN
%         EVALUATE LOOPEND = LOOPCOUNTER
%       ELSE
%%%%%         TRANSFER 'CUNIT is now ' // CUNIT TO DISPLAY
%       END IF
%     END IF
%   END LOOP
%   SEND
%   COPY 'SCATT CRYSDIR:\SCRIPT\SCATT.DAT'
%   COPY 'PROPERTIES CRYSDIR:\SCRIPT\PROPWIN.DAT'
%   COPY 'END'
%%
%% Now, experience shows that the SCPDATA file is closed and
%% used for something else during the #COMPOSITION command.
%% We must reopen it before continuing.
%%
%   TRANSFER '#OPEN SCPDATA ' // CFILE TO CRYSTALS
% END IF
 
 Rewinding SHELX file.
%   EXTRACT REWIND
%%
%%
%% Finally, find the atoms and peaks.
%% Assume all lines not beginning with a recognised SHELX keyword
%% are atom records. This causes failure for files with reflections
%% in, though I'm sure someone could fix this by making it stop
%% at an HKLF instruction.
%%
%  COPY '#SCRIPT ZSHELXIN'
 Shelx file processed.
%  COPY '#CLOSE SCPDATA'
 
here we are again
%      BLOCK
%      EVALUATE QTITLE = 'Change Q atoms?'
%      EVALUATE QLINE1 = 'Do you want to change all Q'
%      EVALUATE QLINE2 = 'atoms to Carbon?'
%      EVALUATE BUTTOK = '&Yes'
%      EVALUATE BUTTXX = '&No'
%      COPY '#SCRIPT XQUESTIO'
%      IF ANSWER .EQ. TRUE THEN
%      COPY '#EDIT'
%      COPY 'TYPECHANGE TYPE EQ Q C'
%      COPY 'END'
%      END IF
%      END BLOCK
%%
%%
%      BLOCK
%      EVALUATE QTITLE = 'Use Cameron?'
%      EVALUATE QLINE1 = 'Do you want to use CAMERON '
%      EVALUATE QLINE2 = 'to examine the model '
%      EVALUATE BUTTOK = '&Yes'
%      EVALUATE BUTTXX = '&No'
%      COPY '#SCRIPT XQUESTIO'
%      IF ANSWER .EQ. TRUE THEN
%       VARIABLE LOGICAL NOXCAMQ
%       EVALUATE NOXCAMQ = TRUE
%       COPY '#SCRIPT XCAM'
%      END IF
%      END BLOCK
%%
%%
%%
%      BLOCK
%       COPY '#SCRIPT XRENUMB'
%      END BLOCK
%%
%      BLOCK
%        COPY '#DISTANCES'
%        COPY 'END'
%      END BLOCK
%% SET Solution type
%%
%      COPY '#GENERALEDIT 30'
%      COPY 'LOCATE RECORDTYPE=106'
%      COPY 'CHANGE OFFSET=12 MODE=INTEGER INTEGER=1'
%      COPY 'WRITE'
%      COPY 'END'
% FINISH
% END BLOCK
% END CASE
% END LOOP
%END SCRIPT
