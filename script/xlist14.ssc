%SCRIPT XLIST14
%% A SCRIPT TO UPDTE LIST 14
%  VARIABLE CHARACTER CLAST CPARAM CPARAM2
%%
%  VARIABLE REAL XMAX YMAX ZMAX
%  VARIABLE INTEGER D14 A14 T14
%  VARIABLE REAL S14 R14 XFN XFM YFN YFM ZFN ZFM XPN XPM YPN YPM ZPN ZPM
%% SCALE, RESOLUTION, FOURIER AND PATTEERSON LIMITS
%  IF EXISTS 14 .LE. 0 THEN
%    EVALUATE D14 = 1
%    EVALUATE A14 = 2
%    EVALUATE T14 = 3
%    EVALUATE S14 = 10.
%    EVALUATE R14 = 0.3
%    EVALUATE XFN = 0.
%    EVALUATE YFN = 0.
%    EVALUATE ZFN = 0.
%    EVALUATE XFM = 1.
%    EVALUATE YFM = 1.
%    EVALUATE ZFM = 1.
%    EVALUATE XPN = 0.
%    EVALUATE YPN = 0.
%    EVALUATE ZPN = 0.
%    EVALUATE XPM = 1.
%    EVALUATE YPM = 1.
%    EVALUATE ZPM = 1.
%  ELSE
%%
%   TRANSFER "#GENERALEDIT 14" TO CRYSTALS
%   TRANSFER "ERROR MESSAGE=NO SIGNAL=NONE ACTION=CONTING NAME=EDITERROR" -
    TO CRYSTALS
%   TRANSFER "LOCATE RECORDTYPE=102" TO CRYSTALS
%   TRANSFER "TOP" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=0 TO D14" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=1 TO A14" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=2 TO T14" TO CRYSTALS
%%
%%SCALE
%   TRANSFER "LOCATE RECORDTYPE=103" TO CRYSTALS
%   TRANSFER "TOP" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=0 TO S14" TO CRYSTALS
%%
%%FOURIER
%   TRANSFER "LOCATE RECORDTYPE=101" TO CRYSTALS
%   TRANSFER "TOP" TO CRYSTALS
%   ON EDITERROR TERMINATE
%   TRANSFER "TRANSFER FROM OFFSET=0 TO XFN" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=1 TO R14" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=2 TO XFM" TO CRYSTALS
%   TRANSFER "NEXT" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=0 TO YFN" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=2 TO YFM" TO CRYSTALS
%   TRANSFER "NEXT" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=0 TO ZFN" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=2 TO ZFM" TO CRYSTALS
%% PATTERSON
%   TRANSFER "LOCATE RECORDTYPE=104" TO CRYSTALS
%   TRANSFER "TOP" TO CRYSTALS
%   ON EDITERROR TERMINATE
%   TRANSFER "TRANSFER FROM OFFSET=0 TO XPN" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=1 TO R14" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=2 TO XPM" TO CRYSTALS
%   TRANSFER "NEXT" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=0 TO YPN" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=2 TO YPM" TO CRYSTALS
%   TRANSFER "NEXT" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=0 TO ZPN" TO CRYSTALS
%   TRANSFER "TRANSFER FROM OFFSET=2 TO ZPM" TO CRYSTALS
%   TRANSFER "END" TO CRYSTALS
%  END IF
%%
%  VARIABLE REAL  A B C
%  CLEAR
%    IF ( EXISTS 1 .EQ. 1 ) THEN
%      COPY '#GENERALEDIT 1'
%      COPY 'LOCATE RECORDTYPE = 101'
%      COPY 'TRANSFER FROM OFFSET =  0 TO A'
%      COPY 'TRANSFER FROM OFFSET =  1 TO B '
%      COPY 'TRANSFER FROM OFFSET =  2 TO C'
%      COPY 'END'
%    ELSE
%      EVALUATE A = 1.
%      EVALUATE B = 1.
%      EVALUATE C = 1.
%    END IF
%%
%% CREATE LIST 14
%%^
%% CRYSTALS cell parameter input script
^^WI WINDOW INLIST14 'Asymmetric Unit' MODAL COMMIT='BOK' CANCEL='BXX'
^^WI GRID             GRIDM NROWS=1 NCOLS=2
^^WI {
^^WI  @ 1,1 GRID GRIDL NROWS=7 NCOLS=2
^^WI  {
^^WI   @ 2,2 GRID GRIDTL NROWS=2 NCOLS=1
^^WI   {
^^WI    @ 1,1 STATIC    TEXT1 'Enter section limits in'
^^WI    @ 2,1 STATIC    TEXT1 'fractions of cell edge.'
^^WI   }

^^WI   @ 4,2 GRID GRIDML NROWS=1 NCOLS=3
^^WI   {
^^WI     @1,1 STATIC  RTEXT1 'Resolution,A'
% CLEAR
% INSERT !^^WI @ 1,3 EDITBOX R1 '!
% STORE FORMAT /(F8.3)/ LENGTH 8 REAL R14
% INSERT !'!
% OUTPUT
^^WI CHARS=8 REAL INFORM=YES

^^WI   }
^^WI   @ 6,2 GRID GRIDBL NROWS=3 NCOLS=7
^^WI   {
^^WI    @ 1,1 STATIC    STEXT1 'Xmin'
^^WI    @ 2,1 STATIC    STEXT2 'Ymin'
^^WI    @ 3,1 STATIC    STEXT3 'Zmin'
^^WI    @ 1,5 STATIC    STEXT4 'Xmax'
^^WI    @ 2,5 STATIC    STEXT5 'Ymax'
^^WI    @ 3,5 STATIC    STEXT6 'Zmax'
% CLEAR
% INSERT !^^WI @ 1,3 EDITBOX E1 '!
% STORE FORMAT /(F8.3)/ LENGTH 8 REAL XFN
% INSERT !'!
% OUTPUT
^^WI CHARS=8 REAL INFORM=YES
% CLEAR
% INSERT !^^WI @ 2,3 EDITBOX E2 '!
% STORE FORMAT /(F8.3)/ LENGTH 8 REAL YFN
% INSERT !'!
% OUTPUT
^^WI CHARS=8 REAL INFORM=YES
% CLEAR
% INSERT !^^WI @ 3,3 EDITBOX E3 '!
% STORE FORMAT /(F8.3)/ LENGTH 8 REAL ZFN
% INSERT !'!
% OUTPUT
^^WI CHARS=8 REAL INFORM=YES
% CLEAR
% INSERT !^^WI @ 1,7 EDITBOX E4 '!
% STORE FORMAT /(F8.3)/ LENGTH 8 REAL XFM
% INSERT !'!
% OUTPUT
^^WI CHARS=8 REAL INFORM=YES
% CLEAR
% INSERT !^^WI @ 2,7 EDITBOX E5 '!
% STORE FORMAT /(F8.3)/ LENGTH 8 REAL YFM
% INSERT !'!
% OUTPUT
^^WI CHARS=8 REAL INFORM=YES
% CLEAR
% INSERT !^^WI @ 3,7 EDITBOX E6 '!
% STORE FORMAT /(F8.3)/ LENGTH 8 REAL ZFM
% INSERT !'!
% OUTPUT
^^WI CHARS=8 REAL INFORM=YES
^^WI   }
^^WI  }
^^WI  @ 1,2 GRID GRIDR NROWS=5 NCOLS=3
^^WI  {
^^WI   @ 2,2 BUTTON BOK '&Ok' DEFAULT
^^WI   @ 4,2 BUTTON BXX '&Cancel'
^^WI  }
^^WI }
^^WI SHOW
^^CR
%%
%%
%  LOOP
%   ON ERROR REPEAT
%   ON END   TERMINATE
%   VERIFY R1 E1 E2 E3 E4 E5 E6 BXX BOK
%%^^WI SET _MAINTEXTOUTPUT NOECHO
%%^^CR
%   GET NOSTORE FINAL ABBREVIATED ' ' ' '
%%^^WI SET _MAINTEXTOUTPUT NOECHO
%%^^CR
%   CASE VALUE
%    BLOCK             %RESOLUTION%
%     GET NOSTORE REAL ' '
%     EVALUATE R14 = VALUE
%    END BLOCK
%    BLOCK             %EDIT1%
%     GET NOSTORE REAL ' '
%     EVALUATE XFN = VALUE
%    END BLOCK
%    BLOCK             %EDIT2%
%     GET NOSTORE REAL ' '
%     EVALUATE YFN = VALUE
%    END BLOCK
%    BLOCK             %EDIT3%
%     GET NOSTORE REAL ' '
%     EVALUATE ZFN = VALUE
%    END BLOCK
%    BLOCK             %EDIT4%
%     GET NOSTORE REAL ' '
%     EVALUATE XFM = VALUE
%    END BLOCK
%    BLOCK             %EDIT5%
%     GET NOSTORE REAL ' '
%     EVALUATE YFM = VALUE
%    END BLOCK
%    BLOCK             %EDIT6%
%     GET NOSTORE REAL ' '
%     EVALUATE ZFM = VALUE
%    END BLOCK
%    BLOCK             %BXX%
^^WI  DISPOSE INLIST14
^^CR
%     FINISH
%    END BLOCK
%    BLOCK             %BOK%
%     CLEAR
^^WI       DISPOSE INLIST14
^^CR

%%^
%% NOW WRITE NEW LIST 14
%  BLOCK
%    ON END   TERMINATE
%%    ON ERROR RESTART
%    QUEUE REWIND
%    CLEAR
%    INSERT 'X-AXIS STEP='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL R14
%    INSERT ' MINIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL XFN
%    INSERT ' MAXIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL XFM
%    QUEUE SEND
%    CLEAR
%    INSERT 'Y-AXIS STEP='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL R14
%    INSERT ' MINIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL YFN
%    INSERT ' MAXIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL YFM
%    QUEUE SEND
%    CLEAR
%    INSERT 'Z-AXIS STEP='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL R14
%    INSERT ' MINIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL ZFN
%    INSERT ' MAXIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL ZFM
%    QUEUE SEND
%    CLEAR
Details for asymmetric part of vector space (Patterson)
%    INSERT 'X-PATT STEP='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL R14
%    INSERT ' MINIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL XPN
%    INSERT ' MAXIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL XPM
%    QUEUE SEND
%    CLEAR
%    INSERT 'Y-PATT STEP='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL R14
%    INSERT ' MINIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL YPN
%    INSERT ' MAXIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL YPM
%    QUEUE SEND
%    CLEAR
%    INSERT 'Z-PATT STEP='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL R14
%    INSERT ' MINIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL ZPN
%    INSERT ' MAXIMUM='
%    STORE FORMAT /(F6.3)/ LENGTH 6 REAL ZPM
%    QUEUE SEND
%    CLEAR
%% optimise the map orientation
%    BLOCK
%     EVALUATE XMAX = ( XFM - XFN ) * A
%     EVALUATE YMAX = ( YFM - YFN ) * B
%     EVALUATE ZMAX = ( ZFM - ZFN ) * C
%     INSERT 'ORIENT '
%     IF XMAX .GE. YMAX THEN
%      IF XMAX .GE. ZMAX THEN
%        INSERT 'X '
%          IF YMAX .GE. ZMAX THEN
%            INSERT 'Y Z'
%          ELSE
%            INSERT 'Z Y'
%          END IF
%      ELSE
%          INSERT 'Z X Y'
%      END IF
%     ELSE
%      IF YMAX .GE. ZMAX THEN
%        INSERT 'Y '
%        IF XMAX .GE. ZMAX THEN
%          INSERT 'X Z'
%        ELSE
%          INSERT 'Z X'
%        END IF
%      ELSE
%        INSERT 'Z Y X'
%      END IF
%     END IF
%     QUEUE SEND
%     CLEAR
%    END BLOCK
%    INSERT 'SCALE '
%    STORE FORMAT /(F10.3)/ LENGTH 10 REAL S14
%    QUEUE SEND
%    CLEAR
%    COPY '#LIST 14'
%    QUEUE PROCESS
%    COPY 'END'
%    COPY '#SUM L 14'
%    COPY 'END'
%  END BLOCK
%%^
%          FINISH
%    END BLOCK
%   END CASE
%  END LOOP
%END SCRIPT
