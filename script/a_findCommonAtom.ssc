%SCRIPT FINDCOMMONATOM
%%
%% RETURN VALUES:
%%     BDIST - Distance between CATM1 or CATM2 and atom read from file
%%     BDISTS - Distance squared.
%%
%% INPUT:
%%     CATOM1 -  e.g. C(7) or c7 or c 7
%%     CATOM2 -  e.g. o(2) or O2 or o 2
%%
%  VARIABLE REAL BDIST BDISTS
%  VARIABLE CHARACTER CATM1 CATM2 CATOMS
%%
%  VARIABLE CHARACTER CATOM CATN CAT1N CAT2N
%  VARIABLE INTEGER IATS IAT1S IAT2S
%%
%  VARIABLE CHARACTER CLTYPE
%  VARIABLE REAL SERIAL
%  VARIABLE REAL AT1X AT1Y AT1Z AT2X AT2Y AT2Z
%  VARIABLE REAL ATX ATY ATZ ATSX ATSY ATSZ ATDX ATDY ATDZ
%  VARIABLE REAL OM1 OM2 OM3 OM4 OM5 OM6 OM7 OM8 OM9
%  VARIABLE LOGICAL FOUNDONE FOUNDTWO
%  VARIABLE REAL BDIST1 BDIST2
%%
%  EVALUATE CAT1N = UPPERCASE FIRSTSTR ( CATM1 )
%  EVALUATE CAT2N = UPPERCASE FIRSTSTR ( CATM2 )
%  EVALUATE IAT1S = FIRSTINT ( CATM1 )
%  EVALUATE IAT2S = FIRSTINT ( CATM2 )
%  EVALUATE FOUNDONE = FALSE
%  EVALUATE FOUNDTWO = FALSE
%%
%% First get orthogonalisation matrix
%%
%  COPY '#GENERALEDIT 1'
%  COPY 'LOCATE RECORDTYPE=105'
%  COPY 'ERROR MESS=NO SIGN=NONE ACTI=CONT NAME=EDITERROR'
%  COPY 'TRANSFER FROM OFFSET=0 TO OM1'
%  COPY 'TRANSFER FROM OFFSET=1 TO OM2'
%  COPY 'TRANSFER FROM OFFSET=2 TO OM3'
%  COPY 'TRANSFER FROM OFFSET=3 TO OM4'
%  COPY 'TRANSFER FROM OFFSET=4 TO OM5'
%  COPY 'TRANSFER FROM OFFSET=5 TO OM6'
%  COPY 'TRANSFER FROM OFFSET=6 TO OM7'
%  COPY 'TRANSFER FROM OFFSET=7 TO OM8'
%  COPY 'TRANSFER FROM OFFSET=8 TO OM9'
%  COPY 'END'
%%
%% Get the coordinates of the two atoms on the line
%%
%  COPY '#GENERALEDIT 5'
%  COPY 'LOCATE RECORDTYPE=101'
%  COPY 'ERROR MESS=NO SIGN=NONE ACTI=CONT NAME=EDITERROR'
%  LOOP
%     ON EDITERROR TERMINATE
%     COPY 'TRANSFER FROM OFFSET=0 TO CLTYPE'
%     IF CAT1N .EQ. CLTYPE THEN
%        COPY 'TRANSFER FROM OFFSET=1 TO SERIAL'
%        IF IAT1S .EQ. INTEGER ( SERIAL ) THEN
%           COPY 'TRANSFER FROM OFFSET=4 TO AT1X'
%           COPY 'TRANSFER FROM OFFSET=5 TO AT1Y'
%           COPY 'TRANSFER FROM OFFSET=6 TO AT1Z'
%           EVALUATE FOUNDONE = TRUE
%        END IF
%     END IF
%     IF CAT2N .EQ. CLTYPE THEN
%        COPY 'TRANSFER FROM OFFSET=1 TO SERIAL'
%        IF IAT2S .EQ. INTEGER ( SERIAL ) THEN
%           COPY 'TRANSFER FROM OFFSET=4 TO AT2X'
%           COPY 'TRANSFER FROM OFFSET=5 TO AT2Y'
%           COPY 'TRANSFER FROM OFFSET=6 TO AT2Z'
%           EVALUATE FOUNDTWO = TRUE
%        END IF
%     END IF
%     IF FOUNDONE .AND. FOUNDTWO  THEN
%        EVALUATE LOOPEND = LOOPCOUNTER
%     END IF
%     COPY 'NEXT'
%  END LOOP
%  COPY 'END'
%%
%% Get the atoms to be searched for a match from the file AtomsToWorkOn.dat
%%
%  COPY '#OPEN SCPDATA AtomsToWorkOn.dat'
%  LOOP
%    ON ERROR TERMINATE
%    ON END TERMINATE
%    EXTRACT NEXT
%    EXTRACT TRANSFER INPUT
%    CLEAR
%    GET TEXT 'Atom'
%    EVALUATE CATOM = CVALUE
%    IF CVALUE .EQ. 'END' THEN
%      EVALUATE LOOPEND = LOOPCOUNTER
%    ELSE
%% Find the coordinates
%      EVALUATE CATN = FIRSTSTR ( CATOM )
%      EVALUATE IATS = FIRSTINT ( CATOM )
%      COPY '#GENERALEDIT 5'
%      COPY 'LOCATE RECORDTYPE=101'
%      COPY 'ERROR MESS=NO SIGN=NONE ACTI=CONT NAME=EDITERROR'
%      LOOP
%        ON EDITERROR TERMINATE
%        COPY 'TRANSFER FROM OFFSET=0 TO CLTYPE'
%        IF CATN .EQ. CLTYPE THEN
%          COPY 'TRANSFER FROM OFFSET=1 TO SERIAL'
%          IF IATS .EQ. INTEGER ( SERIAL ) THEN
%            COPY 'TRANSFER FROM OFFSET=4 TO ATX'
%            COPY 'TRANSFER FROM OFFSET=5 TO ATY'
%            COPY 'TRANSFER FROM OFFSET=6 TO ATZ'
%%           COPY 'END'
%            EVALUATE LOOPEND = LOOPCOUNTER
%          END IF
%        END IF
%        COPY 'NEXT'
%      END LOOP
%      COPY 'END'
%%
%% Now we calculate the distances
%%
%% First distance: subtract the vectors.
%      EVALUATE ATSX = ATX - AT1X
%      EVALUATE ATSY = ATY - AT1Y
%      EVALUATE ATSZ = ATZ - AT1Z
%% Multiply the difference vector by the ortho matrix...
%      EVALUATE ATDX = ATSX * OM1 + ATSY * OM2 + ATSZ * OM3
%      EVALUATE ATDY = ATSX * OM4 + ATSY * OM5 + ATSZ * OM6
%      EVALUATE ATDZ = ATSX * OM7 + ATSY * OM8 + ATSZ * OM9
%% Compute the distance.
%      EVALUATE BDISTS = ATDX * ATDX + ATDY * ATDY + ATDZ * ATDZ
%      EVALUATE BDIST1 = SQRT ( BDISTS )
%%
%% Second distance: subtract the vectors.
%      EVALUATE ATSX = ATX - AT2X
%      EVALUATE ATSY = ATY - AT2Y
%      EVALUATE ATSZ = ATZ - AT2Z
%% Multiply the difference vector by the ortho matrix...
%%
%      EVALUATE ATDX = ATSX * OM1 + ATSY * OM2 + ATSZ * OM3
%      EVALUATE ATDY = ATSX * OM4 + ATSY * OM5 + ATSZ * OM6
%      EVALUATE ATDZ = ATSX * OM7 + ATSY * OM8 + ATSZ * OM9
%% Compute the distance.
%      EVALUATE BDISTS = ATDX * ATDX + ATDY * ATDY + ATDZ * ATDZ
%      EVALUATE BDIST2 = SQRT ( BDISTS )
%%
%      IF BDIST1 .LT. 0.25 THEN
%        COPY '#CLOSE SCPDATA'
%        EVALUATE BDIST = BDIST1
%        TRANSFER "{I Match found: distance between " // CATM1 // " and " // CATOM // " is " // CHARACTER ( BDIST ) TO DISPLAY
%        EVALUATE CATM1 = CATOM
%        EVALUATE CATOMS = "ATOM " // CATM2 // " " // CATM1
%        TRANSFER '#RELEASE PUNCH MolaxDefinition.dat' TO CRYSTALS
%        TRANSFER CATM2 TO PUNCH
%        TRANSFER CATM1 TO PUNCH
%        TRANSFER 'END' TO PUNCH
%        TRANSFER '#RELEASE PUNCH bfile.pch' TO CRYSTALS
%        FINISH
%      ELSE IF BDIST1 .LT. 0.5 THEN
%        TRANSFER "{I Maybe a match has been found." TO DISPLAY
%      END IF
%%
%      IF BDIST2 .LT. 0.25 THEN
%        COPY '#CLOSE SCPDATA'
%        EVALUATE BDIST = BDIST2
%        TRANSFER "{I Match found: distance between " // CATM2 // " and " // CATOM // " is " // CHARACTER ( BDIST ) TO DISPLAY
%        EVALUATE CATM2 = CATOM
%        EVALUATE CATOMS = "ATOM " // CATM1 // " " // CATM2
%        TRANSFER '#RELEASE PUNCH MolaxDefinition.dat' TO CRYSTALS
%        TRANSFER CATM1 TO PUNCH
%        TRANSFER CATM2 TO PUNCH
%        TRANSFER 'END' TO PUNCH
%        TRANSFER '#RELEASE PUNCH bfile.pch' TO CRYSTALS
%        FINISH
%      ELSE IF BDIST2 .LT. 0.5 THEN
%        TRANSFER "{I Maybe a match has been found." TO DISPLAY
%      END IF
%%
%    END IF
%  END LOOP
%%
%  TRANSFER "{E No match has been found." TO DISPLAY
%  COPY '#CLOSE SCPDATA'
%%
%END SCRIPT